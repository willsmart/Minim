//WInterface autogenerated this file. HaND

//Tasks:
//    Embedded 5 notes (look for "notenote" in the code)


#include "sample.wi.h"











#pragma mark -
#pragma mark Implementations:










// !!!: Implementations: s



















#ifdef _PrivateAccessMask_
#undef _PrivateAccessMask_
#endif
#define _PrivateAccessMask_ __private_access_thread_mask_in_StyleTicker

#ifdef _PrivateAccessMask_
#undef _PrivateAccessMask_
#endif
#define _PrivateAccessMask_ __private_access_thread_mask_in_StyleTicker
#define _ClassName_ StyleTicker
#define _WIClass_ StyleTicker__
#define _className_ styleTicker
#define _Class_ StyleTicker__
@implementation StyleTicker

@synthesize ___arc=___arc;
@synthesize ___rc=___rc;
@synthesize __owner_context=__owner_context;
@synthesize debug=debug;
@synthesize debugAutorelease=debugAutorelease;
@synthesize inTick=inTick;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
-(StyleTicker*)_startObjectOfClassStyleTicker {MSGSTART("StyleTicker:-(StyleTicker*)_startObjectOfClassStyleTicker")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,___rc,___arc,objectIDInTotal,objectIDInClass);
      
  /*i-500*//*ivar*/debug=(NO);
  
  /*i0*/NSError *err=nil;
          NSString *s=[NSString stringWithContentsOfFile:[StyleTicker stylerFileName] encoding:NSUTF8StringEncoding error:&err];
          if (s) {
                self.stylerString=s;
            };
    
          //@-999 NSDictionary *d __attribute__((unused)) =([self respondsToSelector:@selector(__initializeUsingDictionary)]?[self performSelector:@selector(__initializeUsingDictionary)]:nil);
          
  /*i999*/return(self);
    }
-(constchar*)cdescription {MSGSTART("StyleTicker:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(constchar*)cobjectName {MSGSTART("StyleTicker:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)dealloc {MSGSTART("StyleTicker:-(void)dealloc")
  
  /*i-500*/[self stop];
    
/*i-151*/[self die];
/*i0*/v_tim=nil;
stylerString=nil;
/*i998*/deallocFn(self,___rc,___arc,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("StyleTicker:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("StyleTicker:-(void)die")
  
  /*i900*/}
+(StyleTicker*)get {MSGSTART("StyleTicker:+(StyleTicker*)get")
  return([[StyleTicker alloc] init]);}
+(StyleTicker*)getDefault {MSGSTART("StyleTicker:+(StyleTicker*)getDefault")
  return(g_singletons.styleTicker);}
-(void)go {MSGSTART("StyleTicker:-(void)go")

          [self startWithInterval:4];
    }
-(StyleTicker*)init {MSGSTART("StyleTicker:-(StyleTicker*)init")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i11*/[self _startObjectOfClassStyleTicker];

/*i10001*/return(self);}
-(NSMutableString*)objectName {MSGSTART("StyleTicker:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }
-(void)setProp:(NSString*)prop toArgs:(NSDictionary*)args {MSGSTART("StyleTicker:-(void)setProp:(NSString*)prop toArgs:(NSDictionary*)args")
  
  /*i-100*/if (prop) {
                NSURL *url=[ImageShader urlForArgStringDictionary:args];
                if (debug) NSLog(@">%@:\n  --  %@",prop,args.description);
                
    /*i0*/if ([prop hasPrefix:@"prop-"]) {
                      [g_singletons.app.myProperties setObject:url forKey:[prop substringFromIndex:@"prop-".length]];
                  }
                
    /*i100*/}
    }
-(void)setProp:(NSString*)prop toObject:(NSObject*)object {MSGSTART("StyleTicker:-(void)setProp:(NSString*)prop toObject:(NSObject*)object")

          if (prop&&object) {
                if (debug) NSLog(@">%@ = %@",prop,object.description);
                [g_singletons.app.myProperties setObject:object forKey:prop];
            }
    }
-(void)setStylerString:(NSString*)v {MSGSTART("StyleTicker:-(void)setStylerString:(NSString*)v")

              if (v&&![v isEqualToString:stylerString]) {
                    prnt("New Shader string\n");
                    if (debug) prnt(">> %s\n",v.UTF8String);
                    NSError *err=nil;
                    [v writeToFile:[StyleTicker stylerFileName] atomically:YES encoding:NSUTF8StringEncoding error:&err];

                    stylerString=v;
                    NSString *prop=nil;
                    NSMutableDictionary *commonArgs=[NSMutableDictionary dictionary];
                    NSMutableDictionary *args=[NSMutableDictionary dictionary];
                    NSObject *value=nil;
                    NSArray *a=[v componentsSeparatedByString:@"\n"];
                    NSMutableArray *aa=[NSMutableArray array];
                    NSMutableString *adds=[NSMutableString string];
                    for (NSString *s in a) {
                          if ([s hasPrefix:@" "]) [adds appendFormat:(adds.length?@"\n%@":@"%@"),s];
                          else {
                                [aa addObject:adds.copy];
                                [adds setString:s];
                            }
                      }
                    if (adds.length) [aa addObject:adds.copy];
                    a=aa;
                
                    for (NSString *s in a) {
                          if ([s hasPrefix:@">"]&&([s rangeOfString:@"\n"].location==NSNotFound)) {
                                if (prop) {
                                      if (value) {
                                            [self setProp:prop toObject:value];
                                        }
                                      else {
                                            [self setProp:prop toArgs:args];
                                        }
                                  }
                                if ([prop isEqualToString:@"common"]) {
                                      [commonArgs setDictionary:args];
                                  }
                                else {
                                      [args setDictionary:commonArgs];
                                  }
                                prop=[s substringFromIndex:1];
                                value=nil;
                            }
                          if (prop) {
                                if ([s hasPrefix:@"#"]) {
                                      value=@([s substringFromIndex:1].doubleValue);
                                  }
                                else if ([s hasPrefix:@"="]) {
                                      value=[s substringFromIndex:1];
                                  }
                                else if ([s hasPrefix:@"-"]) {
                                      NSRange r=[s rangeOfString:@"="];
                                      if (r.location!=NSNotFound) {
                                            [args setObject:[@"S" stringByAppendingString:[s substringFromIndex:r.location+r.length]] forKey:[@"m" stringByAppendingString:[s substringWithRange:NSMakeRange(1,r.location-1)]]];
                                        }
                                  }
                                else if ([s hasPrefix:@"$"]&&([s rangeOfString:@"\n"].location==NSNotFound)) {
                                      NSRange r=[s rangeOfString:@"="];
                                      if (r.location!=NSNotFound) {
                                            [args setObject:[@"U" stringByAppendingString:[s substringFromIndex:r.location+r.length]] forKey:[@"u" stringByAppendingString:[s substringWithRange:NSMakeRange(1,r.location-1)]]];
                                        }
                                  }
                            }
                      }
                    if (prop) {
                          if (value) {
                                [self setProp:prop toObject:value];
                            }
                          else {
                                [self setProp:prop toArgs:args];
                            }
                      }
                }
        }
-(void)setTim:(NSTimer*)v {MSGSTART("StyleTicker:-(void)setTim:(NSTimer*)v")
  
  /*i-905*/if(v_tim==v)return;
  /*i-900*/{v_tim=(id)v;}}
-(void)setWithDictionary:(NSDictionary*)d {MSGSTART("StyleTicker:-(void)setWithDictionary:(NSDictionary*)d")
}
-(void)startWithInterval:(float)interval {MSGSTART("StyleTicker:-(void)startWithInterval:(float)interval")

          [self.tim invalidate];
          self.tim=[NSTimer scheduledTimerWithTimeInterval:interval target:self selector:@selector(tick) userInfo:nil repeats:YES];
    }
-(void)stop {MSGSTART("StyleTicker:-(void)stop")

          [self.tim invalidate];
          self.tim=nil;
    }
+(NSString*)stylerFileName {MSGSTART("StyleTicker:+(NSString*)stylerFileName")

          NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask ,YES );
          NSString *documentsDirectory = [paths objectAtIndex:0];
          return([documentsDirectory stringByAppendingPathComponent:@"styler.txt"]);
    }
-(NSString*)stylerString {MSGSTART("StyleTicker:-(NSString*)stylerString")
  return(stylerString);}
-(void)tick {MSGSTART("StyleTicker:-(void)tick")
  
  /*i-100*/@synchronized (self) {
                if (inTick) return;
                inTick=YES;
            }
          
  /*i0*/prnt(".");
          [NSString requestStringWithContentsOfURL:[NSURL URLWithString:[g_singletons.homeURLPrefix stringByAppendingFormat:@"readtext.php?fn=%@",g_singletons.styleName]] encoding:NSUTF8StringEncoding timeoutInterval:2 completion:^void(NSString *s,NSError *err) {
                  //prnt("\nshader req %p %s\n",s,err.description.UTF8String);
                  if (s) {
                        self.stylerString=s;
                        //NSLog(@"doc :\n%@\n",s);
                    }
                  @synchronized(self) {
                        inTick=NO;
                    }
              }];
          if (self) return;
      
  /*i100*/@synchronized (self) {
                inTick=NO;
            }
    }
-(NSTimer*)tim {MSGSTART("StyleTicker:-(NSTimer*)tim")
  
  /*i-999*/NSTimer* ret=v_tim;
  /*i999*/return(ret);}
-(id)w_autorelease {MSGSTART("StyleTicker:-(id)w_autorelease")
  
  /*i-900*/autoreleaseFn(self,___rc,___arc,debugAutorelease); 
  /*i990*/return(nil/*super*/);}
-(void)w_release {MSGSTART("StyleTicker:-(void)w_release")
  
  /*i-900*/releaseFn(self,___rc,___arc,debugAutorelease); }
-(id)w_retain {MSGSTART("StyleTicker:-(id)w_retain")
  
  /*i-900*/retainFn(self,___rc,___arc); 
  /*i999*/return(nil/*super*/);}

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_


















