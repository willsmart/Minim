"wierrors.wi"
"../../wiLibrary/wiui.wi"

/*...

// check for non autoreleased properties
// (\[\s*\[\s*[\w\d_]+\s+alloc\s*]\s*init[^\[\(\{\]\)\}]*([\[\(\{][^\[\(\{\]\)\}]*+([\[\(\{][^\[\(\{\]\)\}]*+([\[\(\{][^\[\(\{\]\)\}]*+([\[\(\{][^\[\(\{\]\)\}]*+[\]\)\}][^\[\(\{\]\)\}]*+)*+[\]\)\}][^\[\(\{\]\)\}]*+)*+[\]\)\}][^\[\(\{\]\)\}]*+)*+[\]\)\}][^\[\(\{\]\)\}]*+)*+((?!autorelease\]).)*)(\(

// skip brackets ([^\[\(\{\]\)\}]*[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{][^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])

// (("(\\\\|\\"|[^"])*+"|[^"lr])*l(("(\\|\"|[^"])*+"|[^"lr])*+l("(\\|\"|[^"])*+"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+)
// (("(\\\\|\\"|[^"])*+"|[^"lr])*l(("(\\|\"|[^"])*+"|[^"lr])*+l("(\\|\"|[^"])*+"|[^"lr])*+r)*+("(\\|\"|[^"])*+"|[^"lr])*+r)
// (("(\\\\|\\"|[^"])*"|[^"lr])*l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)
// parans and blocks (("(\\\\|\\"|[^"])*"|[^"\[\]\{\}\(\)])*[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(]("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])

//lllrrr "l"l"rr"r
//"l\\\"ll\\"llr"rrrr"lrlrrl
// NSString s=[[[NSString alloc] initWithFormat:(NSString*)[NSString stringWithFormat:@"hello%@",[NSString string]],@"blah",NSMakeRange(c,1,2,3)] autor elease] (readonly)
A
 int a
 A b=[A alloc]
 
"include.wi"
"include.wi"
//"include/include.wi"
//"include.h"
//"<sysinclude.h>"

// decl
//sys Sys
type Type
type longptr "typedef:long*"
type int
type short
sys NSObject
type ULL "typedef:unsigned long long"
type kid "typedef:id<NSCopying>" "retains"

// mt classes
RSubClassMT:RClassMT "RSubClassMT" "attribute" "fn:mt"
RClassMT<RProtocolMT> "RClassMT" "attribute" "fn:mt"
<RSubProtocolMT:RProtocolMT> "RSubProtocolMT" "attribute"
<RProtocolMT> "RProtocolMT" "attribute"


// inherit
RSubClass:RClass "fn:inherit"
    int RSubClass=0//,intg=0
    -(void)RSubClassfn {/*RSubClass*/}
    -(void)fn {/*RSubClass*/}
RSubClass2:RClass "fn:inherit"
    int RSubClass2=0//,intg=0
    -(void)RSubClass2fn {/*RSubClass2*/}
    -(void)fn {/*RSubClass2*/}
RClass<RProtocol> "fn:inherit"
    int RClass=0//,intg=0
    -(void)RClassfn {/*RClass*/}
    -(void)fn {/*RClass*/}
RClass2<RProtocol,RSubProtocol> "fn:inherit"
    int RClass2=0//,intg=0
    -(void)RClass2fn {/*RClass2*/}
    -(void)fn {/*RClass2*/}
RClassab<RProtocol,RProtocolb> "fn:inherit"
    int RClassab=0//,intg=0
    -(void)RClassabfn {/*RClassab*/}
    -(void)fn {/*RClassab*/}
RSubClassabnapnac:RClassabnapnac "fn:inherit"
    int RSubClassabnapnac=0//,intg=0
    -(void)RSubClassabnapnacfn {/*RSubClassabnapnac*/}
    -(void)fn {/*RSubClassabnapnac*/}
RClassabnapnac<RProtocol,RProtocolb,RProtocolnap> "nac" "fn:inherit"
    int RClassabnapnac=0//,intg=0
    -(void)RClassabnapnacfn {/*RClassabnapnac*/}
    -(void)fn {/*RClassabnapnac*/}
RClassabnap<RProtocol,RProtocolb,RProtocolnap> "fn:inherit"
    int RClassabnap=0//,intg=0
    -(void)RClassabnapfn {/*RClassabnap*/}
    -(void)fn {/*RClassabnap*/}
<RSubProtocol:RProtocol>
    int RSubProtocol=0//,intg=0
    -(void)RSubProtocolfn {/*RSubProtocol*/}
    -(void)fn {/*RSubProtocol*/}
<RProtocol>
    int RProtocol=0//,intg=0
    -(void)RProtocolfn {/*RProtocol*/}
    -(void)fn {/*RProtocol*/}
<RProtocolb>
    int RProtocolb=0//,intg=0
    -(void)RProtocolbfn {/*RProtocolb*/}
    -(void)fn {/*RProtocolb*/}
<RProtocolnap> "nap"
    int RProtocolnap=0//,intg=0
    -(void)RProtocolnapfn {/*RProtocolnap*/}
    -(void)fn {/*RProtocolnap*/}


<Object>
    ULL __private_access_thread_mask=0 (justivar)
    __WIClass__ privateaccess={authorize_thread(__private_access_thread_mask);return(self);}
    
<Globals>
 -decl:{
    #define MSGSTART(__fn) printf("%s",__fn);
    #define ERR(...) printf(__VA_ARGS__)
    #define ADDOWNER(owned,owner)
    #define REMOVEOWNER(owned,owner)
//id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic);
//void objc_setProperty(id self, SEL _cmd, ptrdiff_t offset, id newValue, BOOL atomic,signed char shouldCopy);
//void objc_copyStruct(void *dest, const void *src, ptrdiff_t size, BOOL atomic,BOOL hasStrong);
  bool authorized_thread(ULL&mask);
  void authorize_thread(ULL&mask);
 }
 -decl:impl:{
  bool authorized_thread(ULL&mask) {
     return(YES);
  }
  void authorize_thread(ULL&mask) {
  }
 }

// Category
NSObject "fn:fns"
    int sys={return(0);}-v{/*set*/}
    -(void)sysfn {@1 /*1*/}


// fns/vars/props

Fns "fn:fns"

    -(void)fn {
        @1 /*1*/ @2 /*2*/ @3 /*3*/ @100 /*100*/ @99 /*99*/ @98 /*98*/
    }
    -(void)fn2 {
        @1 /*1*/ @2 /*2*/ @3 /*3*/
    }
    -(void)fn2 {
        @100 /*100*/ @99 /*99*/ @98 /*98*/
    }
    -(void)fn:(int)i
    {
        @1 /*1*/ @2 /*2*/ @3 /*3*/ @100 /*100*/ @99 /*99*/@98 /*98*/
    }
    -void cfn(int i) {@1 /*c*/}

SubFns:Fns "fn:fns"
    -(void)fn {
        @!1 /*1!*/ @4 /*add4*/
    }
    -(void)fn2 {
        @!1 /*1!*/ @4 /*add4*/
    }

Clas
    +(Clas*)getDefault {return(nil);}

<VarsBase> "multi" "nap"
    short rw_na_iv_nodef_short_declInVarsBase=0

<Vars:VarsBase> "fn:vars" "nap" "multi"
    short rw_iv_nodef_short_zero=0,rw_na_iv_def1_short_one=1,rw_na_iv_nodef_short_nill=nil (args)
    int pr_iv_def_nm_publicreadonly=123 (readonly,args)
    int rw_iv_def_nm_imaginaryi=123 (imaginary,args)
    int rw_iv_def_nm_atomici=123 (atomic,args)
    int rw_iv_nm_settergetteri=123 (setter=setSG,getter=sg,args)
    int r_noiv_nm_getteri={return(123);} (args)
    int pr_iv_nm_getteri=0{return(pr_iv_nm_getteri);} (args)
    int pr_iv_nm_setter=0-v{pr_iv_nm_setter=123;} (readonly,args)
    int rw_iv_nm_setteri=0
        -v{rw_iv_nm_setteri=123;} (args)
    int rw_noiv_nm_setteri=
        -v{} (args)
    int rw_noiv_nm_settergetter=
        {return(123);}
        -v{} (args)
    int rw_iv_nm_settergetter=123
        {return(123);}
        -v{rw_iv_nm_settergetter=123;} (args)
    int rw_iv_nm_settergetter2=123
        {return(rw_iv_nm_settergetter2);}
        -v{} (args)
    int rw_jiv_nm_justivar=0 (justivar,args)
    int pr_iv_nm_ivar=0{return(123);} (ivar,args)
    int rw_jiv_nm_justivar_named=0 (justivar=the_justivar_named,args)
    int pr_iv_nm_ivar_named=0{return(123);} (ivar=the_ivar_named,args)
    -(void)testGetterSetter {
        pr_iv_def_nm_publicreadonly=pr_iv_def_nm_publicreadonly;
        rw_iv_def_nm_atomici=rw_iv_def_nm_atomici;
        rw_iv_nm_settergetteri=rw_iv_nm_settergetteri;
        pr_iv_nm_getteri=r_noiv_nm_getteri;
        pr_iv_nm_getteri=pr_iv_nm_getteri;
        pr_iv_nm_setter=pr_iv_nm_setter;
        rw_iv_nm_setteri=rw_iv_nm_setteri;
        rw_noiv_nm_setteri=rw_noiv_nm_setteri;
        rw_iv_nm_settergetter=rw_iv_nm_settergetter;
        rw_iv_nm_settergetter2=rw_iv_nm_settergetter2;
        pr_iv_nm_ivar=pr_iv_nm_ivar;
        pr_iv_nm_ivar_named=pr_iv_nm_ivar_named;
    }


VarsInt<Vars> "fn:VarsInt"
VarsRetain<Vars> "int=>Clas*" "nm=>Clas" "fn:VarsRetain" "123=>[Clas getDefault]"

VarsAssign<Vars> "int=>Clas*" "nm=>Clas" "args=>assign" "fn:VarsAssign" "123=>[Clas getDefault]"

VarsAtomic<Vars> "int=>Clas*" "nm=>Clas" "args=>atomic" "fn:VarsAtomic" "123=>[Clas getDefault]"
VarsRetainAtomic<Vars> "int=>Clas*" "nm=>Clas" "args=>atomic" "fn:VarsRetainAtomic" "123=>[Clas getDefault]"
VarsAssignAtomic<Vars> "int=>Clas*" "nm=>Clas" "args=>assign,atomic" "fn:VarsAssignAtomic" "123=>[Clas getDefault]"

...*/

B

A
    a -- B b
    as2 >s- B bs2
    as3 >s~ B bs3
    as5 >~s- B bs5
    as6 ~s< B bs6
    as7 -s< B bs7
    as8 -s<~ B bs8

    aa2 >a- B ba2
    aa3 >a~ B ba3
    aa5 >~a- B ba5
    aa6 ~a< B ba6
    aa7 -a< B ba7
    aa8 -a<~ B ba8

    am2 >a- B bm2
    am3 >a~ B bm3
    am5 >~a- B bm5
    am6 ~a< B bm6
    am7 -a< B bm7
    am8 -a<~ B bm8

    aq >> Aq -- B bq >> Bq
    asq >> Asq -s< B bsq >> Bsq
    aaq >> Aaq -a< B baq >> Baq
    amq >> Amq -m< B bmq >> Bmq



