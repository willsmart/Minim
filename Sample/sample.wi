"wierrors.wi"
//"../../wiLibrary/wiui.wi"
"<pthread.h>"

sys NSObject
type ULL "typedef:unsigned long long"
type id "retains"
<Retains>
    -(id)retain;
    -(void)release;
    -(id)autorelease;

type kid "typedef:id<NSCopying,Retains>" "retains"

<Globals>
 +decl:{
    #define MSGSTART(__fn) printf("%s",__fn);
    #define ERR(...) printf(__VA_ARGS__)
    #define ADDOWNER(...)
    #define REMOVEOWNER(...)
 }


<ThreadKey> "multi" "nac"
    -decl:{
        extern pthread_key_t ThreadKey_key_keyName;
        extern valueType getThreadValueNamedKeyName();
        extern valueType setThreadValueNamedKeyName(valueType v);
    }
    -decl:impl:{
        pthread_key_t ThreadKey_key_keyName=nil;
        valueType getThreadValueNamedKeyName() {
            if (!ThreadKey_key_keyName)  pthread_key_create(&ThreadKey_key_keyName,nil);
            return((valueType)(ULL)pthread_getspecific(ThreadKey_key_keyName));
        }
        valueType setThreadValueNamedKeyName(valueType v) {
            if (!ThreadKey_key_keyName)  pthread_key_create(&ThreadKey_key_keyName,nil);
            valueType ret=(valueType)(ULL)pthread_getspecific(ThreadKey_key_keyName);
            pthread_setspecific(ThreadKey_key_keyName,(const void*)(ULL)v);
            return(ret);
        }
    }


/*each:impl:
#ifdef _PrivateAccessMask_
#undef _PrivateAccessMask_
#endif
#define _PrivateAccessMask_ __private_access_thread_mask_in___ClassName__
*/

ThreadIDKey<ThreadKey> "keyName=>id" "valueType=>Int" "nac"
    -decl:{
        extern Int g_prevThreadId;
        Int getThreadId();
        ULL getThreadMask();

        bool authorized_thread(ULL&mask);
        bool authorize_thread(ULL&mask);
        void deauthorize_thread(ULL&mask);
        #define privateaccess(...) do {bool __needdeauth=authorize_thread(_PrivateAccessMask_);{__VA_ARGS__;}if (__needdeauth) deauthorize_thread(_PrivateAccessMask_);} while (false)
    }
    -decl:impl:{
        Int g_prevThreadId=0;
        ULL getThreadMask() {
            Int ret=getThreadValueNamedId();
            if (!ret) setThreadValueNamedId(ret=++g_prevThreadId);
            return(1LL<<(ret-1));
        }
        Int getThreadId() {
            Int ret=getThreadValueNamedId();
            if (!ret) setThreadValueNamedId(ret=++g_prevThreadId);
            return(ret);
        }

        bool authorized_thread(ULL&mask) {
            ULL tmask=getThreadMask();
            if (!tmask) ERR("Too many threads for this implementation of publicreadonly properties (64)");
            else {
                if (mask&tmask) {
//                    mask&=~tmask;
                    return(YES);
                }
            }
            return(NO);
        }
        bool authorize_thread(ULL&mask) {
            if (mask&getThreadMask()) return(NO);
            else {
                mask|=getThreadMask();
                return(YES);
            }
        }
        void deauthorize_thread(ULL&mask) {
            mask&=~getThreadMask();
        }
    }

<ClassObject>
    ULL __private_access_thread_mask_in___ClassName__=0 (justivar,privateivar)




/*...

// check for non autoreleased properties
// (\[\s*\[\s*[\w\d_]+\s+alloc\s*]\s*init[^\[\(\{\]\)\}]*([\[\(\{][^\[\(\{\]\)\}]*+([\[\(\{][^\[\(\{\]\)\}]*+([\[\(\{][^\[\(\{\]\)\}]*+([\[\(\{][^\[\(\{\]\)\}]*+[\]\)\}][^\[\(\{\]\)\}]*+)*+[\]\)\}][^\[\(\{\]\)\}]*+)*+[\]\)\}][^\[\(\{\]\)\}]*+)*+[\]\)\}][^\[\(\{\]\)\}]*+)*+((?!autorelease\]).)*)(\(

// skip brackets ([^\[\(\{\]\)\}]*[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{]([^\[\(\{\]\)\}]*+[\[\(\{][^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])*+[^\[\(\{\]\)\}]*+[\]\)\}])

// (("(\\\\|\\"|[^"])*+"|[^"lr])*l(("(\\|\"|[^"])*+"|[^"lr])*+l("(\\|\"|[^"])*+"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+)
// (("(\\\\|\\"|[^"])*+"|[^"lr])*l(("(\\|\"|[^"])*+"|[^"lr])*+l("(\\|\"|[^"])*+"|[^"lr])*+r)*+("(\\|\"|[^"])*+"|[^"lr])*+r)
// (("(\\\\|\\"|[^"])*"|[^"lr])*l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l(("(\\|\"|[^"])*"|[^"lr])*+l("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)*+("(\\|\"|[^"])*"|[^"lr])*+r)
// parans and blocks (("(\\\\|\\"|[^"])*"|[^"\[\]\{\}\(\)])*[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(](("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\[\{\(]("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])*+("(\\|\"|[^"])*"|[^"\[\]\{\}\(\)])*+[\]\}\)])

//lllrrr "l"l"rr"r
//"l\\\"ll\\"llr"rrrr"lrlrrl
// NSString s=[[[NSString alloc] initWithFormat:(NSString*)[NSString stringWithFormat:@"hello%@",[NSString string]],@"blah",NSMakeRange(c,1,2,3)] autor elease] (readonly)
A
 Int a
 A b=[A alloc]
 
"include.wi"
"include.wi"
//"include/include.wi"
//"include.h"
//"<sysinclude.h>"

// decl
//sys Sys
type Type
type longptr "typedef:long*"
type Int
type short
sys NSObject
type ULL "typedef:unsigned long long"
type kid "typedef:id<NSCopying>" "retains"

// mt classes
RSubClassMT:RClassMT "RSubClassMT" "attribute" "fn:mt"
RClassMT<RProtocolMT> "RClassMT" "attribute" "fn:mt"
<RSubProtocolMT:RProtocolMT> "RSubProtocolMT" "attribute"
<RProtocolMT> "RProtocolMT" "attribute"


// inherit
RSubClass:RClass "fn:inherit"
    Int RSubClass=0//,intg=0
    -(void)RSubClassfn {/*RSubClass*/}
    -(void)fn {/*RSubClass*/}
RSubClass2:RClass "fn:inherit"
    Int RSubClass2=0//,intg=0
    -(void)RSubClass2fn {/*RSubClass2*/}
    -(void)fn {/*RSubClass2*/}
RClass<RProtocol> "fn:inherit"
    Int RClass=0//,intg=0
    -(void)RClassfn {/*RClass*/}
    -(void)fn {/*RClass*/}
RClass2<RProtocol,RSubProtocol> "fn:inherit"
    Int RClass2=0//,intg=0
    -(void)RClass2fn {/*RClass2*/}
    -(void)fn {/*RClass2*/}
RClassab<RProtocol,RProtocolb> "fn:inherit"
    Int RClassab=0//,intg=0
    -(void)RClassabfn {/*RClassab*/}
    -(void)fn {/*RClassab*/}
RSubClassabnapnac:RClassabnapnac "fn:inherit"
    Int RSubClassabnapnac=0//,intg=0
    -(void)RSubClassabnapnacfn {/*RSubClassabnapnac*/}
    -(void)fn {/*RSubClassabnapnac*/}
RClassabnapnac<RProtocol,RProtocolb,RProtocolnap> "nac" "fn:inherit"
    Int RClassabnapnac=0//,intg=0
    -(void)RClassabnapnacfn {/*RClassabnapnac*/}
    -(void)fn {/*RClassabnapnac*/}
RClassabnap<RProtocol,RProtocolb,RProtocolnap> "fn:inherit"
    Int RClassabnap=0//,intg=0
    -(void)RClassabnapfn {/*RClassabnap*/}
    -(void)fn {/*RClassabnap*/}
<RSubProtocol:RProtocol>
    Int RSubProtocol=0//,intg=0
    -(void)RSubProtocolfn {/*RSubProtocol*/}
    -(void)fn {/*RSubProtocol*/}
<RProtocol>
    Int RProtocol=0//,intg=0
    -(void)RProtocolfn {/*RProtocol*/}
    -(void)fn {/*RProtocol*/}
<RProtocolb>
    Int RProtocolb=0//,intg=0
    -(void)RProtocolbfn {/*RProtocolb*/}
    -(void)fn {/*RProtocolb*/}
<RProtocolnap> "nap"
    Int RProtocolnap=0//,intg=0
    -(void)RProtocolnapfn {/*RProtocolnap*/}
    -(void)fn {/*RProtocolnap*/}




// Category
NSObject "fn:fns"
    Int sys={return(0);}-v{/*set*/}
    -(void)sysfn {@1 /*1*/}


// fns/vars/props

Fns "fn:fns"

    -(void)fn {
        @1 /*1*/ @2 /*2*/ @3 /*3*/ @100 /*100*/ @99 /*99*/ @98 /*98*/
    }
    -(void)fn2 {
        @1 /*1*/ @2 /*2*/ @3 /*3*/
    }
    -(void)fn2 {
        @100 /*100*/ @99 /*99*/ @98 /*98*/
    }
    -(void)fn:(Int)i
    {
        @1 /*1*/ @2 /*2*/ @3 /*3*/ @100 /*100*/ @99 /*99*/@98 /*98*/
    }
    -void cfn(Int i) {@1 /*c*/}

SubFns:Fns "fn:fns"
    -(void)fn {
        @!1 /*1!*/ @4 /*add4*/
    }
    -(void)fn2 {
        @!1 /*1!*/ @4 /*add4*/
    }

Clas
    +(Clas*)getDefault {return(nil);}

<VarsBase> "multi" "nap"
    short rw_na_iv_nodef_short_declInVarsBase=0

<Vars:VarsBase> "fn:vars" "nap" "multi"
    short rw_iv_nodef_short_zero=0,rw_na_iv_def1_short_one=1,rw_na_iv_nodef_short_nill=nil (args)
    Int pr_iv_def_nm_publicreadonly=123 (readonly,args)
    Int rw_iv_def_nm_imaginaryi=123 (imaginary,args)
    Int rw_iv_def_nm_atomici=123 (atomic,args)
    Int rw_iv_nm_settergetteri=123 (setter=setSG,getter=sg,args)
    Int r_noiv_nm_getteri={return(123);} (args)
    Int pr_iv_nm_getteri=0{return(pr_iv_nm_getteri);} (args)
    Int pr_iv_nm_setter=0-v{pr_iv_nm_setter=123;} (readonly,args)
    Int rw_iv_nm_setteri=0
        -v{rw_iv_nm_setteri=123;} (args)
    Int rw_noiv_nm_setteri=
        -v{} (args)
    Int rw_noiv_nm_settergetter=
        {return(123);}
        -v{} (args)
    Int rw_iv_nm_settergetter=123
        {return(123);}
        -v{rw_iv_nm_settergetter=123;} (args)
    Int rw_iv_nm_settergetter2=123
        {return(rw_iv_nm_settergetter2);}
        -v{} (args)
    Int rw_jiv_nm_justivar=0 (justivar,args)
    Int pr_iv_nm_ivar=0{return(123);} (ivar,args)
    Int rw_jiv_nm_justivar_named=0 (justivar=the_justivar_named,args)
    Int pr_iv_nm_ivar_named=0{return(123);} (ivar=the_ivar_named,args)
    -(void)testGetterSetter {
        pr_iv_def_nm_publicreadonly=pr_iv_def_nm_publicreadonly;
        rw_iv_def_nm_atomici=rw_iv_def_nm_atomici;
        rw_iv_nm_settergetteri=rw_iv_nm_settergetteri;
        pr_iv_nm_getteri=r_noiv_nm_getteri;
        pr_iv_nm_getteri=pr_iv_nm_getteri;
        pr_iv_nm_setter=pr_iv_nm_setter;
        rw_iv_nm_setteri=rw_iv_nm_setteri;
        rw_noiv_nm_setteri=rw_noiv_nm_setteri;
        rw_iv_nm_settergetter=rw_iv_nm_settergetter;
        rw_iv_nm_settergetter2=rw_iv_nm_settergetter2;
        pr_iv_nm_ivar=pr_iv_nm_ivar;
        pr_iv_nm_ivar_named=pr_iv_nm_ivar_named;
    }


VarsInt<Vars> "fn:VarsInt"
VarsRetain<Vars> "Int=>Clas*" "nm=>Clas" "fn:VarsRetain" "123=>[Clas getDefault]"

VarsAssign<Vars> "Int=>Clas*" "nm=>Clas" "args=>assign" "fn:VarsAssign" "123=>[Clas getDefault]"

VarsAtomic<Vars> "Int=>Clas*" "nm=>Clas" "args=>atomic" "fn:VarsAtomic" "123=>[Clas getDefault]"
VarsRetainAtomic<Vars> "Int=>Clas*" "nm=>Clas" "args=>atomic" "fn:VarsRetainAtomic" "123=>[Clas getDefault]"
VarsAssignAtomic<Vars> "Int=>Clas*" "nm=>Clas" "args=>assign,atomic" "fn:VarsAssignAtomic" "123=>[Clas getDefault]"


B

A
    a -- B b
    as2 >s- B bs2
    as3 >s~ B bs3
    as5 >~s- B bs5
    as6 ~s< B bs6
    as7 -s< B bs7
    as8 -s<~ B bs8

    aa2 >a- B ba2
    aa3 >a~ B ba3
    aa5 >~a- B ba5
    aa6 ~a< B ba6
    aa7 -a< B ba7
    aa8 -a<~ B ba8

    am2 >a- B bm2
    am3 >a~ B bm3
    am5 >~a- B bm5
    am6 ~a< B bm6
    am7 -a< B bm7
    am8 -a<~ B bm8

    aw >> Aq -- B bw >> Bq
    asw >> Asq -s< B bsw >> Bsq
    aaw >> Aaq -a< B baw >> Baq
    amw >> Amq -m< B bmw >> Bmq


A
    A a=nil (publicreadonly)
    -(void)fn {
        a=[hi hi];
        a="hi";
        a=@"hi";
        a=1;
    }



<C>
    A c=nil
    A pc=nil (privateivar)
    -(void)fn {/*C*/
        c=nil;
        pc=nil;
        /*ivar*/v_c=nil;
        /*ivar*/v_pc=nil;
    }
A
    A a=nil,b=nil
    A pa=nil,pb=nil (privateivar)
    -(void)fn {
        a=b=nil;
        pa=pb=nil;
        /*ivar*/v_a=/*ivar*/v_b=nil;
        /*ivar*/v_pa=/*ivar*/v_pb=nil;
    }
B:A<C>
    A a=nil
    A pa=nil (privateivar)
    -(void)fn {
        a=self.b=c=nil;
        pa=self.pb=pc=nil;
        /*ivar*/v_a=/*ivar*/v_b=/*ivar*/v_c=nil;
        /*ivar*/v_pa=/*ivar*/v_pb=/*ivar*/v_pc=nil;
        privateaccess(a=nil);
    }
..*/

<A>
    A footer={@-999
        id ret=(footer?footer:[ViewUtilities loadViewOfClass:self.footerClass withTag:footerTag fromNibWithName:self.nibName]);
        @999 return(ret);
    }=nil (ivar=footer,dealloc,readonly!)

A<A>
    -decl:{
        #define E(...) __VA_ARGS__
    }
    A a=nil
    -(id)a:(id)a1 {
        return(nil);
    }
    -(id)a:(id)a1 a:(id)a2 a:(id)a3 a:(id)a4 a:(id)a5 h:(id)a6 a:(id)a7 {
        [a a:a a:(id)a a:@"hi" a:a a:(id)1 h:a a:(id)[a a]];
        [a a:nil a:a a:nil /*hi*/a/*hi*/:/*hi*/a a:(a)?a:a h:a?(a):a a:a.a];
        [(id)a a:a];
        [(id)a a];
        [[a a] a:a];
        [E(a) a:a];
        Int a=a;
        return(nil);
    }

...*/
type Int
A "-Object"
    A a={return(nil);}=nil (ivar)
    Int j=nil (readonly)
    -(void)fn {
        j=0;
        Int i=1;
        Int k;
    }
    -(void)a:(Int)aa {}

    


