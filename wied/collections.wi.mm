// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 1 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D1





        @interface MutableArrayDebuggerDelegate : NSObject<ClassObject, MutableArrayDelegate, MutableObjectDebuggerDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableArrayDebuggerDelegate; @protected
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool attached;
            bool debugAutorelease;
            NSArray *delegateForArray;
            bool isZombie;
            NSString *v_name;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readwrite) bool attached;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (strong,nonatomic,readwrite) NSString *name;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        - (void)_startObjectOfClassMutableArrayDebuggerDelegate;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)allObjectsMoved;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        + (void)attachTo:(NSObject<MinimalMutableArray> *)a named:(NSString *)aname;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        + (void)dettachFrom:(NSObject<MinimalMutableArray> *)a named:(NSString *)aname;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (MutableArrayDebuggerDelegate *)initWithName:(NSString *)aname;
        - (NSString *)name;
        - (NSMutableString *)objectName;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)setDelegateForArray:(NSArray *)v;
        - (void)setName:(NSString *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;

        @end





        @interface MutableArrayFollowerDelegate : NSObject<BaseObject, ClassObject, MutableArrayDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableArrayFollowerDelegate; @protected
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            NSMutableArray *followerArray;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite) NSMutableArray *followerArray;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        - (void)_startObjectOfClassMutableArrayFollowerDelegate;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)allObjectsMoved;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (NSMutableArray *)followerArray;
        + (MutableArrayFollowerDelegate *)get;
        - (MutableArrayFollowerDelegate *)init;
        - (id)objectForObject:(id)object;
        - (NSMutableString *)objectName;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (void)refreshFollowerArray;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)setDelegateForArray:(NSArray *)v;
        - (void)setFollowerArray:(NSMutableArray *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;

        @end





        @interface MutableDictionaryDebuggerDelegate : NSObject<ClassObject, MutableDictionaryDelegate, MutableObjectDebuggerDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableDictionaryDebuggerDelegate; @protected
            bool attached;
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            bool isZombie;
            NSString *v_name;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) bool attached;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (nonatomic,readonly) bool isZombie;
        @property (strong,nonatomic,readwrite) NSString *name;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        - (void)_startObjectOfClassMutableDictionaryDebuggerDelegate;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        + (void)attachTo:(NSObject<MinimalMutableDictionary> *)a named:(NSString *)aname;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        + (void)dettachFrom:(NSObject<MinimalMutableDictionary> *)a named:(NSString *)aname;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (MutableDictionaryDebuggerDelegate *)initWithName:(NSString *)aname;
        - (NSString *)name;
        - (NSMutableString *)objectName;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setName:(NSString *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;

        @end





        @interface MutableSetDebuggerDelegate : NSObject<ClassObject, MutableObjectDebuggerDelegate, MutableSetDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableSetDebuggerDelegate; @protected
            bool attached;
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool isZombie;
            NSString *v_name;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<MutableSetDelegate> *setDelegate;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) bool attached;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (strong,nonatomic,readwrite) NSString *name;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        - (void)_startObjectOfClassMutableSetDebuggerDelegate;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        + (void)attachTo:(NSObject<MutableSet> *)a named:(NSString *)aname;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        + (void)dettachFrom:(NSObject<MutableSet> *)a named:(NSString *)aname;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (MutableSetDebuggerDelegate *)initWithName:(NSString *)aname;
        - (NSString *)name;
        - (NSMutableString *)objectName;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setName:(NSString *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end





        @interface MutableValueDebuggerDelegate : NSObject<ClassObject, MutableObjectDebuggerDelegate, MutableValueDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableValueDebuggerDelegate; @protected
            bool attached;
            bool debugAutorelease;
            bool isZombie;
            NSString *v_name;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<MutableValueDelegate> *parentValueDelegate;
            bool retainsAsValueDelegate;
            NSObject<MutableValueDelegate> *valueDelegate;
            NSObject<MutableValueDelegate> *valueDelegate_strong;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) bool attached;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (strong,nonatomic,readwrite) NSString *name;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (weak,nonatomic,readwrite) NSObject<MutableValueDelegate> *parentValueDelegate;
        @property (nonatomic,readwrite) bool retainsAsValueDelegate;
        @property (weak,nonatomic,readwrite) NSObject<MutableValueDelegate> *valueDelegate;
        @property (strong,nonatomic,readwrite,strong) NSObject<MutableValueDelegate> *valueDelegate_strong;
        - (void)_startObjectOfClassMutableValueDebuggerDelegate;
        - (void)addDelegate:(NSObject<MutableValueDelegate> *)v;
        + (void)attachTo:(NSObject<ValueLinkEndpoint> *)a named:(NSString *)aname;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        + (void)dettachFrom:(NSObject<ValueLinkEndpoint> *)a named:(NSString *)aname;
        - (void)didSetValueTo:(id)object;
        - (void)die;
        - (MutableValueDebuggerDelegate *)initWithName:(NSString *)aname;
        - (NSString *)name;
        - (NSMutableString *)objectName;
        - (NSObject<MutableValueDelegate> *)parentValueDelegate;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableValueDelegate> *)v;
        - (void)setName:(NSString *)v;
        - (void)setParentValueDelegate:(NSObject<MutableValueDelegate> *)v;
        - (void)setValueDelegate:(NSObject<MutableValueDelegate> *)v;
        - (void)setValueDelegate_strong:(NSObject<MutableValueDelegate> *)v;
        - (void)unlinkValueDelegate;
        - (NSObject<MutableValueDelegate> *)valueDelegate;
        - (NSObject<MutableValueDelegate> *)valueDelegate_strong;
        - (void)willChangeValueFrom:(id)fromObject to:(id)toObject;

        @end
    #endif // INCLUDE_IFACE_D1

    #ifdef INCLUDE_IFACE_D2





        @interface ImmutableArray : NSArray<Array, ClassObject, Object> {
            NSArray *__array;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_ImmutableArray; @protected
            bool debugAutorelease;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSArray *__array;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) id lastObject;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSEnumerator *reverseObjectEnumerator;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassImmutableArray;
        - (NSArray *)__array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        + (ImmutableArray *)array;
        - (NSArray *)arrayByAddingObject:(id)object;
        - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array;
        + (ImmutableArray *)arrayWithArray:(NSArray *)array;
        + (ImmutableArray *)arrayWithContentsOfFile:(NSString *)file;
        + (ImmutableArray *)arrayWithContentsOfURL:(NSURL *)url;
        + (ImmutableArray *)arrayWithObject:(id)object;
        + (ImmutableArray *)arrayWithObjects:(id *)objects count:(Unsigned)count;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (NSString *)componentsJoinedByString:(NSString *)separator;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate;
        - (id)firstObjectCommonWithArray:(NSArray *)array;
        - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange;
        - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp;
        - (Unsigned)indexOfObject:(id)object;
        - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (ImmutableArray *)init;
        - (ImmutableArray *)initWithArray:(NSArray *)array;
        - (ImmutableArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy;
        - (ImmutableArray *)initWithCoder:(NSCoder *)coder;
        - (ImmutableArray *)initWithContentsOfFile:(NSString *)file;
        - (ImmutableArray *)initWithContentsOfURL:(NSURL *)url;
        - (ImmutableArray *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (BOOL)isEqualToArray:(NSArray *)array;
        - (id)lastObject;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (id)objectAtIndex:(Unsigned)index;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSArray *)objects;
        - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes;
        - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context;
        - (NSEnumerator *)reverseObjectEnumerator;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        - (NSData *)sortedArrayHint;
        - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint;
        - (NSArray *)sortedArrayUsingSelector:(SEL)selector;
        - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (NSArray *)subarrayWithRange:(NSRange)r;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface ImmutableDictionary : NSDictionary<ClassObject, Dictionary, Object> {
            NSDictionary *__dictionary;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_ImmutableDictionary; @protected
            bool debugAutorelease;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSDictionary *__dictionary;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSArray *allKeys;
        @property (nonatomic,readonly) NSArray *allValues;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptionInStringsFileFormat;
        @property (nonatomic,readonly) NSDate *fileCreationDate;
        @property (nonatomic,readonly) BOOL fileExtensionHidden;
        @property (nonatomic,readonly) NSNumber *fileGroupOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileGroupOwnerAccountName;
        @property (nonatomic,readonly) OSType fileHFSCreatorCode;
        @property (nonatomic,readonly) OSType fileHFSTypeCode;
        @property (nonatomic,readonly) BOOL fileIsAppendOnly;
        @property (nonatomic,readonly) BOOL fileIsImmutable;
        @property (nonatomic,readonly) NSDate *fileModificationDate;
        @property (nonatomic,readonly) NSNumber *fileOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileOwnerAccountName;
        @property (nonatomic,readonly) Unsigned filePosixPermissions;
        @property (nonatomic,readonly) ULL fileSize;
        @property (nonatomic,readonly) Unsigned fileSystemFileNumber;
        @property (nonatomic,readonly) Int fileSystemNumber;
        @property (nonatomic,readonly) NSString *fileType;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *keyEnumerator;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassImmutableDictionary;
        - (NSDictionary *)__dictionary;
        - (NSArray *)allKeys;
        - (NSArray *)allKeysForObject:(id)object;
        - (NSArray *)allValues;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptionInStringsFileFormat;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        + (ImmutableDictionary *)dictionary;
        + (ImmutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file;
        + (ImmutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url;
        + (ImmutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary;
        + (ImmutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key;
        + (ImmutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (NSDate *)fileCreationDate;
        - (BOOL)fileExtensionHidden;
        - (NSNumber *)fileGroupOwnerAccountID;
        - (NSString *)fileGroupOwnerAccountName;
        - (OSType)fileHFSCreatorCode;
        - (OSType)fileHFSTypeCode;
        - (BOOL)fileIsAppendOnly;
        - (BOOL)fileIsImmutable;
        - (NSDate *)fileModificationDate;
        - (NSNumber *)fileOwnerAccountID;
        - (NSString *)fileOwnerAccountName;
        - (Unsigned)filePosixPermissions;
        - (ULL)fileSize;
        - (Unsigned)fileSystemFileNumber;
        - (Int)fileSystemNumber;
        - (NSString *)fileType;
        - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
        - (ImmutableDictionary *)init;
        - (ImmutableDictionary *)initWithCoder:(NSCoder *)coder;
        - (ImmutableDictionary *)initWithContentsOfFile:(NSString *)file;
        - (ImmutableDictionary *)initWithContentsOfURL:(NSURL *)url;
        - (ImmutableDictionary *)initWithDictionary:(NSDictionary *)dictionary;
        - (ImmutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy;
        - (ImmutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
        - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary;
        - (NSEnumerator *)keyEnumerator;
        - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr;
        - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector;
        - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (id)objectForKey:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
        - (void)setWeakness:(CollectionWeakness)v;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface ImmutableSet : NSSet<ClassObject, Object, Set> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_ImmutableSet; @protected
            NSSet *__set;
            bool debugAutorelease;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            bool retrievesWeakValues;
            Int weakObjectCount;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSSet *__set;
        @property (nonatomic,readonly) NSArray *allObjects;
        @property (nonatomic,readonly) id anyObject;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) bool retrievesWeakValues;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassImmutableSet;
        - (NSSet *)__set;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (NSArray *)allObjects;
        - (id)anyObject;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate;
        - (ImmutableSet *)init;
        - (ImmutableSet *)initWithArray:(NSArray *)array;
        - (ImmutableSet *)initWithCoder:(NSCoder *)coder;
        - (ImmutableSet *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (ImmutableSet *)initWithSet:(NSSet *)set;
        - (ImmutableSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy;
        - (BOOL)intersectsSet:(NSSet *)set;
        - (BOOL)isEqualToSet:(NSSet *)set;
        - (BOOL)isSubsetOfSet:(NSSet *)set;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)member:(id)object;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        + (ImmutableSet *)set;
        - (NSSet *)setByAddingObject:(id)object;
        - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array;
        - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        + (ImmutableSet *)setWithArray:(NSArray *)array;
        + (ImmutableSet *)setWithObject:(id)object;
        + (ImmutableSet *)setWithSet:(NSSet *)set;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;

        @end





        @interface ModelArray : NSObject<ClassObject, ModelArray, Object> {
            NSArray *__array;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_ModelArray; @protected
            bool debugAutorelease;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSArray *__array;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) id lastObject;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSEnumerator *reverseObjectEnumerator;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassModelArray;
        - (NSArray *)__array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        + (ModelArray *)array;
        - (NSArray *)arrayByAddingObject:(id)object;
        - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array;
        + (ModelArray *)arrayWithArray:(NSArray *)array;
        + (ModelArray *)arrayWithContentsOfFile:(NSString *)file;
        + (ModelArray *)arrayWithContentsOfURL:(NSURL *)url;
        + (ModelArray *)arrayWithObject:(id)object;
        + (ModelArray *)arrayWithObjects:(id *)objects count:(Unsigned)count;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (NSString *)componentsJoinedByString:(NSString *)separator;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate;
        - (id)firstObjectCommonWithArray:(NSArray *)array;
        - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange;
        - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp;
        - (Unsigned)indexOfObject:(id)object;
        - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (ModelArray *)init;
        - (ModelArray *)initWithArray:(NSArray *)array;
        - (ModelArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy;
        - (ModelArray *)initWithCoder:(NSCoder *)coder;
        - (ModelArray *)initWithContentsOfFile:(NSString *)file;
        - (ModelArray *)initWithContentsOfURL:(NSURL *)url;
        - (ModelArray *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (BOOL)isEqualToArray:(NSArray *)array;
        - (id)lastObject;
        - (void)makeModel;
        - (void)makeNonModel;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (id)objectAtIndex:(Unsigned)index;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSArray *)objects;
        - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes;
        - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context;
        - (NSEnumerator *)reverseObjectEnumerator;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        - (NSData *)sortedArrayHint;
        - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint;
        - (NSArray *)sortedArrayUsingSelector:(SEL)selector;
        - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (NSArray *)subarrayWithRange:(NSRange)r;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface ModelDictionary : NSObject<ClassObject, ModelDictionary, Object> {
            NSDictionary *__dictionary;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_ModelDictionary; @protected
            bool debugAutorelease;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSDictionary *__dictionary;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSArray *allKeys;
        @property (nonatomic,readonly) NSArray *allValues;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptionInStringsFileFormat;
        @property (nonatomic,readonly) NSDate *fileCreationDate;
        @property (nonatomic,readonly) BOOL fileExtensionHidden;
        @property (nonatomic,readonly) NSNumber *fileGroupOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileGroupOwnerAccountName;
        @property (nonatomic,readonly) OSType fileHFSCreatorCode;
        @property (nonatomic,readonly) OSType fileHFSTypeCode;
        @property (nonatomic,readonly) BOOL fileIsAppendOnly;
        @property (nonatomic,readonly) BOOL fileIsImmutable;
        @property (nonatomic,readonly) NSDate *fileModificationDate;
        @property (nonatomic,readonly) NSNumber *fileOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileOwnerAccountName;
        @property (nonatomic,readonly) Unsigned filePosixPermissions;
        @property (nonatomic,readonly) ULL fileSize;
        @property (nonatomic,readonly) Unsigned fileSystemFileNumber;
        @property (nonatomic,readonly) Int fileSystemNumber;
        @property (nonatomic,readonly) NSString *fileType;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *keyEnumerator;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassModelDictionary;
        - (NSDictionary *)__dictionary;
        - (NSArray *)allKeys;
        - (NSArray *)allKeysForObject:(id)object;
        - (NSArray *)allValues;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptionInStringsFileFormat;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        + (ModelDictionary *)dictionary;
        + (ModelDictionary *)dictionaryWithContentsOfFile:(NSString *)file;
        + (ModelDictionary *)dictionaryWithContentsOfURL:(NSURL *)url;
        + (ModelDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary;
        + (ModelDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key;
        + (ModelDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (NSDate *)fileCreationDate;
        - (BOOL)fileExtensionHidden;
        - (NSNumber *)fileGroupOwnerAccountID;
        - (NSString *)fileGroupOwnerAccountName;
        - (OSType)fileHFSCreatorCode;
        - (OSType)fileHFSTypeCode;
        - (BOOL)fileIsAppendOnly;
        - (BOOL)fileIsImmutable;
        - (NSDate *)fileModificationDate;
        - (NSNumber *)fileOwnerAccountID;
        - (NSString *)fileOwnerAccountName;
        - (Unsigned)filePosixPermissions;
        - (ULL)fileSize;
        - (Unsigned)fileSystemFileNumber;
        - (Int)fileSystemNumber;
        - (NSString *)fileType;
        - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
        - (ModelDictionary *)init;
        - (ModelDictionary *)initWithCoder:(NSCoder *)coder;
        - (ModelDictionary *)initWithContentsOfFile:(NSString *)file;
        - (ModelDictionary *)initWithContentsOfURL:(NSURL *)url;
        - (ModelDictionary *)initWithDictionary:(NSDictionary *)dictionary;
        - (ModelDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy;
        - (ModelDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
        - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary;
        - (NSEnumerator *)keyEnumerator;
        - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr;
        - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector;
        - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)makeModel;
        - (void)makeNonModel;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (id)objectForKey:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
        - (void)setWeakness:(CollectionWeakness)v;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface ModelSet : NSObject<ClassObject, ModelSet, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_ModelSet; @protected
            NSSet *__set;
            bool debugAutorelease;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            bool retrievesWeakValues;
            Int weakObjectCount;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSSet *__set;
        @property (nonatomic,readonly) NSArray *allObjects;
        @property (nonatomic,readonly) id anyObject;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) bool retrievesWeakValues;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassModelSet;
        - (NSSet *)__set;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (NSArray *)allObjects;
        - (id)anyObject;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate;
        - (ModelSet *)init;
        - (ModelSet *)initWithArray:(NSArray *)array;
        - (ModelSet *)initWithCoder:(NSCoder *)coder;
        - (ModelSet *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (ModelSet *)initWithSet:(NSSet *)set;
        - (ModelSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy;
        - (BOOL)intersectsSet:(NSSet *)set;
        - (BOOL)isEqualToSet:(NSSet *)set;
        - (BOOL)isSubsetOfSet:(NSSet *)set;
        - (void)makeModel;
        - (void)makeNonModel;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)member:(id)object;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        + (ModelSet *)set;
        - (NSSet *)setByAddingObject:(id)object;
        - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array;
        - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        + (ModelSet *)setWithArray:(NSArray *)array;
        + (ModelSet *)setWithObject:(id)object;
        + (ModelSet *)setWithSet:(NSSet *)set;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;

        @end





        @interface MutableSet : NSMutableSet<ClassObject, MutableSet, Object> {
            NSMutableSet *__mutableSet;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableSet; @protected
            NSSet *__set;
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            bool retrievesWeakValues;
            Unsigned set_count;
            id100 set_objects;
            NSObject<MutableSetDelegate> *setDelegate;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSMutableSet *__mutableSet;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSSet *__set;
        @property (nonatomic,readonly) NSArray *allObjects;
        @property (nonatomic,readonly) id anyObject;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) bool retrievesWeakValues;
        @property (nonatomic,readwrite) Unsigned set_count;
        @property (nonatomic,readwrite) id100 set_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassMutableSet;
        - (NSMutableSet *)__mutableSet;
        - (NSSet *)__set;
        - (bool)_addObject:(id)object;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_filterUsingPredicate:(NSPredicate *)predicate;
        - (bool)_intersectSet:(NSSet *)set;
        - (bool)_minusSet:(NSSet *)set;
        - (bool)_removeAllObjects;
        - (bool)_removeObject:(id)object;
        - (bool)_setSet:(NSSet *)set;
        - (bool)_unionSet:(NSSet *)set;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (NSArray *)allObjects;
        - (id)anyObject;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (NSMutableSet *)getAndClear;
        - (Unsigned)hash;
        - (MutableSet *)init;
        - (MutableSet *)initWithArray:(NSArray *)array;
        - (MutableSet *)initWithCapacity:(Unsigned)numItems;
        - (MutableSet *)initWithCoder:(NSCoder *)coder;
        - (MutableSet *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (MutableSet *)initWithSet:(NSSet *)set;
        - (MutableSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy;
        - (void)intersectSet:(NSSet *)set;
        - (BOOL)intersectsSet:(NSSet *)set;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToSet:(NSSet *)set;
        - (BOOL)isSubsetOfSet:(NSSet *)set;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)member:(id)object;
        - (void)minusSet:(NSSet *)set;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)removeObject:(id)object;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        + (MutableSet *)set;
        - (NSSet *)setByAddingObject:(id)object;
        - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array;
        - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setSet:(NSSet *)set;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        + (MutableSet *)setWithArray:(NSArray *)array;
        + (id)setWithCapacity:(Unsigned)numItems;
        + (MutableSet *)setWithObject:(id)object;
        + (MutableSet *)setWithSet:(NSSet *)set;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)stateOK;
        - (void)unionSet:(NSSet *)set;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end





        @interface WeakMutableSet : NSMutableSet<ClassObject, MutableSet, Object, WeakCollection> {
            NSMutableSet *__mutableSet;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WeakMutableSet; @protected
            NSSet *__set;
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            bool retrievesWeakValues;
            Unsigned set_count;
            id100 set_objects;
            NSObject<MutableSetDelegate> *setDelegate;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSMutableSet *__mutableSet;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSSet *__set;
        @property (nonatomic,readonly) NSArray *allObjects;
        @property (nonatomic,readonly) id anyObject;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) bool retrievesWeakValues;
        @property (nonatomic,readwrite) Unsigned set_count;
        @property (nonatomic,readwrite) id100 set_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassWeakMutableSet;
        - (NSMutableSet *)__mutableSet;
        - (NSSet *)__set;
        - (bool)_addObject:(id)object;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_filterUsingPredicate:(NSPredicate *)predicate;
        - (bool)_intersectSet:(NSSet *)set;
        - (bool)_minusSet:(NSSet *)set;
        - (bool)_removeAllObjects;
        - (bool)_removeObject:(id)object;
        - (bool)_setSet:(NSSet *)set;
        - (bool)_unionSet:(NSSet *)set;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (NSArray *)allObjects;
        - (id)anyObject;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (NSMutableSet *)getAndClear;
        - (Unsigned)hash;
        - (WeakMutableSet *)init;
        - (WeakMutableSet *)initWithArray:(NSArray *)array;
        - (WeakMutableSet *)initWithCapacity:(Unsigned)numItems;
        - (WeakMutableSet *)initWithCoder:(NSCoder *)coder;
        - (WeakMutableSet *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (WeakMutableSet *)initWithSet:(NSSet *)set;
        - (WeakMutableSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy;
        - (void)intersectSet:(NSSet *)set;
        - (BOOL)intersectsSet:(NSSet *)set;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToSet:(NSSet *)set;
        - (BOOL)isSubsetOfSet:(NSSet *)set;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)member:(id)object;
        - (void)minusSet:(NSSet *)set;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)removeObject:(id)object;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        + (WeakMutableSet *)set;
        - (NSSet *)setByAddingObject:(id)object;
        - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array;
        - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setSet:(NSSet *)set;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        + (WeakMutableSet *)setWithArray:(NSArray *)array;
        + (id)setWithCapacity:(Unsigned)numItems;
        + (WeakMutableSet *)setWithObject:(id)object;
        + (WeakMutableSet *)setWithSet:(NSSet *)set;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)stateOK;
        - (void)unionSet:(NSSet *)set;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end
    #endif // INCLUDE_IFACE_D2

    #ifdef INCLUDE_IFACE_D3





        @interface CommitableMutableDictionary : NSMutableDictionary<ClassObject, CommitableCollection, MutableDictionary, Object> {
            NSDictionary *__dictionary;
            NSMutableDictionary *__mutableDictionary;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_CommitableMutableDictionary; @protected
            bool _doneStage;
            bool _isDirty;
            bool alwaysChangedIfSourceChanged;
            ULL commitFrame;
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            Unsigned dictionary_count;
            keyval100 dictionary_objects;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            Endpoint1 *v_dirtyInModel_endpoint;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            bool modelObjectHasChanged;
            Int modelRetaincount;
            bool noMOForNextRetain;
            LL objectIDInClass;
            LL objectIDInTotal;
            EndpointS *v_sinkCommitters;
            EndpointS *v_sourceCommitters;
            Int totalRetainCount;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSDictionary *__dictionary;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__mutableDictionary;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) bool _doneStage;
        @property (nonatomic,readwrite) bool _isDirty;
        @property (nonatomic,readonly) NSArray *allKeys;
        @property (nonatomic,readonly) NSArray *allValues;
        @property (nonatomic,readwrite) bool alwaysChangedIfSourceChanged;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) ULL commitFrame;
        @property (nonatomic,readonly) CommitStage commitStage;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptionInStringsFileFormat;
        @property (nonatomic,readwrite) Unsigned dictionary_count;
        @property (nonatomic,readwrite) keyval100 dictionary_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (nonatomic,readwrite) Model *dirtyInModel;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *dirtyInModel_endpoint;
        @property (nonatomic,readonly) bool doneStage;
        @property (nonatomic,readonly) NSDate *fileCreationDate;
        @property (nonatomic,readonly) BOOL fileExtensionHidden;
        @property (nonatomic,readonly) NSNumber *fileGroupOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileGroupOwnerAccountName;
        @property (nonatomic,readonly) OSType fileHFSCreatorCode;
        @property (nonatomic,readonly) OSType fileHFSTypeCode;
        @property (nonatomic,readonly) BOOL fileIsAppendOnly;
        @property (nonatomic,readonly) BOOL fileIsImmutable;
        @property (nonatomic,readonly) NSDate *fileModificationDate;
        @property (nonatomic,readonly) NSNumber *fileOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileOwnerAccountName;
        @property (nonatomic,readonly) Unsigned filePosixPermissions;
        @property (nonatomic,readonly) ULL fileSize;
        @property (nonatomic,readonly) Unsigned fileSystemFileNumber;
        @property (nonatomic,readonly) Int fileSystemNumber;
        @property (nonatomic,readonly) NSString *fileType;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isDirty;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *keyEnumerator;
        @property (nonatomic,readwrite) bool modelObjectHasChanged;
        @property (nonatomic,readonly) Int modelRetaincount;
        @property (nonatomic,readwrite) bool noMOForNextRetain;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) bool onlyOwnedByModels;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *sinkCommitters;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *sourceCommitters;
        @property (nonatomic,readonly) Int totalRetainCount;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassCommitableMutableDictionary;
        - (NSDictionary *)__dictionary;
        - (NSMutableDictionary *)__mutableDictionary;
        - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectForKey:(id<NSCopying> )key;
        - (bool)_removeObjectsForKeys:(NSArray *)keys;
        - (bool)_setDictionary:(NSDictionary *)dictionary;
        - (bool)_setObject:(id)object forKey:(id<NSCopying> )key;
        - (bool)_setValue:(id)object forKey:(NSString *)key;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (void)addSinkCommitter:(NSObject<Commitable> *)v;
        - (void)addSourceCommitter:(NSObject<Commitable> *)v;
        - (NSArray *)allKeys;
        - (NSArray *)allKeysForObject:(id)object;
        - (NSArray *)allValues;
        - (constchar *)cdescription;
        - (void)cleanupCommit;
        - (constchar *)cobjectName;
        - (void)commit;
        - (Int)commitProperties:(Int)substageIndex;
        - (CommitStage)commitStage;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSString *)descriptionInStringsFileFormat;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        + (CommitableMutableDictionary *)dictionary;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        + (id)dictionaryWithCapacity:(Unsigned)numItems;
        + (CommitableMutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file;
        + (CommitableMutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url;
        + (CommitableMutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary;
        + (CommitableMutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key;
        + (CommitableMutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
        - (void)didCommit;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (Model *)dirtyInModel;
        - (Endpoint1 *)dirtyInModel_endpoint;
        - (NSObject<LinkEndpoint> *)dirtyInModelToEndpoint:(id)adirtyInModel;
        - (bool)doneStage;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (NSDate *)fileCreationDate;
        - (BOOL)fileExtensionHidden;
        - (NSNumber *)fileGroupOwnerAccountID;
        - (NSString *)fileGroupOwnerAccountName;
        - (OSType)fileHFSCreatorCode;
        - (OSType)fileHFSTypeCode;
        - (BOOL)fileIsAppendOnly;
        - (BOOL)fileIsImmutable;
        - (NSDate *)fileModificationDate;
        - (NSNumber *)fileOwnerAccountID;
        - (NSString *)fileOwnerAccountName;
        - (Unsigned)filePosixPermissions;
        - (ULL)fileSize;
        - (Unsigned)fileSystemFileNumber;
        - (Int)fileSystemNumber;
        - (NSString *)fileType;
        - (void)finishCommit;
        - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
        - (Unsigned)hash;
        - (CommitableMutableDictionary *)init;
        - (CommitableMutableDictionary *)initWithCapacity:(Unsigned)numItems;
        - (CommitableMutableDictionary *)initWithCoder:(NSCoder *)coder;
        - (CommitableMutableDictionary *)initWithContentsOfFile:(NSString *)file;
        - (CommitableMutableDictionary *)initWithContentsOfURL:(NSURL *)url;
        - (CommitableMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary;
        - (CommitableMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy;
        - (CommitableMutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
        - (NSNumber *)isAcceptableDirtyInModel:(id)adirtyInModel;
        - (NSNumber *)isAcceptableSinkCommitter:(id)asinkCommitter;
        - (NSNumber *)isAcceptableSourceCommitter:(id)asourceCommitter;
        - (bool)isDirty;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary;
        - (NSEnumerator *)keyEnumerator;
        - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr;
        - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector;
        - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)markDirty;
        - (void)modeladd;
        - (void)modelautorelease;
        - (void)modelrelease;
        - (id)modelretain;
        - (void)modelsub;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (id)objectForKey:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
        - (bool)onlyOwnedByModels;
        - (void)removeAllObjects;
        - (void)removeAllSinkCommitters;
        - (void)removeAllSourceCommitters;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)removeObjectForKey:(id<NSCopying> )key;
        - (void)removeObjectsForKeys:(NSArray *)keys;
        - (void)removeSinkCommitter:(NSObject<Commitable> *)v;
        - (void)removeSourceCommitter:(NSObject<Commitable> *)v;
        - (void)retract;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setDictionary:(NSDictionary *)dictionary;
        - (void)setDirtyInModel:(Model *)v;
        - (void)setDirtyInModel_endpoint:(Endpoint1 *)v;
        - (void)setObject:(id)object forKey:(id<NSCopying> )key;
        - (void)setSinkCommitters:(EndpointS *)v;
        - (void)setSourceCommitters:(EndpointS *)v;
        - (void)setValue:(id)object forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (EndpointS *)sinkCommitters;
        - (NSObject<LinkEndpoint> *)sinkCommitterToEndpoint:(id)asinkCommitter;
        - (EndpointS *)sourceCommitters;
        - (NSObject<LinkEndpoint> *)sourceCommitterToEndpoint:(id)asourceCommitter;
        - (void)startCommit;
        - (void)stateOK;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willCommit;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface MutableArray : NSMutableArray<ClassObject, MutableArray, Object> {
            NSArray *__array;
            NSMutableArray *__mutableArray;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableArray; @protected
            Unsigned array_count;
            id100 array_objects;
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSArray *__array;
        @property (strong,nonatomic,readonly) NSMutableArray *__mutableArray;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Unsigned array_count;
        @property (nonatomic,readwrite) id100 array_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) id lastObject;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSEnumerator *reverseObjectEnumerator;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassMutableArray;
        - (NSArray *)__array;
        - (NSMutableArray *)__mutableArray;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_insertObject:(id)object atIndex:(Unsigned)index;
        - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectAtIndex:(Unsigned)index;
        - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)allObjectsMoved;
        + (MutableArray *)array;
        - (NSArray *)arrayByAddingObject:(id)object;
        - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        + (MutableArray *)arrayWithArray:(NSArray *)array;
        + (id)arrayWithCapacity:(Unsigned)numItems;
        + (MutableArray *)arrayWithContentsOfFile:(NSString *)file;
        + (MutableArray *)arrayWithContentsOfURL:(NSURL *)url;
        + (MutableArray *)arrayWithObject:(id)object;
        + (MutableArray *)arrayWithObjects:(id *)objects count:(Unsigned)count;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (NSString *)componentsJoinedByString:(NSString *)separator;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi;
        - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (id)firstObjectCommonWithArray:(NSArray *)array;
        - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange;
        - (Unsigned)hash;
        - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp;
        - (Unsigned)indexOfObject:(id)object;
        - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (MutableArray *)init;
        - (MutableArray *)initWithArray:(NSArray *)array;
        - (MutableArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy;
        - (MutableArray *)initWithCapacity:(Unsigned)numItems;
        - (MutableArray *)initWithCoder:(NSCoder *)coder;
        - (MutableArray *)initWithContentsOfFile:(NSString *)file;
        - (MutableArray *)initWithContentsOfURL:(NSURL *)url;
        - (MutableArray *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (void)insertObject:(id)object atIndex:(Unsigned)index;
        - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToArray:(NSArray *)array;
        - (id)lastObject;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (id)objectAtIndex:(Unsigned)index;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSArray *)objects;
        - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)removeLastObject;
        - (void)removeObjectAtIndex:(Unsigned)index;
        - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (NSEnumerator *)reverseObjectEnumerator;
        - (void)setArray:(NSArray *)array;
        - (void)setDelegateForArray:(NSArray *)v;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSData *)sortedArrayHint;
        - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint;
        - (NSArray *)sortedArrayUsingSelector:(SEL)selector;
        - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)sortUsingComparator:(NSComparator)cmptr;
        - (void)sortUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context;
        - (void)sortUsingSelector:(SEL)selector;
        - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)stateOK;
        - (NSArray *)subarrayWithRange:(NSRange)r;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface MutableDictionary : NSMutableDictionary<ClassObject, MutableDictionary, Object> {
            NSDictionary *__dictionary;
            NSMutableDictionary *__mutableDictionary;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableDictionary; @protected
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            Unsigned dictionary_count;
            keyval100 dictionary_objects;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSDictionary *__dictionary;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__mutableDictionary;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSArray *allKeys;
        @property (nonatomic,readonly) NSArray *allValues;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptionInStringsFileFormat;
        @property (nonatomic,readwrite) Unsigned dictionary_count;
        @property (nonatomic,readwrite) keyval100 dictionary_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (nonatomic,readonly) NSDate *fileCreationDate;
        @property (nonatomic,readonly) BOOL fileExtensionHidden;
        @property (nonatomic,readonly) NSNumber *fileGroupOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileGroupOwnerAccountName;
        @property (nonatomic,readonly) OSType fileHFSCreatorCode;
        @property (nonatomic,readonly) OSType fileHFSTypeCode;
        @property (nonatomic,readonly) BOOL fileIsAppendOnly;
        @property (nonatomic,readonly) BOOL fileIsImmutable;
        @property (nonatomic,readonly) NSDate *fileModificationDate;
        @property (nonatomic,readonly) NSNumber *fileOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileOwnerAccountName;
        @property (nonatomic,readonly) Unsigned filePosixPermissions;
        @property (nonatomic,readonly) ULL fileSize;
        @property (nonatomic,readonly) Unsigned fileSystemFileNumber;
        @property (nonatomic,readonly) Int fileSystemNumber;
        @property (nonatomic,readonly) NSString *fileType;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *keyEnumerator;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassMutableDictionary;
        - (NSDictionary *)__dictionary;
        - (NSMutableDictionary *)__mutableDictionary;
        - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectForKey:(id<NSCopying> )key;
        - (bool)_removeObjectsForKeys:(NSArray *)keys;
        - (bool)_setDictionary:(NSDictionary *)dictionary;
        - (bool)_setObject:(id)object forKey:(id<NSCopying> )key;
        - (bool)_setValue:(id)object forKey:(NSString *)key;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (NSArray *)allKeys;
        - (NSArray *)allKeysForObject:(id)object;
        - (NSArray *)allValues;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSString *)descriptionInStringsFileFormat;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        + (MutableDictionary *)dictionary;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        + (id)dictionaryWithCapacity:(Unsigned)numItems;
        + (MutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file;
        + (MutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url;
        + (MutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary;
        + (MutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key;
        + (MutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (NSDate *)fileCreationDate;
        - (BOOL)fileExtensionHidden;
        - (NSNumber *)fileGroupOwnerAccountID;
        - (NSString *)fileGroupOwnerAccountName;
        - (OSType)fileHFSCreatorCode;
        - (OSType)fileHFSTypeCode;
        - (BOOL)fileIsAppendOnly;
        - (BOOL)fileIsImmutable;
        - (NSDate *)fileModificationDate;
        - (NSNumber *)fileOwnerAccountID;
        - (NSString *)fileOwnerAccountName;
        - (Unsigned)filePosixPermissions;
        - (ULL)fileSize;
        - (Unsigned)fileSystemFileNumber;
        - (Int)fileSystemNumber;
        - (NSString *)fileType;
        - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
        - (Unsigned)hash;
        - (MutableDictionary *)init;
        - (MutableDictionary *)initWithCapacity:(Unsigned)numItems;
        - (MutableDictionary *)initWithCoder:(NSCoder *)coder;
        - (MutableDictionary *)initWithContentsOfFile:(NSString *)file;
        - (MutableDictionary *)initWithContentsOfURL:(NSURL *)url;
        - (MutableDictionary *)initWithDictionary:(NSDictionary *)dictionary;
        - (MutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy;
        - (MutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary;
        - (NSEnumerator *)keyEnumerator;
        - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr;
        - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector;
        - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (id)objectForKey:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)removeObjectForKey:(id<NSCopying> )key;
        - (void)removeObjectsForKeys:(NSArray *)keys;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setDictionary:(NSDictionary *)dictionary;
        - (void)setObject:(id)object forKey:(id<NSCopying> )key;
        - (void)setValue:(id)object forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface WeakMutableArray : NSMutableArray<ClassObject, MutableArray, Object, WeakCollection> {
            NSArray *__array;
            NSMutableArray *__mutableArray;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WeakMutableArray; @protected
            Unsigned array_count;
            id100 array_objects;
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSArray *__array;
        @property (strong,nonatomic,readonly) NSMutableArray *__mutableArray;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Unsigned array_count;
        @property (nonatomic,readwrite) id100 array_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) id lastObject;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSEnumerator *reverseObjectEnumerator;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassWeakMutableArray;
        - (NSArray *)__array;
        - (NSMutableArray *)__mutableArray;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_insertObject:(id)object atIndex:(Unsigned)index;
        - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectAtIndex:(Unsigned)index;
        - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)allObjectsMoved;
        + (WeakMutableArray *)array;
        - (NSArray *)arrayByAddingObject:(id)object;
        - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        + (WeakMutableArray *)arrayWithArray:(NSArray *)array;
        + (id)arrayWithCapacity:(Unsigned)numItems;
        + (WeakMutableArray *)arrayWithContentsOfFile:(NSString *)file;
        + (WeakMutableArray *)arrayWithContentsOfURL:(NSURL *)url;
        + (WeakMutableArray *)arrayWithObject:(id)object;
        + (WeakMutableArray *)arrayWithObjects:(id *)objects count:(Unsigned)count;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (NSString *)componentsJoinedByString:(NSString *)separator;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi;
        - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (id)firstObjectCommonWithArray:(NSArray *)array;
        - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange;
        - (Unsigned)hash;
        - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp;
        - (Unsigned)indexOfObject:(id)object;
        - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (WeakMutableArray *)init;
        - (WeakMutableArray *)initWithArray:(NSArray *)array;
        - (WeakMutableArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy;
        - (WeakMutableArray *)initWithCapacity:(Unsigned)numItems;
        - (WeakMutableArray *)initWithCoder:(NSCoder *)coder;
        - (WeakMutableArray *)initWithContentsOfFile:(NSString *)file;
        - (WeakMutableArray *)initWithContentsOfURL:(NSURL *)url;
        - (WeakMutableArray *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (void)insertObject:(id)object atIndex:(Unsigned)index;
        - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToArray:(NSArray *)array;
        - (id)lastObject;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (id)objectAtIndex:(Unsigned)index;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSArray *)objects;
        - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)removeLastObject;
        - (void)removeObjectAtIndex:(Unsigned)index;
        - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (NSEnumerator *)reverseObjectEnumerator;
        - (void)setArray:(NSArray *)array;
        - (void)setDelegateForArray:(NSArray *)v;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSData *)sortedArrayHint;
        - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint;
        - (NSArray *)sortedArrayUsingSelector:(SEL)selector;
        - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)sortUsingComparator:(NSComparator)cmptr;
        - (void)sortUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context;
        - (void)sortUsingSelector:(SEL)selector;
        - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)stateOK;
        - (NSArray *)subarrayWithRange:(NSRange)r;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface WeakMutableDictionary : NSMutableDictionary<ClassObject, MutableDictionary, Object, WeakCollection> {
            NSDictionary *__dictionary;
            NSMutableDictionary *__mutableDictionary;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WeakMutableDictionary; @protected
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            Unsigned dictionary_count;
            keyval100 dictionary_objects;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSDictionary *__dictionary;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__mutableDictionary;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSArray *allKeys;
        @property (nonatomic,readonly) NSArray *allValues;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptionInStringsFileFormat;
        @property (nonatomic,readwrite) Unsigned dictionary_count;
        @property (nonatomic,readwrite) keyval100 dictionary_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (nonatomic,readonly) NSDate *fileCreationDate;
        @property (nonatomic,readonly) BOOL fileExtensionHidden;
        @property (nonatomic,readonly) NSNumber *fileGroupOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileGroupOwnerAccountName;
        @property (nonatomic,readonly) OSType fileHFSCreatorCode;
        @property (nonatomic,readonly) OSType fileHFSTypeCode;
        @property (nonatomic,readonly) BOOL fileIsAppendOnly;
        @property (nonatomic,readonly) BOOL fileIsImmutable;
        @property (nonatomic,readonly) NSDate *fileModificationDate;
        @property (nonatomic,readonly) NSNumber *fileOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileOwnerAccountName;
        @property (nonatomic,readonly) Unsigned filePosixPermissions;
        @property (nonatomic,readonly) ULL fileSize;
        @property (nonatomic,readonly) Unsigned fileSystemFileNumber;
        @property (nonatomic,readonly) Int fileSystemNumber;
        @property (nonatomic,readonly) NSString *fileType;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *keyEnumerator;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassWeakMutableDictionary;
        - (NSDictionary *)__dictionary;
        - (NSMutableDictionary *)__mutableDictionary;
        - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectForKey:(id<NSCopying> )key;
        - (bool)_removeObjectsForKeys:(NSArray *)keys;
        - (bool)_setDictionary:(NSDictionary *)dictionary;
        - (bool)_setObject:(id)object forKey:(id<NSCopying> )key;
        - (bool)_setValue:(id)object forKey:(NSString *)key;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (NSArray *)allKeys;
        - (NSArray *)allKeysForObject:(id)object;
        - (NSArray *)allValues;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSString *)descriptionInStringsFileFormat;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        + (WeakMutableDictionary *)dictionary;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        + (id)dictionaryWithCapacity:(Unsigned)numItems;
        + (WeakMutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file;
        + (WeakMutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url;
        + (WeakMutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary;
        + (WeakMutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key;
        + (WeakMutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (NSDate *)fileCreationDate;
        - (BOOL)fileExtensionHidden;
        - (NSNumber *)fileGroupOwnerAccountID;
        - (NSString *)fileGroupOwnerAccountName;
        - (OSType)fileHFSCreatorCode;
        - (OSType)fileHFSTypeCode;
        - (BOOL)fileIsAppendOnly;
        - (BOOL)fileIsImmutable;
        - (NSDate *)fileModificationDate;
        - (NSNumber *)fileOwnerAccountID;
        - (NSString *)fileOwnerAccountName;
        - (Unsigned)filePosixPermissions;
        - (ULL)fileSize;
        - (Unsigned)fileSystemFileNumber;
        - (Int)fileSystemNumber;
        - (NSString *)fileType;
        - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
        - (Unsigned)hash;
        - (WeakMutableDictionary *)init;
        - (WeakMutableDictionary *)initWithCapacity:(Unsigned)numItems;
        - (WeakMutableDictionary *)initWithCoder:(NSCoder *)coder;
        - (WeakMutableDictionary *)initWithContentsOfFile:(NSString *)file;
        - (WeakMutableDictionary *)initWithContentsOfURL:(NSURL *)url;
        - (WeakMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary;
        - (WeakMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy;
        - (WeakMutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary;
        - (NSEnumerator *)keyEnumerator;
        - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr;
        - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector;
        - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (id)objectForKey:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)removeObjectForKey:(id<NSCopying> )key;
        - (void)removeObjectsForKeys:(NSArray *)keys;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setDictionary:(NSDictionary *)dictionary;
        - (void)setObject:(id)object forKey:(id<NSCopying> )key;
        - (void)setValue:(id)object forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end
    #endif // INCLUDE_IFACE_D3

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: c





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         CommitableMutableDictionary
    #define _WIClass_           CommitableMutableDictionary__
    #define _className_         commitableMutableDictionary
    #define _Class_             CommitableMutableDictionary__
    @implementation CommitableMutableDictionary

    @synthesize __owner_context = __owner_context;
    @synthesize _doneStage = _doneStage;
    @synthesize _isDirty = _isDirty;
    @synthesize alwaysChangedIfSourceChanged = alwaysChangedIfSourceChanged;
    @synthesize commitFrame = commitFrame;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize dictionary_count = dictionary_count;
    @synthesize dictionary_objects = dictionary_objects;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize modelObjectHasChanged = modelObjectHasChanged;
    @synthesize modelRetaincount = modelRetaincount;
    @synthesize noMOForNextRetain = noMOForNextRetain;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize totalRetainCount = totalRetainCount;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassCommitableMutableDictionary {
        MSGSTART("CommitableMutableDictionary:-(void)_startObjectOfClassCommitableMutableDictionary")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ _isDirty = (NO);
        /*ivar*/ noMOForNextRetain = (NO);
        /*ivar*/ commitFrame = (1);
        /*ivar*/ _doneStage = (NO);
        /*ivar*/ v_sinkCommitters = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSinkCommitter:) otherEndObjectToEndpoint:@selector(sinkCommitterToEndpoint:)]);  ADDOWNER(v_sinkCommitters,self);
        /*ivar*/ v_dirtyInModel_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableDirtyInModel:) otherEndObjectToEndpoint:@selector(dirtyInModelToEndpoint:)]);  ADDOWNER(v_dirtyInModel_endpoint,self);
        /*ivar*/ version = (1);
        /*ivar*/ totalRetainCount = (1);
        /*ivar*/ v_sourceCommitters = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSourceCommitter:) otherEndObjectToEndpoint:@selector(sourceCommitterToEndpoint:)]);  ADDOWNER(v_sourceCommitters,self);

        /*i0*/ self.delegateForDictionary = self;
    }
    - (NSDictionary *)__dictionary {
        MSGSTART("CommitableMutableDictionary:-(NSDictionary*)__dictionary")

        /*i-999*/ NSDictionary * ret = __dictionary;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__mutableDictionary {
        MSGSTART("CommitableMutableDictionary:-(NSMutableDictionary*)__mutableDictionary")

        /*i-999*/ NSMutableDictionary * ret = __mutableDictionary;
        /*i999*/ return ret;
    }
    - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("CommitableMutableDictionary:-(bool)_addEntriesFromDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        for (id<NSCopying> key in dictionary) {
            if ([self _setObject:[dictionary objectForKey:key] forKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("CommitableMutableDictionary:-(bool)_removeAllObjects")

        if (!__dictionary.count) return NO;

        NSDictionary *was = __dictionary.copy;
        for (id<NSCopying> key in was) {
            [self willReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        weakObjectCount = 0;
        [__mutableDictionary removeAllObjects];
        for (id<NSCopying> key in was) {
            [self didReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        return YES;
    }
    - (bool)_removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("CommitableMutableDictionary:-(bool)_removeObjectForKey:(id<NSCopying>)key")

        NSObject * object = [__dictionary objectForKey:key];
        if (!object) return NO;

        [self willReplaceObject:object withObject:nil forKey:key];
        if ([object isWeakSelf]) --weakObjectCount;
        [__mutableDictionary removeObjectForKey:key];
        [self didReplaceObject:object withObject:nil forKey:key];
        return YES;
    }
    - (bool)_removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("CommitableMutableDictionary:-(bool)_removeObjectsForKeys:(NSArray*)keys")

        bool ret = NO;
        for (id<NSCopying> key in keys) {
            if ([self _removeObjectForKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_setDictionary:(NSDictionary *)dictionary {
        MSGSTART("CommitableMutableDictionary:-(bool)_setDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        NSMutableArray *toRemove = nil;
        for (id<NSCopying> key in __dictionary) {
            if (![dictionary objectForKey:key]) {
                if (!toRemove) toRemove = [[MutableArray alloc] initWithCapacity:dictionary.count];
                [toRemove addObject:key];
            }
        }
        if (toRemove) {
            ret = YES;
            for (id<NSCopying> key in toRemove) {
                [self _removeObjectForKey:key];
            }
        }
        if ([self _addEntriesFromDictionary:dictionary]) ret = YES;
        return ret;
    }
    - (bool)_setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("CommitableMutableDictionary:-(bool)_setObject:(id)object forKey:(id<NSCopying>)key")

        if (!object) return [self _removeObjectForKey:key];

        id was = [__dictionary objectForKey:key];
        if (was == object) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (bool)_setValue:(id)object forKey:(NSString *)key {
        MSGSTART("CommitableMutableDictionary:-(bool)_setValue:(id)object forKey:(NSString*)key")

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        id was = [__dictionary valueForKey:key];
        if (was == object) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("CommitableMutableDictionary:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (void)addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("CommitableMutableDictionary:-(void)addEntriesFromDictionary:(NSDictionary*)dictionary")

        if ([self _addEntriesFromDictionary:dictionary]) [self stateOK];
    }
    - (void)addSinkCommitter:(NSObject<Commitable> *)v {
        MSGSTART("CommitableMutableDictionary:-(void)addSinkCommitter:(NSObject<Commitable>*)v")
        [v_sinkCommitters addObject : v];
    }
    - (void)addSourceCommitter:(NSObject<Commitable> *)v {
        MSGSTART("CommitableMutableDictionary:-(void)addSourceCommitter:(NSObject<Commitable>*)v")
        [v_sourceCommitters addObject : v];
    }
    - (NSArray *)allKeys {
        MSGSTART("CommitableMutableDictionary:-(NSArray*)allKeys")
        return [__dictionary allKeys];
    }
    - (NSArray *)allKeysForObject:(id)object {
        MSGSTART("CommitableMutableDictionary:-(NSArray*)allKeysForObject:(id)object")
        return [__dictionary allKeysForObject:object];
    }
    - (NSArray *)allValues {
        MSGSTART("CommitableMutableDictionary:-(NSArray*)allValues")
        return [__dictionary allValues];
    }
    - (constchar *)cdescription {
        MSGSTART("CommitableMutableDictionary:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)cleanupCommit {
        MSGSTART("CommitableMutableDictionary:-(void)cleanupCommit")

        modelObjectHasChanged = NO;
    }
    - (constchar *)cobjectName {
        MSGSTART("CommitableMutableDictionary:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)commit {
        MSGSTART("CommitableMutableDictionary:-(void)commit")
    }
    - (Int)commitProperties:(Int)substageIndex {
        MSGSTART("CommitableMutableDictionary:-(Int)commitProperties:(Int)substageIndex")

        /*i-999*/ Int implementedStages = 1
            /*i-990*/;

        /*i-5*/ switch (substageIndex) {
            case 0:
                modelObjectHasChanged = alwaysChangedIfSourceChanged; {
                    /*i0*/ modelObjectHasChanged = YES;

                    /*i5*/}
                break;

            case 1: {
                /*i15*/}
                       break;

            case 2: {
                /*i25*/}
                       break;

            case 3: {
                /*i35*/}
                       break;

            case 4: {
                /*i45*/}
                       break;

            case 5: {
                /*i55*/}
                       break;

            case 6: {
                /*i65*/}
                       break;

            case 7: {
                /*i75*/}
                       break;

            case 8: {
                /*i85*/}
                       break;

            case 9: {
                /*i95*/}
                       break;

            case 10: {
                /*i105*/}

            default: break;
        }

        /*i900*/ Int ret; for (ret = substageIndex + 1; (ret <= 10) && !(implementedStages & shiftOne[ret]); ret++) {
        }
        if (ret > 10) {
            ret = -1;

            /*i910*/ if (modelObjectHasChanged) version++;

            /*i950*/}

        /*i999*/ return (ret < 0) || (ret > 10) ? -1 : ret;
    }
    - (CommitStage)commitStage {
        MSGSTART("CommitableMutableDictionary:-(CommitStage)commitStage")
        return [Model getDefault].commitStage;
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("CommitableMutableDictionary:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (Unsigned)count {
        MSGSTART("CommitableMutableDictionary:-(Unsigned)count")
        return [__dictionary count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("CommitableMutableDictionary:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        Unsigned ret = [__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
        return ret;
    }
    - (void)countWeakObjects {
        MSGSTART("CommitableMutableDictionary:-(void)countWeakObjects")

        Int c = 0;
        for (kid o in __dictionary) {
            if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("CommitableMutableDictionary:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ if ( modelRetaincount && (totalRetainCount == modelRetaincount) )
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];




        __mutableDictionary = nil;

        dictionaryDelegate = nil;

        __dictionary = nil;

        REMOVEOWNER(v_sinkCommitters,self); v_sinkCommitters = nil;

        REMOVEOWNER(v_dirtyInModel_endpoint,self); v_dirtyInModel_endpoint = nil;

        REMOVEOWNER(v_sourceCommitters,self); v_sourceCommitters = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("CommitableMutableDictionary:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("CommitableMutableDictionary:-(void)delegateForDictionaryChanged")
    }
    - (NSString *)description {
        MSGSTART("CommitableMutableDictionary:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__dictionary description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionInStringsFileFormat {
        MSGSTART("CommitableMutableDictionary:-(NSString*)descriptionInStringsFileFormat")
        return [__dictionary descriptionInStringsFileFormat];
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("CommitableMutableDictionary:-(NSString *)descriptionWithLocale:(id)locale")

        return [__dictionary descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("CommitableMutableDictionary:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [__dictionary descriptionWithLocale:locale indent:level];
    }
    + (CommitableMutableDictionary *)dictionary {
        MSGSTART("CommitableMutableDictionary:+(CommitableMutableDictionary*)dictionary")
        return [[CommitableMutableDictionary alloc] init];
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("CommitableMutableDictionary:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    + (id)dictionaryWithCapacity:(Unsigned)numItems {
        MSGSTART("CommitableMutableDictionary:+(id)dictionaryWithCapacity:(Unsigned)numItems")

        return [[CommitableMutableDictionary alloc] initWithCapacity:numItems];
    }
    + (CommitableMutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file {
        MSGSTART("CommitableMutableDictionary:+(CommitableMutableDictionary*)dictionaryWithContentsOfFile:(NSString*)file")
        return [[CommitableMutableDictionary alloc] initWithContentsOfFile:file];
    }
    + (CommitableMutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url {
        MSGSTART("CommitableMutableDictionary:+(CommitableMutableDictionary*)dictionaryWithContentsOfURL:(NSURL*)url")
        return [[CommitableMutableDictionary alloc] initWithContentsOfURL:url];
    }
    + (CommitableMutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("CommitableMutableDictionary:+(CommitableMutableDictionary*)dictionaryWithDictionary:(NSDictionary*)dictionary")
        return [[CommitableMutableDictionary alloc] initWithDictionary:dictionary];
    }
    + (CommitableMutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("CommitableMutableDictionary:+(CommitableMutableDictionary*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
        return [[CommitableMutableDictionary alloc] initWithObjects:&object forKeys:&key count:1];
    }
    + (CommitableMutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("CommitableMutableDictionary:+(CommitableMutableDictionary*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
        return [[CommitableMutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
    }
    - (void)didCommit {
        MSGSTART("CommitableMutableDictionary:-(void)didCommit")
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("CommitableMutableDictionary:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")


        /*i100*/[dictionaryDelegate didReplaceObject : fromObject withObject : toObject forKey : key];
    }
    - (void)die {
        MSGSTART("CommitableMutableDictionary:-(void)die")

        [v_sinkCommitters removeAllObjects];
        [v_sourceCommitters removeAllObjects];
        self.dirtyInModel = nil;
        /*i900*/}
    - (Model *)dirtyInModel {
        MSGSTART("CommitableMutableDictionary:-(Model*)dirtyInModel")
        return (Model *)v_dirtyInModel_endpoint.value;
    }
    - (Endpoint1 *)dirtyInModel_endpoint {
        MSGSTART("CommitableMutableDictionary:-(Endpoint1*)dirtyInModel_endpoint")

        /*i-999*/ Endpoint1 * ret = v_dirtyInModel_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)dirtyInModelToEndpoint:(id)adirtyInModel {
        MSGSTART("CommitableMutableDictionary:-(NSObject<LinkEndpoint>*)dirtyInModelToEndpoint:(id)adirtyInModel")
        return [adirtyInModel performSelector:@selector(dirtyObjects)];
    }
    - (bool)doneStage {
        MSGSTART("CommitableMutableDictionary:-(bool)doneStage")
        return _doneStage;
    }
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("CommitableMutableDictionary:-(void)encodeWithCoder:(NSCoder*)coder")

        [__dictionary encodeWithCoder : coder];
    }
    - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("CommitableMutableDictionary:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsUsingBlock : block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("CommitableMutableDictionary:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsWithOptions : opts usingBlock : block];
    }
    - (NSDate *)fileCreationDate {
        MSGSTART("CommitableMutableDictionary:-(NSDate*)fileCreationDate")
        return [__dictionary fileCreationDate];
    }
    - (BOOL)fileExtensionHidden {
        MSGSTART("CommitableMutableDictionary:-(BOOL)fileExtensionHidden")
        return [__dictionary fileExtensionHidden];
    }
    - (NSNumber *)fileGroupOwnerAccountID {
        MSGSTART("CommitableMutableDictionary:-(NSNumber*)fileGroupOwnerAccountID")
        return [__dictionary fileGroupOwnerAccountID];
    }
    - (NSString *)fileGroupOwnerAccountName {
        MSGSTART("CommitableMutableDictionary:-(NSString*)fileGroupOwnerAccountName")
        return [__dictionary fileGroupOwnerAccountName];
    }
    - (OSType)fileHFSCreatorCode {
        MSGSTART("CommitableMutableDictionary:-(OSType)fileHFSCreatorCode")
        return [__dictionary fileHFSCreatorCode];
    }
    - (OSType)fileHFSTypeCode {
        MSGSTART("CommitableMutableDictionary:-(OSType)fileHFSTypeCode")
        return [__dictionary fileHFSTypeCode];
    }
    - (BOOL)fileIsAppendOnly {
        MSGSTART("CommitableMutableDictionary:-(BOOL)fileIsAppendOnly")
        return [__dictionary fileIsAppendOnly];
    }
    - (BOOL)fileIsImmutable {
        MSGSTART("CommitableMutableDictionary:-(BOOL)fileIsImmutable")
        return [__dictionary fileIsImmutable];
    }
    - (NSDate *)fileModificationDate {
        MSGSTART("CommitableMutableDictionary:-(NSDate*)fileModificationDate")
        return [__dictionary fileModificationDate];
    }
    - (NSNumber *)fileOwnerAccountID {
        MSGSTART("CommitableMutableDictionary:-(NSNumber*)fileOwnerAccountID")
        return [__dictionary fileOwnerAccountID];
    }
    - (NSString *)fileOwnerAccountName {
        MSGSTART("CommitableMutableDictionary:-(NSString*)fileOwnerAccountName")
        return [__dictionary fileOwnerAccountName];
    }
    - (Unsigned)filePosixPermissions {
        MSGSTART("CommitableMutableDictionary:-(Unsigned)filePosixPermissions")
        return [__dictionary filePosixPermissions];
    }
    - (ULL)fileSize {
        MSGSTART("CommitableMutableDictionary:-(ULL)fileSize")
        return [__dictionary fileSize];
    }
    - (Unsigned)fileSystemFileNumber {
        MSGSTART("CommitableMutableDictionary:-(Unsigned)fileSystemFileNumber")
        return [__dictionary fileSystemFileNumber];
    }
    - (Int)fileSystemNumber {
        MSGSTART("CommitableMutableDictionary:-(Int)fileSystemNumber")
        return [__dictionary fileSystemNumber];
    }
    - (NSString *)fileType {
        MSGSTART("CommitableMutableDictionary:-(NSString*)fileType")
        return [__dictionary fileType];
    }
    - (void)finishCommit {
        MSGSTART("CommitableMutableDictionary:-(void)finishCommit")
    }
    - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        MSGSTART("CommitableMutableDictionary:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

        [__dictionary getObjects : objects andKeys : keys];
    }
    - (Unsigned)hash {
        MSGSTART("CommitableMutableDictionary:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (CommitableMutableDictionary *)init {
        MSGSTART("CommitableMutableDictionary:-(CommitableMutableDictionary*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassCommitableMutableDictionary];

/*i10001*/ return self;
    }
    - (CommitableMutableDictionary *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("CommitableMutableDictionary:-(CommitableMutableDictionary*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassCommitableMutableDictionary];

/*i10001*/ return self;
    }
    - (CommitableMutableDictionary *)initWithCoder:(NSCoder *)coder {
        MSGSTART("CommitableMutableDictionary:-(CommitableMutableDictionary*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassCommitableMutableDictionary];

/*i10001*/ return self;
    }
    - (CommitableMutableDictionary *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("CommitableMutableDictionary:-(CommitableMutableDictionary*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassCommitableMutableDictionary];

/*i10001*/ return self;
    }
    - (CommitableMutableDictionary *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("CommitableMutableDictionary:-(CommitableMutableDictionary*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassCommitableMutableDictionary];

/*i10001*/ return self;
    }
    - (CommitableMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("CommitableMutableDictionary:-(CommitableMutableDictionary*)initWithDictionary:(NSDictionary*)dictionary")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassCommitableMutableDictionary];

/*i10001*/ return self;
    }
    - (CommitableMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy {
        MSGSTART("CommitableMutableDictionary:-(CommitableMutableDictionary*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassCommitableMutableDictionary];

/*i10001*/ return self;
    }
    - (CommitableMutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("CommitableMutableDictionary:-(CommitableMutableDictionary*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassCommitableMutableDictionary];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableDirtyInModel:(id)adirtyInModel {
        MSGSTART("CommitableMutableDictionary:-(NSNumber*)isAcceptableDirtyInModel:(id)adirtyInModel")
        return [adirtyInModel isKindOfClass:[Model class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSinkCommitter:(id)asinkCommitter {
        MSGSTART("CommitableMutableDictionary:-(NSNumber*)isAcceptableSinkCommitter:(id)asinkCommitter")
        return [asinkCommitter conformsToProtocol:@protocol(Commitable)] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSourceCommitter:(id)asourceCommitter {
        MSGSTART("CommitableMutableDictionary:-(NSNumber*)isAcceptableSourceCommitter:(id)asourceCommitter")
        return [asourceCommitter conformsToProtocol:@protocol(Commitable)] ? @YES : nil;
    }
    - (bool)isDirty {
        MSGSTART("CommitableMutableDictionary:-(bool)isDirty")
        return _isDirty;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("CommitableMutableDictionary:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary {
        MSGSTART("CommitableMutableDictionary:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
        return [__dictionary isEqualToDictionary:dictionary];
    }
    - (NSEnumerator *)keyEnumerator {
        MSGSTART("CommitableMutableDictionary:-(NSEnumerator*)keyEnumerator")
        return [__dictionary keyEnumerator];
    }
    - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("CommitableMutableDictionary:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesPassingTest:predicate];
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("CommitableMutableDictionary:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesWithOptions:opts passingTest:predicate];
    }
    - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        MSGSTART("CommitableMutableDictionary:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueUsingComparator:cmptr];
    }
    - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector {
        MSGSTART("CommitableMutableDictionary:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

        return [__dictionary keysSortedByValueUsingSelector:selector];
    }
    - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("CommitableMutableDictionary:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr];
    }
    - (void)markDirty {
        MSGSTART("CommitableMutableDictionary:-(void)markDirty")

        /*i-900*/ if (_isDirty)
            // prnt("%s already dirty\n",[Util cnameFor:self]);
            return;

        self.dirtyInModel = [Model getDefault];
        _isDirty = YES;
        // prnt("%s marked dirty with %d sinks\n",[Util cnameFor:self],self.sinkCommitters.count);

        /*i-1*/ for (NSObject<Commitable> *c in self.sinkCommitters) {
            [c markDirty];
        }
    }
    - (void)modeladd {
        MSGSTART("CommitableMutableDictionary:-(void)modeladd")

        if ( (++modelRetaincount) && (totalRetainCount == modelRetaincount) ) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels addObject:self];
            modelRetaincount = c;
        }
    }
    - (void)modelautorelease {
        MSGSTART("CommitableMutableDictionary:-(void)modelautorelease")

        modelRetaincount--;
        if (!modelRetaincount) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];
            modelRetaincount = c;
        }
        else if (totalRetainCount == modelRetaincount) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels addObject:self];
            modelRetaincount = c;
        }
        // self;
    }
    - (void)modelrelease {
        MSGSTART("CommitableMutableDictionary:-(void)modelrelease")

        modelRetaincount--;
    }
    - (id)modelretain {
        MSGSTART("CommitableMutableDictionary:-(id)modelretain")

        modelRetaincount++;
        return self;
    }
    - (void)modelsub {
        MSGSTART("CommitableMutableDictionary:-(void)modelsub")

        if ( modelRetaincount && (totalRetainCount == modelRetaincount) ) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];
            modelRetaincount = c;
        }
        modelRetaincount--;
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("CommitableMutableDictionary:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("CommitableMutableDictionary:-(NSEnumerator*)objectEnumerator")
        return [__dictionary objectEnumerator];
    }
    - (id)objectForKey:(id<NSCopying> )key {
        MSGSTART("CommitableMutableDictionary:-(id)objectForKey:(id<NSCopying>)key")

        /*i-10*/ id ret = [__dictionary objectForKey:key];

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("CommitableMutableDictionary:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        MSGSTART("CommitableMutableDictionary:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

        return [__dictionary objectsForKeys:keys notFoundMarker:anObject];
    }
    - (bool)onlyOwnedByModels {
        MSGSTART("CommitableMutableDictionary:-(bool)onlyOwnedByModels")
        return totalRetainCount == modelRetaincount;
    }
    - (void)removeAllObjects {
        MSGSTART("CommitableMutableDictionary:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removeAllSinkCommitters {
        MSGSTART("CommitableMutableDictionary:-(void)removeAllSinkCommitters")
        [v_sinkCommitters removeAllObjects];
    }
    - (void)removeAllSourceCommitters {
        MSGSTART("CommitableMutableDictionary:-(void)removeAllSourceCommitters")
        [v_sourceCommitters removeAllObjects];
    }
    - (void)removedDelegate {
        MSGSTART("CommitableMutableDictionary:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("CommitableMutableDictionary:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("CommitableMutableDictionary:-(void)removeObjectForKey:(id<NSCopying>)key")

        if ([self _removeObjectForKey:key]) [self stateOK];
    }
    - (void)removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("CommitableMutableDictionary:-(void)removeObjectsForKeys:(NSArray*)keys")

        if ([self _removeObjectsForKeys:keys]) [self stateOK];
    }
    - (void)removeSinkCommitter:(NSObject<Commitable> *)v {
        MSGSTART("CommitableMutableDictionary:-(void)removeSinkCommitter:(NSObject<Commitable>*)v")
        [v_sinkCommitters removeObject : v];
    }
    - (void)removeSourceCommitter:(NSObject<Commitable> *)v {
        MSGSTART("CommitableMutableDictionary:-(void)removeSourceCommitter:(NSObject<Commitable>*)v")
        [v_sourceCommitters removeObject : v];
    }
    - (void)retract {
        MSGSTART("CommitableMutableDictionary:-(void)retract")
        [self.sinkCommitters removeAllObjects];
        [self.sourceCommitters removeAllObjects];
        self.dirtyInModel = nil;

        noMOForNextRetain = NO;
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("CommitableMutableDictionary:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setDictionary:(NSDictionary *)dictionary {
        MSGSTART("CommitableMutableDictionary:-(void)setDictionary:(NSDictionary*)dictionary")

        if ([self _setDictionary:dictionary]) [self stateOK];
    }
    - (void)setDirtyInModel:(Model *)v {
        MSGSTART("CommitableMutableDictionary:-(void)setDirtyInModel:(Model*)v")
        [v_dirtyInModel_endpoint setValue : v];
    }
    - (void)setDirtyInModel_endpoint:(Endpoint1 *)v {
        MSGSTART("CommitableMutableDictionary:-(void)setDirtyInModel_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_CommitableMutableDictionary) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(dirtyInModel_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_dirtyInModel_endpoint == v) return;

        /*i-900*/ {
            v_dirtyInModel_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_dirtyInModel_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("CommitableMutableDictionary:-(void)setObject:(id)object forKey:(id<NSCopying>)key")

        if ([self _setObject:object forKey:key]) [self stateOK];
    }
    - (void)setSinkCommitters:(EndpointS *)v {
        MSGSTART("CommitableMutableDictionary:-(void)setSinkCommitters:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_CommitableMutableDictionary) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(sinkCommitters=\"blah\") to set the property)");

        /*i-905*/ if (v_sinkCommitters == v) return;

        /*i-900*/ {
            v_sinkCommitters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_sinkCommitters,self); ADDOWNER(v,self);
    }
    - (void)setSourceCommitters:(EndpointS *)v {
        MSGSTART("CommitableMutableDictionary:-(void)setSourceCommitters:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_CommitableMutableDictionary) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(sourceCommitters=\"blah\") to set the property)");

        /*i-905*/ if (v_sourceCommitters == v) return;

        /*i-900*/ {
            v_sourceCommitters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_sourceCommitters,self); ADDOWNER(v,self);
    }
    - (void)setValue:(id)object forKey:(NSString *)key {
        MSGSTART("CommitableMutableDictionary:-(void)setValue:(id)object forKey:(NSString*)key")

        if ([self _setValue:object forKey:key]) [self stateOK];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("CommitableMutableDictionary:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setDictionary:__dictionary.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setDictionary:__dictionary.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("CommitableMutableDictionary:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (EndpointS *)sinkCommitters {
        MSGSTART("CommitableMutableDictionary:-(EndpointS*)sinkCommitters")

        /*i-999*/ EndpointS * ret = v_sinkCommitters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)sinkCommitterToEndpoint:(id)asinkCommitter {
        MSGSTART("CommitableMutableDictionary:-(NSObject<LinkEndpoint>*)sinkCommitterToEndpoint:(id)asinkCommitter")
        return [asinkCommitter performSelector:@selector(sourceCommitters)];
    }
    - (EndpointS *)sourceCommitters {
        MSGSTART("CommitableMutableDictionary:-(EndpointS*)sourceCommitters")

        /*i-999*/ EndpointS * ret = v_sourceCommitters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)sourceCommitterToEndpoint:(id)asourceCommitter {
        MSGSTART("CommitableMutableDictionary:-(NSObject<LinkEndpoint>*)sourceCommitterToEndpoint:(id)asourceCommitter")
        return [asourceCommitter performSelector:@selector(sinkCommitters)];
    }
    - (void)startCommit {
        MSGSTART("CommitableMutableDictionary:-(void)startCommit")
    }
    - (void)stateOK {
        MSGSTART("CommitableMutableDictionary:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ dictionary_count = 0;
        for (id k in __dictionary) {
            dictionary_objects.keyvals[dictionary_count].key = (__bridge void *)k;
            dictionary_objects.keyvals[dictionary_count++].value = (__bridge void *)[__dictionary objectForKey:k];
            if (dictionary_count == 100) break;
        }
        memset( dictionary_objects.keyvals + dictionary_count,0,sizeof(dictionary_objects.keyvals[0]) * (100 - dictionary_count) );
        dictionary_count = __dictionary.count;



        /*i100*/ [self markDirty]; [dictionaryDelegate stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("CommitableMutableDictionary:-(id)valueForKey:(NSString*)key")
        return [__dictionary valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("CommitableMutableDictionary:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willCommit {
        MSGSTART("CommitableMutableDictionary:-(void)willCommit")
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("CommitableMutableDictionary:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")


        /*i100*/[dictionaryDelegate willReplaceObject : fromObject withObject : toObject forKey : key];
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("CommitableMutableDictionary:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [__dictionary writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("CommitableMutableDictionary:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [__dictionary writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: i





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ImmutableArray
    #define _WIClass_           ImmutableArray__
    #define _className_         immutableArray
    #define _Class_             ImmutableArray__
    @implementation ImmutableArray

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassImmutableArray {
        MSGSTART("ImmutableArray:-(void)_startObjectOfClassImmutableArray")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (NSArray *)__array {
        MSGSTART("ImmutableArray:-(NSArray*)__array")

        /*i-999*/ NSArray * ret = __array;
        /*i999*/ return ret;
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("ImmutableArray:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("ImmutableArray:-(void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer toObjectsAtIndexes : indexes forKeyPath : keyPath options : options context : context];
    }
    + (ImmutableArray *)array {
        MSGSTART("ImmutableArray:+(ImmutableArray*)array")
        return [[ImmutableArray alloc] init];
    }
    - (NSArray *)arrayByAddingObject:(id)object {
        MSGSTART("ImmutableArray:-(NSArray*)arrayByAddingObject:(id)object")

        return [self.objects arrayByAddingObject:object];
    }
    - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("ImmutableArray:-(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array")

        return [self.objects arrayByAddingObjectsFromArray:array];
    }
    + (ImmutableArray *)arrayWithArray:(NSArray *)array {
        MSGSTART("ImmutableArray:+(ImmutableArray*)arrayWithArray:(NSArray*)array")
        return [[ImmutableArray alloc] initWithArray:array];
    }
    + (ImmutableArray *)arrayWithContentsOfFile:(NSString *)file {
        MSGSTART("ImmutableArray:+(ImmutableArray*)arrayWithContentsOfFile:(NSString*)file")
        return [[ImmutableArray alloc] initWithContentsOfFile:file];
    }
    + (ImmutableArray *)arrayWithContentsOfURL:(NSURL *)url {
        MSGSTART("ImmutableArray:+(ImmutableArray*)arrayWithContentsOfURL:(NSURL*)url")
        return [[ImmutableArray alloc] initWithContentsOfURL:url];
    }
    + (ImmutableArray *)arrayWithObject:(id)object {
        MSGSTART("ImmutableArray:+(ImmutableArray*)arrayWithObject:(id)object")
        return [[ImmutableArray alloc] initWithObjects:&object count:1];
    }
    + (ImmutableArray *)arrayWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("ImmutableArray:+(ImmutableArray*)arrayWithObjects:(id*)objects count:(Unsigned)count")
        return [[ImmutableArray alloc] initWithObjects:objects count:count];
    }
    - (constchar *)cdescription {
        MSGSTART("ImmutableArray:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("ImmutableArray:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        MSGSTART("ImmutableArray:-(NSString *)componentsJoinedByString:(NSString *)separator")

        return [__array componentsJoinedByString:separator];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("ImmutableArray:-(BOOL)containsObject:(id)object")
        return [__array containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("ImmutableArray:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (Unsigned)count {
        MSGSTART("ImmutableArray:-(Unsigned)count")
        return [__array count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("ImmutableArray:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__array countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("ImmutableArray:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __array) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("ImmutableArray:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ __array = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("ImmutableArray:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__array description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("ImmutableArray:-(NSString *)descriptionWithLocale:(id)locale")

        return [self.objects descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("ImmutableArray:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [self.objects descriptionWithLocale:locale indent:level];
    }
    - (void)die {
        MSGSTART("ImmutableArray:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("ImmutableArray:-(void)encodeWithCoder:(NSCoder*)coder")

        [__array encodeWithCoder : coder];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("ImmutableArray:-(void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsAtIndexes : indexSet options : opts usingBlock : block];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("ImmutableArray:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("ImmutableArray:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("ImmutableArray:-(NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate")

        return [self.objects filteredArrayUsingPredicate:predicate];
    }
    - (id)firstObjectCommonWithArray:(NSArray *)array {
        MSGSTART("ImmutableArray:-(id)firstObjectCommonWithArray:(NSArray*)array")

        return [__array firstObjectCommonWithArray:array];
    }
    - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange {
        MSGSTART("ImmutableArray:-(void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange")

        [__array getObjects : aBuffer range : aRange];
        if (weakObjectCount) for (Int i = aRange.length + aRange.location - 1; i >= aRange.location; i--) {
                aBuffer[i] = [aBuffer[i] strongSelf];
            }

    }
    - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ImmutableArray:-(NSIndexSet*)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ImmutableArray:-(NSIndexSet*)indexesOfObjectsPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsPassingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ImmutableArray:-(NSIndexSet*)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsWithOptions:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        MSGSTART("ImmutableArray:-(Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp")

        return [__array indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp];
    }
    - (Unsigned)indexOfObject:(id)object {
        MSGSTART("ImmutableArray:-(Unsigned)indexOfObject:(id)object")

        return [__array indexOfObject:object];
    }
    - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range {
        MSGSTART("ImmutableArray:-(Unsigned)indexOfObject:(id)object inRange:(NSRange)range")

        return [__array indexOfObject:object inRange:range];
    }
    - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ImmutableArray:-(Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object {
        MSGSTART("ImmutableArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf]],[__array indexOfObjectIdenticalTo:[object weakSelf]]);
        else return [__array indexOfObjectIdenticalTo:object];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        MSGSTART("ImmutableArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf] inRange:range],[__array indexOfObjectIdenticalTo:[object weakSelf] inRange:range]);
        else return [__array indexOfObjectIdenticalTo:object inRange:range];
    }
    - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ImmutableArray:-(Unsigned)indexOfObjectPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectPassingTest:predicate];
    }
    - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ImmutableArray:-(Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectWithOptions:opts passingTest:predicate];
    }
    - (ImmutableArray *)init {
        MSGSTART("ImmutableArray:-(ImmutableArray*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] init];

        /*i11*/ [self _startObjectOfClassImmutableArray];

/*i10001*/ return self;
    }
    - (ImmutableArray *)initWithArray:(NSArray *)array {
        MSGSTART("ImmutableArray:-(ImmutableArray*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = (insertsWeakObjectsByDefault ? array.weakCopy : [[NSArray alloc] initWithArray:array]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableArray];

/*i10001*/ return self;
    }
    - (ImmutableArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy {
        MSGSTART("ImmutableArray:-(ImmutableArray*)initWithArray:(NSArray*)array copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithArray:array copyItems:copy];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableArray];

/*i10001*/ return self;
    }
    - (ImmutableArray *)initWithCoder:(NSCoder *)coder {
        MSGSTART("ImmutableArray:-(ImmutableArray*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableArray];

/*i10001*/ return self;
    }
    - (ImmutableArray *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("ImmutableArray:-(ImmutableArray*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableArray];

/*i10001*/ return self;
    }
    - (ImmutableArray *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("ImmutableArray:-(ImmutableArray*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableArray];

/*i10001*/ return self;
    }
    - (ImmutableArray *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("ImmutableArray:-(ImmutableArray*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableArray];

/*i10001*/ return self;
    }
    - (BOOL)isEqualToArray:(NSArray *)array {
        MSGSTART("ImmutableArray:-(BOOL)isEqualToArray:(NSArray*)array")

        return [__array isEqualToArray:array];
    }
    - (id)lastObject {
        MSGSTART("ImmutableArray:-(id)lastObject")
        return weakObjectCount ? [__array.lastObject strongSelf] : __array.lastObject;
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("ImmutableArray:-(void)makeObjectsPerformSelector:(SEL)selector")

        [__array makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("ImmutableArray:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")

        [__array makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("ImmutableArray:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (id)objectAtIndex:(Unsigned)index {
        MSGSTART("ImmutableArray:-(id)objectAtIndex:(Unsigned)index")

        if (index >= __array.count) ERR( "Index %d is out of bounds [0,%d)",int(index),int(__array.count) );
        return weakObjectCount ? [__array[index] strongSelf] : __array[index];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("ImmutableArray:-(NSEnumerator*)objectEnumerator")
        return [__array objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("ImmutableArray:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objects {
        MSGSTART("ImmutableArray:-(NSArray*)objects")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            Int i = 0;
            for (NSObject *o in __array) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : __array;
        }
        else {
            return __array;
        }
    }
    - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("ImmutableArray:-(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            NSArray *ret = [__array objectsAtIndexes:indexes];
            Int i = 0;
            for (NSObject *o in ret) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : ret;
        }
        else {
            return [__array objectsAtIndexes:indexes];
        }
    }
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        MSGSTART("ImmutableArray:-(NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes")

        return [self.objects pathsMatchingExtensions:filterTypes];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("ImmutableArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("ImmutableArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer forKeyPath : keyPath context : context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath {
        MSGSTART("ImmutableArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("ImmutableArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath context : context];
    }
    - (NSEnumerator *)reverseObjectEnumerator {
        MSGSTART("ImmutableArray:-(NSEnumerator*)reverseObjectEnumerator")
        return [__array reverseObjectEnumerator];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("ImmutableArray:-(void)setValue:(id)value forKey:(NSString *)key")

        [__array setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("ImmutableArray:-(void)setWeakness:(CollectionWeakness)v")
    }
    - (NSData *)sortedArrayHint {
        MSGSTART("ImmutableArray:-(NSData*)sortedArrayHint")

        return [__array sortedArrayHint];
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        MSGSTART("ImmutableArray:-(NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayUsingComparator:cmptr];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("ImmutableArray:-(NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors")

        return [self.objects sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context {
        MSGSTART("ImmutableArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context")

        return [self.objects sortedArrayUsingFunction:comparator context:context];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint {
        MSGSTART("ImmutableArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint")

        return [self.objects sortedArrayUsingFunction:comparator context:context hint:hint];
    }
    - (NSArray *)sortedArrayUsingSelector:(SEL)selector {
        MSGSTART("ImmutableArray:-(NSArray*)sortedArrayUsingSelector:(SEL)selector")

        return [self.objects sortedArrayUsingSelector:selector];
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("ImmutableArray:-(NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayWithOptions:opts usingComparator:cmptr];
    }
    - (NSArray *)subarrayWithRange:(NSRange)r {
        MSGSTART("ImmutableArray:-(NSArray*)subarrayWithRange:(NSRange)r")

        return [self.objects subarrayWithRange:r];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("ImmutableArray:-(id)valueForKey:(NSString*)key")

        return [__array valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("ImmutableArray:-(CollectionWeakness)weakness")
        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("ImmutableArray:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [self.objects writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("ImmutableArray:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [self.objects writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ImmutableDictionary
    #define _WIClass_           ImmutableDictionary__
    #define _className_         immutableDictionary
    #define _Class_             ImmutableDictionary__
    @implementation ImmutableDictionary

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassImmutableDictionary {
        MSGSTART("ImmutableDictionary:-(void)_startObjectOfClassImmutableDictionary")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (NSDictionary *)__dictionary {
        MSGSTART("ImmutableDictionary:-(NSDictionary*)__dictionary")

        /*i-999*/ NSDictionary * ret = __dictionary;
        /*i999*/ return ret;
    }
    - (NSArray *)allKeys {
        MSGSTART("ImmutableDictionary:-(NSArray*)allKeys")
        return [__dictionary allKeys];
    }
    - (NSArray *)allKeysForObject:(id)object {
        MSGSTART("ImmutableDictionary:-(NSArray*)allKeysForObject:(id)object")
        return [__dictionary allKeysForObject:object];
    }
    - (NSArray *)allValues {
        MSGSTART("ImmutableDictionary:-(NSArray*)allValues")
        return [__dictionary allValues];
    }
    - (constchar *)cdescription {
        MSGSTART("ImmutableDictionary:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("ImmutableDictionary:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("ImmutableDictionary:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (Unsigned)count {
        MSGSTART("ImmutableDictionary:-(Unsigned)count")
        return [__dictionary count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("ImmutableDictionary:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        Unsigned ret = [__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
        return ret;
    }
    - (void)countWeakObjects {
        MSGSTART("ImmutableDictionary:-(void)countWeakObjects")

        Int c = 0;
        for (kid o in __dictionary) {
            if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("ImmutableDictionary:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ __dictionary = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("ImmutableDictionary:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__dictionary description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionInStringsFileFormat {
        MSGSTART("ImmutableDictionary:-(NSString*)descriptionInStringsFileFormat")
        return [__dictionary descriptionInStringsFileFormat];
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("ImmutableDictionary:-(NSString *)descriptionWithLocale:(id)locale")

        return [__dictionary descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("ImmutableDictionary:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [__dictionary descriptionWithLocale:locale indent:level];
    }
    + (ImmutableDictionary *)dictionary {
        MSGSTART("ImmutableDictionary:+(ImmutableDictionary*)dictionary")
        return [[ImmutableDictionary alloc] init];
    }
    + (ImmutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file {
        MSGSTART("ImmutableDictionary:+(ImmutableDictionary*)dictionaryWithContentsOfFile:(NSString*)file")
        return [[ImmutableDictionary alloc] initWithContentsOfFile:file];
    }
    + (ImmutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url {
        MSGSTART("ImmutableDictionary:+(ImmutableDictionary*)dictionaryWithContentsOfURL:(NSURL*)url")
        return [[ImmutableDictionary alloc] initWithContentsOfURL:url];
    }
    + (ImmutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("ImmutableDictionary:+(ImmutableDictionary*)dictionaryWithDictionary:(NSDictionary*)dictionary")
        return [[ImmutableDictionary alloc] initWithDictionary:dictionary];
    }
    + (ImmutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("ImmutableDictionary:+(ImmutableDictionary*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
        return [[ImmutableDictionary alloc] initWithObjects:&object forKeys:&key count:1];
    }
    + (ImmutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("ImmutableDictionary:+(ImmutableDictionary*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
        return [[ImmutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
    }
    - (void)die {
        MSGSTART("ImmutableDictionary:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("ImmutableDictionary:-(void)encodeWithCoder:(NSCoder*)coder")

        [__dictionary encodeWithCoder : coder];
    }
    - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("ImmutableDictionary:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsUsingBlock : block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("ImmutableDictionary:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsWithOptions : opts usingBlock : block];
    }
    - (NSDate *)fileCreationDate {
        MSGSTART("ImmutableDictionary:-(NSDate*)fileCreationDate")
        return [__dictionary fileCreationDate];
    }
    - (BOOL)fileExtensionHidden {
        MSGSTART("ImmutableDictionary:-(BOOL)fileExtensionHidden")
        return [__dictionary fileExtensionHidden];
    }
    - (NSNumber *)fileGroupOwnerAccountID {
        MSGSTART("ImmutableDictionary:-(NSNumber*)fileGroupOwnerAccountID")
        return [__dictionary fileGroupOwnerAccountID];
    }
    - (NSString *)fileGroupOwnerAccountName {
        MSGSTART("ImmutableDictionary:-(NSString*)fileGroupOwnerAccountName")
        return [__dictionary fileGroupOwnerAccountName];
    }
    - (OSType)fileHFSCreatorCode {
        MSGSTART("ImmutableDictionary:-(OSType)fileHFSCreatorCode")
        return [__dictionary fileHFSCreatorCode];
    }
    - (OSType)fileHFSTypeCode {
        MSGSTART("ImmutableDictionary:-(OSType)fileHFSTypeCode")
        return [__dictionary fileHFSTypeCode];
    }
    - (BOOL)fileIsAppendOnly {
        MSGSTART("ImmutableDictionary:-(BOOL)fileIsAppendOnly")
        return [__dictionary fileIsAppendOnly];
    }
    - (BOOL)fileIsImmutable {
        MSGSTART("ImmutableDictionary:-(BOOL)fileIsImmutable")
        return [__dictionary fileIsImmutable];
    }
    - (NSDate *)fileModificationDate {
        MSGSTART("ImmutableDictionary:-(NSDate*)fileModificationDate")
        return [__dictionary fileModificationDate];
    }
    - (NSNumber *)fileOwnerAccountID {
        MSGSTART("ImmutableDictionary:-(NSNumber*)fileOwnerAccountID")
        return [__dictionary fileOwnerAccountID];
    }
    - (NSString *)fileOwnerAccountName {
        MSGSTART("ImmutableDictionary:-(NSString*)fileOwnerAccountName")
        return [__dictionary fileOwnerAccountName];
    }
    - (Unsigned)filePosixPermissions {
        MSGSTART("ImmutableDictionary:-(Unsigned)filePosixPermissions")
        return [__dictionary filePosixPermissions];
    }
    - (ULL)fileSize {
        MSGSTART("ImmutableDictionary:-(ULL)fileSize")
        return [__dictionary fileSize];
    }
    - (Unsigned)fileSystemFileNumber {
        MSGSTART("ImmutableDictionary:-(Unsigned)fileSystemFileNumber")
        return [__dictionary fileSystemFileNumber];
    }
    - (Int)fileSystemNumber {
        MSGSTART("ImmutableDictionary:-(Int)fileSystemNumber")
        return [__dictionary fileSystemNumber];
    }
    - (NSString *)fileType {
        MSGSTART("ImmutableDictionary:-(NSString*)fileType")
        return [__dictionary fileType];
    }
    - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        MSGSTART("ImmutableDictionary:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

        [__dictionary getObjects : objects andKeys : keys];
    }
    - (ImmutableDictionary *)init {
        MSGSTART("ImmutableDictionary:-(ImmutableDictionary*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassImmutableDictionary];

/*i10001*/ return self;
    }
    - (ImmutableDictionary *)initWithCoder:(NSCoder *)coder {
        MSGSTART("ImmutableDictionary:-(ImmutableDictionary*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableDictionary];

/*i10001*/ return self;
    }
    - (ImmutableDictionary *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("ImmutableDictionary:-(ImmutableDictionary*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableDictionary];

/*i10001*/ return self;
    }
    - (ImmutableDictionary *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("ImmutableDictionary:-(ImmutableDictionary*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableDictionary];

/*i10001*/ return self;
    }
    - (ImmutableDictionary *)initWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("ImmutableDictionary:-(ImmutableDictionary*)initWithDictionary:(NSDictionary*)dictionary")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = (insertsWeakObjectsByDefault ? dictionary.weakCopy : [[NSDictionary alloc] initWithDictionary:dictionary]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableDictionary];

/*i10001*/ return self;
    }
    - (ImmutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy {
        MSGSTART("ImmutableDictionary:-(ImmutableDictionary*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableDictionary];

/*i10001*/ return self;
    }
    - (ImmutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("ImmutableDictionary:-(ImmutableDictionary*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableDictionary];

/*i10001*/ return self;
    }
    - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary {
        MSGSTART("ImmutableDictionary:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
        return [__dictionary isEqualToDictionary:dictionary];
    }
    - (NSEnumerator *)keyEnumerator {
        MSGSTART("ImmutableDictionary:-(NSEnumerator*)keyEnumerator")
        return [__dictionary keyEnumerator];
    }
    - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("ImmutableDictionary:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesPassingTest:predicate];
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("ImmutableDictionary:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesWithOptions:opts passingTest:predicate];
    }
    - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        MSGSTART("ImmutableDictionary:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueUsingComparator:cmptr];
    }
    - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector {
        MSGSTART("ImmutableDictionary:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

        return [__dictionary keysSortedByValueUsingSelector:selector];
    }
    - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("ImmutableDictionary:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("ImmutableDictionary:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("ImmutableDictionary:-(NSEnumerator*)objectEnumerator")
        return [__dictionary objectEnumerator];
    }
    - (id)objectForKey:(id<NSCopying> )key {
        MSGSTART("ImmutableDictionary:-(id)objectForKey:(id<NSCopying>)key")

        /*i-10*/ id ret = [__dictionary objectForKey:key];

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("ImmutableDictionary:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        MSGSTART("ImmutableDictionary:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

        return [__dictionary objectsForKeys:keys notFoundMarker:anObject];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("ImmutableDictionary:-(void)setWeakness:(CollectionWeakness)v")
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("ImmutableDictionary:-(id)valueForKey:(NSString*)key")
        return [__dictionary valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("ImmutableDictionary:-(CollectionWeakness)weakness")
        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("ImmutableDictionary:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [__dictionary writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("ImmutableDictionary:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [__dictionary writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ImmutableSet
    #define _WIClass_           ImmutableSet__
    #define _className_         immutableSet
    #define _Class_             ImmutableSet__
    @implementation ImmutableSet

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize retrievesWeakValues = retrievesWeakValues;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassImmutableSet {
        MSGSTART("ImmutableSet:-(void)_startObjectOfClassImmutableSet")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (NSSet *)__set {
        MSGSTART("ImmutableSet:-(NSSet*)__set")

        /*i-999*/ NSSet * ret = __set;
        /*i999*/ return ret;
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("ImmutableSet:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__set addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (NSArray *)allObjects {
        MSGSTART("ImmutableSet:-(NSArray*)allObjects")
        return [__set allObjects];
    }
    - (id)anyObject {
        MSGSTART("ImmutableSet:-(id)anyObject")
        return [[__set anyObject] selfWithWeakness:retrievesWeakValues];
    }
    - (constchar *)cdescription {
        MSGSTART("ImmutableSet:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("ImmutableSet:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("ImmutableSet:-(BOOL)containsObject:(id)object")
        return [__set containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("ImmutableSet:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (Unsigned)count {
        MSGSTART("ImmutableSet:-(Unsigned)count")
        return [__set count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("ImmutableSet:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__set countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("ImmutableSet:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __set) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("ImmutableSet:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ __set = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("ImmutableSet:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__set description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("ImmutableSet:-(NSString*)descriptionWithLocale:(id)locale")
        return [__set descriptionWithLocale:locale];
    }
    - (void)die {
        MSGSTART("ImmutableSet:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("ImmutableSet:-(void)encodeWithCoder:(NSCoder*)coder")

        [__set encodeWithCoder : coder];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("ImmutableSet:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("ImmutableSet:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("ImmutableSet:-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate")
        return [__set filteredSetUsingPredicate:predicate];
    }
    - (ImmutableSet *)init {
        MSGSTART("ImmutableSet:-(ImmutableSet*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] init];

        /*i11*/ [self _startObjectOfClassImmutableSet];

/*i10001*/ return self;
    }
    - (ImmutableSet *)initWithArray:(NSArray *)array {
        MSGSTART("ImmutableSet:-(ImmutableSet*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithArray:array];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableSet];

/*i10001*/ return self;
    }
    - (ImmutableSet *)initWithCoder:(NSCoder *)coder {
        MSGSTART("ImmutableSet:-(ImmutableSet*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableSet];

/*i10001*/ return self;
    }
    - (ImmutableSet *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("ImmutableSet:-(ImmutableSet*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableSet];

/*i10001*/ return self;
    }
    - (ImmutableSet *)initWithSet:(NSSet *)set {
        MSGSTART("ImmutableSet:-(ImmutableSet*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = (insertsWeakObjectsByDefault ? set.weakCopy : [[NSSet alloc] initWithSet:set]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableSet];

/*i10001*/ return self;
    }
    - (ImmutableSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy {
        MSGSTART("ImmutableSet:-(ImmutableSet*)initWithSet:(NSSet*)set copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithSet:set copyItems:copy];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassImmutableSet];

/*i10001*/ return self;
    }
    - (BOOL)intersectsSet:(NSSet *)set {
        MSGSTART("ImmutableSet:-(BOOL)intersectsSet:(NSSet*)set")
        return [__set intersectsSet:set];
    }
    - (BOOL)isEqualToSet:(NSSet *)set {
        MSGSTART("ImmutableSet:-(BOOL)isEqualToSet:(NSSet*)set")
        return [__set isEqualToSet:set];
    }
    - (BOOL)isSubsetOfSet:(NSSet *)set {
        MSGSTART("ImmutableSet:-(BOOL)isSubsetOfSet:(NSSet*)set")
        return [__set isSubsetOfSet:set];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("ImmutableSet:-(void)makeObjectsPerformSelector:(SEL)selector")
        [__set makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("ImmutableSet:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")
        [__set makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)member:(id)object {
        MSGSTART("ImmutableSet:-(id)member:(id)object")
        return [__set member:object];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("ImmutableSet:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("ImmutableSet:-(NSEnumerator*)objectEnumerator")
        return [__set objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("ImmutableSet:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("ImmutableSet:-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsPassingTest:predicate];
    }
    - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("ImmutableSet:-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsWithOptions:opts passingTest:predicate];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("ImmutableSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__set removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("ImmutableSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__set removeObserver : observer forKeyPath : keyPath context : context];
    }
    + (ImmutableSet *)set {
        MSGSTART("ImmutableSet:+(ImmutableSet*)set")
        return [[ImmutableSet alloc] init];
    }
    - (NSSet *)setByAddingObject:(id)object {
        MSGSTART("ImmutableSet:-(NSSet*)setByAddingObject:(id)object")
        return [__set setByAddingObject:object];
    }
    - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("ImmutableSet:-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array")
        return [__set setByAddingObjectsFromArray:array];
    }
    - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set {
        MSGSTART("ImmutableSet:-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set")
        return [__set setByAddingObjectsFromSet:set];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("ImmutableSet:-(void)setValue:(id)value forKey:(NSString *)key")
        [__set setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("ImmutableSet:-(void)setWeakness:(CollectionWeakness)v")
    }
    + (ImmutableSet *)setWithArray:(NSArray *)array {
        MSGSTART("ImmutableSet:+(ImmutableSet*)setWithArray:(NSArray*)array")
        return [[ImmutableSet alloc] initWithArray:array];
    }
    + (ImmutableSet *)setWithObject:(id)object {
        MSGSTART("ImmutableSet:+(ImmutableSet*)setWithObject:(id)object")
        return [[ImmutableSet alloc] initWithObjects:&object count:1];
    }
    + (ImmutableSet *)setWithSet:(NSSet *)set {
        MSGSTART("ImmutableSet:+(ImmutableSet*)setWithSet:(NSSet*)set")
        return [[ImmutableSet alloc] initWithSet:set];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("ImmutableSet:-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors")
        return [__set sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("ImmutableSet:-(id)valueForKey:(NSString*)key")
        return [__set valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("ImmutableSet:-(CollectionWeakness)weakness")
        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: m





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ModelArray
    #define _WIClass_           ModelArray__
    #define _className_         modelArray
    #define _Class_             ModelArray__
    @implementation ModelArray

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassModelArray {
        MSGSTART("ModelArray:-(void)_startObjectOfClassModelArray")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*/ [self makeModel];
/*i0*/}
    - (NSArray *)__array {
        MSGSTART("ModelArray:-(NSArray*)__array")

        /*i-999*/ NSArray * ret = __array;
        /*i999*/ return ret;
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("ModelArray:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("ModelArray:-(void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer toObjectsAtIndexes : indexes forKeyPath : keyPath options : options context : context];
    }
    + (ModelArray *)array {
        MSGSTART("ModelArray:+(ModelArray*)array")
        return [[ModelArray alloc] init];
    }
    - (NSArray *)arrayByAddingObject:(id)object {
        MSGSTART("ModelArray:-(NSArray*)arrayByAddingObject:(id)object")

        return [self.objects arrayByAddingObject:object];
    }
    - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("ModelArray:-(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array")

        return [self.objects arrayByAddingObjectsFromArray:array];
    }
    + (ModelArray *)arrayWithArray:(NSArray *)array {
        MSGSTART("ModelArray:+(ModelArray*)arrayWithArray:(NSArray*)array")
        return [[ModelArray alloc] initWithArray:array];
    }
    + (ModelArray *)arrayWithContentsOfFile:(NSString *)file {
        MSGSTART("ModelArray:+(ModelArray*)arrayWithContentsOfFile:(NSString*)file")
        return [[ModelArray alloc] initWithContentsOfFile:file];
    }
    + (ModelArray *)arrayWithContentsOfURL:(NSURL *)url {
        MSGSTART("ModelArray:+(ModelArray*)arrayWithContentsOfURL:(NSURL*)url")
        return [[ModelArray alloc] initWithContentsOfURL:url];
    }
    + (ModelArray *)arrayWithObject:(id)object {
        MSGSTART("ModelArray:+(ModelArray*)arrayWithObject:(id)object")
        return [[ModelArray alloc] initWithObjects:&object count:1];
    }
    + (ModelArray *)arrayWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("ModelArray:+(ModelArray*)arrayWithObjects:(id*)objects count:(Unsigned)count")
        return [[ModelArray alloc] initWithObjects:objects count:count];
    }
    - (constchar *)cdescription {
        MSGSTART("ModelArray:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("ModelArray:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        MSGSTART("ModelArray:-(NSString *)componentsJoinedByString:(NSString *)separator")

        return [__array componentsJoinedByString:separator];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("ModelArray:-(BOOL)containsObject:(id)object")
        return [__array containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("ModelArray:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (Unsigned)count {
        MSGSTART("ModelArray:-(Unsigned)count")
        return [__array count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("ModelArray:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__array countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("ModelArray:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __array) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("ModelArray:-(void)dealloc")

        /*i-500*/[self makeNonModel];
/*i-151*/ [self die];
/*i0*/ __array = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("ModelArray:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__array description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("ModelArray:-(NSString *)descriptionWithLocale:(id)locale")

        return [self.objects descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("ModelArray:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [self.objects descriptionWithLocale:locale indent:level];
    }
    - (void)die {
        MSGSTART("ModelArray:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("ModelArray:-(void)encodeWithCoder:(NSCoder*)coder")

        [__array encodeWithCoder : coder];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("ModelArray:-(void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsAtIndexes : indexSet options : opts usingBlock : block];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("ModelArray:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("ModelArray:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("ModelArray:-(NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate")

        return [self.objects filteredArrayUsingPredicate:predicate];
    }
    - (id)firstObjectCommonWithArray:(NSArray *)array {
        MSGSTART("ModelArray:-(id)firstObjectCommonWithArray:(NSArray*)array")

        return [__array firstObjectCommonWithArray:array];
    }
    - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange {
        MSGSTART("ModelArray:-(void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange")

        [__array getObjects : aBuffer range : aRange];
        if (weakObjectCount) for (Int i = aRange.length + aRange.location - 1; i >= aRange.location; i--) {
                aBuffer[i] = [aBuffer[i] strongSelf];
            }

    }
    - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ModelArray:-(NSIndexSet*)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ModelArray:-(NSIndexSet*)indexesOfObjectsPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsPassingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ModelArray:-(NSIndexSet*)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsWithOptions:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        MSGSTART("ModelArray:-(Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp")

        return [__array indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp];
    }
    - (Unsigned)indexOfObject:(id)object {
        MSGSTART("ModelArray:-(Unsigned)indexOfObject:(id)object")

        return [__array indexOfObject:object];
    }
    - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range {
        MSGSTART("ModelArray:-(Unsigned)indexOfObject:(id)object inRange:(NSRange)range")

        return [__array indexOfObject:object inRange:range];
    }
    - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ModelArray:-(Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object {
        MSGSTART("ModelArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf]],[__array indexOfObjectIdenticalTo:[object weakSelf]]);
        else return [__array indexOfObjectIdenticalTo:object];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        MSGSTART("ModelArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf] inRange:range],[__array indexOfObjectIdenticalTo:[object weakSelf] inRange:range]);
        else return [__array indexOfObjectIdenticalTo:object inRange:range];
    }
    - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ModelArray:-(Unsigned)indexOfObjectPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectPassingTest:predicate];
    }
    - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("ModelArray:-(Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectWithOptions:opts passingTest:predicate];
    }
    - (ModelArray *)init {
        MSGSTART("ModelArray:-(ModelArray*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] init];

        /*i11*/ [self _startObjectOfClassModelArray];

/*i10001*/ return self;
    }
    - (ModelArray *)initWithArray:(NSArray *)array {
        MSGSTART("ModelArray:-(ModelArray*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = (insertsWeakObjectsByDefault ? array.weakCopy : [[NSArray alloc] initWithArray:array]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelArray];

/*i10001*/ return self;
    }
    - (ModelArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy {
        MSGSTART("ModelArray:-(ModelArray*)initWithArray:(NSArray*)array copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithArray:array copyItems:copy];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelArray];

/*i10001*/ return self;
    }
    - (ModelArray *)initWithCoder:(NSCoder *)coder {
        MSGSTART("ModelArray:-(ModelArray*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelArray];

/*i10001*/ return self;
    }
    - (ModelArray *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("ModelArray:-(ModelArray*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelArray];

/*i10001*/ return self;
    }
    - (ModelArray *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("ModelArray:-(ModelArray*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelArray];

/*i10001*/ return self;
    }
    - (ModelArray *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("ModelArray:-(ModelArray*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelArray];

/*i10001*/ return self;
    }
    - (BOOL)isEqualToArray:(NSArray *)array {
        MSGSTART("ModelArray:-(BOOL)isEqualToArray:(NSArray*)array")

        return [__array isEqualToArray:array];
    }
    - (id)lastObject {
        MSGSTART("ModelArray:-(id)lastObject")
        return weakObjectCount ? [__array.lastObject strongSelf] : __array.lastObject;
    }
    - (void)makeModel {
        MSGSTART("ModelArray:-(void)makeModel")

        for (NSObject *object in __array) {
            if ([object conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) object modeladd];
        }
    }
    - (void)makeNonModel {
        MSGSTART("ModelArray:-(void)makeNonModel")

        for (NSObject *object in __array) {
            if ([object conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) object modelsub];
        }
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("ModelArray:-(void)makeObjectsPerformSelector:(SEL)selector")

        [__array makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("ModelArray:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")

        [__array makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("ModelArray:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (id)objectAtIndex:(Unsigned)index {
        MSGSTART("ModelArray:-(id)objectAtIndex:(Unsigned)index")

        if (index >= __array.count) ERR( "Index %d is out of bounds [0,%d)",int(index),int(__array.count) );
        return weakObjectCount ? [__array[index] strongSelf] : __array[index];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("ModelArray:-(NSEnumerator*)objectEnumerator")
        return [__array objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("ModelArray:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objects {
        MSGSTART("ModelArray:-(NSArray*)objects")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            Int i = 0;
            for (NSObject *o in __array) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : __array;
        }
        else {
            return __array;
        }
    }
    - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("ModelArray:-(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            NSArray *ret = [__array objectsAtIndexes:indexes];
            Int i = 0;
            for (NSObject *o in ret) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : ret;
        }
        else {
            return [__array objectsAtIndexes:indexes];
        }
    }
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        MSGSTART("ModelArray:-(NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes")

        return [self.objects pathsMatchingExtensions:filterTypes];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("ModelArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("ModelArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer forKeyPath : keyPath context : context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath {
        MSGSTART("ModelArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("ModelArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath context : context];
    }
    - (NSEnumerator *)reverseObjectEnumerator {
        MSGSTART("ModelArray:-(NSEnumerator*)reverseObjectEnumerator")
        return [__array reverseObjectEnumerator];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("ModelArray:-(void)setValue:(id)value forKey:(NSString *)key")

        [__array setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("ModelArray:-(void)setWeakness:(CollectionWeakness)v")
    }
    - (NSData *)sortedArrayHint {
        MSGSTART("ModelArray:-(NSData*)sortedArrayHint")

        return [__array sortedArrayHint];
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        MSGSTART("ModelArray:-(NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayUsingComparator:cmptr];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("ModelArray:-(NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors")

        return [self.objects sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context {
        MSGSTART("ModelArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context")

        return [self.objects sortedArrayUsingFunction:comparator context:context];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint {
        MSGSTART("ModelArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint")

        return [self.objects sortedArrayUsingFunction:comparator context:context hint:hint];
    }
    - (NSArray *)sortedArrayUsingSelector:(SEL)selector {
        MSGSTART("ModelArray:-(NSArray*)sortedArrayUsingSelector:(SEL)selector")

        return [self.objects sortedArrayUsingSelector:selector];
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("ModelArray:-(NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayWithOptions:opts usingComparator:cmptr];
    }
    - (NSArray *)subarrayWithRange:(NSRange)r {
        MSGSTART("ModelArray:-(NSArray*)subarrayWithRange:(NSRange)r")

        return [self.objects subarrayWithRange:r];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("ModelArray:-(id)valueForKey:(NSString*)key")

        return [__array valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("ModelArray:-(CollectionWeakness)weakness")
        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("ModelArray:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [self.objects writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("ModelArray:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [self.objects writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ModelDictionary
    #define _WIClass_           ModelDictionary__
    #define _className_         modelDictionary
    #define _Class_             ModelDictionary__
    @implementation ModelDictionary

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassModelDictionary {
        MSGSTART("ModelDictionary:-(void)_startObjectOfClassModelDictionary")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*/ [self makeModel];
/*i0*/}
    - (NSDictionary *)__dictionary {
        MSGSTART("ModelDictionary:-(NSDictionary*)__dictionary")

        /*i-999*/ NSDictionary * ret = __dictionary;
        /*i999*/ return ret;
    }
    - (NSArray *)allKeys {
        MSGSTART("ModelDictionary:-(NSArray*)allKeys")
        return [__dictionary allKeys];
    }
    - (NSArray *)allKeysForObject:(id)object {
        MSGSTART("ModelDictionary:-(NSArray*)allKeysForObject:(id)object")
        return [__dictionary allKeysForObject:object];
    }
    - (NSArray *)allValues {
        MSGSTART("ModelDictionary:-(NSArray*)allValues")
        return [__dictionary allValues];
    }
    - (constchar *)cdescription {
        MSGSTART("ModelDictionary:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("ModelDictionary:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("ModelDictionary:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (Unsigned)count {
        MSGSTART("ModelDictionary:-(Unsigned)count")
        return [__dictionary count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("ModelDictionary:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        Unsigned ret = [__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
        return ret;
    }
    - (void)countWeakObjects {
        MSGSTART("ModelDictionary:-(void)countWeakObjects")

        Int c = 0;
        for (kid o in __dictionary) {
            if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("ModelDictionary:-(void)dealloc")

        /*i-500*/[self makeNonModel];
/*i-151*/ [self die];
/*i0*/ __dictionary = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("ModelDictionary:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__dictionary description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionInStringsFileFormat {
        MSGSTART("ModelDictionary:-(NSString*)descriptionInStringsFileFormat")
        return [__dictionary descriptionInStringsFileFormat];
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("ModelDictionary:-(NSString *)descriptionWithLocale:(id)locale")

        return [__dictionary descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("ModelDictionary:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [__dictionary descriptionWithLocale:locale indent:level];
    }
    + (ModelDictionary *)dictionary {
        MSGSTART("ModelDictionary:+(ModelDictionary*)dictionary")
        return [[ModelDictionary alloc] init];
    }
    + (ModelDictionary *)dictionaryWithContentsOfFile:(NSString *)file {
        MSGSTART("ModelDictionary:+(ModelDictionary*)dictionaryWithContentsOfFile:(NSString*)file")
        return [[ModelDictionary alloc] initWithContentsOfFile:file];
    }
    + (ModelDictionary *)dictionaryWithContentsOfURL:(NSURL *)url {
        MSGSTART("ModelDictionary:+(ModelDictionary*)dictionaryWithContentsOfURL:(NSURL*)url")
        return [[ModelDictionary alloc] initWithContentsOfURL:url];
    }
    + (ModelDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("ModelDictionary:+(ModelDictionary*)dictionaryWithDictionary:(NSDictionary*)dictionary")
        return [[ModelDictionary alloc] initWithDictionary:dictionary];
    }
    + (ModelDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("ModelDictionary:+(ModelDictionary*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
        return [[ModelDictionary alloc] initWithObjects:&object forKeys:&key count:1];
    }
    + (ModelDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("ModelDictionary:+(ModelDictionary*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
        return [[ModelDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
    }
    - (void)die {
        MSGSTART("ModelDictionary:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("ModelDictionary:-(void)encodeWithCoder:(NSCoder*)coder")

        [__dictionary encodeWithCoder : coder];
    }
    - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("ModelDictionary:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsUsingBlock : block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("ModelDictionary:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsWithOptions : opts usingBlock : block];
    }
    - (NSDate *)fileCreationDate {
        MSGSTART("ModelDictionary:-(NSDate*)fileCreationDate")
        return [__dictionary fileCreationDate];
    }
    - (BOOL)fileExtensionHidden {
        MSGSTART("ModelDictionary:-(BOOL)fileExtensionHidden")
        return [__dictionary fileExtensionHidden];
    }
    - (NSNumber *)fileGroupOwnerAccountID {
        MSGSTART("ModelDictionary:-(NSNumber*)fileGroupOwnerAccountID")
        return [__dictionary fileGroupOwnerAccountID];
    }
    - (NSString *)fileGroupOwnerAccountName {
        MSGSTART("ModelDictionary:-(NSString*)fileGroupOwnerAccountName")
        return [__dictionary fileGroupOwnerAccountName];
    }
    - (OSType)fileHFSCreatorCode {
        MSGSTART("ModelDictionary:-(OSType)fileHFSCreatorCode")
        return [__dictionary fileHFSCreatorCode];
    }
    - (OSType)fileHFSTypeCode {
        MSGSTART("ModelDictionary:-(OSType)fileHFSTypeCode")
        return [__dictionary fileHFSTypeCode];
    }
    - (BOOL)fileIsAppendOnly {
        MSGSTART("ModelDictionary:-(BOOL)fileIsAppendOnly")
        return [__dictionary fileIsAppendOnly];
    }
    - (BOOL)fileIsImmutable {
        MSGSTART("ModelDictionary:-(BOOL)fileIsImmutable")
        return [__dictionary fileIsImmutable];
    }
    - (NSDate *)fileModificationDate {
        MSGSTART("ModelDictionary:-(NSDate*)fileModificationDate")
        return [__dictionary fileModificationDate];
    }
    - (NSNumber *)fileOwnerAccountID {
        MSGSTART("ModelDictionary:-(NSNumber*)fileOwnerAccountID")
        return [__dictionary fileOwnerAccountID];
    }
    - (NSString *)fileOwnerAccountName {
        MSGSTART("ModelDictionary:-(NSString*)fileOwnerAccountName")
        return [__dictionary fileOwnerAccountName];
    }
    - (Unsigned)filePosixPermissions {
        MSGSTART("ModelDictionary:-(Unsigned)filePosixPermissions")
        return [__dictionary filePosixPermissions];
    }
    - (ULL)fileSize {
        MSGSTART("ModelDictionary:-(ULL)fileSize")
        return [__dictionary fileSize];
    }
    - (Unsigned)fileSystemFileNumber {
        MSGSTART("ModelDictionary:-(Unsigned)fileSystemFileNumber")
        return [__dictionary fileSystemFileNumber];
    }
    - (Int)fileSystemNumber {
        MSGSTART("ModelDictionary:-(Int)fileSystemNumber")
        return [__dictionary fileSystemNumber];
    }
    - (NSString *)fileType {
        MSGSTART("ModelDictionary:-(NSString*)fileType")
        return [__dictionary fileType];
    }
    - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        MSGSTART("ModelDictionary:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

        [__dictionary getObjects : objects andKeys : keys];
    }
    - (ModelDictionary *)init {
        MSGSTART("ModelDictionary:-(ModelDictionary*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassModelDictionary];

/*i10001*/ return self;
    }
    - (ModelDictionary *)initWithCoder:(NSCoder *)coder {
        MSGSTART("ModelDictionary:-(ModelDictionary*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelDictionary];

/*i10001*/ return self;
    }
    - (ModelDictionary *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("ModelDictionary:-(ModelDictionary*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelDictionary];

/*i10001*/ return self;
    }
    - (ModelDictionary *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("ModelDictionary:-(ModelDictionary*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelDictionary];

/*i10001*/ return self;
    }
    - (ModelDictionary *)initWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("ModelDictionary:-(ModelDictionary*)initWithDictionary:(NSDictionary*)dictionary")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = (insertsWeakObjectsByDefault ? dictionary.weakCopy : [[NSDictionary alloc] initWithDictionary:dictionary]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelDictionary];

/*i10001*/ return self;
    }
    - (ModelDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy {
        MSGSTART("ModelDictionary:-(ModelDictionary*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelDictionary];

/*i10001*/ return self;
    }
    - (ModelDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("ModelDictionary:-(ModelDictionary*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelDictionary];

/*i10001*/ return self;
    }
    - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary {
        MSGSTART("ModelDictionary:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
        return [__dictionary isEqualToDictionary:dictionary];
    }
    - (NSEnumerator *)keyEnumerator {
        MSGSTART("ModelDictionary:-(NSEnumerator*)keyEnumerator")
        return [__dictionary keyEnumerator];
    }
    - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("ModelDictionary:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesPassingTest:predicate];
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("ModelDictionary:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesWithOptions:opts passingTest:predicate];
    }
    - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        MSGSTART("ModelDictionary:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueUsingComparator:cmptr];
    }
    - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector {
        MSGSTART("ModelDictionary:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

        return [__dictionary keysSortedByValueUsingSelector:selector];
    }
    - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("ModelDictionary:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr];
    }
    - (void)makeModel {
        MSGSTART("ModelDictionary:-(void)makeModel")

        for (id<NSCopying> key in __dictionary) {
            id o = [__dictionary objectForKey:key];
            if ([o conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) o modeladd];
        }
    }
    - (void)makeNonModel {
        MSGSTART("ModelDictionary:-(void)makeNonModel")

        for (id<NSCopying> key in __dictionary) {
            id o = [__dictionary objectForKey:key];
            if ([o conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) o modelsub];
        }
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("ModelDictionary:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("ModelDictionary:-(NSEnumerator*)objectEnumerator")
        return [__dictionary objectEnumerator];
    }
    - (id)objectForKey:(id<NSCopying> )key {
        MSGSTART("ModelDictionary:-(id)objectForKey:(id<NSCopying>)key")

        /*i-10*/ id ret = [__dictionary objectForKey:key];

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("ModelDictionary:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        MSGSTART("ModelDictionary:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

        return [__dictionary objectsForKeys:keys notFoundMarker:anObject];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("ModelDictionary:-(void)setWeakness:(CollectionWeakness)v")
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("ModelDictionary:-(id)valueForKey:(NSString*)key")
        return [__dictionary valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("ModelDictionary:-(CollectionWeakness)weakness")
        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("ModelDictionary:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [__dictionary writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("ModelDictionary:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [__dictionary writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ModelSet
    #define _WIClass_           ModelSet__
    #define _className_         modelSet
    #define _Class_             ModelSet__
    @implementation ModelSet

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize retrievesWeakValues = retrievesWeakValues;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassModelSet {
        MSGSTART("ModelSet:-(void)_startObjectOfClassModelSet")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*/ [self makeModel];
/*i0*/}
    - (NSSet *)__set {
        MSGSTART("ModelSet:-(NSSet*)__set")

        /*i-999*/ NSSet * ret = __set;
        /*i999*/ return ret;
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("ModelSet:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__set addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (NSArray *)allObjects {
        MSGSTART("ModelSet:-(NSArray*)allObjects")
        return [__set allObjects];
    }
    - (id)anyObject {
        MSGSTART("ModelSet:-(id)anyObject")
        return [[__set anyObject] selfWithWeakness:retrievesWeakValues];
    }
    - (constchar *)cdescription {
        MSGSTART("ModelSet:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("ModelSet:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("ModelSet:-(BOOL)containsObject:(id)object")
        return [__set containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("ModelSet:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (Unsigned)count {
        MSGSTART("ModelSet:-(Unsigned)count")
        return [__set count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("ModelSet:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__set countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("ModelSet:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __set) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("ModelSet:-(void)dealloc")

        /*i-500*/[self makeNonModel];
/*i-151*/ [self die];
/*i0*/ __set = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("ModelSet:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__set description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("ModelSet:-(NSString*)descriptionWithLocale:(id)locale")
        return [__set descriptionWithLocale:locale];
    }
    - (void)die {
        MSGSTART("ModelSet:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("ModelSet:-(void)encodeWithCoder:(NSCoder*)coder")

        [__set encodeWithCoder : coder];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("ModelSet:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("ModelSet:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("ModelSet:-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate")
        return [__set filteredSetUsingPredicate:predicate];
    }
    - (ModelSet *)init {
        MSGSTART("ModelSet:-(ModelSet*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] init];

        /*i11*/ [self _startObjectOfClassModelSet];

/*i10001*/ return self;
    }
    - (ModelSet *)initWithArray:(NSArray *)array {
        MSGSTART("ModelSet:-(ModelSet*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithArray:array];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelSet];

/*i10001*/ return self;
    }
    - (ModelSet *)initWithCoder:(NSCoder *)coder {
        MSGSTART("ModelSet:-(ModelSet*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelSet];

/*i10001*/ return self;
    }
    - (ModelSet *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("ModelSet:-(ModelSet*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelSet];

/*i10001*/ return self;
    }
    - (ModelSet *)initWithSet:(NSSet *)set {
        MSGSTART("ModelSet:-(ModelSet*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = (insertsWeakObjectsByDefault ? set.weakCopy : [[NSSet alloc] initWithSet:set]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelSet];

/*i10001*/ return self;
    }
    - (ModelSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy {
        MSGSTART("ModelSet:-(ModelSet*)initWithSet:(NSSet*)set copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithSet:set copyItems:copy];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelSet];

/*i10001*/ return self;
    }
    - (BOOL)intersectsSet:(NSSet *)set {
        MSGSTART("ModelSet:-(BOOL)intersectsSet:(NSSet*)set")
        return [__set intersectsSet:set];
    }
    - (BOOL)isEqualToSet:(NSSet *)set {
        MSGSTART("ModelSet:-(BOOL)isEqualToSet:(NSSet*)set")
        return [__set isEqualToSet:set];
    }
    - (BOOL)isSubsetOfSet:(NSSet *)set {
        MSGSTART("ModelSet:-(BOOL)isSubsetOfSet:(NSSet*)set")
        return [__set isSubsetOfSet:set];
    }
    - (void)makeModel {
        MSGSTART("ModelSet:-(void)makeModel")

        for (NSObject *object in __set) {
            if ([object conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) object modeladd];
        }
    }
    - (void)makeNonModel {
        MSGSTART("ModelSet:-(void)makeNonModel")

        for (NSObject *object in __set) {
            if ([object conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) object modelsub];
        }
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("ModelSet:-(void)makeObjectsPerformSelector:(SEL)selector")
        [__set makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("ModelSet:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")
        [__set makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)member:(id)object {
        MSGSTART("ModelSet:-(id)member:(id)object")
        return [__set member:object];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("ModelSet:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("ModelSet:-(NSEnumerator*)objectEnumerator")
        return [__set objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("ModelSet:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("ModelSet:-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsPassingTest:predicate];
    }
    - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("ModelSet:-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsWithOptions:opts passingTest:predicate];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("ModelSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__set removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("ModelSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__set removeObserver : observer forKeyPath : keyPath context : context];
    }
    + (ModelSet *)set {
        MSGSTART("ModelSet:+(ModelSet*)set")
        return [[ModelSet alloc] init];
    }
    - (NSSet *)setByAddingObject:(id)object {
        MSGSTART("ModelSet:-(NSSet*)setByAddingObject:(id)object")
        return [__set setByAddingObject:object];
    }
    - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("ModelSet:-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array")
        return [__set setByAddingObjectsFromArray:array];
    }
    - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set {
        MSGSTART("ModelSet:-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set")
        return [__set setByAddingObjectsFromSet:set];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("ModelSet:-(void)setValue:(id)value forKey:(NSString *)key")
        [__set setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("ModelSet:-(void)setWeakness:(CollectionWeakness)v")
    }
    + (ModelSet *)setWithArray:(NSArray *)array {
        MSGSTART("ModelSet:+(ModelSet*)setWithArray:(NSArray*)array")
        return [[ModelSet alloc] initWithArray:array];
    }
    + (ModelSet *)setWithObject:(id)object {
        MSGSTART("ModelSet:+(ModelSet*)setWithObject:(id)object")
        return [[ModelSet alloc] initWithObjects:&object count:1];
    }
    + (ModelSet *)setWithSet:(NSSet *)set {
        MSGSTART("ModelSet:+(ModelSet*)setWithSet:(NSSet*)set")
        return [[ModelSet alloc] initWithSet:set];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("ModelSet:-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors")
        return [__set sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("ModelSet:-(id)valueForKey:(NSString*)key")
        return [__set valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("ModelSet:-(CollectionWeakness)weakness")
        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableArray
    #define _WIClass_           MutableArray__
    #define _className_         mutableArray
    #define _Class_             MutableArray__
    @implementation MutableArray

    @synthesize __owner_context = __owner_context;
    @synthesize array_count = array_count;
    @synthesize array_objects = array_objects;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassMutableArray {
        MSGSTART("MutableArray:-(void)_startObjectOfClassMutableArray")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ version = (1);

        /*i0*/ self.delegateForArray = self;
    }
    - (NSArray *)__array {
        MSGSTART("MutableArray:-(NSArray*)__array")

        /*i-999*/ NSArray * ret = __array;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)__mutableArray {
        MSGSTART("MutableArray:-(NSMutableArray*)__mutableArray")

        /*i-999*/ NSMutableArray * ret = __mutableArray;
        /*i999*/ return ret;
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableArray:-(bool)_addObjectsFromArray:(NSArray*)array")

        if (array.count) {
            Unsigned cwas = __array.count,added = 0;
            [self willTryToAddObjectsWithCount:array.count];
            for (NSObject *object in array) {
                bool weak = insertsWeakObjectsByDefault;
                if (![self shouldAddObject:object makeWeak:weak]) {
                    [self wontAddObject:object withIndex:cwas + added];
                }
                else {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) continue;

                    [self willAddObject:object withIndex:cwas + added];

                    [__mutableArray addObject:useObject];
                    if (weak) weakObjectCount++;

                    [self didAddObject:object withIndex:cwas + added];
                    added++;
                }
            }
            return added > 0;
        }
        else {
            return NO;
        }
    }
    - (bool)_insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("MutableArray:-(bool)_insertObject:(id)object atIndex:(Unsigned)index")

        if (index == NSNotFound) return NO;

        if (index > __array.count) {
            ERR( "%d outside bounds [0,%d]\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            if (index != __array.count) [self objectsMovedFromRange:NSMakeRange( index,__array.count - (index + 1) ) toLocation:index + 1];
            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArray:-(bool)_insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        bool ret = NO;
        if (objects.count != indexes.count) {
            ERR("Bad count");
            return NO;
        }
        Unsigned skipped = 0,move = 0,index = [indexes firstIndex],prvIndex;

        NSMutableIndexSet *addedInds = [[NSMutableIndexSet alloc] init];

        [self willTryToAddObjectsWithCount:objects.count];
        for (NSObject *object in objects) {
            bool weak = insertsWeakObjectsByDefault;
            if (![self shouldAddObject:object makeWeak:weak]) {
                [self wontAddObject:object withIndex:index];
                skipped++;
            }
            else {
                do {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) break;

                    [addedInds addIndex:index];
                    [self willAddObject:object withIndex:index - skipped];

                    [__mutableArray insertObject:useObject atIndex:index - skipped];
                    if (weak) weakObjectCount++;
                    move++;
                } while (NO);
            }
            index = [indexes indexGreaterThanIndex:index];
        }
        if (move) {
            for (prvIndex = __mutableArray.count + indexes.count - skipped,index = indexes.lastIndex; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
                if ([addedInds containsIndex:index]) {
                    [self objectsMovedFromRange:NSMakeRange( index - skipped,prvIndex - (index - skipped) ) toLocation:(index - skipped) + move];
                    prvIndex = index - skipped;
                    move--;
                }
                else {
                    skipped--;
                }
            }

            index = indexes.firstIndex;
            for (NSObject *object in objects) {
                if ([addedInds containsIndex:index])
                    [self didAddObject:object withIndex:index - skipped];
                else skipped++;
            }
            ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("MutableArray:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSArray *was = [__array copy];
        [self willRemoveObjectsWithCount:was.count];
        for (Int i = int(was.count) - 1; i >= 0; i--) {
            [self willRemoveObject:[was objectAtIndex:i] fromIndex:i];
        }
        [__mutableArray removeAllObjects];
        weakObjectCount = 0;

        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObjectAtIndex:(Unsigned)index {
        MSGSTART("MutableArray:-(bool)_removeObjectAtIndex:(Unsigned)index")

        if (index != NSNotFound) {
            if (index >= __array.count) {
                ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
                return NO;
            }
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object fromIndex:index];

            if (object.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self objectsMovedFromRange:NSMakeRange(index + 1,__array.count - index) toLocation:index];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArray:-(bool)_removeObjectsAtIndexes:(NSIndexSet*)indexes")

        [self willRemoveObjectsWithCount : indexes.count];
        for (Unsigned index = [indexes lastIndex]; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObject:object fromIndex:index];

            [__mutableArray removeObjectAtIndex:index];
            if (object.isWeakSelf) --weakObjectCount;

            [self didRemoveObject:object];
        }
        for (Unsigned index = [indexes firstIndex],i = 0; index != NSNotFound; index = [indexes indexGreaterThanIndex:index],i++) {
            Unsigned nxtIndex = [indexes indexGreaterThanIndex:index];
            if (nxtIndex == NSNotFound) nxtIndex = __mutableArray.count + indexes.count;
            if (nxtIndex > index + 1) [self objectsMovedFromRange:NSMakeRange( index + 1,nxtIndex - (index + 1) ) toLocation:index - i];
        }
        return indexes.count > 0;
    }
    - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("MutableArray:-(bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if (index == NSNotFound) return NO;

        if (index >= __array.count) {
            ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        NSObject *object2 = [__array objectAtIndex:index];
        if (object == object2) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;


            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object2 fromIndex:index];

            if (object2.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self didRemoveObject:object2];

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableArray:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("MutableArray:-(void)addObject:(id)object")

        [self insertObject : object atIndex : __mutableArray.count];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableArray:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("MutableArray:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("MutableArray:-(void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer toObjectsAtIndexes : indexes forKeyPath : keyPath options : options context : context];
    }
    - (void)allObjectsMoved {
        MSGSTART("MutableArray:-(void)allObjectsMoved")


        /*i100*/[arrayDelegate allObjectsMoved];
    }
    + (MutableArray *)array {
        MSGSTART("MutableArray:+(MutableArray*)array")
        return [[MutableArray alloc] init];
    }
    - (NSArray *)arrayByAddingObject:(id)object {
        MSGSTART("MutableArray:-(NSArray*)arrayByAddingObject:(id)object")

        return [self.objects arrayByAddingObject:object];
    }
    - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableArray:-(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array")

        return [self.objects arrayByAddingObjectsFromArray:array];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("MutableArray:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    + (MutableArray *)arrayWithArray:(NSArray *)array {
        MSGSTART("MutableArray:+(MutableArray*)arrayWithArray:(NSArray*)array")
        return [[MutableArray alloc] initWithArray:array];
    }
    + (id)arrayWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableArray:+(id)arrayWithCapacity:(Unsigned)numItems")

        return [[MutableArray alloc] initWithCapacity:numItems];
    }
    + (MutableArray *)arrayWithContentsOfFile:(NSString *)file {
        MSGSTART("MutableArray:+(MutableArray*)arrayWithContentsOfFile:(NSString*)file")
        return [[MutableArray alloc] initWithContentsOfFile:file];
    }
    + (MutableArray *)arrayWithContentsOfURL:(NSURL *)url {
        MSGSTART("MutableArray:+(MutableArray*)arrayWithContentsOfURL:(NSURL*)url")
        return [[MutableArray alloc] initWithContentsOfURL:url];
    }
    + (MutableArray *)arrayWithObject:(id)object {
        MSGSTART("MutableArray:+(MutableArray*)arrayWithObject:(id)object")
        return [[MutableArray alloc] initWithObjects:&object count:1];
    }
    + (MutableArray *)arrayWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("MutableArray:+(MutableArray*)arrayWithObjects:(id*)objects count:(Unsigned)count")
        return [[MutableArray alloc] initWithObjects:objects count:count];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableArray:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableArray:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        MSGSTART("MutableArray:-(NSString *)componentsJoinedByString:(NSString *)separator")

        return [__array componentsJoinedByString:separator];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("MutableArray:-(BOOL)containsObject:(id)object")
        return [__array containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("MutableArray:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (Unsigned)count {
        MSGSTART("MutableArray:-(Unsigned)count")
        return [__array count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("MutableArray:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__array countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("MutableArray:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __array) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("MutableArray:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ __mutableArray = nil;

        __array = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("MutableArray:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("MutableArray:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableArray:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__array description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("MutableArray:-(NSString *)descriptionWithLocale:(id)locale")

        return [self.objects descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("MutableArray:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [self.objects descriptionWithLocale:locale indent:level];
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArray:-(void)didAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate didAddObject : object withIndex : index];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableArray:-(void)didRemoveObject:(id)object")


        /*i100*/[arrayDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("MutableArray:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("MutableArray:-(void)encodeWithCoder:(NSCoder*)coder")

        [__array encodeWithCoder : coder];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("MutableArray:-(void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsAtIndexes : indexSet options : opts usingBlock : block];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("MutableArray:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("MutableArray:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi {
        MSGSTART("MutableArray:-(void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi")

        if (fromi != toi) {
            [__mutableArray exchangeObjectAtIndex:fromi withObjectAtIndex:toi];
            [self objectsSwappedWithIndex:fromi andIndex:toi];
            [self stateOK];
        }
    }
    - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableArray:-(NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate")

        return [self.objects filteredArrayUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableArray:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        NSMutableIndexSet * toRemove = nil;
        Unsigned index = 0;
        for (NSObject *object in __array) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableIndexSet alloc] init];
                [toRemove addIndex:index];
            }
            index++;
        }
        if (toRemove) {
            [self _removeObjectsAtIndexes:toRemove];
            [self stateOK];
        }
    }
    - (id)firstObjectCommonWithArray:(NSArray *)array {
        MSGSTART("MutableArray:-(id)firstObjectCommonWithArray:(NSArray*)array")

        return [__array firstObjectCommonWithArray:array];
    }
    - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange {
        MSGSTART("MutableArray:-(void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange")

        [__array getObjects : aBuffer range : aRange];
        if (weakObjectCount) for (Int i = aRange.length + aRange.location - 1; i >= aRange.location; i--) {
                aBuffer[i] = [aBuffer[i] strongSelf];
            }

    }
    - (Unsigned)hash {
        MSGSTART("MutableArray:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArray:-(NSIndexSet*)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArray:-(NSIndexSet*)indexesOfObjectsPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsPassingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArray:-(NSIndexSet*)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsWithOptions:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        MSGSTART("MutableArray:-(Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp")

        return [__array indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp];
    }
    - (Unsigned)indexOfObject:(id)object {
        MSGSTART("MutableArray:-(Unsigned)indexOfObject:(id)object")

        return [__array indexOfObject:object];
    }
    - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range {
        MSGSTART("MutableArray:-(Unsigned)indexOfObject:(id)object inRange:(NSRange)range")

        return [__array indexOfObject:object inRange:range];
    }
    - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArray:-(Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object {
        MSGSTART("MutableArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf]],[__array indexOfObjectIdenticalTo:[object weakSelf]]);
        else return [__array indexOfObjectIdenticalTo:object];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        MSGSTART("MutableArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf] inRange:range],[__array indexOfObjectIdenticalTo:[object weakSelf] inRange:range]);
        else return [__array indexOfObjectIdenticalTo:object inRange:range];
    }
    - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArray:-(Unsigned)indexOfObjectPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectPassingTest:predicate];
    }
    - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArray:-(Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectWithOptions:opts passingTest:predicate];
    }
    - (MutableArray *)init {
        MSGSTART("MutableArray:-(MutableArray*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] init];

        /*i11*/ [self _startObjectOfClassMutableArray];

/*i10001*/ return self;
    }
    - (MutableArray *)initWithArray:(NSArray *)array {
        MSGSTART("MutableArray:-(MutableArray*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = (insertsWeakObjectsByDefault ? array.weakMutableCopy : [[NSMutableArray alloc] initWithArray:array]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArray];

/*i10001*/ return self;
    }
    - (MutableArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy {
        MSGSTART("MutableArray:-(MutableArray*)initWithArray:(NSArray*)array copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithArray:array copyItems:copy];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArray];

/*i10001*/ return self;
    }
    - (MutableArray *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableArray:-(MutableArray*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassMutableArray];

/*i10001*/ return self;
    }
    - (MutableArray *)initWithCoder:(NSCoder *)coder {
        MSGSTART("MutableArray:-(MutableArray*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArray];

/*i10001*/ return self;
    }
    - (MutableArray *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("MutableArray:-(MutableArray*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArray];

/*i10001*/ return self;
    }
    - (MutableArray *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("MutableArray:-(MutableArray*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArray];

/*i10001*/ return self;
    }
    - (MutableArray *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("MutableArray:-(MutableArray*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArray];

/*i10001*/ return self;
    }
    - (void)insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("MutableArray:-(void)insertObject:(id)object atIndex:(Unsigned)index")

        if ([self _insertObject:object atIndex:index]) [self stateOK];
    }
    - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArray:-(void)insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        if ([self _insertObjects:objects atIndexes:indexes]) [self stateOK];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("MutableArray:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToArray:(NSArray *)array {
        MSGSTART("MutableArray:-(BOOL)isEqualToArray:(NSArray*)array")

        return [__array isEqualToArray:array];
    }
    - (id)lastObject {
        MSGSTART("MutableArray:-(id)lastObject")
        return weakObjectCount ? [__array.lastObject strongSelf] : __array.lastObject;
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("MutableArray:-(void)makeObjectsPerformSelector:(SEL)selector")

        [__array makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("MutableArray:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")

        [__array makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("MutableArray:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (id)objectAtIndex:(Unsigned)index {
        MSGSTART("MutableArray:-(id)objectAtIndex:(Unsigned)index")

        if (index >= __array.count) ERR( "Index %d is out of bounds [0,%d)",int(index),int(__array.count) );
        return weakObjectCount ? [__array[index] strongSelf] : __array[index];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("MutableArray:-(NSEnumerator*)objectEnumerator")
        return [__array objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableArray:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objects {
        MSGSTART("MutableArray:-(NSArray*)objects")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            Int i = 0;
            for (NSObject *o in __array) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : __array;
        }
        else {
            return __array;
        }
    }
    - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArray:-(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            NSArray *ret = [__array objectsAtIndexes:indexes];
            Int i = 0;
            for (NSObject *o in ret) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : ret;
        }
        else {
            return [__array objectsAtIndexes:indexes];
        }
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("MutableArray:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")


        /*i100*/[arrayDelegate objectsMovedFromRange : fromRange toLocation : toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("MutableArray:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")


        /*i100*/[arrayDelegate objectsSwappedWithIndex : fromIndex andIndex : toIndex];
    }
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        MSGSTART("MutableArray:-(NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes")

        return [self.objects pathsMatchingExtensions:filterTypes];
    }
    - (void)removeAllObjects {
        MSGSTART("MutableArray:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableArray:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableArray:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeLastObject {
        MSGSTART("MutableArray:-(void)removeLastObject")

        if (__array.count) [self removeObjectAtIndex:__array.count - 1];
    }
    - (void)removeObjectAtIndex:(Unsigned)index {
        MSGSTART("MutableArray:-(void)removeObjectAtIndex:(Unsigned)index")

        if ([self _removeObjectAtIndex:index]) [self stateOK];
    }
    - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArray:-(void)removeObjectsAtIndexes:(NSIndexSet*)indexes")

        if ([self _removeObjectsAtIndexes:indexes]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("MutableArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("MutableArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer forKeyPath : keyPath context : context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath {
        MSGSTART("MutableArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("MutableArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath context : context];
    }
    - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("MutableArray:-(void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if ([self _replaceObjectAtIndex:index withObject:object]) [self stateOK];
    }
    - (NSEnumerator *)reverseObjectEnumerator {
        MSGSTART("MutableArray:-(NSEnumerator*)reverseObjectEnumerator")
        return [__array reverseObjectEnumerator];
    }
    - (void)setArray:(NSArray *)array {
        MSGSTART("MutableArray:-(void)setArray:(NSArray*)array")

        NSIndexSet * inss,*dels;
        if (![Util getInsertsAndDeletesAsIndexSetWhenChanging:__array to:array inss:&inss dels:&dels]) return;

        [self _removeObjectsAtIndexes:dels];
        NSArray *objs = [array objectsAtIndexes:inss];
        [self _insertObjects:objs atIndexes:inss];
        [self stateOK];
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("MutableArray:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("MutableArray:-(void)setValue:(id)value forKey:(NSString *)key")

        [__array setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("MutableArray:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setArray:__array.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setArray:__array.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableArray:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSData *)sortedArrayHint {
        MSGSTART("MutableArray:-(NSData*)sortedArrayHint")

        return [__array sortedArrayHint];
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        MSGSTART("MutableArray:-(NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayUsingComparator:cmptr];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("MutableArray:-(NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors")

        return [self.objects sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context {
        MSGSTART("MutableArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context")

        return [self.objects sortedArrayUsingFunction:comparator context:context];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint {
        MSGSTART("MutableArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint")

        return [self.objects sortedArrayUsingFunction:comparator context:context hint:hint];
    }
    - (NSArray *)sortedArrayUsingSelector:(SEL)selector {
        MSGSTART("MutableArray:-(NSArray*)sortedArrayUsingSelector:(SEL)selector")

        return [self.objects sortedArrayUsingSelector:selector];
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("MutableArray:-(NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayWithOptions:opts usingComparator:cmptr];
    }
    - (void)sortUsingComparator:(NSComparator)cmptr {
        MSGSTART("MutableArray:-(void)sortUsingComparator:(NSComparator)cmptr")

        [__mutableArray sortUsingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("MutableArray:-(void)sortUsingDescriptors:(NSArray*)sortDescriptors")

        [__mutableArray sortUsingDescriptors : sortDescriptors];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context {
        MSGSTART("MutableArray:-(void)sortUsingFunction:(Int (*)(id, id, void *))compare context:(void *)context")

        [__mutableArray sortUsingFunction : compare context : context];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingSelector:(SEL)selector {
        MSGSTART("MutableArray:-(void)sortUsingSelector:(SEL)selector")

        [__mutableArray sortUsingSelector : selector];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("MutableArray:-(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        [__mutableArray sortWithOptions : opts usingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)stateOK {
        MSGSTART("MutableArray:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ array_count = 0;
        for (id o in __array) {
            array_objects.ids[array_count++] = (__bridge void *)o;
            if (array_count == 100) break;
        }
        memset( array_objects.ids + array_count,0,sizeof(array_objects.ids[0]) * (100 - array_count) );
        array_count = __array.count;

        /*i100*/ [arrayDelegate stateOK];
    }
    - (NSArray *)subarrayWithRange:(NSRange)r {
        MSGSTART("MutableArray:-(NSArray*)subarrayWithRange:(NSRange)r")

        return [self.objects subarrayWithRange:r];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("MutableArray:-(id)valueForKey:(NSString*)key")

        return [__array valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("MutableArray:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArray:-(void)willAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate willAddObject : object withIndex : index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("MutableArray:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")


        /*i100*/[arrayDelegate willRemoveObject : object fromIndex : index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableArray:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableArray:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArray:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("MutableArray:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [self.objects writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("MutableArray:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [self.objects writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableArrayDebuggerDelegate
    #define _WIClass_           MutableArrayDebuggerDelegate__
    #define _className_         mutableArrayDebuggerDelegate
    #define _Class_             MutableArrayDebuggerDelegate__
    @implementation MutableArrayDebuggerDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize attached = attached;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableArrayDebuggerDelegate {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)_startObjectOfClassMutableArrayDebuggerDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)allObjectsMoved {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)allObjectsMoved")

        prnt("Array %s: all objects moved\n",v_name.UTF8String);



        /*i100*/ [arrayDelegate allObjectsMoved];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("MutableArrayDebuggerDelegate:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    + (void)attachTo:(NSObject<MinimalMutableArray> *)a named:(NSString *)aname {
        MSGSTART("MutableArrayDebuggerDelegate:+(void)attachTo:(NSObject<MinimalMutableArray>*)a named:(NSString*)aname")

        if (!a) prnt("Array %s is nil\n",aname.UTF8String);
        else [a addDelegate:[[MutableArrayDebuggerDelegate alloc] initWithName:aname]];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableArrayDebuggerDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableArrayDebuggerDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ if (attached) prnt("Array %s: dealloced\n",v_name.UTF8String);




        v_name = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("MutableArrayDebuggerDelegate:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableArrayDebuggerDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    + (void)dettachFrom:(NSObject<MinimalMutableArray> *)a named:(NSString *)aname {
        MSGSTART("MutableArrayDebuggerDelegate:+(void)dettachFrom:(NSObject<MinimalMutableArray>*)a named:(NSString*)aname")

        for (NSObject<MutableArrayDelegate> *del = a.arrayDelegate; del; del = del.arrayDelegate) {
            if ( [del isKindOfClass:[MutableArrayDebuggerDelegate class]] &&
                 (
                     (!aname) ||
                     ( ( (MutableArrayDebuggerDelegate *)del ).name && [( (MutableArrayDebuggerDelegate *)del ).name isEqualToString : aname] )
                 ) ) {
                ( (MutableArrayDebuggerDelegate *)del ).attached = NO;
                [a removeDelegate:del];
            }
        }
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)didAddObject:(id)object withIndex:(Unsigned)index")

        prnt("Array %s: did add index %d, object %s\n",v_name.UTF8String,int(index),[Util cnameFor:object]);



        /*i100*/ [arrayDelegate didAddObject:object withIndex:index];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)didRemoveObject:(id)object")

        prnt("Array %s: did remove object %s\n",v_name.UTF8String,[Util cnameFor:object]);



        /*i100*/ [arrayDelegate didRemoveObject:object];
    }
    - (void)die {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)die")

        /*i900*/}
    - (MutableArrayDebuggerDelegate *)initWithName:(NSString *)aname {
        MSGSTART("MutableArrayDebuggerDelegate:-(MutableArrayDebuggerDelegate*)initWithName:(NSString*)aname")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ self.name = aname;
        attached = YES;

        /*i11*/ [self _startObjectOfClassMutableArrayDebuggerDelegate];

/*i10001*/ return self;
    }
    - (NSString *)name {
        MSGSTART("MutableArrayDebuggerDelegate:-(NSString*)name")

        /*i-999*/ NSString * ret = v_name;
        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableArrayDebuggerDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")

        prnt("Array %s: objects at [%d,%d) move to [%d,%d)\n",v_name.UTF8String,fromRange.location,fromRange.location + fromRange.length,toLocation,toLocation + fromRange.length);



        /*i100*/ [arrayDelegate objectsMovedFromRange:fromRange toLocation:toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")

        prnt("Array %s: objects at %d and %d swapped\n",v_name.UTF8String,fromIndex,toIndex);



        /*i100*/ [arrayDelegate objectsSwappedWithIndex:fromIndex andIndex:toIndex];
    }
    - (void)removedDelegate {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    - (void)setName:(NSString *)v {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)setName:(NSString*)v")

        /*i-905*/ if (v_name == v) return;

        /*i-900*/ {
            v_name = (id)v;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableArrayDebuggerDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i998*/ prnt("Array %s: should%s add %s%s\n",v_name.UTF8String,ret ? "" : "n't",weak ? "weak " : "",[Util cnameFor:object]);

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)stateOK")




        /*i100*/[arrayDelegate stateOK];
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)willAddObject:(id)object withIndex:(Unsigned)index")

        prnt("Array %s: will add index %d, %s\n",v_name.UTF8String,int(index),[Util cnameFor:object]);



        /*i100*/ [arrayDelegate willAddObject:object withIndex:index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")

        prnt("Array %s: will remove index %d, object %s\n",v_name.UTF8String,index,[Util cnameFor:object]);



        /*i100*/ [arrayDelegate willRemoveObject:object fromIndex:index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArrayDebuggerDelegate:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")

        prnt("Array %s: wont add index %d, %s\n",v_name.UTF8String,int(index),[Util cnameFor:object]);



        /*i100*/ [arrayDelegate wontAddObject:object withIndex:index];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableArrayFollowerDelegate
    #define _WIClass_           MutableArrayFollowerDelegate__
    #define _className_         mutableArrayFollowerDelegate
    #define _Class_             MutableArrayFollowerDelegate__
    @implementation MutableArrayFollowerDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableArrayFollowerDelegate {
        MSGSTART("MutableArrayFollowerDelegate:-(void)_startObjectOfClassMutableArrayFollowerDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableArrayFollowerDelegate:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)allObjectsMoved {
        MSGSTART("MutableArrayFollowerDelegate:-(void)allObjectsMoved")

        NSMutableArray * a = [[NSMutableArray alloc] initWithCapacity:delegateForArray.count];
        NSMutableIndexSet *is = [[NSMutableIndexSet alloc] init];
        for (NSObject *object in delegateForArray) {
            Unsigned index = [delegateForArray indexOfObject:object];
            while ( (index != NSNotFound) && [is containsIndex:index] )
                index = (index == delegateForArray.count - 1 ? NSNotFound : [delegateForArray indexOfObject:object inRange:NSMakeRange( index + 1,delegateForArray.count - (index + 1) )]);
            if (index == NSNotFound) {
                [a addObject:[self objectForObject:object]];
            }
            else {
                [a addObject:[followerArray objectAtIndex:index]];
                [is addIndex:index];
            }
        }
        [followerArray setArray:a];



        /*i100*/ [arrayDelegate allObjectsMoved];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("MutableArrayFollowerDelegate:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("MutableArrayFollowerDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableArrayFollowerDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableArrayFollowerDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ followerArray = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("MutableArrayFollowerDelegate:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("MutableArrayFollowerDelegate:-(void)delegateForArrayChanged")

        if (followerArray) [self refreshFollowerArray];
    }
    - (NSString *)description {
        MSGSTART("MutableArrayFollowerDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArrayFollowerDelegate:-(void)didAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate didAddObject : object withIndex : index];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableArrayFollowerDelegate:-(void)didRemoveObject:(id)object")


        /*i100*/[arrayDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("MutableArrayFollowerDelegate:-(void)die")

        /*i900*/}
    - (NSMutableArray *)followerArray {
        MSGSTART("MutableArrayFollowerDelegate:-(NSMutableArray*)followerArray")
        return followerArray;
    }
    + (MutableArrayFollowerDelegate *)get {
        MSGSTART("MutableArrayFollowerDelegate:+(MutableArrayFollowerDelegate*)get")
        return [[MutableArrayFollowerDelegate alloc] init];
    }
    - (MutableArrayFollowerDelegate *)init {
        MSGSTART("MutableArrayFollowerDelegate:-(MutableArrayFollowerDelegate*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassMutableArrayFollowerDelegate];

/*i10001*/ return self;
    }
    - (id)objectForObject:(id)object {
        MSGSTART("MutableArrayFollowerDelegate:-(id)objectForObject:(id)object")

        /*i-999*/ id ret = object;

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableArrayFollowerDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("MutableArrayFollowerDelegate:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")


        /*i100*/[arrayDelegate objectsMovedFromRange : fromRange toLocation : toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("MutableArrayFollowerDelegate:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")

        [followerArray exchangeObjectAtIndex : fromIndex withObjectAtIndex : toIndex];



        /*i100*/ [arrayDelegate objectsSwappedWithIndex:fromIndex andIndex:toIndex];
    }
    - (void)refreshFollowerArray {
        MSGSTART("MutableArrayFollowerDelegate:-(void)refreshFollowerArray")

        NSMutableArray * a = [[NSMutableArray alloc] initWithCapacity:delegateForArray.count];
        for (NSObject *object in delegateForArray) {
            [a addObject:[self objectForObject:object]];
        }
        [followerArray setArray:a];
    }
    - (void)removedDelegate {
        MSGSTART("MutableArrayFollowerDelegate:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableArrayFollowerDelegate:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("MutableArrayFollowerDelegate:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    - (void)setFollowerArray:(NSMutableArray *)v {
        MSGSTART("MutableArrayFollowerDelegate:-(void)setFollowerArray:(NSMutableArray*)v")
        followerArray = v; [self refreshFollowerArray];
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("MutableArrayFollowerDelegate:-(void)setWithDictionary:(NSDictionary*)d")
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableArrayFollowerDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableArrayFollowerDelegate:-(void)stateOK")


        /*i100*/[arrayDelegate stateOK];
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArrayFollowerDelegate:-(void)willAddObject:(id)object withIndex:(Unsigned)index")



        /*i100*/[arrayDelegate willAddObject : object withIndex : index];

/*i500*/ [followerArray insertObject:[self objectForObject:object] atIndex:index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("MutableArrayFollowerDelegate:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")



        /*i100*/[arrayDelegate willRemoveObject : object fromIndex : index];

/*i500*/ [followerArray removeObjectAtIndex:index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableArrayFollowerDelegate:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableArrayFollowerDelegate:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArrayFollowerDelegate:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableDictionary
    #define _WIClass_           MutableDictionary__
    #define _className_         mutableDictionary
    #define _Class_             MutableDictionary__
    @implementation MutableDictionary

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize dictionary_count = dictionary_count;
    @synthesize dictionary_objects = dictionary_objects;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassMutableDictionary {
        MSGSTART("MutableDictionary:-(void)_startObjectOfClassMutableDictionary")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ version = (1);

        /*i0*/ self.delegateForDictionary = self;
    }
    - (NSDictionary *)__dictionary {
        MSGSTART("MutableDictionary:-(NSDictionary*)__dictionary")

        /*i-999*/ NSDictionary * ret = __dictionary;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__mutableDictionary {
        MSGSTART("MutableDictionary:-(NSMutableDictionary*)__mutableDictionary")

        /*i-999*/ NSMutableDictionary * ret = __mutableDictionary;
        /*i999*/ return ret;
    }
    - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionary:-(bool)_addEntriesFromDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        for (id<NSCopying> key in dictionary) {
            if ([self _setObject:[dictionary objectForKey:key] forKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("MutableDictionary:-(bool)_removeAllObjects")

        if (!__dictionary.count) return NO;

        NSDictionary *was = __dictionary.copy;
        for (id<NSCopying> key in was) {
            [self willReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        weakObjectCount = 0;
        [__mutableDictionary removeAllObjects];
        for (id<NSCopying> key in was) {
            [self didReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        return YES;
    }
    - (bool)_removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionary:-(bool)_removeObjectForKey:(id<NSCopying>)key")

        NSObject * object = [__dictionary objectForKey:key];
        if (!object) return NO;

        [self willReplaceObject:object withObject:nil forKey:key];
        if ([object isWeakSelf]) --weakObjectCount;
        [__mutableDictionary removeObjectForKey:key];
        [self didReplaceObject:object withObject:nil forKey:key];
        return YES;
    }
    - (bool)_removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("MutableDictionary:-(bool)_removeObjectsForKeys:(NSArray*)keys")

        bool ret = NO;
        for (id<NSCopying> key in keys) {
            if ([self _removeObjectForKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_setDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionary:-(bool)_setDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        NSMutableArray *toRemove = nil;
        for (id<NSCopying> key in __dictionary) {
            if (![dictionary objectForKey:key]) {
                if (!toRemove) toRemove = [[MutableArray alloc] initWithCapacity:dictionary.count];
                [toRemove addObject:key];
            }
        }
        if (toRemove) {
            ret = YES;
            for (id<NSCopying> key in toRemove) {
                [self _removeObjectForKey:key];
            }
        }
        if ([self _addEntriesFromDictionary:dictionary]) ret = YES;
        return ret;
    }
    - (bool)_setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionary:-(bool)_setObject:(id)object forKey:(id<NSCopying>)key")

        if (!object) return [self _removeObjectForKey:key];

        id was = [__dictionary objectForKey:key];
        if (was == object) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (bool)_setValue:(id)object forKey:(NSString *)key {
        MSGSTART("MutableDictionary:-(bool)_setValue:(id)object forKey:(NSString*)key")

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        id was = [__dictionary valueForKey:key];
        if (was == object) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionary:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (void)addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionary:-(void)addEntriesFromDictionary:(NSDictionary*)dictionary")

        if ([self _addEntriesFromDictionary:dictionary]) [self stateOK];
    }
    - (NSArray *)allKeys {
        MSGSTART("MutableDictionary:-(NSArray*)allKeys")
        return [__dictionary allKeys];
    }
    - (NSArray *)allKeysForObject:(id)object {
        MSGSTART("MutableDictionary:-(NSArray*)allKeysForObject:(id)object")
        return [__dictionary allKeysForObject:object];
    }
    - (NSArray *)allValues {
        MSGSTART("MutableDictionary:-(NSArray*)allValues")
        return [__dictionary allValues];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableDictionary:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableDictionary:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("MutableDictionary:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (Unsigned)count {
        MSGSTART("MutableDictionary:-(Unsigned)count")
        return [__dictionary count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("MutableDictionary:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        Unsigned ret = [__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
        return ret;
    }
    - (void)countWeakObjects {
        MSGSTART("MutableDictionary:-(void)countWeakObjects")

        Int c = 0;
        for (kid o in __dictionary) {
            if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("MutableDictionary:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ __mutableDictionary = nil;

        dictionaryDelegate = nil;

        __dictionary = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("MutableDictionary:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("MutableDictionary:-(void)delegateForDictionaryChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableDictionary:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__dictionary description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionInStringsFileFormat {
        MSGSTART("MutableDictionary:-(NSString*)descriptionInStringsFileFormat")
        return [__dictionary descriptionInStringsFileFormat];
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("MutableDictionary:-(NSString *)descriptionWithLocale:(id)locale")

        return [__dictionary descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("MutableDictionary:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [__dictionary descriptionWithLocale:locale indent:level];
    }
    + (MutableDictionary *)dictionary {
        MSGSTART("MutableDictionary:+(MutableDictionary*)dictionary")
        return [[MutableDictionary alloc] init];
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("MutableDictionary:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    + (id)dictionaryWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableDictionary:+(id)dictionaryWithCapacity:(Unsigned)numItems")

        return [[MutableDictionary alloc] initWithCapacity:numItems];
    }
    + (MutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file {
        MSGSTART("MutableDictionary:+(MutableDictionary*)dictionaryWithContentsOfFile:(NSString*)file")
        return [[MutableDictionary alloc] initWithContentsOfFile:file];
    }
    + (MutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url {
        MSGSTART("MutableDictionary:+(MutableDictionary*)dictionaryWithContentsOfURL:(NSURL*)url")
        return [[MutableDictionary alloc] initWithContentsOfURL:url];
    }
    + (MutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionary:+(MutableDictionary*)dictionaryWithDictionary:(NSDictionary*)dictionary")
        return [[MutableDictionary alloc] initWithDictionary:dictionary];
    }
    + (MutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionary:+(MutableDictionary*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
        return [[MutableDictionary alloc] initWithObjects:&object forKeys:&key count:1];
    }
    + (MutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("MutableDictionary:+(MutableDictionary*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
        return [[MutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionary:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")


        /*i100*/[dictionaryDelegate didReplaceObject : fromObject withObject : toObject forKey : key];
    }
    - (void)die {
        MSGSTART("MutableDictionary:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("MutableDictionary:-(void)encodeWithCoder:(NSCoder*)coder")

        [__dictionary encodeWithCoder : coder];
    }
    - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("MutableDictionary:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsUsingBlock : block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("MutableDictionary:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsWithOptions : opts usingBlock : block];
    }
    - (NSDate *)fileCreationDate {
        MSGSTART("MutableDictionary:-(NSDate*)fileCreationDate")
        return [__dictionary fileCreationDate];
    }
    - (BOOL)fileExtensionHidden {
        MSGSTART("MutableDictionary:-(BOOL)fileExtensionHidden")
        return [__dictionary fileExtensionHidden];
    }
    - (NSNumber *)fileGroupOwnerAccountID {
        MSGSTART("MutableDictionary:-(NSNumber*)fileGroupOwnerAccountID")
        return [__dictionary fileGroupOwnerAccountID];
    }
    - (NSString *)fileGroupOwnerAccountName {
        MSGSTART("MutableDictionary:-(NSString*)fileGroupOwnerAccountName")
        return [__dictionary fileGroupOwnerAccountName];
    }
    - (OSType)fileHFSCreatorCode {
        MSGSTART("MutableDictionary:-(OSType)fileHFSCreatorCode")
        return [__dictionary fileHFSCreatorCode];
    }
    - (OSType)fileHFSTypeCode {
        MSGSTART("MutableDictionary:-(OSType)fileHFSTypeCode")
        return [__dictionary fileHFSTypeCode];
    }
    - (BOOL)fileIsAppendOnly {
        MSGSTART("MutableDictionary:-(BOOL)fileIsAppendOnly")
        return [__dictionary fileIsAppendOnly];
    }
    - (BOOL)fileIsImmutable {
        MSGSTART("MutableDictionary:-(BOOL)fileIsImmutable")
        return [__dictionary fileIsImmutable];
    }
    - (NSDate *)fileModificationDate {
        MSGSTART("MutableDictionary:-(NSDate*)fileModificationDate")
        return [__dictionary fileModificationDate];
    }
    - (NSNumber *)fileOwnerAccountID {
        MSGSTART("MutableDictionary:-(NSNumber*)fileOwnerAccountID")
        return [__dictionary fileOwnerAccountID];
    }
    - (NSString *)fileOwnerAccountName {
        MSGSTART("MutableDictionary:-(NSString*)fileOwnerAccountName")
        return [__dictionary fileOwnerAccountName];
    }
    - (Unsigned)filePosixPermissions {
        MSGSTART("MutableDictionary:-(Unsigned)filePosixPermissions")
        return [__dictionary filePosixPermissions];
    }
    - (ULL)fileSize {
        MSGSTART("MutableDictionary:-(ULL)fileSize")
        return [__dictionary fileSize];
    }
    - (Unsigned)fileSystemFileNumber {
        MSGSTART("MutableDictionary:-(Unsigned)fileSystemFileNumber")
        return [__dictionary fileSystemFileNumber];
    }
    - (Int)fileSystemNumber {
        MSGSTART("MutableDictionary:-(Int)fileSystemNumber")
        return [__dictionary fileSystemNumber];
    }
    - (NSString *)fileType {
        MSGSTART("MutableDictionary:-(NSString*)fileType")
        return [__dictionary fileType];
    }
    - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        MSGSTART("MutableDictionary:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

        [__dictionary getObjects : objects andKeys : keys];
    }
    - (Unsigned)hash {
        MSGSTART("MutableDictionary:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (MutableDictionary *)init {
        MSGSTART("MutableDictionary:-(MutableDictionary*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassMutableDictionary];

/*i10001*/ return self;
    }
    - (MutableDictionary *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableDictionary:-(MutableDictionary*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassMutableDictionary];

/*i10001*/ return self;
    }
    - (MutableDictionary *)initWithCoder:(NSCoder *)coder {
        MSGSTART("MutableDictionary:-(MutableDictionary*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionary];

/*i10001*/ return self;
    }
    - (MutableDictionary *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("MutableDictionary:-(MutableDictionary*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionary];

/*i10001*/ return self;
    }
    - (MutableDictionary *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("MutableDictionary:-(MutableDictionary*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionary];

/*i10001*/ return self;
    }
    - (MutableDictionary *)initWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionary:-(MutableDictionary*)initWithDictionary:(NSDictionary*)dictionary")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionary];

/*i10001*/ return self;
    }
    - (MutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy {
        MSGSTART("MutableDictionary:-(MutableDictionary*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionary];

/*i10001*/ return self;
    }
    - (MutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("MutableDictionary:-(MutableDictionary*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionary];

/*i10001*/ return self;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("MutableDictionary:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionary:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
        return [__dictionary isEqualToDictionary:dictionary];
    }
    - (NSEnumerator *)keyEnumerator {
        MSGSTART("MutableDictionary:-(NSEnumerator*)keyEnumerator")
        return [__dictionary keyEnumerator];
    }
    - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("MutableDictionary:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesPassingTest:predicate];
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("MutableDictionary:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesWithOptions:opts passingTest:predicate];
    }
    - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        MSGSTART("MutableDictionary:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueUsingComparator:cmptr];
    }
    - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector {
        MSGSTART("MutableDictionary:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

        return [__dictionary keysSortedByValueUsingSelector:selector];
    }
    - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("MutableDictionary:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("MutableDictionary:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("MutableDictionary:-(NSEnumerator*)objectEnumerator")
        return [__dictionary objectEnumerator];
    }
    - (id)objectForKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionary:-(id)objectForKey:(id<NSCopying>)key")

        /*i-10*/ id ret = [__dictionary objectForKey:key];

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableDictionary:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        MSGSTART("MutableDictionary:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

        return [__dictionary objectsForKeys:keys notFoundMarker:anObject];
    }
    - (void)removeAllObjects {
        MSGSTART("MutableDictionary:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableDictionary:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionary:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionary:-(void)removeObjectForKey:(id<NSCopying>)key")

        if ([self _removeObjectForKey:key]) [self stateOK];
    }
    - (void)removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("MutableDictionary:-(void)removeObjectsForKeys:(NSArray*)keys")

        if ([self _removeObjectsForKeys:keys]) [self stateOK];
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("MutableDictionary:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionary:-(void)setDictionary:(NSDictionary*)dictionary")

        if ([self _setDictionary:dictionary]) [self stateOK];
    }
    - (void)setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionary:-(void)setObject:(id)object forKey:(id<NSCopying>)key")

        if ([self _setObject:object forKey:key]) [self stateOK];
    }
    - (void)setValue:(id)object forKey:(NSString *)key {
        MSGSTART("MutableDictionary:-(void)setValue:(id)object forKey:(NSString*)key")

        if ([self _setValue:object forKey:key]) [self stateOK];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("MutableDictionary:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setDictionary:__dictionary.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setDictionary:__dictionary.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("MutableDictionary:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableDictionary:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ dictionary_count = 0;
        for (id k in __dictionary) {
            dictionary_objects.keyvals[dictionary_count].key = (__bridge void *)k;
            dictionary_objects.keyvals[dictionary_count++].value = (__bridge void *)[__dictionary objectForKey:k];
            if (dictionary_count == 100) break;
        }
        memset( dictionary_objects.keyvals + dictionary_count,0,sizeof(dictionary_objects.keyvals[0]) * (100 - dictionary_count) );
        dictionary_count = __dictionary.count;



        /*i100*/ [dictionaryDelegate stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("MutableDictionary:-(id)valueForKey:(NSString*)key")
        return [__dictionary valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("MutableDictionary:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionary:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")


        /*i100*/[dictionaryDelegate willReplaceObject : fromObject withObject : toObject forKey : key];
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("MutableDictionary:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [__dictionary writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("MutableDictionary:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [__dictionary writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableDictionaryDebuggerDelegate
    #define _WIClass_           MutableDictionaryDebuggerDelegate__
    #define _className_         mutableDictionaryDebuggerDelegate
    #define _Class_             MutableDictionaryDebuggerDelegate__
    @implementation MutableDictionaryDebuggerDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize attached = attached;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableDictionaryDebuggerDelegate {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)_startObjectOfClassMutableDictionaryDebuggerDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    + (void)attachTo:(NSObject<MinimalMutableDictionary> *)a named:(NSString *)aname {
        MSGSTART("MutableDictionaryDebuggerDelegate:+(void)attachTo:(NSObject<MinimalMutableDictionary>*)a named:(NSString*)aname")

        if (!a) prnt("Dictionary %s is nil\n",aname.UTF8String);
        else [a addDelegate:[[MutableDictionaryDebuggerDelegate alloc] initWithName:aname]];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ if (attached) prnt("Dictionary %s: dealloced\n",v_name.UTF8String);




        dictionaryDelegate = nil;

        v_name = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)delegateForDictionaryChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    + (void)dettachFrom:(NSObject<MinimalMutableDictionary> *)a named:(NSString *)aname {
        MSGSTART("MutableDictionaryDebuggerDelegate:+(void)dettachFrom:(NSObject<MinimalMutableDictionary>*)a named:(NSString*)aname")

        for (NSObject<MutableDictionaryDelegate> *del = a.dictionaryDelegate; del; del = del.dictionaryDelegate) {
            if ( [del isKindOfClass:[MutableDictionaryDebuggerDelegate class]] &&
                 (
                     (!aname) ||
                     ( ( (MutableDictionaryDebuggerDelegate *)del ).name && [( (MutableDictionaryDebuggerDelegate *)del ).name isEqualToString : aname] )
                 ) ) {
                ( (MutableDictionaryDebuggerDelegate *)del ).attached = NO;
                [a removeDelegate:del];
            }
        }
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        if (!toObject)
            prnt("Dictionary %s: did remove %s=>%s\n",v_name.UTF8String,[Util cnameFor:key],[Util cnameFor:fromObject]);
        else if (!fromObject)
            prnt("Dictionary %s: did add %s=>%s\n",v_name.UTF8String,[Util cnameFor:key],[Util cnameFor:toObject]);
        else prnt("Dictionary %s: did replace %s=>%s\n  with  %s=>%s\n",v_name.UTF8String,[Util cnameFor:key],[Util cnameFor:fromObject],[Util cnameFor:key],[Util cnameFor:toObject]);



        /*i100*/ [dictionaryDelegate didReplaceObject:fromObject withObject:toObject forKey:key];
    }
    - (void)die {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)die")

        /*i900*/}
    - (MutableDictionaryDebuggerDelegate *)initWithName:(NSString *)aname {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(MutableDictionaryDebuggerDelegate*)initWithName:(NSString*)aname")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ self.name = aname;
        attached = YES;

        /*i11*/ [self _startObjectOfClassMutableDictionaryDebuggerDelegate];

/*i10001*/ return self;
    }
    - (NSString *)name {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(NSString*)name")

        /*i-999*/ NSString * ret = v_name;
        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setName:(NSString *)v {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)setName:(NSString*)v")

        /*i-905*/ if (v_name == v) return;

        /*i-900*/ {
            v_name = (id)v;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("MutableDictionaryDebuggerDelegate:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i998*/ prnt("Dictionary %s: should%s add %s%s=>%s\n",v_name.UTF8String,ret ? "" : "n't",weak ? "weak " : "",[Util cnameFor:key],[Util cnameFor:object]);

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)stateOK")


        /*i100*/[dictionaryDelegate stateOK];
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryDebuggerDelegate:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        if (!toObject)
            prnt("Dictionary %s: will remove %s=>%s\n",v_name.UTF8String,[Util cnameFor:key],[Util cnameFor:fromObject]);
        else if (!fromObject)
            prnt("Dictionary %s: will add %s=>%s\n",v_name.UTF8String,[Util cnameFor:key],[Util cnameFor:toObject]);
        else prnt("Dictionary %s: will replace %s=>%s\n  with  %s=>%s\n",v_name.UTF8String,[Util cnameFor:key],[Util cnameFor:fromObject],[Util cnameFor:key],[Util cnameFor:toObject]);



        /*i100*/ [dictionaryDelegate willReplaceObject:fromObject withObject:toObject forKey:key];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableSet
    #define _WIClass_           MutableSet__
    #define _className_         mutableSet
    #define _Class_             MutableSet__
    @implementation MutableSet

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize retrievesWeakValues = retrievesWeakValues;
    @synthesize set_count = set_count;
    @synthesize set_objects = set_objects;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassMutableSet {
        MSGSTART("MutableSet:-(void)_startObjectOfClassMutableSet")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ version = (1);

        /*i0*/ self.delegateForSet = self;
    }
    - (NSMutableSet *)__mutableSet {
        MSGSTART("MutableSet:-(NSMutableSet*)__mutableSet")

        /*i-999*/ NSMutableSet * ret = __mutableSet;
        /*i999*/ return ret;
    }
    - (NSSet *)__set {
        MSGSTART("MutableSet:-(NSSet*)__set")

        /*i-999*/ NSSet * ret = __set;
        /*i999*/ return ret;
    }
    - (bool)_addObject:(id)object {
        MSGSTART("MutableSet:-(bool)_addObject:(id)object")

        bool weak = insertsWeakObjectsByDefault;
        if ( (![__set containsObject:object]) && [self shouldAddObject:object makeWeak:weak] ) {
            [self willAddObject:object];
            [__mutableSet addObject:(weak ? [object weakSelf] : [object strongSelf])];
            if (weak) weakObjectCount++;
            [self didAddObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableSet:-(bool)_addObjectsFromArray:(NSArray*)array")

        bool ret = NO;
        for (NSObject *object in array) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableSet:-(bool)_filterUsingPredicate:(NSPredicate *)predicate")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_intersectSet:(NSSet *)set {
        MSGSTART("MutableSet:-(bool)_intersectSet:(NSSet*)set")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![set containsObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_minusSet:(NSSet *)set {
        MSGSTART("MutableSet:-(bool)_minusSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _removeObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("MutableSet:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSSet *was = [__set copy];
        for (NSObject *object in was) {
            [self willRemoveObject:object];
        }
        weakObjectCount = 0;
        [__mutableSet removeAllObjects];
        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObject:(id)object {
        MSGSTART("MutableSet:-(bool)_removeObject:(id)object")

        if ([__set containsObject:object]) {
            [self willRemoveObject:object];
            if ([object isWeakSelf]) --weakObjectCount;
            [__mutableSet removeObject:object];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_setSet:(NSSet *)set {
        MSGSTART("MutableSet:-(bool)_setSet:(NSSet*)set")

        bool ret = [self _intersectSet:set];
        if ([self _unionSet:set]) ret = YES;
        return ret;
    }
    - (bool)_unionSet:(NSSet *)set {
        MSGSTART("MutableSet:-(bool)_unionSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSet:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("MutableSet:-(void)addObject:(id)object")

        if ([self _addObject:object]) [self stateOK];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableSet:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("MutableSet:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__set addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (NSArray *)allObjects {
        MSGSTART("MutableSet:-(NSArray*)allObjects")
        return [__set allObjects];
    }
    - (id)anyObject {
        MSGSTART("MutableSet:-(id)anyObject")
        return [[__set anyObject] selfWithWeakness:retrievesWeakValues];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableSet:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableSet:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("MutableSet:-(BOOL)containsObject:(id)object")
        return [__set containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("MutableSet:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (Unsigned)count {
        MSGSTART("MutableSet:-(Unsigned)count")
        return [__set count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("MutableSet:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__set countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("MutableSet:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __set) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("MutableSet:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ setDelegate = nil;

        __mutableSet = nil;

        __set = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("MutableSet:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("MutableSet:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableSet:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__set description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("MutableSet:-(NSString*)descriptionWithLocale:(id)locale")
        return [__set descriptionWithLocale:locale];
    }
    - (void)didAddObject:(id)object {
        MSGSTART("MutableSet:-(void)didAddObject:(id)object")


        /*i100*/[setDelegate didAddObject : object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableSet:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("MutableSet:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("MutableSet:-(void)encodeWithCoder:(NSCoder*)coder")

        [__set encodeWithCoder : coder];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("MutableSet:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("MutableSet:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableSet:-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate")
        return [__set filteredSetUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableSet:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        if ([self _filterUsingPredicate:predicate]) [self stateOK];
    }
    - (NSMutableSet *)getAndClear {
        MSGSTART("MutableSet:-(NSMutableSet*)getAndClear")

        NSMutableSet * ret = __mutableSet;
        for (id o in ret) {
            [self willRemoveObject:o];
        }
        __set = __mutableSet = [[NSMutableSet alloc] init];
        for (id o in ret) {
            [self didRemoveObject:o];
        }
        return ret;
    }
    - (Unsigned)hash {
        MSGSTART("MutableSet:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (MutableSet *)init {
        MSGSTART("MutableSet:-(MutableSet*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] init];

        /*i11*/ [self _startObjectOfClassMutableSet];

/*i10001*/ return self;
    }
    - (MutableSet *)initWithArray:(NSArray *)array {
        MSGSTART("MutableSet:-(MutableSet*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithArray:array];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSet];

/*i10001*/ return self;
    }
    - (MutableSet *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableSet:-(MutableSet*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassMutableSet];

/*i10001*/ return self;
    }
    - (MutableSet *)initWithCoder:(NSCoder *)coder {
        MSGSTART("MutableSet:-(MutableSet*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSet];

/*i10001*/ return self;
    }
    - (MutableSet *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("MutableSet:-(MutableSet*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSet];

/*i10001*/ return self;
    }
    - (MutableSet *)initWithSet:(NSSet *)set {
        MSGSTART("MutableSet:-(MutableSet*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = (insertsWeakObjectsByDefault ? set.weakMutableCopy : [[NSMutableSet alloc] initWithSet:set]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSet];

/*i10001*/ return self;
    }
    - (MutableSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy {
        MSGSTART("MutableSet:-(MutableSet*)initWithSet:(NSSet*)set copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithSet:set copyItems:copy];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSet];

/*i10001*/ return self;
    }
    - (void)intersectSet:(NSSet *)set {
        MSGSTART("MutableSet:-(void)intersectSet:(NSSet*)set")

        if ([self _intersectSet:set]) [self stateOK];
    }
    - (BOOL)intersectsSet:(NSSet *)set {
        MSGSTART("MutableSet:-(BOOL)intersectsSet:(NSSet*)set")
        return [__set intersectsSet:set];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("MutableSet:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToSet:(NSSet *)set {
        MSGSTART("MutableSet:-(BOOL)isEqualToSet:(NSSet*)set")
        return [__set isEqualToSet:set];
    }
    - (BOOL)isSubsetOfSet:(NSSet *)set {
        MSGSTART("MutableSet:-(BOOL)isSubsetOfSet:(NSSet*)set")
        return [__set isSubsetOfSet:set];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("MutableSet:-(void)makeObjectsPerformSelector:(SEL)selector")
        [__set makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("MutableSet:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")
        [__set makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)member:(id)object {
        MSGSTART("MutableSet:-(id)member:(id)object")
        return [__set member:object];
    }
    - (void)minusSet:(NSSet *)set {
        MSGSTART("MutableSet:-(void)minusSet:(NSSet*)set")

        if ([self _minusSet:set]) [self stateOK];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("MutableSet:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("MutableSet:-(NSEnumerator*)objectEnumerator")
        return [__set objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableSet:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("MutableSet:-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsPassingTest:predicate];
    }
    - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("MutableSet:-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsWithOptions:opts passingTest:predicate];
    }
    - (void)removeAllObjects {
        MSGSTART("MutableSet:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableSet:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSet:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObject:(id)object {
        MSGSTART("MutableSet:-(void)removeObject:(id)object")

        if ([self _removeObject:object]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("MutableSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__set removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("MutableSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__set removeObserver : observer forKeyPath : keyPath context : context];
    }
    + (MutableSet *)set {
        MSGSTART("MutableSet:+(MutableSet*)set")
        return [[MutableSet alloc] init];
    }
    - (NSSet *)setByAddingObject:(id)object {
        MSGSTART("MutableSet:-(NSSet*)setByAddingObject:(id)object")
        return [__set setByAddingObject:object];
    }
    - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableSet:-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array")
        return [__set setByAddingObjectsFromArray:array];
    }
    - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set {
        MSGSTART("MutableSet:-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set")
        return [__set setByAddingObjectsFromSet:set];
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("MutableSet:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("MutableSet:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setSet:(NSSet *)set {
        MSGSTART("MutableSet:-(void)setSet:(NSSet*)set")

        if ([self _setSet:set]) [self stateOK];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("MutableSet:-(void)setValue:(id)value forKey:(NSString *)key")
        [__set setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("MutableSet:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setSet:__set.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setSet:__set.asStrong];
                break;
        }
    }
    + (MutableSet *)setWithArray:(NSArray *)array {
        MSGSTART("MutableSet:+(MutableSet*)setWithArray:(NSArray*)array")
        return [[MutableSet alloc] initWithArray:array];
    }
    + (id)setWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableSet:+(id)setWithCapacity:(Unsigned)numItems")

        return [[MutableSet alloc] initWithCapacity:numItems];
    }
    + (MutableSet *)setWithObject:(id)object {
        MSGSTART("MutableSet:+(MutableSet*)setWithObject:(id)object")
        return [[MutableSet alloc] initWithObjects:&object count:1];
    }
    + (MutableSet *)setWithSet:(NSSet *)set {
        MSGSTART("MutableSet:+(MutableSet*)setWithSet:(NSSet*)set")
        return [[MutableSet alloc] initWithSet:set];
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableSet:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("MutableSet:-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors")
        return [__set sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (void)stateOK {
        MSGSTART("MutableSet:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ set_count = 0;
        for (id o in __set) {
            set_objects.ids[set_count++] = (__bridge void *)o;
            if (set_count == 100) break;
        }
        memset( set_objects.ids + set_count,0,sizeof(set_objects.ids[0]) * (100 - set_count) );
        set_count = __set.count;
    }
    - (void)unionSet:(NSSet *)set {
        MSGSTART("MutableSet:-(void)unionSet:(NSSet*)set")

        if ([self _unionSet:set]) [self stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("MutableSet:-(id)valueForKey:(NSString*)key")
        return [__set valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("MutableSet:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object {
        MSGSTART("MutableSet:-(void)willAddObject:(id)object")


        /*i100*/[setDelegate willAddObject : object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("MutableSet:-(void)willRemoveObject:(id)object")


        /*i100*/[setDelegate willRemoveObject : object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableSetDebuggerDelegate
    #define _WIClass_           MutableSetDebuggerDelegate__
    #define _className_         mutableSetDebuggerDelegate
    #define _Class_             MutableSetDebuggerDelegate__
    @implementation MutableSetDebuggerDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize attached = attached;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableSetDebuggerDelegate {
        MSGSTART("MutableSetDebuggerDelegate:-(void)_startObjectOfClassMutableSetDebuggerDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetDebuggerDelegate:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    + (void)attachTo:(NSObject<MutableSet> *)a named:(NSString *)aname {
        MSGSTART("MutableSetDebuggerDelegate:+(void)attachTo:(NSObject<MutableSet>*)a named:(NSString*)aname")

        if (!a) prnt("Set %s is nil\n",aname.UTF8String);
        else [a addDelegate:[[MutableSetDebuggerDelegate alloc] initWithName:aname]];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableSetDebuggerDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableSetDebuggerDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableSetDebuggerDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ if (attached) prnt("Set %s: dealloced\n",v_name.UTF8String);




        setDelegate = nil;

        v_name = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("MutableSetDebuggerDelegate:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("MutableSetDebuggerDelegate:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableSetDebuggerDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    + (void)dettachFrom:(NSObject<MutableSet> *)a named:(NSString *)aname {
        MSGSTART("MutableSetDebuggerDelegate:+(void)dettachFrom:(NSObject<MutableSet>*)a named:(NSString*)aname")

        for (NSObject<MutableSetDelegate> *del = a.setDelegate; del; del = del.setDelegate) {
            if ( [del isKindOfClass:[MutableSetDebuggerDelegate class]] &&
                 (
                     (!aname) ||
                     ( ( (MutableSetDebuggerDelegate *)del ).name && [( (MutableSetDebuggerDelegate *)del ).name isEqualToString : aname] )
                 ) ) {
                ( (MutableSetDebuggerDelegate *)del ).attached = NO;
                [a removeDelegate:del];
            }
        }
    }
    - (void)didAddObject:(id)object {
        MSGSTART("MutableSetDebuggerDelegate:-(void)didAddObject:(id)object")

        prnt("Set %s: did add %s\n",v_name.UTF8String,[Util cnameFor:object]);



        /*i100*/ [setDelegate didAddObject:object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableSetDebuggerDelegate:-(void)didRemoveObject:(id)object")

        prnt("Set %s: did remove %s\n",v_name.UTF8String,[Util cnameFor:object]);



        /*i100*/ [setDelegate didRemoveObject:object];
    }
    - (void)die {
        MSGSTART("MutableSetDebuggerDelegate:-(void)die")

        /*i900*/}
    - (MutableSetDebuggerDelegate *)initWithName:(NSString *)aname {
        MSGSTART("MutableSetDebuggerDelegate:-(MutableSetDebuggerDelegate*)initWithName:(NSString*)aname")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ self.name = aname;
        attached = YES;

        /*i11*/ [self _startObjectOfClassMutableSetDebuggerDelegate];

/*i10001*/ return self;
    }
    - (NSString *)name {
        MSGSTART("MutableSetDebuggerDelegate:-(NSString*)name")

        /*i-999*/ NSString * ret = v_name;
        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableSetDebuggerDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("MutableSetDebuggerDelegate:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetDebuggerDelegate:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("MutableSetDebuggerDelegate:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("MutableSetDebuggerDelegate:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setName:(NSString *)v {
        MSGSTART("MutableSetDebuggerDelegate:-(void)setName:(NSString*)v")

        /*i-905*/ if (v_name == v) return;

        /*i-900*/ {
            v_name = (id)v;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableSetDebuggerDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i998*/ prnt("Set %s: should%s add %s%s\n",v_name.UTF8String,ret ? "" : "n't",weak ? "weak " : "",[Util cnameFor:object]);

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)willAddObject:(id)object {
        MSGSTART("MutableSetDebuggerDelegate:-(void)willAddObject:(id)object")

        prnt("Set %s: will add %s\n",v_name.UTF8String,[Util cnameFor:object]);



        /*i100*/ [setDelegate willAddObject:object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("MutableSetDebuggerDelegate:-(void)willRemoveObject:(id)object")

        prnt("Set %s: will remove %s\n",v_name.UTF8String,[Util cnameFor:object]);



        /*i100*/ [setDelegate willRemoveObject:object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableValueDebuggerDelegate
    #define _WIClass_           MutableValueDebuggerDelegate__
    #define _className_         mutableValueDebuggerDelegate
    #define _Class_             MutableValueDebuggerDelegate__
    @implementation MutableValueDebuggerDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize attached = attached;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize retainsAsValueDelegate = retainsAsValueDelegate;
    - (void)_startObjectOfClassMutableValueDebuggerDelegate {
        MSGSTART("MutableValueDebuggerDelegate:-(void)_startObjectOfClassMutableValueDebuggerDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ retainsAsValueDelegate = (YES);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("MutableValueDebuggerDelegate:-(void)addDelegate:(NSObject<MutableValueDelegate>*)v")

        if (v.valueDelegate) return;

        if (v == self) return;

        if (valueDelegate) {
            [valueDelegate addDelegate:v];
        }
        else {
            valueDelegate = v;
            if (v.retainsAsValueDelegate) valueDelegate_strong = v;
            valueDelegate.parentValueDelegate = self;
        }
    }
    + (void)attachTo:(NSObject<ValueLinkEndpoint> *)a named:(NSString *)aname {
        MSGSTART("MutableValueDebuggerDelegate:+(void)attachTo:(NSObject<ValueLinkEndpoint>*)a named:(NSString*)aname")

        if (!a) prnt("Value %s is nil\n",aname.UTF8String);
        else [a addDelegate:[[MutableValueDebuggerDelegate alloc] initWithName:aname]];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableValueDebuggerDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableValueDebuggerDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableValueDebuggerDelegate:-(void)dealloc")

        /*i-500*/[self unlinkValueDelegate];
/*i-151*/ [self die];
/*i0*/ if (attached) prnt("Value %s: dealloced\n",v_name.UTF8String);





        valueDelegate_strong = nil;

        v_name = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("MutableValueDebuggerDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    + (void)dettachFrom:(NSObject<ValueLinkEndpoint> *)a named:(NSString *)aname {
        MSGSTART("MutableValueDebuggerDelegate:+(void)dettachFrom:(NSObject<ValueLinkEndpoint>*)a named:(NSString*)aname")

        for (NSObject<MutableValueDelegate> *del = a.valueDelegate; del; del = del.valueDelegate) {
            if ( [del isKindOfClass:[MutableValueDebuggerDelegate class]] &&
                 (
                     (!aname) ||
                     ( ( (MutableValueDebuggerDelegate *)del ).name && [( (MutableValueDebuggerDelegate *)del ).name isEqualToString : aname] )
                 ) ) {
                ( (MutableValueDebuggerDelegate *)del ).attached = NO;
                [a removeDelegate:del];
            }
        }
    }
    - (void)didSetValueTo:(id)object {
        MSGSTART("MutableValueDebuggerDelegate:-(void)didSetValueTo:(id)object")

        prnt("Value %s: did change to %s\n",v_name.UTF8String,[Util cnameFor:object]);



        /*i100*/ [valueDelegate didSetValueTo:object];
    }
    - (void)die {
        MSGSTART("MutableValueDebuggerDelegate:-(void)die")

        /*i900*/}
    - (MutableValueDebuggerDelegate *)initWithName:(NSString *)aname {
        MSGSTART("MutableValueDebuggerDelegate:-(MutableValueDebuggerDelegate*)initWithName:(NSString*)aname")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ self.name = aname;
        attached = YES;

        /*i11*/ [self _startObjectOfClassMutableValueDebuggerDelegate];

/*i10001*/ return self;
    }
    - (NSString *)name {
        MSGSTART("MutableValueDebuggerDelegate:-(NSString*)name")

        /*i-999*/ NSString * ret = v_name;
        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableValueDebuggerDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSObject<MutableValueDelegate> *)parentValueDelegate {
        MSGSTART("MutableValueDebuggerDelegate:-(NSObject<MutableValueDelegate>*)parentValueDelegate")

        /*i-999*/ NSObject<MutableValueDelegate> *ret = parentValueDelegate;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("MutableValueDebuggerDelegate:-(void)removedDelegate")
    }
    - (void)removeDelegate:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("MutableValueDebuggerDelegate:-(void)removeDelegate:(NSObject<MutableValueDelegate>*)v")

        if (valueDelegate) {
            if (valueDelegate == v) {
                v.parentValueDelegate = nil;

                if (v.valueDelegate) {
                    valueDelegate = v.valueDelegate;
                    v.valueDelegate = nil;
                    valueDelegate.parentValueDelegate = self;
                }
                else {
                    valueDelegate = nil;
                }
                v.parentValueDelegate = nil;

                [v removedDelegate];

                valueDelegate_strong = nil;
            }
            else {
                [valueDelegate removeDelegate:v];
            }
        }
    }
    - (void)setName:(NSString *)v {
        MSGSTART("MutableValueDebuggerDelegate:-(void)setName:(NSString*)v")

        /*i-905*/ if (v_name == v) return;

        /*i-900*/ {
            v_name = (id)v;
        }
    }
    - (void)setParentValueDelegate:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("MutableValueDebuggerDelegate:-(void)setParentValueDelegate:(NSObject<MutableValueDelegate>*)v")

        /*i-905*/ if (parentValueDelegate == v) return;

        /*i-900*/ {
            parentValueDelegate = (id)v;
        }
    }
    - (void)setValueDelegate:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("MutableValueDebuggerDelegate:-(void)setValueDelegate:(NSObject<MutableValueDelegate>*)v")

        /*i-905*/ if (valueDelegate == v) return;

        /*i-900*/ {
            valueDelegate = (id)v;
        }
    }
    - (void)setValueDelegate_strong:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("MutableValueDebuggerDelegate:-(void)setValueDelegate_strong:(NSObject<MutableValueDelegate>*)v")

        /*i-905*/ if (valueDelegate_strong == v) return;

        /*i-900*/ {
            valueDelegate_strong = (id)v;
        }
    }
    - (void)unlinkValueDelegate {
        MSGSTART("MutableValueDebuggerDelegate:-(void)unlinkValueDelegate")

        [parentValueDelegate removeDelegate : self];
        if (valueDelegate) {
            valueDelegate.parentValueDelegate = nil;
            valueDelegate_strong = valueDelegate = nil;
        }
        if (parentValueDelegate) ERR("Bad");
        parentValueDelegate = nil;
    }
    - (NSObject<MutableValueDelegate> *)valueDelegate {
        MSGSTART("MutableValueDebuggerDelegate:-(NSObject<MutableValueDelegate>*)valueDelegate")

        /*i-999*/ NSObject<MutableValueDelegate> *ret = valueDelegate;
        /*i999*/ return ret;
    }
    - (NSObject<MutableValueDelegate> *)valueDelegate_strong {
        MSGSTART("MutableValueDebuggerDelegate:-(NSObject<MutableValueDelegate>*)valueDelegate_strong")

        /*i-999*/ NSObject<MutableValueDelegate> *ret = valueDelegate_strong;
        /*i999*/ return ret;
    }
    - (void)willChangeValueFrom:(id)fromObject to:(id)toObject {
        MSGSTART("MutableValueDebuggerDelegate:-(void)willChangeValueFrom:(id)fromObject to:(id)toObject")

        prnt("Value %s: will change to %s\n -- was %s\n",v_name.UTF8String,[Util cnameFor:toObject],[Util cnameFor:fromObject]);



        /*i100*/ [valueDelegate willChangeValueFrom:fromObject to:toObject];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: w





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WeakMutableArray
    #define _WIClass_           WeakMutableArray__
    #define _className_         weakMutableArray
    #define _Class_             WeakMutableArray__
    @implementation WeakMutableArray

    @synthesize __owner_context = __owner_context;
    @synthesize array_count = array_count;
    @synthesize array_objects = array_objects;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassWeakMutableArray {
        MSGSTART("WeakMutableArray:-(void)_startObjectOfClassWeakMutableArray")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ insertsWeakObjectsByDefault = (YES);
        /*ivar*/ version = (1);

        /*i0*/ self.delegateForArray = self;
    }
    - (NSArray *)__array {
        MSGSTART("WeakMutableArray:-(NSArray*)__array")

        /*i-999*/ NSArray * ret = __array;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)__mutableArray {
        MSGSTART("WeakMutableArray:-(NSMutableArray*)__mutableArray")

        /*i-999*/ NSMutableArray * ret = __mutableArray;
        /*i999*/ return ret;
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableArray:-(bool)_addObjectsFromArray:(NSArray*)array")

        if (array.count) {
            Unsigned cwas = __array.count,added = 0;
            [self willTryToAddObjectsWithCount:array.count];
            for (NSObject *object in array) {
                bool weak = insertsWeakObjectsByDefault;
                if (![self shouldAddObject:object makeWeak:weak]) {
                    [self wontAddObject:object withIndex:cwas + added];
                }
                else {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) continue;

                    [self willAddObject:object withIndex:cwas + added];

                    [__mutableArray addObject:useObject];
                    if (weak) weakObjectCount++;

                    [self didAddObject:object withIndex:cwas + added];
                    added++;
                }
            }
            return added > 0;
        }
        else {
            return NO;
        }
    }
    - (bool)_insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("WeakMutableArray:-(bool)_insertObject:(id)object atIndex:(Unsigned)index")

        if (index == NSNotFound) return NO;

        if (index > __array.count) {
            ERR( "%d outside bounds [0,%d]\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            if (index != __array.count) [self objectsMovedFromRange:NSMakeRange( index,__array.count - (index + 1) ) toLocation:index + 1];
            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArray:-(bool)_insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        bool ret = NO;
        if (objects.count != indexes.count) {
            ERR("Bad count");
            return NO;
        }
        Unsigned skipped = 0,move = 0,index = [indexes firstIndex],prvIndex;

        NSMutableIndexSet *addedInds = [[NSMutableIndexSet alloc] init];

        [self willTryToAddObjectsWithCount:objects.count];
        for (NSObject *object in objects) {
            bool weak = insertsWeakObjectsByDefault;
            if (![self shouldAddObject:object makeWeak:weak]) {
                [self wontAddObject:object withIndex:index];
                skipped++;
            }
            else {
                do {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) break;

                    [addedInds addIndex:index];
                    [self willAddObject:object withIndex:index - skipped];

                    [__mutableArray insertObject:useObject atIndex:index - skipped];
                    if (weak) weakObjectCount++;
                    move++;
                } while (NO);
            }
            index = [indexes indexGreaterThanIndex:index];
        }
        if (move) {
            for (prvIndex = __mutableArray.count + indexes.count - skipped,index = indexes.lastIndex; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
                if ([addedInds containsIndex:index]) {
                    [self objectsMovedFromRange:NSMakeRange( index - skipped,prvIndex - (index - skipped) ) toLocation:(index - skipped) + move];
                    prvIndex = index - skipped;
                    move--;
                }
                else {
                    skipped--;
                }
            }

            index = indexes.firstIndex;
            for (NSObject *object in objects) {
                if ([addedInds containsIndex:index])
                    [self didAddObject:object withIndex:index - skipped];
                else skipped++;
            }
            ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("WeakMutableArray:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSArray *was = [__array copy];
        [self willRemoveObjectsWithCount:was.count];
        for (Int i = int(was.count) - 1; i >= 0; i--) {
            [self willRemoveObject:[was objectAtIndex:i] fromIndex:i];
        }
        [__mutableArray removeAllObjects];
        weakObjectCount = 0;

        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObjectAtIndex:(Unsigned)index {
        MSGSTART("WeakMutableArray:-(bool)_removeObjectAtIndex:(Unsigned)index")

        if (index != NSNotFound) {
            if (index >= __array.count) {
                ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
                return NO;
            }
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object fromIndex:index];

            if (object.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self objectsMovedFromRange:NSMakeRange(index + 1,__array.count - index) toLocation:index];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArray:-(bool)_removeObjectsAtIndexes:(NSIndexSet*)indexes")

        [self willRemoveObjectsWithCount : indexes.count];
        for (Unsigned index = [indexes lastIndex]; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObject:object fromIndex:index];

            [__mutableArray removeObjectAtIndex:index];
            if (object.isWeakSelf) --weakObjectCount;

            [self didRemoveObject:object];
        }
        for (Unsigned index = [indexes firstIndex],i = 0; index != NSNotFound; index = [indexes indexGreaterThanIndex:index],i++) {
            Unsigned nxtIndex = [indexes indexGreaterThanIndex:index];
            if (nxtIndex == NSNotFound) nxtIndex = __mutableArray.count + indexes.count;
            if (nxtIndex > index + 1) [self objectsMovedFromRange:NSMakeRange( index + 1,nxtIndex - (index + 1) ) toLocation:index - i];
        }
        return indexes.count > 0;
    }
    - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("WeakMutableArray:-(bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if (index == NSNotFound) return NO;

        if (index >= __array.count) {
            ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        NSObject *object2 = [__array objectAtIndex:index];
        if (object == object2) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;


            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object2 fromIndex:index];

            if (object2.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self didRemoveObject:object2];

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("WeakMutableArray:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("WeakMutableArray:-(void)addObject:(id)object")

        [self insertObject : object atIndex : __mutableArray.count];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableArray:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("WeakMutableArray:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("WeakMutableArray:-(void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer toObjectsAtIndexes : indexes forKeyPath : keyPath options : options context : context];
    }
    - (void)allObjectsMoved {
        MSGSTART("WeakMutableArray:-(void)allObjectsMoved")


        /*i100*/[arrayDelegate allObjectsMoved];
    }
    + (WeakMutableArray *)array {
        MSGSTART("WeakMutableArray:+(WeakMutableArray*)array")
        return [[WeakMutableArray alloc] init];
    }
    - (NSArray *)arrayByAddingObject:(id)object {
        MSGSTART("WeakMutableArray:-(NSArray*)arrayByAddingObject:(id)object")

        return [self.objects arrayByAddingObject:object];
    }
    - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableArray:-(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array")

        return [self.objects arrayByAddingObjectsFromArray:array];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("WeakMutableArray:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    + (WeakMutableArray *)arrayWithArray:(NSArray *)array {
        MSGSTART("WeakMutableArray:+(WeakMutableArray*)arrayWithArray:(NSArray*)array")
        return [[WeakMutableArray alloc] initWithArray:array];
    }
    + (id)arrayWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableArray:+(id)arrayWithCapacity:(Unsigned)numItems")

        return [[WeakMutableArray alloc] initWithCapacity:numItems];
    }
    + (WeakMutableArray *)arrayWithContentsOfFile:(NSString *)file {
        MSGSTART("WeakMutableArray:+(WeakMutableArray*)arrayWithContentsOfFile:(NSString*)file")
        return [[WeakMutableArray alloc] initWithContentsOfFile:file];
    }
    + (WeakMutableArray *)arrayWithContentsOfURL:(NSURL *)url {
        MSGSTART("WeakMutableArray:+(WeakMutableArray*)arrayWithContentsOfURL:(NSURL*)url")
        return [[WeakMutableArray alloc] initWithContentsOfURL:url];
    }
    + (WeakMutableArray *)arrayWithObject:(id)object {
        MSGSTART("WeakMutableArray:+(WeakMutableArray*)arrayWithObject:(id)object")
        return [[WeakMutableArray alloc] initWithObjects:&object count:1];
    }
    + (WeakMutableArray *)arrayWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("WeakMutableArray:+(WeakMutableArray*)arrayWithObjects:(id*)objects count:(Unsigned)count")
        return [[WeakMutableArray alloc] initWithObjects:objects count:count];
    }
    - (constchar *)cdescription {
        MSGSTART("WeakMutableArray:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WeakMutableArray:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        MSGSTART("WeakMutableArray:-(NSString *)componentsJoinedByString:(NSString *)separator")

        return [__array componentsJoinedByString:separator];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("WeakMutableArray:-(BOOL)containsObject:(id)object")
        return [__array containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableArray:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (Unsigned)count {
        MSGSTART("WeakMutableArray:-(Unsigned)count")
        return [__array count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("WeakMutableArray:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__array countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("WeakMutableArray:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __array) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("WeakMutableArray:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ __mutableArray = nil;

        __array = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("WeakMutableArray:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("WeakMutableArray:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("WeakMutableArray:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__array description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("WeakMutableArray:-(NSString *)descriptionWithLocale:(id)locale")

        return [self.objects descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("WeakMutableArray:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [self.objects descriptionWithLocale:locale indent:level];
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("WeakMutableArray:-(void)didAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate didAddObject : object withIndex : index];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("WeakMutableArray:-(void)didRemoveObject:(id)object")


        /*i100*/[arrayDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("WeakMutableArray:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableArray:-(void)encodeWithCoder:(NSCoder*)coder")

        [__array encodeWithCoder : coder];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("WeakMutableArray:-(void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsAtIndexes : indexSet options : opts usingBlock : block];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("WeakMutableArray:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("WeakMutableArray:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi {
        MSGSTART("WeakMutableArray:-(void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi")

        if (fromi != toi) {
            [__mutableArray exchangeObjectAtIndex:fromi withObjectAtIndex:toi];
            [self objectsSwappedWithIndex:fromi andIndex:toi];
            [self stateOK];
        }
    }
    - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableArray:-(NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate")

        return [self.objects filteredArrayUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableArray:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        NSMutableIndexSet * toRemove = nil;
        Unsigned index = 0;
        for (NSObject *object in __array) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableIndexSet alloc] init];
                [toRemove addIndex:index];
            }
            index++;
        }
        if (toRemove) {
            [self _removeObjectsAtIndexes:toRemove];
            [self stateOK];
        }
    }
    - (id)firstObjectCommonWithArray:(NSArray *)array {
        MSGSTART("WeakMutableArray:-(id)firstObjectCommonWithArray:(NSArray*)array")

        return [__array firstObjectCommonWithArray:array];
    }
    - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange {
        MSGSTART("WeakMutableArray:-(void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange")

        [__array getObjects : aBuffer range : aRange];
        if (weakObjectCount) for (Int i = aRange.length + aRange.location - 1; i >= aRange.location; i--) {
                aBuffer[i] = [aBuffer[i] strongSelf];
            }

    }
    - (Unsigned)hash {
        MSGSTART("WeakMutableArray:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArray:-(NSIndexSet*)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArray:-(NSIndexSet*)indexesOfObjectsPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsPassingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArray:-(NSIndexSet*)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsWithOptions:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        MSGSTART("WeakMutableArray:-(Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp")

        return [__array indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp];
    }
    - (Unsigned)indexOfObject:(id)object {
        MSGSTART("WeakMutableArray:-(Unsigned)indexOfObject:(id)object")

        return [__array indexOfObject:object];
    }
    - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range {
        MSGSTART("WeakMutableArray:-(Unsigned)indexOfObject:(id)object inRange:(NSRange)range")

        return [__array indexOfObject:object inRange:range];
    }
    - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArray:-(Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object {
        MSGSTART("WeakMutableArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf]],[__array indexOfObjectIdenticalTo:[object weakSelf]]);
        else return [__array indexOfObjectIdenticalTo:object];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        MSGSTART("WeakMutableArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf] inRange:range],[__array indexOfObjectIdenticalTo:[object weakSelf] inRange:range]);
        else return [__array indexOfObjectIdenticalTo:object inRange:range];
    }
    - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArray:-(Unsigned)indexOfObjectPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectPassingTest:predicate];
    }
    - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArray:-(Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectWithOptions:opts passingTest:predicate];
    }
    - (WeakMutableArray *)init {
        MSGSTART("WeakMutableArray:-(WeakMutableArray*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] init];

        /*i11*/ [self _startObjectOfClassWeakMutableArray];

/*i10001*/ return self;
    }
    - (WeakMutableArray *)initWithArray:(NSArray *)array {
        MSGSTART("WeakMutableArray:-(WeakMutableArray*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = (insertsWeakObjectsByDefault ? array.weakMutableCopy : [[NSMutableArray alloc] initWithArray:array]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArray];

/*i10001*/ return self;
    }
    - (WeakMutableArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy {
        MSGSTART("WeakMutableArray:-(WeakMutableArray*)initWithArray:(NSArray*)array copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithArray:array copyItems:copy];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArray];

/*i10001*/ return self;
    }
    - (WeakMutableArray *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableArray:-(WeakMutableArray*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassWeakMutableArray];

/*i10001*/ return self;
    }
    - (WeakMutableArray *)initWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableArray:-(WeakMutableArray*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArray];

/*i10001*/ return self;
    }
    - (WeakMutableArray *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("WeakMutableArray:-(WeakMutableArray*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArray];

/*i10001*/ return self;
    }
    - (WeakMutableArray *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("WeakMutableArray:-(WeakMutableArray*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArray];

/*i10001*/ return self;
    }
    - (WeakMutableArray *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("WeakMutableArray:-(WeakMutableArray*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArray];

/*i10001*/ return self;
    }
    - (void)insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("WeakMutableArray:-(void)insertObject:(id)object atIndex:(Unsigned)index")

        if ([self _insertObject:object atIndex:index]) [self stateOK];
    }
    - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArray:-(void)insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        if ([self _insertObjects:objects atIndexes:indexes]) [self stateOK];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("WeakMutableArray:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToArray:(NSArray *)array {
        MSGSTART("WeakMutableArray:-(BOOL)isEqualToArray:(NSArray*)array")

        return [__array isEqualToArray:array];
    }
    - (id)lastObject {
        MSGSTART("WeakMutableArray:-(id)lastObject")
        return weakObjectCount ? [__array.lastObject strongSelf] : __array.lastObject;
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("WeakMutableArray:-(void)makeObjectsPerformSelector:(SEL)selector")

        [__array makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("WeakMutableArray:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")

        [__array makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableArray:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (id)objectAtIndex:(Unsigned)index {
        MSGSTART("WeakMutableArray:-(id)objectAtIndex:(Unsigned)index")

        if (index >= __array.count) ERR( "Index %d is out of bounds [0,%d)",int(index),int(__array.count) );
        return weakObjectCount ? [__array[index] strongSelf] : __array[index];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("WeakMutableArray:-(NSEnumerator*)objectEnumerator")
        return [__array objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("WeakMutableArray:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objects {
        MSGSTART("WeakMutableArray:-(NSArray*)objects")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            Int i = 0;
            for (NSObject *o in __array) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : __array;
        }
        else {
            return __array;
        }
    }
    - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArray:-(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            NSArray *ret = [__array objectsAtIndexes:indexes];
            Int i = 0;
            for (NSObject *o in ret) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : ret;
        }
        else {
            return [__array objectsAtIndexes:indexes];
        }
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("WeakMutableArray:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")


        /*i100*/[arrayDelegate objectsMovedFromRange : fromRange toLocation : toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("WeakMutableArray:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")


        /*i100*/[arrayDelegate objectsSwappedWithIndex : fromIndex andIndex : toIndex];
    }
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        MSGSTART("WeakMutableArray:-(NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes")

        return [self.objects pathsMatchingExtensions:filterTypes];
    }
    - (void)removeAllObjects {
        MSGSTART("WeakMutableArray:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("WeakMutableArray:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("WeakMutableArray:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeLastObject {
        MSGSTART("WeakMutableArray:-(void)removeLastObject")

        if (__array.count) [self removeObjectAtIndex:__array.count - 1];
    }
    - (void)removeObjectAtIndex:(Unsigned)index {
        MSGSTART("WeakMutableArray:-(void)removeObjectAtIndex:(Unsigned)index")

        if ([self _removeObjectAtIndex:index]) [self stateOK];
    }
    - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArray:-(void)removeObjectsAtIndexes:(NSIndexSet*)indexes")

        if ([self _removeObjectsAtIndexes:indexes]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("WeakMutableArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("WeakMutableArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer forKeyPath : keyPath context : context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath {
        MSGSTART("WeakMutableArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("WeakMutableArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath context : context];
    }
    - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("WeakMutableArray:-(void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if ([self _replaceObjectAtIndex:index withObject:object]) [self stateOK];
    }
    - (NSEnumerator *)reverseObjectEnumerator {
        MSGSTART("WeakMutableArray:-(NSEnumerator*)reverseObjectEnumerator")
        return [__array reverseObjectEnumerator];
    }
    - (void)setArray:(NSArray *)array {
        MSGSTART("WeakMutableArray:-(void)setArray:(NSArray*)array")

        NSIndexSet * inss,*dels;
        if (![Util getInsertsAndDeletesAsIndexSetWhenChanging:__array to:array inss:&inss dels:&dels]) return;

        [self _removeObjectsAtIndexes:dels];
        NSArray *objs = [array objectsAtIndexes:inss];
        [self _insertObjects:objs atIndexes:inss];
        [self stateOK];
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("WeakMutableArray:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("WeakMutableArray:-(void)setValue:(id)value forKey:(NSString *)key")

        [__array setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("WeakMutableArray:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setArray:__array.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setArray:__array.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("WeakMutableArray:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSData *)sortedArrayHint {
        MSGSTART("WeakMutableArray:-(NSData*)sortedArrayHint")

        return [__array sortedArrayHint];
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableArray:-(NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayUsingComparator:cmptr];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("WeakMutableArray:-(NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors")

        return [self.objects sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context {
        MSGSTART("WeakMutableArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context")

        return [self.objects sortedArrayUsingFunction:comparator context:context];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint {
        MSGSTART("WeakMutableArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint")

        return [self.objects sortedArrayUsingFunction:comparator context:context hint:hint];
    }
    - (NSArray *)sortedArrayUsingSelector:(SEL)selector {
        MSGSTART("WeakMutableArray:-(NSArray*)sortedArrayUsingSelector:(SEL)selector")

        return [self.objects sortedArrayUsingSelector:selector];
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableArray:-(NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayWithOptions:opts usingComparator:cmptr];
    }
    - (void)sortUsingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableArray:-(void)sortUsingComparator:(NSComparator)cmptr")

        [__mutableArray sortUsingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("WeakMutableArray:-(void)sortUsingDescriptors:(NSArray*)sortDescriptors")

        [__mutableArray sortUsingDescriptors : sortDescriptors];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context {
        MSGSTART("WeakMutableArray:-(void)sortUsingFunction:(Int (*)(id, id, void *))compare context:(void *)context")

        [__mutableArray sortUsingFunction : compare context : context];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingSelector:(SEL)selector {
        MSGSTART("WeakMutableArray:-(void)sortUsingSelector:(SEL)selector")

        [__mutableArray sortUsingSelector : selector];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableArray:-(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        [__mutableArray sortWithOptions : opts usingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)stateOK {
        MSGSTART("WeakMutableArray:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ array_count = 0;
        for (id o in __array) {
            array_objects.ids[array_count++] = (__bridge void *)o;
            if (array_count == 100) break;
        }
        memset( array_objects.ids + array_count,0,sizeof(array_objects.ids[0]) * (100 - array_count) );
        array_count = __array.count;

        /*i100*/ [arrayDelegate stateOK];
    }
    - (NSArray *)subarrayWithRange:(NSRange)r {
        MSGSTART("WeakMutableArray:-(NSArray*)subarrayWithRange:(NSRange)r")

        return [self.objects subarrayWithRange:r];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("WeakMutableArray:-(id)valueForKey:(NSString*)key")

        return [__array valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("WeakMutableArray:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("WeakMutableArray:-(void)willAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate willAddObject : object withIndex : index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("WeakMutableArray:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")


        /*i100*/[arrayDelegate willRemoveObject : object fromIndex : index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("WeakMutableArray:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("WeakMutableArray:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("WeakMutableArray:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("WeakMutableArray:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [self.objects writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("WeakMutableArray:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [self.objects writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WeakMutableDictionary
    #define _WIClass_           WeakMutableDictionary__
    #define _className_         weakMutableDictionary
    #define _Class_             WeakMutableDictionary__
    @implementation WeakMutableDictionary

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize dictionary_count = dictionary_count;
    @synthesize dictionary_objects = dictionary_objects;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassWeakMutableDictionary {
        MSGSTART("WeakMutableDictionary:-(void)_startObjectOfClassWeakMutableDictionary")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ version = (1);
        /*ivar*/ insertsWeakObjectsByDefault = (YES);

        /*i0*/ self.delegateForDictionary = self;
    }
    - (NSDictionary *)__dictionary {
        MSGSTART("WeakMutableDictionary:-(NSDictionary*)__dictionary")

        /*i-999*/ NSDictionary * ret = __dictionary;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__mutableDictionary {
        MSGSTART("WeakMutableDictionary:-(NSMutableDictionary*)__mutableDictionary")

        /*i-999*/ NSMutableDictionary * ret = __mutableDictionary;
        /*i999*/ return ret;
    }
    - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionary:-(bool)_addEntriesFromDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        for (id<NSCopying> key in dictionary) {
            if ([self _setObject:[dictionary objectForKey:key] forKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("WeakMutableDictionary:-(bool)_removeAllObjects")

        if (!__dictionary.count) return NO;

        NSDictionary *was = __dictionary.copy;
        for (id<NSCopying> key in was) {
            [self willReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        weakObjectCount = 0;
        [__mutableDictionary removeAllObjects];
        for (id<NSCopying> key in was) {
            [self didReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        return YES;
    }
    - (bool)_removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionary:-(bool)_removeObjectForKey:(id<NSCopying>)key")

        NSObject * object = [__dictionary objectForKey:key];
        if (!object) return NO;

        [self willReplaceObject:object withObject:nil forKey:key];
        if ([object isWeakSelf]) --weakObjectCount;
        [__mutableDictionary removeObjectForKey:key];
        [self didReplaceObject:object withObject:nil forKey:key];
        return YES;
    }
    - (bool)_removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("WeakMutableDictionary:-(bool)_removeObjectsForKeys:(NSArray*)keys")

        bool ret = NO;
        for (id<NSCopying> key in keys) {
            if ([self _removeObjectForKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_setDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionary:-(bool)_setDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        NSMutableArray *toRemove = nil;
        for (id<NSCopying> key in __dictionary) {
            if (![dictionary objectForKey:key]) {
                if (!toRemove) toRemove = [[MutableArray alloc] initWithCapacity:dictionary.count];
                [toRemove addObject:key];
            }
        }
        if (toRemove) {
            ret = YES;
            for (id<NSCopying> key in toRemove) {
                [self _removeObjectForKey:key];
            }
        }
        if ([self _addEntriesFromDictionary:dictionary]) ret = YES;
        return ret;
    }
    - (bool)_setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionary:-(bool)_setObject:(id)object forKey:(id<NSCopying>)key")

        if (!object) return [self _removeObjectForKey:key];

        id was = [__dictionary objectForKey:key];
        if (was == object) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (bool)_setValue:(id)object forKey:(NSString *)key {
        MSGSTART("WeakMutableDictionary:-(bool)_setValue:(id)object forKey:(NSString*)key")

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        id was = [__dictionary valueForKey:key];
        if (was == object) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("WeakMutableDictionary:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (void)addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionary:-(void)addEntriesFromDictionary:(NSDictionary*)dictionary")

        if ([self _addEntriesFromDictionary:dictionary]) [self stateOK];
    }
    - (NSArray *)allKeys {
        MSGSTART("WeakMutableDictionary:-(NSArray*)allKeys")
        return [__dictionary allKeys];
    }
    - (NSArray *)allKeysForObject:(id)object {
        MSGSTART("WeakMutableDictionary:-(NSArray*)allKeysForObject:(id)object")
        return [__dictionary allKeysForObject:object];
    }
    - (NSArray *)allValues {
        MSGSTART("WeakMutableDictionary:-(NSArray*)allValues")
        return [__dictionary allValues];
    }
    - (constchar *)cdescription {
        MSGSTART("WeakMutableDictionary:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WeakMutableDictionary:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableDictionary:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (Unsigned)count {
        MSGSTART("WeakMutableDictionary:-(Unsigned)count")
        return [__dictionary count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("WeakMutableDictionary:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        Unsigned ret = [__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
        return ret;
    }
    - (void)countWeakObjects {
        MSGSTART("WeakMutableDictionary:-(void)countWeakObjects")

        Int c = 0;
        for (kid o in __dictionary) {
            if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("WeakMutableDictionary:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ __mutableDictionary = nil;

        dictionaryDelegate = nil;

        __dictionary = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("WeakMutableDictionary:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("WeakMutableDictionary:-(void)delegateForDictionaryChanged")
    }
    - (NSString *)description {
        MSGSTART("WeakMutableDictionary:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__dictionary description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionInStringsFileFormat {
        MSGSTART("WeakMutableDictionary:-(NSString*)descriptionInStringsFileFormat")
        return [__dictionary descriptionInStringsFileFormat];
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("WeakMutableDictionary:-(NSString *)descriptionWithLocale:(id)locale")

        return [__dictionary descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("WeakMutableDictionary:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [__dictionary descriptionWithLocale:locale indent:level];
    }
    + (WeakMutableDictionary *)dictionary {
        MSGSTART("WeakMutableDictionary:+(WeakMutableDictionary*)dictionary")
        return [[WeakMutableDictionary alloc] init];
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("WeakMutableDictionary:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    + (id)dictionaryWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableDictionary:+(id)dictionaryWithCapacity:(Unsigned)numItems")

        return [[WeakMutableDictionary alloc] initWithCapacity:numItems];
    }
    + (WeakMutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file {
        MSGSTART("WeakMutableDictionary:+(WeakMutableDictionary*)dictionaryWithContentsOfFile:(NSString*)file")
        return [[WeakMutableDictionary alloc] initWithContentsOfFile:file];
    }
    + (WeakMutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url {
        MSGSTART("WeakMutableDictionary:+(WeakMutableDictionary*)dictionaryWithContentsOfURL:(NSURL*)url")
        return [[WeakMutableDictionary alloc] initWithContentsOfURL:url];
    }
    + (WeakMutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionary:+(WeakMutableDictionary*)dictionaryWithDictionary:(NSDictionary*)dictionary")
        return [[WeakMutableDictionary alloc] initWithDictionary:dictionary];
    }
    + (WeakMutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionary:+(WeakMutableDictionary*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
        return [[WeakMutableDictionary alloc] initWithObjects:&object forKeys:&key count:1];
    }
    + (WeakMutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("WeakMutableDictionary:+(WeakMutableDictionary*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
        return [[WeakMutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionary:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")


        /*i100*/[dictionaryDelegate didReplaceObject : fromObject withObject : toObject forKey : key];
    }
    - (void)die {
        MSGSTART("WeakMutableDictionary:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableDictionary:-(void)encodeWithCoder:(NSCoder*)coder")

        [__dictionary encodeWithCoder : coder];
    }
    - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("WeakMutableDictionary:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsUsingBlock : block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("WeakMutableDictionary:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsWithOptions : opts usingBlock : block];
    }
    - (NSDate *)fileCreationDate {
        MSGSTART("WeakMutableDictionary:-(NSDate*)fileCreationDate")
        return [__dictionary fileCreationDate];
    }
    - (BOOL)fileExtensionHidden {
        MSGSTART("WeakMutableDictionary:-(BOOL)fileExtensionHidden")
        return [__dictionary fileExtensionHidden];
    }
    - (NSNumber *)fileGroupOwnerAccountID {
        MSGSTART("WeakMutableDictionary:-(NSNumber*)fileGroupOwnerAccountID")
        return [__dictionary fileGroupOwnerAccountID];
    }
    - (NSString *)fileGroupOwnerAccountName {
        MSGSTART("WeakMutableDictionary:-(NSString*)fileGroupOwnerAccountName")
        return [__dictionary fileGroupOwnerAccountName];
    }
    - (OSType)fileHFSCreatorCode {
        MSGSTART("WeakMutableDictionary:-(OSType)fileHFSCreatorCode")
        return [__dictionary fileHFSCreatorCode];
    }
    - (OSType)fileHFSTypeCode {
        MSGSTART("WeakMutableDictionary:-(OSType)fileHFSTypeCode")
        return [__dictionary fileHFSTypeCode];
    }
    - (BOOL)fileIsAppendOnly {
        MSGSTART("WeakMutableDictionary:-(BOOL)fileIsAppendOnly")
        return [__dictionary fileIsAppendOnly];
    }
    - (BOOL)fileIsImmutable {
        MSGSTART("WeakMutableDictionary:-(BOOL)fileIsImmutable")
        return [__dictionary fileIsImmutable];
    }
    - (NSDate *)fileModificationDate {
        MSGSTART("WeakMutableDictionary:-(NSDate*)fileModificationDate")
        return [__dictionary fileModificationDate];
    }
    - (NSNumber *)fileOwnerAccountID {
        MSGSTART("WeakMutableDictionary:-(NSNumber*)fileOwnerAccountID")
        return [__dictionary fileOwnerAccountID];
    }
    - (NSString *)fileOwnerAccountName {
        MSGSTART("WeakMutableDictionary:-(NSString*)fileOwnerAccountName")
        return [__dictionary fileOwnerAccountName];
    }
    - (Unsigned)filePosixPermissions {
        MSGSTART("WeakMutableDictionary:-(Unsigned)filePosixPermissions")
        return [__dictionary filePosixPermissions];
    }
    - (ULL)fileSize {
        MSGSTART("WeakMutableDictionary:-(ULL)fileSize")
        return [__dictionary fileSize];
    }
    - (Unsigned)fileSystemFileNumber {
        MSGSTART("WeakMutableDictionary:-(Unsigned)fileSystemFileNumber")
        return [__dictionary fileSystemFileNumber];
    }
    - (Int)fileSystemNumber {
        MSGSTART("WeakMutableDictionary:-(Int)fileSystemNumber")
        return [__dictionary fileSystemNumber];
    }
    - (NSString *)fileType {
        MSGSTART("WeakMutableDictionary:-(NSString*)fileType")
        return [__dictionary fileType];
    }
    - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        MSGSTART("WeakMutableDictionary:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

        [__dictionary getObjects : objects andKeys : keys];
    }
    - (Unsigned)hash {
        MSGSTART("WeakMutableDictionary:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (WeakMutableDictionary *)init {
        MSGSTART("WeakMutableDictionary:-(WeakMutableDictionary*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassWeakMutableDictionary];

/*i10001*/ return self;
    }
    - (WeakMutableDictionary *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableDictionary:-(WeakMutableDictionary*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassWeakMutableDictionary];

/*i10001*/ return self;
    }
    - (WeakMutableDictionary *)initWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableDictionary:-(WeakMutableDictionary*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionary];

/*i10001*/ return self;
    }
    - (WeakMutableDictionary *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("WeakMutableDictionary:-(WeakMutableDictionary*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionary];

/*i10001*/ return self;
    }
    - (WeakMutableDictionary *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("WeakMutableDictionary:-(WeakMutableDictionary*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionary];

/*i10001*/ return self;
    }
    - (WeakMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionary:-(WeakMutableDictionary*)initWithDictionary:(NSDictionary*)dictionary")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionary];

/*i10001*/ return self;
    }
    - (WeakMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy {
        MSGSTART("WeakMutableDictionary:-(WeakMutableDictionary*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionary];

/*i10001*/ return self;
    }
    - (WeakMutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("WeakMutableDictionary:-(WeakMutableDictionary*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionary];

/*i10001*/ return self;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("WeakMutableDictionary:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionary:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
        return [__dictionary isEqualToDictionary:dictionary];
    }
    - (NSEnumerator *)keyEnumerator {
        MSGSTART("WeakMutableDictionary:-(NSEnumerator*)keyEnumerator")
        return [__dictionary keyEnumerator];
    }
    - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("WeakMutableDictionary:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesPassingTest:predicate];
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("WeakMutableDictionary:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesWithOptions:opts passingTest:predicate];
    }
    - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableDictionary:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueUsingComparator:cmptr];
    }
    - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector {
        MSGSTART("WeakMutableDictionary:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

        return [__dictionary keysSortedByValueUsingSelector:selector];
    }
    - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableDictionary:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableDictionary:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("WeakMutableDictionary:-(NSEnumerator*)objectEnumerator")
        return [__dictionary objectEnumerator];
    }
    - (id)objectForKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionary:-(id)objectForKey:(id<NSCopying>)key")

        /*i-10*/ id ret = [__dictionary objectForKey:key];

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WeakMutableDictionary:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        MSGSTART("WeakMutableDictionary:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

        return [__dictionary objectsForKeys:keys notFoundMarker:anObject];
    }
    - (void)removeAllObjects {
        MSGSTART("WeakMutableDictionary:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("WeakMutableDictionary:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("WeakMutableDictionary:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionary:-(void)removeObjectForKey:(id<NSCopying>)key")

        if ([self _removeObjectForKey:key]) [self stateOK];
    }
    - (void)removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("WeakMutableDictionary:-(void)removeObjectsForKeys:(NSArray*)keys")

        if ([self _removeObjectsForKeys:keys]) [self stateOK];
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("WeakMutableDictionary:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionary:-(void)setDictionary:(NSDictionary*)dictionary")

        if ([self _setDictionary:dictionary]) [self stateOK];
    }
    - (void)setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionary:-(void)setObject:(id)object forKey:(id<NSCopying>)key")

        if ([self _setObject:object forKey:key]) [self stateOK];
    }
    - (void)setValue:(id)object forKey:(NSString *)key {
        MSGSTART("WeakMutableDictionary:-(void)setValue:(id)object forKey:(NSString*)key")

        if ([self _setValue:object forKey:key]) [self stateOK];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("WeakMutableDictionary:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setDictionary:__dictionary.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setDictionary:__dictionary.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("WeakMutableDictionary:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("WeakMutableDictionary:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ dictionary_count = 0;
        for (id k in __dictionary) {
            dictionary_objects.keyvals[dictionary_count].key = (__bridge void *)k;
            dictionary_objects.keyvals[dictionary_count++].value = (__bridge void *)[__dictionary objectForKey:k];
            if (dictionary_count == 100) break;
        }
        memset( dictionary_objects.keyvals + dictionary_count,0,sizeof(dictionary_objects.keyvals[0]) * (100 - dictionary_count) );
        dictionary_count = __dictionary.count;



        /*i100*/ [dictionaryDelegate stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("WeakMutableDictionary:-(id)valueForKey:(NSString*)key")
        return [__dictionary valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("WeakMutableDictionary:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionary:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")


        /*i100*/[dictionaryDelegate willReplaceObject : fromObject withObject : toObject forKey : key];
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("WeakMutableDictionary:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [__dictionary writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("WeakMutableDictionary:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [__dictionary writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WeakMutableSet
    #define _WIClass_           WeakMutableSet__
    #define _className_         weakMutableSet
    #define _Class_             WeakMutableSet__
    @implementation WeakMutableSet

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize retrievesWeakValues = retrievesWeakValues;
    @synthesize set_count = set_count;
    @synthesize set_objects = set_objects;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassWeakMutableSet {
        MSGSTART("WeakMutableSet:-(void)_startObjectOfClassWeakMutableSet")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ insertsWeakObjectsByDefault = (YES);
        /*ivar*/ version = (1);

        /*i0*/ self.delegateForSet = self;
    }
    - (NSMutableSet *)__mutableSet {
        MSGSTART("WeakMutableSet:-(NSMutableSet*)__mutableSet")

        /*i-999*/ NSMutableSet * ret = __mutableSet;
        /*i999*/ return ret;
    }
    - (NSSet *)__set {
        MSGSTART("WeakMutableSet:-(NSSet*)__set")

        /*i-999*/ NSSet * ret = __set;
        /*i999*/ return ret;
    }
    - (bool)_addObject:(id)object {
        MSGSTART("WeakMutableSet:-(bool)_addObject:(id)object")

        bool weak = insertsWeakObjectsByDefault;
        if ( (![__set containsObject:object]) && [self shouldAddObject:object makeWeak:weak] ) {
            [self willAddObject:object];
            [__mutableSet addObject:(weak ? [object weakSelf] : [object strongSelf])];
            if (weak) weakObjectCount++;
            [self didAddObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableSet:-(bool)_addObjectsFromArray:(NSArray*)array")

        bool ret = NO;
        for (NSObject *object in array) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableSet:-(bool)_filterUsingPredicate:(NSPredicate *)predicate")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_intersectSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(bool)_intersectSet:(NSSet*)set")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![set containsObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_minusSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(bool)_minusSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _removeObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("WeakMutableSet:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSSet *was = [__set copy];
        for (NSObject *object in was) {
            [self willRemoveObject:object];
        }
        weakObjectCount = 0;
        [__mutableSet removeAllObjects];
        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObject:(id)object {
        MSGSTART("WeakMutableSet:-(bool)_removeObject:(id)object")

        if ([__set containsObject:object]) {
            [self willRemoveObject:object];
            if ([object isWeakSelf]) --weakObjectCount;
            [__mutableSet removeObject:object];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_setSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(bool)_setSet:(NSSet*)set")

        bool ret = [self _intersectSet:set];
        if ([self _unionSet:set]) ret = YES;
        return ret;
    }
    - (bool)_unionSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(bool)_unionSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("WeakMutableSet:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("WeakMutableSet:-(void)addObject:(id)object")

        if ([self _addObject:object]) [self stateOK];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableSet:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("WeakMutableSet:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__set addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (NSArray *)allObjects {
        MSGSTART("WeakMutableSet:-(NSArray*)allObjects")
        return [__set allObjects];
    }
    - (id)anyObject {
        MSGSTART("WeakMutableSet:-(id)anyObject")
        return [[__set anyObject] selfWithWeakness:retrievesWeakValues];
    }
    - (constchar *)cdescription {
        MSGSTART("WeakMutableSet:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WeakMutableSet:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("WeakMutableSet:-(BOOL)containsObject:(id)object")
        return [__set containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableSet:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (Unsigned)count {
        MSGSTART("WeakMutableSet:-(Unsigned)count")
        return [__set count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("WeakMutableSet:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__set countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("WeakMutableSet:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __set) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("WeakMutableSet:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ setDelegate = nil;

        __mutableSet = nil;

        __set = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("WeakMutableSet:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("WeakMutableSet:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("WeakMutableSet:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__set description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("WeakMutableSet:-(NSString*)descriptionWithLocale:(id)locale")
        return [__set descriptionWithLocale:locale];
    }
    - (void)didAddObject:(id)object {
        MSGSTART("WeakMutableSet:-(void)didAddObject:(id)object")


        /*i100*/[setDelegate didAddObject : object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("WeakMutableSet:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("WeakMutableSet:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableSet:-(void)encodeWithCoder:(NSCoder*)coder")

        [__set encodeWithCoder : coder];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("WeakMutableSet:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("WeakMutableSet:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableSet:-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate")
        return [__set filteredSetUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableSet:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        if ([self _filterUsingPredicate:predicate]) [self stateOK];
    }
    - (NSMutableSet *)getAndClear {
        MSGSTART("WeakMutableSet:-(NSMutableSet*)getAndClear")

        NSMutableSet * ret = __mutableSet;
        for (id o in ret) {
            [self willRemoveObject:o];
        }
        __set = __mutableSet = [[NSMutableSet alloc] init];
        for (id o in ret) {
            [self didRemoveObject:o];
        }
        return ret;
    }
    - (Unsigned)hash {
        MSGSTART("WeakMutableSet:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (WeakMutableSet *)init {
        MSGSTART("WeakMutableSet:-(WeakMutableSet*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] init];

        /*i11*/ [self _startObjectOfClassWeakMutableSet];

/*i10001*/ return self;
    }
    - (WeakMutableSet *)initWithArray:(NSArray *)array {
        MSGSTART("WeakMutableSet:-(WeakMutableSet*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithArray:array];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSet];

/*i10001*/ return self;
    }
    - (WeakMutableSet *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableSet:-(WeakMutableSet*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassWeakMutableSet];

/*i10001*/ return self;
    }
    - (WeakMutableSet *)initWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableSet:-(WeakMutableSet*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSet];

/*i10001*/ return self;
    }
    - (WeakMutableSet *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("WeakMutableSet:-(WeakMutableSet*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSet];

/*i10001*/ return self;
    }
    - (WeakMutableSet *)initWithSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(WeakMutableSet*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = (insertsWeakObjectsByDefault ? set.weakMutableCopy : [[NSMutableSet alloc] initWithSet:set]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSet];

/*i10001*/ return self;
    }
    - (WeakMutableSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy {
        MSGSTART("WeakMutableSet:-(WeakMutableSet*)initWithSet:(NSSet*)set copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithSet:set copyItems:copy];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSet];

/*i10001*/ return self;
    }
    - (void)intersectSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(void)intersectSet:(NSSet*)set")

        if ([self _intersectSet:set]) [self stateOK];
    }
    - (BOOL)intersectsSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(BOOL)intersectsSet:(NSSet*)set")
        return [__set intersectsSet:set];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("WeakMutableSet:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(BOOL)isEqualToSet:(NSSet*)set")
        return [__set isEqualToSet:set];
    }
    - (BOOL)isSubsetOfSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(BOOL)isSubsetOfSet:(NSSet*)set")
        return [__set isSubsetOfSet:set];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("WeakMutableSet:-(void)makeObjectsPerformSelector:(SEL)selector")
        [__set makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("WeakMutableSet:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")
        [__set makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)member:(id)object {
        MSGSTART("WeakMutableSet:-(id)member:(id)object")
        return [__set member:object];
    }
    - (void)minusSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(void)minusSet:(NSSet*)set")

        if ([self _minusSet:set]) [self stateOK];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableSet:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("WeakMutableSet:-(NSEnumerator*)objectEnumerator")
        return [__set objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("WeakMutableSet:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("WeakMutableSet:-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsPassingTest:predicate];
    }
    - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("WeakMutableSet:-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsWithOptions:opts passingTest:predicate];
    }
    - (void)removeAllObjects {
        MSGSTART("WeakMutableSet:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("WeakMutableSet:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("WeakMutableSet:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObject:(id)object {
        MSGSTART("WeakMutableSet:-(void)removeObject:(id)object")

        if ([self _removeObject:object]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("WeakMutableSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__set removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("WeakMutableSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__set removeObserver : observer forKeyPath : keyPath context : context];
    }
    + (WeakMutableSet *)set {
        MSGSTART("WeakMutableSet:+(WeakMutableSet*)set")
        return [[WeakMutableSet alloc] init];
    }
    - (NSSet *)setByAddingObject:(id)object {
        MSGSTART("WeakMutableSet:-(NSSet*)setByAddingObject:(id)object")
        return [__set setByAddingObject:object];
    }
    - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableSet:-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array")
        return [__set setByAddingObjectsFromArray:array];
    }
    - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set")
        return [__set setByAddingObjectsFromSet:set];
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("WeakMutableSet:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("WeakMutableSet:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(void)setSet:(NSSet*)set")

        if ([self _setSet:set]) [self stateOK];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("WeakMutableSet:-(void)setValue:(id)value forKey:(NSString *)key")
        [__set setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("WeakMutableSet:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setSet:__set.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setSet:__set.asStrong];
                break;
        }
    }
    + (WeakMutableSet *)setWithArray:(NSArray *)array {
        MSGSTART("WeakMutableSet:+(WeakMutableSet*)setWithArray:(NSArray*)array")
        return [[WeakMutableSet alloc] initWithArray:array];
    }
    + (id)setWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableSet:+(id)setWithCapacity:(Unsigned)numItems")

        return [[WeakMutableSet alloc] initWithCapacity:numItems];
    }
    + (WeakMutableSet *)setWithObject:(id)object {
        MSGSTART("WeakMutableSet:+(WeakMutableSet*)setWithObject:(id)object")
        return [[WeakMutableSet alloc] initWithObjects:&object count:1];
    }
    + (WeakMutableSet *)setWithSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:+(WeakMutableSet*)setWithSet:(NSSet*)set")
        return [[WeakMutableSet alloc] initWithSet:set];
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("WeakMutableSet:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("WeakMutableSet:-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors")
        return [__set sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (void)stateOK {
        MSGSTART("WeakMutableSet:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ set_count = 0;
        for (id o in __set) {
            set_objects.ids[set_count++] = (__bridge void *)o;
            if (set_count == 100) break;
        }
        memset( set_objects.ids + set_count,0,sizeof(set_objects.ids[0]) * (100 - set_count) );
        set_count = __set.count;
    }
    - (void)unionSet:(NSSet *)set {
        MSGSTART("WeakMutableSet:-(void)unionSet:(NSSet*)set")

        if ([self _unionSet:set]) [self stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("WeakMutableSet:-(id)valueForKey:(NSString*)key")
        return [__set valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("WeakMutableSet:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object {
        MSGSTART("WeakMutableSet:-(void)willAddObject:(id)object")


        /*i100*/[setDelegate willAddObject : object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("WeakMutableSet:-(void)willRemoveObject:(id)object")


        /*i100*/[setDelegate willRemoveObject : object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
