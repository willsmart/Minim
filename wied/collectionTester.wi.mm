// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 2 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D0





        @interface CollectionTestObject : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_CollectionTestObject; @protected
            bool debugAutorelease;
            Int intValue;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSMutableDictionary *subObjects;
            NSObject<Tester> *v_tester;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) Int intValue;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *subObjects;
        @property (weak,nonatomic,readwrite) NSObject<Tester> *tester;
        - (void)_startObjectOfClassCollectionTestObject;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)didAdd;
        - (void)didRemove;
        - (void)die;
        - (CollectionTestObject *)initWithInt:(Int)v tester:(NSObject<Tester> *)atester;
        - (NSMutableString *)objectName;
        - (void)setSubObjects:(NSMutableDictionary *)v;
        - (void)setTester:(NSObject<Tester> *)v;
        - (NSMutableDictionary *)subObjects;
        - (NSObject<Tester> *)tester;
        - (void)willAdd;
        - (void)willRemove;

        @end





        @interface CollectionTestSubObject : NSObject<Object, ClassObject> {
            Int __arc;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_CollectionTestSubObject; @protected
            Int __rc;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            Int rcInner;
            CollectionTestObject *testObject;
            Int willAddCount;
            Int willRemoveCount;
        }

        @property (nonatomic,readwrite) Int __arc;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Int __rc;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) Int rcInner;
        @property (nonatomic,readonly) Int rcIs;
        @property (nonatomic,readonly) Int rcWillBe;
        @property (weak,nonatomic,readwrite) CollectionTestObject *testObject;
        @property (nonatomic,readwrite) Int willAddCount;
        @property (nonatomic,readwrite) Int willRemoveCount;
        - (void)_startObjectOfClassCollectionTestSubObject;
        - (void)_autorelease;
        - (void)_release;
        - (void)_retain;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (CollectionTestSubObject *)initWithTestObject:(CollectionTestObject *)atestObject;
        - (NSMutableString *)objectName;
        - (Int)rcIs;
        - (Int)rcWillBe;
        - (void)setTestObject:(CollectionTestObject *)v;
        - (CollectionTestObject *)testObject;

        @end
    #endif // INCLUDE_IFACE_D0

    #ifdef INCLUDE_IFACE_D2





        @interface ArrayTester : NSObject<ClassObject, Object, Tester> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_ArrayTester; @protected
            NSArray *v__allKeys;
            NSArray *v__allObjects;
            NSMutableDictionary *v__dictionary;
            Unsigned _index;
            Unsigned _index1;
            NSMutableIndexSet *v__indexes;
            NSString *v__key;
            NSMutableArray *v__keyArray;
            id v__object;
            id v__object2;
            NSMutableArray *v__objectArray;
            NSMutableSet *v__objectSet;
            NSRange _range;
            NSMutableArray *a;
            MutableArrayMirrorTesterImpl *b;
            WeakMutableArrayMirrorTesterImpl *c;
            NSDictionary *v_collections;
            bool debugAutorelease;
            NSMutableString *v_errs;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readwrite) NSArray *_allKeys;
        @property (strong,nonatomic,readwrite) NSArray *_allObjects;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *_dictionary;
        @property (nonatomic,readwrite) Unsigned _index;
        @property (nonatomic,readwrite) Unsigned _index1;
        @property (strong,nonatomic,readwrite) NSMutableIndexSet *_indexes;
        @property (weak,nonatomic,readwrite) NSString *_key;
        @property (strong,nonatomic,readwrite) NSMutableArray *_keyArray;
        @property (weak,nonatomic,readwrite) id _object;
        @property (weak,nonatomic,readwrite) id _object2;
        @property (strong,nonatomic,readwrite) NSMutableArray *_objectArray;
        @property (strong,nonatomic,readwrite) NSMutableSet *_objectSet;
        @property (nonatomic,readwrite) NSRange _range;
        @property (strong,nonatomic,readwrite) NSMutableArray *a;
        @property (strong,nonatomic,readwrite) MutableArrayMirrorTesterImpl *b;
        @property (strong,nonatomic,readwrite) WeakMutableArrayMirrorTesterImpl *c;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (strong,nonatomic,readwrite) NSDictionary *collections;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSMutableDictionary *dictionary;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readonly) Unsigned index;
        @property (nonatomic,readonly) Unsigned index1;
        @property (nonatomic,readonly) NSMutableIndexSet *indexes;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSString *key;
        @property (nonatomic,readonly) NSMutableArray *keyArray;
        @property (nonatomic,readonly) NSObject *object;
        @property (nonatomic,readonly) NSObject *object2;
        @property (nonatomic,readonly) NSMutableArray *objectArray;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSMutableSet *objectSet;
        @property (nonatomic,readonly) NSMutableArray *randArray;
        @property (nonatomic,readonly) NSMutableDictionary *randDictionary;
        @property (nonatomic,readonly) NSMutableIndexSet *randInternalIndexSet;
        @property (nonatomic,readonly) NSRange randInternalRange;
        @property (nonatomic,readonly) NSString *randKey;
        @property (nonatomic,readonly) NSMutableArray *randKeyArray;
        @property (nonatomic,readonly) id randObject;
        @property (nonatomic,readonly) NSMutableSet *randSet;
        @property (nonatomic,readonly) NSRange range;
        @property (nonatomic,readonly) bool stateGood;
        - (void)_startObjectOfClassArrayTester;
        - (NSArray *)_allKeys;
        - (NSArray *)_allObjects;
        - (NSMutableDictionary *)_dictionary;
        - (NSMutableIndexSet *)_indexes;
        - (NSString *)_key;
        - (NSMutableArray *)_keyArray;
        - (id)_object;
        - (id)_object2;
        - (NSMutableArray *)_objectArray;
        - (NSMutableSet *)_objectSet;
        - (NSMutableArray *)a;
        - (void)addObject;
        - (void)addObjectsFromArray;
        - (void)arrayByAddingObject;
        - (void)arrayByAddingObjectsFromArray;
        - (MutableArrayMirrorTesterImpl *)b;
        - (WeakMutableArrayMirrorTesterImpl *)c;
        - (constchar *)cdescription;
        - (void)clearTest;
        - (constchar *)cobjectName;
        - (NSDictionary *)collections;
        - (void)componentsJoinedByString;
        - (void)containsObject;
        - (void)count;
        - (void)dealloc;
        - (NSString *)description;
        - (NSMutableDictionary *)dictionary;
        - (void)die;
        - (NSMutableString *)errs;
        - (void)exchangeObjectAtIndexWithObjectAtIndex;
        - (Int)expectNForSet:(NSString *)set givenBaseN:(Int)N;
        - (void)firstObjectCommonWithArray;
        - (void)getObjects;
        - (Unsigned)index;
        - (Unsigned)index1;
        - (NSMutableIndexSet *)indexes;
        - (void)indexOfObject;
        - (void)indexOfObjectIdenticalTo;
        - (void)indexOfObjectIdenticalToInRange;
        - (void)indexOfObjectInRange;
        - (ArrayTester *)init;
        - (void)insertObjectAtIndex;
        - (void)insertObjectsAtIndexes;
        - (void)isEqualToArray;
        - (NSString *)key;
        - (NSMutableArray *)keyArray;
        - (void)lastObject;
        - (void)nextTest;
        - (NSObject *)object;
        - (NSObject *)object2;
        - (NSMutableArray *)objectArray;
        - (void)objectAtIndex;
        - (NSMutableString *)objectName;
        - (void)objectsAtIndexes;
        - (NSMutableSet *)objectSet;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (bool)passFailWithFormat:(NSString *)format,...;
        - (NSMutableArray *)randArray;
        - (NSMutableDictionary *)randDictionary;
        - (NSMutableIndexSet *)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max;
        - (NSMutableIndexSet *)randInternalIndexSet;
        - (NSRange)randInternalRange;
        - (NSString *)randKey;
        - (NSMutableArray *)randKeyArray;
        - (id)randObject;
        - (NSMutableSet *)randSet;
        - (NSRange)range;
        - (void)removeAllObjects;
        - (void)removeLastObject;
        - (void)removeObject;
        - (void)removeObjectAtIndex;
        - (void)removeObjectIdenticalTo;
        - (void)removeObjectIdenticalToInRange;
        - (void)removeObjectInRange;
        - (void)removeObjectsAtIndexes;
        - (void)removeObjectsInArray;
        - (void)removeObjectsInRange;
        - (void)replaceObjectAtIndexWithObject;
        - (void)replaceObjectsAtIndexesWithObjects;
        - (void)replaceObjectsInRangeWithObjectsFromArray;
        - (void)replaceObjectsInRangeWithObjectsFromArrayRange;
        - (void)set_allKeys:(NSArray *)v;
        - (void)set_allObjects:(NSArray *)v;
        - (void)set_dictionary:(NSMutableDictionary *)v;
        - (void)set_indexes:(NSMutableIndexSet *)v;
        - (void)set_key:(NSString *)v;
        - (void)set_keyArray:(NSMutableArray *)v;
        - (void)set_object2:(id)v;
        - (void)set_object:(id)v;
        - (void)set_objectArray:(NSMutableArray *)v;
        - (void)set_objectSet:(NSMutableSet *)v;
        - (void)setA:(NSMutableArray *)v;
        - (void)setArray;
        - (void)setB:(MutableArrayMirrorTesterImpl *)v;
        - (void)setC:(WeakMutableArrayMirrorTesterImpl *)v;
        - (void)setCollections:(NSDictionary *)v;
        - (void)setErrs:(NSMutableString *)v;
        - (bool)stateGood;
        - (void)step;
        - (NSString *)steps:(Int)N;
        - (void)subarrayWithRange;
        - (void)verifyRC;
        - (void)verifyWillOpCounts;

        @end





        @interface DictionaryTester : NSObject<ClassObject, Object, Tester> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_DictionaryTester; @protected
            NSArray *v__allKeys;
            NSArray *v__allObjects;
            NSMutableDictionary *v__dictionary;
            Unsigned _index;
            Unsigned _index1;
            NSMutableIndexSet *v__indexes;
            NSString *v__key;
            NSMutableArray *v__keyArray;
            id v__object;
            id v__object2;
            NSMutableArray *v__objectArray;
            NSMutableSet *v__objectSet;
            NSRange _range;
            NSMutableDictionary *a;
            MutableDictionaryMirrorTesterImpl *b;
            WeakMutableDictionaryMirrorTesterImpl *c;
            NSDictionary *v_collections;
            bool debugAutorelease;
            NSMutableString *v_errs;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readwrite) NSArray *_allKeys;
        @property (strong,nonatomic,readwrite) NSArray *_allObjects;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *_dictionary;
        @property (nonatomic,readwrite) Unsigned _index;
        @property (nonatomic,readwrite) Unsigned _index1;
        @property (strong,nonatomic,readwrite) NSMutableIndexSet *_indexes;
        @property (weak,nonatomic,readwrite) NSString *_key;
        @property (strong,nonatomic,readwrite) NSMutableArray *_keyArray;
        @property (weak,nonatomic,readwrite) id _object;
        @property (weak,nonatomic,readwrite) id _object2;
        @property (strong,nonatomic,readwrite) NSMutableArray *_objectArray;
        @property (strong,nonatomic,readwrite) NSMutableSet *_objectSet;
        @property (nonatomic,readwrite) NSRange _range;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *a;
        @property (strong,nonatomic,readwrite) MutableDictionaryMirrorTesterImpl *b;
        @property (strong,nonatomic,readwrite) WeakMutableDictionaryMirrorTesterImpl *c;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (strong,nonatomic,readwrite) NSDictionary *collections;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSMutableDictionary *dictionary;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readonly) Unsigned index;
        @property (nonatomic,readonly) Unsigned index1;
        @property (nonatomic,readonly) NSMutableIndexSet *indexes;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSString *key;
        @property (nonatomic,readonly) NSMutableArray *keyArray;
        @property (nonatomic,readonly) NSObject *object;
        @property (nonatomic,readonly) NSObject *object2;
        @property (nonatomic,readonly) NSMutableArray *objectArray;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSMutableSet *objectSet;
        @property (nonatomic,readonly) NSMutableArray *randArray;
        @property (nonatomic,readonly) NSMutableDictionary *randDictionary;
        @property (nonatomic,readonly) NSMutableIndexSet *randInternalIndexSet;
        @property (nonatomic,readonly) NSRange randInternalRange;
        @property (nonatomic,readonly) NSString *randKey;
        @property (nonatomic,readonly) NSMutableArray *randKeyArray;
        @property (nonatomic,readonly) id randObject;
        @property (nonatomic,readonly) NSMutableSet *randSet;
        @property (nonatomic,readonly) NSRange range;
        @property (nonatomic,readonly) bool stateGood;
        - (void)_startObjectOfClassDictionaryTester;
        - (NSArray *)_allKeys;
        - (NSArray *)_allObjects;
        - (NSMutableDictionary *)_dictionary;
        - (NSMutableIndexSet *)_indexes;
        - (NSString *)_key;
        - (NSMutableArray *)_keyArray;
        - (id)_object;
        - (id)_object2;
        - (NSMutableArray *)_objectArray;
        - (NSMutableSet *)_objectSet;
        - (NSMutableDictionary *)a;
        - (void)addEntriesFromDictionary;
        - (void)allKeys;
        - (void)allKeysForObject;
        - (void)allValues;
        - (MutableDictionaryMirrorTesterImpl *)b;
        - (WeakMutableDictionaryMirrorTesterImpl *)c;
        - (constchar *)cdescription;
        - (void)clearTest;
        - (constchar *)cobjectName;
        - (NSDictionary *)collections;
        - (void)count;
        - (void)dealloc;
        - (NSString *)description;
        - (NSMutableDictionary *)dictionary;
        - (void)die;
        - (NSMutableString *)errs;
        - (Int)expectNForSet:(NSString *)set givenBaseN:(Int)N;
        - (Unsigned)index;
        - (Unsigned)index1;
        - (NSMutableIndexSet *)indexes;
        - (DictionaryTester *)init;
        - (void)isEqualToDictionary;
        - (NSString *)key;
        - (NSMutableArray *)keyArray;
        - (void)nextTest;
        - (NSObject *)object;
        - (NSObject *)object2;
        - (NSMutableArray *)objectArray;
        - (void)objectForKey;
        - (NSMutableString *)objectName;
        - (NSMutableSet *)objectSet;
        - (void)objectsForKeysNotFoundMarker;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (bool)passFailWithFormat:(NSString *)format,...;
        - (NSMutableArray *)randArray;
        - (NSMutableDictionary *)randDictionary;
        - (NSMutableIndexSet *)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max;
        - (NSMutableIndexSet *)randInternalIndexSet;
        - (NSRange)randInternalRange;
        - (NSString *)randKey;
        - (NSMutableArray *)randKeyArray;
        - (id)randObject;
        - (NSMutableSet *)randSet;
        - (NSRange)range;
        - (void)removeAllObjects;
        - (void)removeObjectForKey;
        - (void)removeObjectsForKeys;
        - (void)set_allKeys:(NSArray *)v;
        - (void)set_allObjects:(NSArray *)v;
        - (void)set_dictionary:(NSMutableDictionary *)v;
        - (void)set_indexes:(NSMutableIndexSet *)v;
        - (void)set_key:(NSString *)v;
        - (void)set_keyArray:(NSMutableArray *)v;
        - (void)set_object2:(id)v;
        - (void)set_object:(id)v;
        - (void)set_objectArray:(NSMutableArray *)v;
        - (void)set_objectSet:(NSMutableSet *)v;
        - (void)setA:(NSMutableDictionary *)v;
        - (void)setB:(MutableDictionaryMirrorTesterImpl *)v;
        - (void)setC:(WeakMutableDictionaryMirrorTesterImpl *)v;
        - (void)setCollections:(NSDictionary *)v;
        - (void)setDictionary;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setObjectForKey;
        - (void)setValueForKey;
        - (bool)stateGood;
        - (void)step;
        - (NSString *)steps:(Int)N;
        - (void)valueForKey;
        - (void)verifyRC;
        - (void)verifyWillOpCounts;

        @end





        @interface SetTester : NSObject<ClassObject, Object, Tester> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_SetTester; @protected
            NSArray *v__allKeys;
            NSArray *v__allObjects;
            NSMutableDictionary *v__dictionary;
            Unsigned _index;
            Unsigned _index1;
            NSMutableIndexSet *v__indexes;
            NSString *v__key;
            NSMutableArray *v__keyArray;
            id v__object;
            id v__object2;
            NSMutableArray *v__objectArray;
            NSMutableSet *v__objectSet;
            NSRange _range;
            NSMutableSet *a;
            MutableSetMirrorTesterImpl *b;
            WeakMutableSetMirrorTesterImpl *c;
            NSDictionary *v_collections;
            bool debugAutorelease;
            NSMutableString *v_errs;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readwrite) NSArray *_allKeys;
        @property (strong,nonatomic,readwrite) NSArray *_allObjects;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *_dictionary;
        @property (nonatomic,readwrite) Unsigned _index;
        @property (nonatomic,readwrite) Unsigned _index1;
        @property (strong,nonatomic,readwrite) NSMutableIndexSet *_indexes;
        @property (weak,nonatomic,readwrite) NSString *_key;
        @property (strong,nonatomic,readwrite) NSMutableArray *_keyArray;
        @property (weak,nonatomic,readwrite) id _object;
        @property (weak,nonatomic,readwrite) id _object2;
        @property (strong,nonatomic,readwrite) NSMutableArray *_objectArray;
        @property (strong,nonatomic,readwrite) NSMutableSet *_objectSet;
        @property (nonatomic,readwrite) NSRange _range;
        @property (strong,nonatomic,readwrite) NSMutableSet *a;
        @property (strong,nonatomic,readwrite) MutableSetMirrorTesterImpl *b;
        @property (strong,nonatomic,readwrite) WeakMutableSetMirrorTesterImpl *c;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (strong,nonatomic,readwrite) NSDictionary *collections;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSMutableDictionary *dictionary;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readonly) Unsigned index;
        @property (nonatomic,readonly) Unsigned index1;
        @property (nonatomic,readonly) NSMutableIndexSet *indexes;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSString *key;
        @property (nonatomic,readonly) NSMutableArray *keyArray;
        @property (nonatomic,readonly) NSObject *object;
        @property (nonatomic,readonly) NSObject *object2;
        @property (nonatomic,readonly) NSMutableArray *objectArray;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSMutableSet *objectSet;
        @property (nonatomic,readonly) NSMutableArray *randArray;
        @property (nonatomic,readonly) NSMutableDictionary *randDictionary;
        @property (nonatomic,readonly) NSMutableIndexSet *randInternalIndexSet;
        @property (nonatomic,readonly) NSRange randInternalRange;
        @property (nonatomic,readonly) NSString *randKey;
        @property (nonatomic,readonly) NSMutableArray *randKeyArray;
        @property (nonatomic,readonly) id randObject;
        @property (nonatomic,readonly) NSMutableSet *randSet;
        @property (nonatomic,readonly) NSRange range;
        @property (nonatomic,readonly) bool stateGood;
        - (void)_startObjectOfClassSetTester;
        - (NSArray *)_allKeys;
        - (NSArray *)_allObjects;
        - (NSMutableDictionary *)_dictionary;
        - (NSMutableIndexSet *)_indexes;
        - (NSString *)_key;
        - (NSMutableArray *)_keyArray;
        - (id)_object;
        - (id)_object2;
        - (NSMutableArray *)_objectArray;
        - (NSMutableSet *)_objectSet;
        - (NSMutableSet *)a;
        - (void)addObject;
        - (void)addObjectsFromArray;
        - (void)allObjects;
        - (MutableSetMirrorTesterImpl *)b;
        - (WeakMutableSetMirrorTesterImpl *)c;
        - (constchar *)cdescription;
        - (void)clearTest;
        - (constchar *)cobjectName;
        - (NSDictionary *)collections;
        - (void)containsObject;
        - (void)count;
        - (void)dealloc;
        - (NSString *)description;
        - (NSMutableDictionary *)dictionary;
        - (void)die;
        - (NSMutableString *)errs;
        - (Int)expectNForSet:(NSString *)set givenBaseN:(Int)N;
        - (Unsigned)index;
        - (Unsigned)index1;
        - (NSMutableIndexSet *)indexes;
        - (SetTester *)init;
        - (void)intersectSet;
        - (void)intersectsSet;
        - (void)isEqualToSet;
        - (void)isSubsetOfSet;
        - (NSString *)key;
        - (NSMutableArray *)keyArray;
        - (void)member;
        - (void)minusSet;
        - (void)nextTest;
        - (NSObject *)object;
        - (NSObject *)object2;
        - (NSMutableArray *)objectArray;
        - (NSMutableString *)objectName;
        - (NSMutableSet *)objectSet;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (bool)passFailWithFormat:(NSString *)format,...;
        - (NSMutableArray *)randArray;
        - (NSMutableDictionary *)randDictionary;
        - (NSMutableIndexSet *)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max;
        - (NSMutableIndexSet *)randInternalIndexSet;
        - (NSRange)randInternalRange;
        - (NSString *)randKey;
        - (NSMutableArray *)randKeyArray;
        - (id)randObject;
        - (NSMutableSet *)randSet;
        - (NSRange)range;
        - (void)removeAllObjects;
        - (void)removeObject;
        - (void)set_allKeys:(NSArray *)v;
        - (void)set_allObjects:(NSArray *)v;
        - (void)set_dictionary:(NSMutableDictionary *)v;
        - (void)set_indexes:(NSMutableIndexSet *)v;
        - (void)set_key:(NSString *)v;
        - (void)set_keyArray:(NSMutableArray *)v;
        - (void)set_object2:(id)v;
        - (void)set_object:(id)v;
        - (void)set_objectArray:(NSMutableArray *)v;
        - (void)set_objectSet:(NSMutableSet *)v;
        - (void)setA:(NSMutableSet *)v;
        - (void)setB:(MutableSetMirrorTesterImpl *)v;
        - (void)setByAddingObject;
        - (void)setByAddingObjectsFromArray;
        - (void)setByAddingObjectsFromSet;
        - (void)setC:(WeakMutableSetMirrorTesterImpl *)v;
        - (void)setCollections:(NSDictionary *)v;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setSet;
        - (bool)stateGood;
        - (void)step;
        - (NSString *)steps:(Int)N;
        - (void)unionSet;
        - (void)verifyRC;
        - (void)verifyWillOpCounts;

        @end
    #endif // INCLUDE_IFACE_D2

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: a





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ArrayTester
    #define _WIClass_           ArrayTester__
    #define _className_         arrayTester
    #define _Class_             ArrayTester__
    @implementation ArrayTester

    @synthesize __owner_context = __owner_context;
    @synthesize _index = _index;
    @synthesize _index1 = _index1;
    @synthesize _range = _range;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassArrayTester {
        MSGSTART("ArrayTester:-(void)_startObjectOfClassArrayTester")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ b = ([MutableArrayMirrorTesterImpl array]);  ADDOWNER(b,self);
        /*ivar*/ c = ([WeakMutableArrayMirrorTesterImpl array]);  ADDOWNER(c,self);
        /*ivar*/ _index1 = (NSNotFound);
        /*ivar*/ v_collections = ([NSDictionary dictionary]);
        /*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ _index = (NSNotFound);
        /*ivar*/ a = ([NSMutableArray array]);

        /*i0*/ self.collections = [NSMutableDictionary dictionaryWithObjectsAndKeys:self.a,@"std",self.b,@"strong",self.c,@"weak",nil];




        _range = NSMakeRange(NSNotFound,0);
        NSMutableArray *array = [NSMutableArray arrayWithCapacity:100];
        NSMutableArray *arrayk = [NSMutableArray arrayWithCapacity:100];
        for (Int i = 0; i < 100; i++) {
            CollectionTestObject *o = [[CollectionTestObject alloc] initWithInt:i tester:self];
            [array addObject:o];
            [arrayk addObject:[NSString stringWithFormat:@"k%d",(int)i]];
            printf("%p: %s %s\n",array.lastObject,( (CollectionTestObject *)array.lastObject ).description.UTF8String,( (NSString *)arrayk.lastObject ).description.UTF8String);
        }
        self._allObjects = array;
        self._allKeys = arrayk;
        [self verifyWillOpCounts];
    }
    - (NSArray *)_allKeys {
        MSGSTART("ArrayTester:-(NSArray*)_allKeys")

        /*i-999*/ NSArray * ret = v__allKeys;
        /*i999*/ return ret;
    }
    - (NSArray *)_allObjects {
        MSGSTART("ArrayTester:-(NSArray*)_allObjects")

        /*i-999*/ NSArray * ret = v__allObjects;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)_dictionary {
        MSGSTART("ArrayTester:-(NSMutableDictionary*)_dictionary")

        /*i-999*/ NSMutableDictionary * ret = v__dictionary;
        /*i999*/ return ret;
    }
    - (NSMutableIndexSet *)_indexes {
        MSGSTART("ArrayTester:-(NSMutableIndexSet*)_indexes")

        /*i-999*/ NSMutableIndexSet * ret = v__indexes;
        /*i999*/ return ret;
    }
    - (NSString *)_key {
        MSGSTART("ArrayTester:-(NSString*)_key")

        /*i-999*/ NSString * ret = v__key;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)_keyArray {
        MSGSTART("ArrayTester:-(NSMutableArray*)_keyArray")

        /*i-999*/ NSMutableArray * ret = v__keyArray;
        /*i999*/ return ret;
    }
    - (id)_object {
        MSGSTART("ArrayTester:-(id)_object")

        /*i-999*/ id ret = v__object;
        /*i999*/ return ret;
    }
    - (id)_object2 {
        MSGSTART("ArrayTester:-(id)_object2")

        /*i-999*/ id ret = v__object2;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)_objectArray {
        MSGSTART("ArrayTester:-(NSMutableArray*)_objectArray")

        /*i-999*/ NSMutableArray * ret = v__objectArray;
        /*i999*/ return ret;
    }
    - (NSMutableSet *)_objectSet {
        MSGSTART("ArrayTester:-(NSMutableSet*)_objectSet")

        /*i-999*/ NSMutableSet * ret = v__objectSet;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)a {
        MSGSTART("ArrayTester:-(NSMutableArray*)a")

        /*i-999*/ NSMutableArray * ret = a;
        /*i999*/ return ret;
    }
    - (void)addObject {
        MSGSTART("ArrayTester:-(void)addObject")

        [self object];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v addObject:self.object]; )
        [self passFailWithFormat : @"addObject"];
    }
    - (void)addObjectsFromArray {
        MSGSTART("ArrayTester:-(void)addObjectsFromArray")

        [self objectArray];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v addObjectsFromArray:self.objectArray]; )
        [self passFailWithFormat : @"addObjectsFromArray"];
    }
    - (void)arrayByAddingObject {
        MSGSTART("ArrayTester:-(void)arrayByAddingObject")

        NSArray * aa = [a arrayByAddingObject:self.object];
        NSArray *bb = [b arrayByAddingObject:self.object];
        [self passFail:[aa isEqualToArray:bb] format:@"arrayByAddingObject"];
    }
    - (void)arrayByAddingObjectsFromArray {
        MSGSTART("ArrayTester:-(void)arrayByAddingObjectsFromArray")

        NSArray * aa = [a arrayByAddingObjectsFromArray:self.objectArray];
        NSArray *bb = [b arrayByAddingObjectsFromArray:self.objectArray];
        [self passFail:[aa isEqualToArray:bb] format:@"arrayByAddingObjectsFromArray"];
    }
    - (MutableArrayMirrorTesterImpl *)b {
        MSGSTART("ArrayTester:-(MutableArrayMirrorTesterImpl*)b")

        /*i-999*/ MutableArrayMirrorTesterImpl * ret = b;
        /*i999*/ return ret;
    }
    - (WeakMutableArrayMirrorTesterImpl *)c {
        MSGSTART("ArrayTester:-(WeakMutableArrayMirrorTesterImpl*)c")

        /*i-999*/ WeakMutableArrayMirrorTesterImpl * ret = c;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("ArrayTester:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)clearTest {
        MSGSTART("ArrayTester:-(void)clearTest")

        [self._keyArray removeAllObjects];
        [self._objectArray removeAllObjects];
        [self._objectSet removeAllObjects];
        [self._dictionary removeAllObjects];
        [self._indexes removeAllIndexes];

        self._key = nil;
        self._keyArray = nil;
        self._dictionary = nil;
        self._object = nil;
        self._object2 = nil;
        self._objectArray = nil;
        self._objectSet = nil;
        self._indexes = nil;

        _index = _index1 = NSNotFound;
        _range = NSMakeRange(NSNotFound,0);
    }
    - (constchar *)cobjectName {
        MSGSTART("ArrayTester:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSDictionary *)collections {
        MSGSTART("ArrayTester:-(NSDictionary*)collections")

        /*i-999*/ NSDictionary * ret = v_collections;
        /*i999*/ return ret;
    }
    - (void)componentsJoinedByString {
        MSGSTART("ArrayTester:-(void)componentsJoinedByString")

        [self passFail :[[a componentsJoinedByString:@" -.- "] isEqualToString:[b componentsJoinedByString:@" -.- "]] format : @"componentsJoinedByString"];
    }
    - (void)containsObject {
        MSGSTART("ArrayTester:-(void)containsObject")

        [self passFail :[a containsObject:self.object] == [b containsObject:self.object] format : @"containsObject"];
    }
    - (void)count {
        MSGSTART("ArrayTester:-(void)count")

        [self passFail : a.count == b.count format : @"count"];
    }
    - (void)dealloc {
        MSGSTART("ArrayTester:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(b,self); b = nil;

        REMOVEOWNER(c,self); c = nil;

        v__allObjects = nil;

        v__keyArray = nil;

        v__objectSet = nil;

        v_collections = nil;

        v_errs = nil;

        v__dictionary = nil;

        v__allKeys = nil;

        v__objectArray = nil;

        v__indexes = nil;

        a = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("ArrayTester:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)dictionary {
        MSGSTART("ArrayTester:-(NSMutableDictionary*)dictionary")
        if (!v__dictionary) self._dictionary = self.randDictionary;
        return v__dictionary;
    }
    - (void)die {
        MSGSTART("ArrayTester:-(void)die")

        /*i900*/}
    - (NSMutableString *)errs {
        MSGSTART("ArrayTester:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (void)exchangeObjectAtIndexWithObjectAtIndex {
        MSGSTART("ArrayTester:-(void)exchangeObjectAtIndexWithObjectAtIndex")

        if (!a.count) return;

        Unsigned i = rand() % a.count;
        ITERATECOLLECTIONS(NSMutableArray *,v,[v exchangeObjectAtIndex:i withObjectAtIndex:self.index]; )
        [self passFailWithFormat : @"exchangeObjectAtIndexWithObjectAtIndex"];
    }
    - (Int)expectNForSet:(NSString *)set givenBaseN:(Int)N {
        MSGSTART("ArrayTester:-(Int)expectNForSet:(NSString*)set givenBaseN:(Int)N")

        if ([set isEqualToString:@"weak"]) return 0;

        if ([set isEqualToString:@"strong"]) return N;

        return -1;
    }
    - (void)firstObjectCommonWithArray {
        MSGSTART("ArrayTester:-(void)firstObjectCommonWithArray")

        [self passFail :[a firstObjectCommonWithArray:self.objectArray] == [b firstObjectCommonWithArray:self.objectArray] format : @"firstObjectCommonWithArray"];
    }
    - (void)getObjects {
        MSGSTART("ArrayTester:-(void)getObjects")
    }
    - (Unsigned)index {
        MSGSTART("ArrayTester:-(Unsigned)index")
        return _index == NSNotFound ? _index = ( a.count == 0 ? NSNotFound : (rand() % a.count) ) : _index;
    }
    - (Unsigned)index1 {
        MSGSTART("ArrayTester:-(Unsigned)index1")
        return _index1 == NSNotFound ? _index1 = rand() % (a.count + 1) : _index1;
    }
    - (NSMutableIndexSet *)indexes {
        MSGSTART("ArrayTester:-(NSMutableIndexSet*)indexes")
        if (!v__indexes) self._indexes = self.randInternalIndexSet;
        return v__indexes;
    }
    - (void)indexOfObject {
        MSGSTART("ArrayTester:-(void)indexOfObject")

        [self passFail :[a indexOfObject:self.object] == [b indexOfObject:self.object] format : @"indexOfObject"];
    }
    - (void)indexOfObjectIdenticalTo {
        MSGSTART("ArrayTester:-(void)indexOfObjectIdenticalTo")

        [self passFail :[a indexOfObjectIdenticalTo:self.object] == [b indexOfObjectIdenticalTo:self.object] format : @"indexOfObjectIdenticalTo"];
    }
    - (void)indexOfObjectIdenticalToInRange {
        MSGSTART("ArrayTester:-(void)indexOfObjectIdenticalToInRange")

        if (!a.count) return;

        [self passFail:[a indexOfObjectIdenticalTo:self.object inRange:self.range] == [b indexOfObjectIdenticalTo:self.object inRange:self.range] format:@"indexOfObjectIdenticalToInRange"];
    }
    - (void)indexOfObjectInRange {
        MSGSTART("ArrayTester:-(void)indexOfObjectInRange")

        if (!a.count) return;

        [self passFail:[a indexOfObject:self.object inRange:self.range] == [b indexOfObject:self.object inRange:self.range] format:@"indexOfObjectInRange"];
    }
    - (ArrayTester *)init {
        MSGSTART("ArrayTester:-(ArrayTester*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassArrayTester];

/*i10001*/ return self;
    }
    - (void)insertObjectAtIndex {
        MSGSTART("ArrayTester:-(void)insertObjectAtIndex")

        [self object];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v insertObject:self.object atIndex:self.index1]; )
        [self passFailWithFormat : @"insertObjectAtIndex"];
    }
    - (void)insertObjectsAtIndexes {
        MSGSTART("ArrayTester:-(void)insertObjectsAtIndexes")

        NSIndexSet * indexesv = [self randIndexSetWithCount:self.objectArray.count max:self.objectArray.count + a.count - 1];
        [self objectArray];
        [self indexes];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v insertObjects:self.objectArray atIndexes:indexesv]; )
        [self passFailWithFormat : @"insertObjectsAtIndexes"];
    }
    - (void)isEqualToArray {
        MSGSTART("ArrayTester:-(void)isEqualToArray")

        [self passFail :[a isEqualToArray:self.objectArray] == [b isEqualToArray:self.objectArray] format : @"isEqualToArray"];
    }
    - (NSString *)key {
        MSGSTART("ArrayTester:-(NSString*)key")
        if (!v__key) self._key = self.randKey;
        return v__key;
    }
    - (NSMutableArray *)keyArray {
        MSGSTART("ArrayTester:-(NSMutableArray*)keyArray")
        if (!v__keyArray) self._keyArray = self.randKeyArray;
        return v__keyArray;
    }
    - (void)lastObject {
        MSGSTART("ArrayTester:-(void)lastObject")

        [self passFail : a.lastObject == b.lastObject format : @"lastObject"];
    }
    - (void)nextTest {
        MSGSTART("ArrayTester:-(void)nextTest")

        [self clearTest];
    }
    - (NSObject *)object {
        MSGSTART("ArrayTester:-(NSObject*)object")
        if (!v__object) self._object = self.randObject;
        return v__object;
    }
    - (NSObject *)object2 {
        MSGSTART("ArrayTester:-(NSObject*)object2")
        if (!v__object2) self._object2 = self.randObject;
        return v__object2;
    }
    - (NSMutableArray *)objectArray {
        MSGSTART("ArrayTester:-(NSMutableArray*)objectArray")
        if (!v__objectArray) self._objectArray = self.randArray;
        return v__objectArray;
    }
    - (void)objectAtIndex {
        MSGSTART("ArrayTester:-(void)objectAtIndex")

        if (!a.count) return;

        [self passFail:[a objectAtIndex:self.index] == [b objectAtIndex:self.index] format:@"objectAtIndex"];
    }
    - (NSMutableString *)objectName {
        MSGSTART("ArrayTester:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)objectsAtIndexes {
        MSGSTART("ArrayTester:-(void)objectsAtIndexes")

        // [self passFail:[[a objectsAtIndexes:self.indexes] isEqualToArray:[b objectsAtIndexes:self.indexes]] format:@"objectsAtIndexes"];
    }
    - (NSMutableSet *)objectSet {
        MSGSTART("ArrayTester:-(NSMutableSet*)objectSet")
        if (!v__objectSet) self._objectSet = self.randSet;
        return v__objectSet;
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("ArrayTester:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (bool)passFailWithFormat:(NSString *)format,... {
        MSGSTART("ArrayTester:-(bool)passFailWithFormat:(NSString*)format,...")

        bool pass = self.stateGood;
        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (NSMutableArray *)randArray {
        MSGSTART("ArrayTester:-(NSMutableArray*)randArray")

        NSMutableArray * objects = [NSMutableArray array];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [objects addObject:self.randObject];
        }
        return objects;
    }
    - (NSMutableDictionary *)randDictionary {
        MSGSTART("ArrayTester:-(NSMutableDictionary*)randDictionary")

        NSMutableDictionary * d = [NSMutableDictionary dictionary];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [d setObject:self.randObject forKey:self.randKey];
        }
        return d;
    }
    - (NSMutableIndexSet *)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max {
        MSGSTART("ArrayTester:-(NSMutableIndexSet*)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max")

        NSMutableIndexSet * indexesv = [NSMutableIndexSet indexSet];
        if (count)
            for (Unsigned i = 0; i < count; i++) {
                Unsigned j,ii = ( rand() % ( (max + 1) - i ) );
                for (j = 0; [indexesv containsIndex:j] || (ii--); j++) {
                }
                [indexesv addIndex:j];
            }
        return indexesv;
    }
    - (NSMutableIndexSet *)randInternalIndexSet {
        MSGSTART("ArrayTester:-(NSMutableIndexSet*)randInternalIndexSet")
        return [self randIndexSetWithCount:rand() % (a.count + 1) max:a.count - 1];
    }
    - (NSRange)randInternalRange {
        MSGSTART("ArrayTester:-(NSRange)randInternalRange")

        Unsigned location = rand() % a.count,length = rand() % (a.count - location);
        return NSMakeRange(location,length);
    }
    - (NSString *)randKey {
        MSGSTART("ArrayTester:-(NSString*)randKey")
        return (NSString *)[self._allKeys objectAtIndex:rand() % self._allKeys.count];
    }
    - (NSMutableArray *)randKeyArray {
        MSGSTART("ArrayTester:-(NSMutableArray*)randKeyArray")

        NSMutableArray * keys = [NSMutableArray array];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [keys addObject:self.randKey];
        }
        return keys;
    }
    - (id)randObject {
        MSGSTART("ArrayTester:-(id)randObject")
        return [self._allObjects objectAtIndex:rand() % self._allObjects.count];
    }
    - (NSMutableSet *)randSet {
        MSGSTART("ArrayTester:-(NSMutableSet*)randSet")

        NSMutableSet * objects = [MutableSet set];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [objects addObject:self.randObject];
        }
        return objects;
    }
    - (NSRange)range {
        MSGSTART("ArrayTester:-(NSRange)range")
        return _range.location == NSNotFound ? self._range = self.randInternalRange : self._range;
    }
    - (void)removeAllObjects {
        MSGSTART("ArrayTester:-(void)removeAllObjects")

        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeAllObjects]; )
        [self passFailWithFormat : @"removeAllObjects"];
    }
    - (void)removeLastObject {
        MSGSTART("ArrayTester:-(void)removeLastObject")

        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeLastObject]; )
        [self passFailWithFormat : @"removeLastObject"];
    }
    - (void)removeObject {
        MSGSTART("ArrayTester:-(void)removeObject")

        [self object];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeObject:self.object]; )
        [self passFailWithFormat : @"removeObject"];
    }
    - (void)removeObjectAtIndex {
        MSGSTART("ArrayTester:-(void)removeObjectAtIndex")

        if (!a.count) return;

        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeObjectAtIndex:self.index]; )
        [self passFailWithFormat : @"removeObjectAtIndex"];
    }
    - (void)removeObjectIdenticalTo {
        MSGSTART("ArrayTester:-(void)removeObjectIdenticalTo")

        [self object];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeObjectIdenticalTo:self.object]; )
        [self passFailWithFormat : @"removeObjectIdenticalTo"];
    }
    - (void)removeObjectIdenticalToInRange {
        MSGSTART("ArrayTester:-(void)removeObjectIdenticalToInRange")

        if (!a.count) return;

        [self object];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeObjectIdenticalTo:self.object inRange:self.range]; )
        [self passFailWithFormat : @"removeObjectIdenticalToInRange"];
    }
    - (void)removeObjectInRange {
        MSGSTART("ArrayTester:-(void)removeObjectInRange")

        if (!a.count) return;

        [self object];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeObject:self.object inRange:self.range]; )
        [self passFailWithFormat : @"removeObjectInRange"];
    }
    - (void)removeObjectsAtIndexes {
        MSGSTART("ArrayTester:-(void)removeObjectsAtIndexes")

        [self indexes];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeObjectsAtIndexes:self.indexes]; )
        [self passFailWithFormat : @"removeObjectsAtIndexes"];
    }
    - (void)removeObjectsInArray {
        MSGSTART("ArrayTester:-(void)removeObjectsInArray")

        [self objectArray];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeObjectsInArray:self.objectArray]; )
        [self passFailWithFormat : @"removeObjectsInArray"];
    }
    - (void)removeObjectsInRange {
        MSGSTART("ArrayTester:-(void)removeObjectsInRange")

        if (!a.count) return;

        ITERATECOLLECTIONS(NSMutableArray *,v,[v removeObjectsInRange:self.range]; )
        [self passFailWithFormat : @"removeObjectsInRange"];
    }
    - (void)replaceObjectAtIndexWithObject {
        MSGSTART("ArrayTester:-(void)replaceObjectAtIndexWithObject")

        if (!a.count) return;

        [self object];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v replaceObjectAtIndex:self.index withObject:self.object]; )
        [self passFailWithFormat : @"replaceObjectAtIndexWithObject"];
    }
    - (void)replaceObjectsAtIndexesWithObjects {
        MSGSTART("ArrayTester:-(void)replaceObjectsAtIndexesWithObjects")

        if (self.objectArray.count > a.count) return;

        NSIndexSet *indexesv = [self randIndexSetWithCount:self.objectArray.count max:a.count - 1];
        [self objectArray];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v replaceObjectsAtIndexes:indexesv withObjects:self.objectArray]; )
        [self passFailWithFormat : @"replaceObjectsAtIndexesWithObjects"];
    }
    - (void)replaceObjectsInRangeWithObjectsFromArray {
        MSGSTART("ArrayTester:-(void)replaceObjectsInRangeWithObjectsFromArray")

        if (!a.count) return;

        if (!self.objectArray.count) return;

        [self objectArray];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v replaceObjectsInRange:self.range withObjectsFromArray:self.objectArray]; )
        [self passFailWithFormat : @"replaceObjectsInRangeWithObjectsFromArray"];
    }
    - (void)replaceObjectsInRangeWithObjectsFromArrayRange {
        MSGSTART("ArrayTester:-(void)replaceObjectsInRangeWithObjectsFromArrayRange")

        if (!a.count) return;

        if (!self.objectArray.count) return;

        Unsigned i = rand() % (self.objectArray.count + 1);
        NSRange r = NSMakeRange(rand() % (self.objectArray.count + 1 - i),i);
        [self objectArray];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v replaceObjectsInRange:self.range withObjectsFromArray:self.objectArray range:r]; )
        [self passFailWithFormat : @"replaceObjectsInRangeWithObjectsFromArrayRange"];
    }
    - (void)set_allKeys:(NSArray *)v {
        MSGSTART("ArrayTester:-(void)set_allKeys:(NSArray*)v")

        /*i-905*/ if (v__allKeys == v) return;

        /*i-900*/ {
            v__allKeys = (id)v;
        }
    }
    - (void)set_allObjects:(NSArray *)v {
        MSGSTART("ArrayTester:-(void)set_allObjects:(NSArray*)v")

        /*i-905*/ if (v__allObjects == v) return;

        /*i-900*/ {
            v__allObjects = (id)v;
        }
    }
    - (void)set_dictionary:(NSMutableDictionary *)v {
        MSGSTART("ArrayTester:-(void)set_dictionary:(NSMutableDictionary*)v")

        /*i-905*/ if (v__dictionary == v) return;

        /*i-900*/ {
            v__dictionary = (id)v;
        }
    }
    - (void)set_indexes:(NSMutableIndexSet *)v {
        MSGSTART("ArrayTester:-(void)set_indexes:(NSMutableIndexSet*)v")

        /*i-905*/ if (v__indexes == v) return;

        /*i-900*/ {
            v__indexes = (id)v;
        }
    }
    - (void)set_key:(NSString *)v {
        MSGSTART("ArrayTester:-(void)set_key:(NSString*)v")

        /*i-905*/ if (v__key == v) return;

        /*i-900*/ {
            v__key = (id)v;
        }
    }
    - (void)set_keyArray:(NSMutableArray *)v {
        MSGSTART("ArrayTester:-(void)set_keyArray:(NSMutableArray*)v")

        /*i-905*/ if (v__keyArray == v) return;

        /*i-900*/ {
            v__keyArray = (id)v;
        }
    }
    - (void)set_object2:(id)v {
        MSGSTART("ArrayTester:-(void)set_object2:(id)v")

        /*i-905*/ if (v__object2 == v) return;

        /*i-900*/ {
            v__object2 = (id)v;
        }
    }
    - (void)set_object:(id)v {
        MSGSTART("ArrayTester:-(void)set_object:(id)v")

        /*i-905*/ if (v__object == v) return;

        /*i-900*/ {
            v__object = (id)v;
        }
    }
    - (void)set_objectArray:(NSMutableArray *)v {
        MSGSTART("ArrayTester:-(void)set_objectArray:(NSMutableArray*)v")

        /*i-905*/ if (v__objectArray == v) return;

        /*i-900*/ {
            v__objectArray = (id)v;
        }
    }
    - (void)set_objectSet:(NSMutableSet *)v {
        MSGSTART("ArrayTester:-(void)set_objectSet:(NSMutableSet*)v")

        /*i-905*/ if (v__objectSet == v) return;

        /*i-900*/ {
            v__objectSet = (id)v;
        }
    }
    - (void)setA:(NSMutableArray *)v {
        MSGSTART("ArrayTester:-(void)setA:(NSMutableArray*)v")

        /*i-905*/ if (a == v) return;

        /*i-900*/ {
            a = (id)v;
        }
    }
    - (void)setArray {
        MSGSTART("ArrayTester:-(void)setArray")

        [self objectArray];
        ITERATECOLLECTIONS(NSMutableArray *,v,[v setArray:self.objectArray]; )
        [self passFailWithFormat : @"setArray"];
    }
    - (void)setB:(MutableArrayMirrorTesterImpl *)v {
        MSGSTART("ArrayTester:-(void)setB:(MutableArrayMirrorTesterImpl*)v")

        /*i-905*/ if (b == v) return;

        /*i-900*/ {
            b = (id)v;
        }
/*i-850*/ REMOVEOWNER(b,self); ADDOWNER(v,self);
    }
    - (void)setC:(WeakMutableArrayMirrorTesterImpl *)v {
        MSGSTART("ArrayTester:-(void)setC:(WeakMutableArrayMirrorTesterImpl*)v")

        /*i-905*/ if (c == v) return;

        /*i-900*/ {
            c = (id)v;
        }
/*i-850*/ REMOVEOWNER(c,self); ADDOWNER(v,self);
    }
    - (void)setCollections:(NSDictionary *)v {
        MSGSTART("ArrayTester:-(void)setCollections:(NSDictionary*)v")

        /*i-905*/ if (v_collections == v) return;

        /*i-900*/ {
            v_collections = (id)v;
        }
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("ArrayTester:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (bool)stateGood {
        MSGSTART("ArrayTester:-(bool)stateGood")
        return [a isEqualToArray:b];
    }
    - (void)step {
        MSGSTART("ArrayTester:-(void)step")

        switch (rand() % 36) {
            case 0:[self containsObject]; break;

            case 1:[self count]; break;

            case 2:[self getObjects]; break;

            case 3:[self lastObject]; break;

            case 4:[self objectAtIndex]; break;

            case 5:[self objectsAtIndexes]; break;

            case 6:[self indexOfObject]; break;

            case 7:[self indexOfObjectInRange]; break;

            case 8:[self indexOfObjectIdenticalTo]; break;

            case 9:[self indexOfObjectIdenticalToInRange]; break;

            case 10:[self firstObjectCommonWithArray]; break;

            case 11:[self isEqualToArray]; break;

            case 12:[self arrayByAddingObject]; break;

            case 13:[self arrayByAddingObjectsFromArray]; break;

            case 14:[self subarrayWithRange]; break;

            case 15:[self componentsJoinedByString]; break;

            case 16:[self addObject]; break;

            case 17:[self addObjectsFromArray]; break;

            case 18:[self insertObjectAtIndex]; break;

            case 19:[self insertObjectsAtIndexes]; break;

            case 20:[self removeAllObjects]; break;

            case 21:[self removeLastObject]; break;

            case 22:[self removeObject]; break;

            case 23:[self removeObjectInRange]; break;

            case 24:[self removeObjectAtIndex]; break;

            case 25:[self removeObjectsAtIndexes]; break;

            case 26:[self removeObjectIdenticalTo]; break;

            case 27:[self removeObjectIdenticalToInRange]; break;

            case 28:[self removeObjectsInArray]; break;

            case 29:[self removeObjectsInRange]; break;

            case 30:[self replaceObjectAtIndexWithObject]; break;

            case 31:[self replaceObjectsAtIndexesWithObjects]; break;

            case 32:[self replaceObjectsInRangeWithObjectsFromArrayRange]; break;

            case 33:[self replaceObjectsInRangeWithObjectsFromArray]; break;

            case 34:[self setArray]; break;

            case 35:[self exchangeObjectAtIndexWithObjectAtIndex]; break;
        }
    }
    - (NSString *)steps:(Int)N {
        MSGSTART("ArrayTester:-(NSString*)steps:(Int)N")

        srand(1);
        while (N-- > 0) {
            [self nextTest];
            @autoreleasepool {
                [self step];
                [self verifyWillOpCounts];
                [self clearTest];
            }
            [self verifyRC];
            // printf(">%s\n",[self.a.description cStringUsingEncoding:NSASCIIStringEncoding]);
        }
        return b.errs.length || self.errs.length ? [NSString stringWithFormat:@"Errors:\n%@\n\n%@\n",b.errs,self.errs] : nil;
    }
    - (void)subarrayWithRange {
        MSGSTART("ArrayTester:-(void)subarrayWithRange")

        if (!a.count) return;

        NSArray *aa = [a subarrayWithRange:self.range];
        NSArray *bb = [b subarrayWithRange:self.range];
        [self passFail:[aa isEqualToArray:bb] format:@"subarrayWithRange"];
    }
    - (void)verifyRC {
        MSGSTART("ArrayTester:-(void)verifyRC")

        for (CollectionTestObject *o in self._allObjects) {
            Int N = 0;
            if ([a isKindOfClass:[NSSet class]])
                if ([(NSSet *)a containsObject : o]) N = 1;
            if ([a isKindOfClass:[NSArray class]])
                for (id o2 in(NSArray *) a) {
                    if (o == o2) N++;
                }
            if ([a isKindOfClass:[NSDictionary class]])
                for (id k in(NSDictionary *) a) {
                    if ([(NSDictionary *)a objectForKey : k] == o) N++;
                }
            for (NSString *k in o.subObjects) {
                CollectionTestSubObject *so = [o.subObjects objectForKey:k];
                Int expRefCnt = [self expectNForSet:k givenBaseN:N];
                if ( (expRefCnt >= 0) && (expRefCnt != so.rcWillBe) )
                    [self passFail:NO format:@"Outer: Object %@ key %@ should have rc of %d",o.description,k,expRefCnt];
                if ( (expRefCnt >= 0) && (expRefCnt != so.rcInner) )
                    [self passFail:NO format:@"Inner: Object %@ key %@ should have rc of %d",o.description,k,expRefCnt];
            }
        }
    }
    - (void)verifyWillOpCounts {
        MSGSTART("ArrayTester:-(void)verifyWillOpCounts")

        for (CollectionTestObject *o in self._allObjects) {
            for (CollectionTestSubObject *so in o.subObjects.allValues) {
                if (so.willAddCount)
                    [self passFail:NO format:@"Object %@ has willAddCount",o.description];
                if (so.willRemoveCount)
                    [self passFail:NO format:@"Object %@ has willRemoveCount",o.description];
            }
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: c





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         CollectionTestObject
    #define _WIClass_           CollectionTestObject__
    #define _className_         collectionTestObject
    #define _Class_             CollectionTestObject__
    @implementation CollectionTestObject

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize intValue = intValue;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassCollectionTestObject {
        MSGSTART("CollectionTestObject:-(void)_startObjectOfClassCollectionTestObject")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ subObjects = ([NSMutableDictionary dictionary]);

        /*i0*/ [subObjects setObject:[[CollectionTestSubObject alloc] initWithTestObject:self] forKey:@"std"];
        [subObjects setObject:[[CollectionTestSubObject alloc] initWithTestObject:self] forKey:@"strong"];
        [subObjects setObject:[[CollectionTestSubObject alloc] initWithTestObject:self] forKey:@"weak"];
    }
    - (constchar *)cdescription {
        MSGSTART("CollectionTestObject:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("CollectionTestObject:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("CollectionTestObject:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ subObjects = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("CollectionTestObject:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ NSMutableString *s = [NSMutableString stringWithFormat:@"(o%d",(int)intValue];
        for (NSString *key in subObjects) {
            [s appendFormat:@" %@:%@",key,( (CollectionTestSubObject *)[subObjects objectForKey:key] ).description];
        }
        [s appendFormat:@")"];
        return s;


        /*i999*/ return ret;
    }
    - (void)didAdd {
        MSGSTART("CollectionTestObject:-(void)didAdd")

        if (testKey) {
            CollectionTestSubObject *so = [subObjects objectForKey:testKey];
            if (so) so.willAddCount--;
        }
    }
    - (void)didRemove {
        MSGSTART("CollectionTestObject:-(void)didRemove")

        if (testKey) {
            CollectionTestSubObject *so = [subObjects objectForKey:testKey];
            if (so) so.willRemoveCount--;
        }
    }
    - (void)die {
        MSGSTART("CollectionTestObject:-(void)die")

        /*i900*/}
    - (CollectionTestObject *)initWithInt:(Int)v tester:(NSObject<Tester> *)atester {
        MSGSTART("CollectionTestObject:-(CollectionTestObject*)initWithInt:(Int)v tester:(NSObject<Tester>*)atester")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ intValue = v;
        self.tester = atester;

        /*i11*/ [self _startObjectOfClassCollectionTestObject];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("CollectionTestObject:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)setSubObjects:(NSMutableDictionary *)v {
        MSGSTART("CollectionTestObject:-(void)setSubObjects:(NSMutableDictionary*)v")

        /*i-905*/ if (subObjects == v) return;

        /*i-900*/ {
            subObjects = (id)v;
        }
    }
    - (void)setTester:(NSObject<Tester> *)v {
        MSGSTART("CollectionTestObject:-(void)setTester:(NSObject<Tester>*)v")

        /*i-905*/ if (v_tester == v) return;

        /*i-900*/ {
            v_tester = (id)v;
        }
    }
    - (NSMutableDictionary *)subObjects {
        MSGSTART("CollectionTestObject:-(NSMutableDictionary*)subObjects")

        /*i-999*/ NSMutableDictionary * ret = subObjects;
        /*i999*/ return ret;
    }
    - (NSObject<Tester> *)tester {
        MSGSTART("CollectionTestObject:-(NSObject<Tester>*)tester")

        /*i-999*/ NSObject<Tester> *ret = v_tester;
        /*i999*/ return ret;
    }
    - (void)willAdd {
        MSGSTART("CollectionTestObject:-(void)willAdd")

        if (testKey) {
            CollectionTestSubObject *so = [subObjects objectForKey:testKey];
            if (so) so.willAddCount++;
        }
    }
    - (void)willRemove {
        MSGSTART("CollectionTestObject:-(void)willRemove")

        if (testKey) {
            CollectionTestSubObject *so = [subObjects objectForKey:testKey];
            if (so) so.willRemoveCount++;
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         CollectionTestSubObject
    #define _WIClass_           CollectionTestSubObject__
    #define _className_         collectionTestSubObject
    #define _Class_             CollectionTestSubObject__
    @implementation CollectionTestSubObject

    @synthesize __arc = __arc;
    @synthesize __owner_context = __owner_context;
    @synthesize __rc = __rc;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize rcInner = rcInner;
    @synthesize willAddCount = willAddCount;
    @synthesize willRemoveCount = willRemoveCount;
    - (void)_startObjectOfClassCollectionTestSubObject {
        MSGSTART("CollectionTestSubObject:-(void)_startObjectOfClassCollectionTestSubObject")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)_autorelease {
        MSGSTART("CollectionTestSubObject:-(void)_autorelease")

        __arc++;
        if (self.rcWillBe < 0) [testObject.tester passFail:NO format:@"Object %@ was too autoreleased",testObject.description];
        // printf("autorelease %d->%d %s\n",self.rcIs,self.rcWillBe,self.description.UTF8String);
    }
    - (void)_release {
        MSGSTART("CollectionTestSubObject:-(void)_release")

        __rc--;
        if (__arc > __rc) __arc--;
        if (self.rcWillBe < 0) [testObject.tester passFail:NO format:@"Object %@ was too released",testObject.description];
        // printf("release %d->%d %s\n",self.rcIs,self.rcWillBe,self.description.UTF8String);
    }
    - (void)_retain {
        MSGSTART("CollectionTestSubObject:-(void)_retain")

        __rc++;
        // printf("retain %d->%d %s\n",self.rcIs,self.rcWillBe,self.description.UTF8String);
    }
    - (constchar *)cdescription {
        MSGSTART("CollectionTestSubObject:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("CollectionTestSubObject:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("CollectionTestSubObject:-(void)dealloc")

        /*i-151*/[self die];
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("CollectionTestSubObject:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [NSString stringWithFormat:@"%d->%d  ",(int)self.rcIs,(int)self.rcWillBe];

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("CollectionTestSubObject:-(void)die")

        /*i900*/}
    - (CollectionTestSubObject *)initWithTestObject:(CollectionTestObject *)atestObject {
        MSGSTART("CollectionTestSubObject:-(CollectionTestSubObject*)initWithTestObject:(CollectionTestObject*)atestObject")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ self.testObject = atestObject;

        /*i11*/ [self _startObjectOfClassCollectionTestSubObject];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("CollectionTestSubObject:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (Int)rcIs {
        MSGSTART("CollectionTestSubObject:-(Int)rcIs")
        return __rc;
    }
    - (Int)rcWillBe {
        MSGSTART("CollectionTestSubObject:-(Int)rcWillBe")
        return __rc - __arc;
    }
    - (void)setTestObject:(CollectionTestObject *)v {
        MSGSTART("CollectionTestSubObject:-(void)setTestObject:(CollectionTestObject*)v")

        /*i-905*/ if (testObject == v) return;

        /*i-900*/ {
            testObject = (id)v;
        }
/*i-850*/ REMOVEOWNER(testObject,self); ADDOWNER(v,self);
    }
    - (CollectionTestObject *)testObject {
        MSGSTART("CollectionTestSubObject:-(CollectionTestObject*)testObject")

        /*i-999*/ CollectionTestObject * ret = testObject;
        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: d





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         DictionaryTester
    #define _WIClass_           DictionaryTester__
    #define _className_         dictionaryTester
    #define _Class_             DictionaryTester__
    @implementation DictionaryTester

    @synthesize __owner_context = __owner_context;
    @synthesize _index = _index;
    @synthesize _index1 = _index1;
    @synthesize _range = _range;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassDictionaryTester {
        MSGSTART("DictionaryTester:-(void)_startObjectOfClassDictionaryTester")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ b = ([MutableDictionaryMirrorTesterImpl dictionary]);  ADDOWNER(b,self);
        /*ivar*/ c = ([WeakMutableDictionaryMirrorTesterImpl dictionary]);  ADDOWNER(c,self);
        /*ivar*/ _index1 = (NSNotFound);
        /*ivar*/ v_collections = ([NSDictionary dictionary]);
        /*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ _index = (NSNotFound);
        /*ivar*/ a = ([NSMutableDictionary dictionary]);

        /*i0*/ self.collections = [NSMutableDictionary dictionaryWithObjectsAndKeys:self.a,@"std",self.b,@"strong",self.c,@"weak",nil];




        _range = NSMakeRange(NSNotFound,0);
        NSMutableArray *array = [NSMutableArray arrayWithCapacity:100];
        NSMutableArray *arrayk = [NSMutableArray arrayWithCapacity:100];
        for (Int i = 0; i < 100; i++) {
            CollectionTestObject *o = [[CollectionTestObject alloc] initWithInt:i tester:self];
            [array addObject:o];
            [arrayk addObject:[NSString stringWithFormat:@"k%d",(int)i]];
            printf("%p: %s %s\n",array.lastObject,( (CollectionTestObject *)array.lastObject ).description.UTF8String,( (NSString *)arrayk.lastObject ).description.UTF8String);
        }
        self._allObjects = array;
        self._allKeys = arrayk;
        [self verifyWillOpCounts];
    }
    - (NSArray *)_allKeys {
        MSGSTART("DictionaryTester:-(NSArray*)_allKeys")

        /*i-999*/ NSArray * ret = v__allKeys;
        /*i999*/ return ret;
    }
    - (NSArray *)_allObjects {
        MSGSTART("DictionaryTester:-(NSArray*)_allObjects")

        /*i-999*/ NSArray * ret = v__allObjects;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)_dictionary {
        MSGSTART("DictionaryTester:-(NSMutableDictionary*)_dictionary")

        /*i-999*/ NSMutableDictionary * ret = v__dictionary;
        /*i999*/ return ret;
    }
    - (NSMutableIndexSet *)_indexes {
        MSGSTART("DictionaryTester:-(NSMutableIndexSet*)_indexes")

        /*i-999*/ NSMutableIndexSet * ret = v__indexes;
        /*i999*/ return ret;
    }
    - (NSString *)_key {
        MSGSTART("DictionaryTester:-(NSString*)_key")

        /*i-999*/ NSString * ret = v__key;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)_keyArray {
        MSGSTART("DictionaryTester:-(NSMutableArray*)_keyArray")

        /*i-999*/ NSMutableArray * ret = v__keyArray;
        /*i999*/ return ret;
    }
    - (id)_object {
        MSGSTART("DictionaryTester:-(id)_object")

        /*i-999*/ id ret = v__object;
        /*i999*/ return ret;
    }
    - (id)_object2 {
        MSGSTART("DictionaryTester:-(id)_object2")

        /*i-999*/ id ret = v__object2;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)_objectArray {
        MSGSTART("DictionaryTester:-(NSMutableArray*)_objectArray")

        /*i-999*/ NSMutableArray * ret = v__objectArray;
        /*i999*/ return ret;
    }
    - (NSMutableSet *)_objectSet {
        MSGSTART("DictionaryTester:-(NSMutableSet*)_objectSet")

        /*i-999*/ NSMutableSet * ret = v__objectSet;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)a {
        MSGSTART("DictionaryTester:-(NSMutableDictionary*)a")

        /*i-999*/ NSMutableDictionary * ret = a;
        /*i999*/ return ret;
    }
    - (void)addEntriesFromDictionary {
        MSGSTART("DictionaryTester:-(void)addEntriesFromDictionary")

        [self dictionary];
        ITERATECOLLECTIONS(NSMutableDictionary *,v,[v addEntriesFromDictionary:self.dictionary]; )
        [self passFailWithFormat : @"addEntriesFromDictionary"];
    }
    - (void)allKeys {
        MSGSTART("DictionaryTester:-(void)allKeys")

        [self passFail :[[NSSet setWithArray:a.allKeys] isEqualToSet:[NSSet setWithArray:b.allKeys]] format : @"allKeys"];
    }
    - (void)allKeysForObject {
        MSGSTART("DictionaryTester:-(void)allKeysForObject")

        [self passFail :[[NSSet setWithArray:[a allKeysForObject:self.object]] isEqualToSet:[NSSet setWithArray:[b allKeysForObject:self.object]]] format : @"allKeysForObject"];
    }
    - (void)allValues {
        MSGSTART("DictionaryTester:-(void)allValues")

        [self passFail :[[NSSet setWithArray:a.allValues] isEqualToSet:[NSSet setWithArray:b.allValues]] format : @"allValues"];
    }
    - (MutableDictionaryMirrorTesterImpl *)b {
        MSGSTART("DictionaryTester:-(MutableDictionaryMirrorTesterImpl*)b")

        /*i-999*/ MutableDictionaryMirrorTesterImpl * ret = b;
        /*i999*/ return ret;
    }
    - (WeakMutableDictionaryMirrorTesterImpl *)c {
        MSGSTART("DictionaryTester:-(WeakMutableDictionaryMirrorTesterImpl*)c")

        /*i-999*/ WeakMutableDictionaryMirrorTesterImpl * ret = c;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("DictionaryTester:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)clearTest {
        MSGSTART("DictionaryTester:-(void)clearTest")

        [self._keyArray removeAllObjects];
        [self._objectArray removeAllObjects];
        [self._objectSet removeAllObjects];
        [self._dictionary removeAllObjects];
        [self._indexes removeAllIndexes];

        self._key = nil;
        self._keyArray = nil;
        self._dictionary = nil;
        self._object = nil;
        self._object2 = nil;
        self._objectArray = nil;
        self._objectSet = nil;
        self._indexes = nil;

        _index = _index1 = NSNotFound;
        _range = NSMakeRange(NSNotFound,0);
    }
    - (constchar *)cobjectName {
        MSGSTART("DictionaryTester:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSDictionary *)collections {
        MSGSTART("DictionaryTester:-(NSDictionary*)collections")

        /*i-999*/ NSDictionary * ret = v_collections;
        /*i999*/ return ret;
    }
    - (void)count {
        MSGSTART("DictionaryTester:-(void)count")

        [self passFail : a.count == b.count format : @"count"];
    }
    - (void)dealloc {
        MSGSTART("DictionaryTester:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(b,self); b = nil;

        REMOVEOWNER(c,self); c = nil;

        v__allObjects = nil;

        v__keyArray = nil;

        v__objectSet = nil;

        v_collections = nil;

        v_errs = nil;

        v__dictionary = nil;

        v__allKeys = nil;

        v__objectArray = nil;

        v__indexes = nil;

        a = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("DictionaryTester:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)dictionary {
        MSGSTART("DictionaryTester:-(NSMutableDictionary*)dictionary")
        if (!v__dictionary) self._dictionary = self.randDictionary;
        return v__dictionary;
    }
    - (void)die {
        MSGSTART("DictionaryTester:-(void)die")

        /*i900*/}
    - (NSMutableString *)errs {
        MSGSTART("DictionaryTester:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (Int)expectNForSet:(NSString *)set givenBaseN:(Int)N {
        MSGSTART("DictionaryTester:-(Int)expectNForSet:(NSString*)set givenBaseN:(Int)N")

        if ([set isEqualToString:@"weak"]) return 0;

        if ([set isEqualToString:@"strong"]) return N;

        return -1;
    }
    - (Unsigned)index {
        MSGSTART("DictionaryTester:-(Unsigned)index")
        return _index == NSNotFound ? _index = ( a.count == 0 ? NSNotFound : (rand() % a.count) ) : _index;
    }
    - (Unsigned)index1 {
        MSGSTART("DictionaryTester:-(Unsigned)index1")
        return _index1 == NSNotFound ? _index1 = rand() % (a.count + 1) : _index1;
    }
    - (NSMutableIndexSet *)indexes {
        MSGSTART("DictionaryTester:-(NSMutableIndexSet*)indexes")
        if (!v__indexes) self._indexes = self.randInternalIndexSet;
        return v__indexes;
    }
    - (DictionaryTester *)init {
        MSGSTART("DictionaryTester:-(DictionaryTester*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassDictionaryTester];

/*i10001*/ return self;
    }
    - (void)isEqualToDictionary {
        MSGSTART("DictionaryTester:-(void)isEqualToDictionary")

        [self passFail :[a isEqualToDictionary:self.dictionary] == [b isEqualToDictionary:self.dictionary] format : @"isEqualToDictionary"];
    }
    - (NSString *)key {
        MSGSTART("DictionaryTester:-(NSString*)key")
        if (!v__key) self._key = self.randKey;
        return v__key;
    }
    - (NSMutableArray *)keyArray {
        MSGSTART("DictionaryTester:-(NSMutableArray*)keyArray")
        if (!v__keyArray) self._keyArray = self.randKeyArray;
        return v__keyArray;
    }
    - (void)nextTest {
        MSGSTART("DictionaryTester:-(void)nextTest")

        [self clearTest];
    }
    - (NSObject *)object {
        MSGSTART("DictionaryTester:-(NSObject*)object")
        if (!v__object) self._object = self.randObject;
        return v__object;
    }
    - (NSObject *)object2 {
        MSGSTART("DictionaryTester:-(NSObject*)object2")
        if (!v__object2) self._object2 = self.randObject;
        return v__object2;
    }
    - (NSMutableArray *)objectArray {
        MSGSTART("DictionaryTester:-(NSMutableArray*)objectArray")
        if (!v__objectArray) self._objectArray = self.randArray;
        return v__objectArray;
    }
    - (void)objectForKey {
        MSGSTART("DictionaryTester:-(void)objectForKey")

        [self passFail :[a objectForKey:self.key] == [b objectForKey:self.key] format : @"objectForKey"];
    }
    - (NSMutableString *)objectName {
        MSGSTART("DictionaryTester:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSMutableSet *)objectSet {
        MSGSTART("DictionaryTester:-(NSMutableSet*)objectSet")
        if (!v__objectSet) self._objectSet = self.randSet;
        return v__objectSet;
    }
    - (void)objectsForKeysNotFoundMarker {
        MSGSTART("DictionaryTester:-(void)objectsForKeysNotFoundMarker")

        [self passFail :[[NSSet setWithArray:[a objectsForKeys:self.objectArray notFoundMarker:[NSNull null]]] isEqualToSet:[NSSet setWithArray:[b objectsForKeys:self.objectArray notFoundMarker:[NSNull null]]]] format : @"objectsForKeysNotFoundMarker"];
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("DictionaryTester:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (bool)passFailWithFormat:(NSString *)format,... {
        MSGSTART("DictionaryTester:-(bool)passFailWithFormat:(NSString*)format,...")

        bool pass = self.stateGood;
        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (NSMutableArray *)randArray {
        MSGSTART("DictionaryTester:-(NSMutableArray*)randArray")

        NSMutableArray * objects = [NSMutableArray array];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [objects addObject:self.randObject];
        }
        return objects;
    }
    - (NSMutableDictionary *)randDictionary {
        MSGSTART("DictionaryTester:-(NSMutableDictionary*)randDictionary")

        NSMutableDictionary * d = [NSMutableDictionary dictionary];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [d setObject:self.randObject forKey:self.randKey];
        }
        return d;
    }
    - (NSMutableIndexSet *)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max {
        MSGSTART("DictionaryTester:-(NSMutableIndexSet*)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max")

        NSMutableIndexSet * indexesv = [NSMutableIndexSet indexSet];
        if (count)
            for (Unsigned i = 0; i < count; i++) {
                Unsigned j,ii = ( rand() % ( (max + 1) - i ) );
                for (j = 0; [indexesv containsIndex:j] || (ii--); j++) {
                }
                [indexesv addIndex:j];
            }
        return indexesv;
    }
    - (NSMutableIndexSet *)randInternalIndexSet {
        MSGSTART("DictionaryTester:-(NSMutableIndexSet*)randInternalIndexSet")
        return [self randIndexSetWithCount:rand() % (a.count + 1) max:a.count - 1];
    }
    - (NSRange)randInternalRange {
        MSGSTART("DictionaryTester:-(NSRange)randInternalRange")

        Unsigned location = rand() % a.count,length = rand() % (a.count - location);
        return NSMakeRange(location,length);
    }
    - (NSString *)randKey {
        MSGSTART("DictionaryTester:-(NSString*)randKey")
        return (NSString *)[self._allKeys objectAtIndex:rand() % self._allKeys.count];
    }
    - (NSMutableArray *)randKeyArray {
        MSGSTART("DictionaryTester:-(NSMutableArray*)randKeyArray")

        NSMutableArray * keys = [NSMutableArray array];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [keys addObject:self.randKey];
        }
        return keys;
    }
    - (id)randObject {
        MSGSTART("DictionaryTester:-(id)randObject")
        return [self._allObjects objectAtIndex:rand() % self._allObjects.count];
    }
    - (NSMutableSet *)randSet {
        MSGSTART("DictionaryTester:-(NSMutableSet*)randSet")

        NSMutableSet * objects = [MutableSet set];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [objects addObject:self.randObject];
        }
        return objects;
    }
    - (NSRange)range {
        MSGSTART("DictionaryTester:-(NSRange)range")
        return _range.location == NSNotFound ? self._range = self.randInternalRange : self._range;
    }
    - (void)removeAllObjects {
        MSGSTART("DictionaryTester:-(void)removeAllObjects")

        ITERATECOLLECTIONS(NSMutableDictionary *,v,[v removeAllObjects]; )
        [self passFailWithFormat : @"removeAllObjects"];
    }
    - (void)removeObjectForKey {
        MSGSTART("DictionaryTester:-(void)removeObjectForKey")

        [self key];
        ITERATECOLLECTIONS(NSMutableDictionary *,v,[v removeObjectForKey:self.key]; )
        [self passFailWithFormat : @"removeObjectForKey"];
    }
    - (void)removeObjectsForKeys {
        MSGSTART("DictionaryTester:-(void)removeObjectsForKeys")

        [self keyArray];
        ITERATECOLLECTIONS(NSMutableDictionary *,v,[v removeObjectsForKeys:self.keyArray]; )
        [self passFailWithFormat : @"removeObjectsForKeys"];
    }
    - (void)set_allKeys:(NSArray *)v {
        MSGSTART("DictionaryTester:-(void)set_allKeys:(NSArray*)v")

        /*i-905*/ if (v__allKeys == v) return;

        /*i-900*/ {
            v__allKeys = (id)v;
        }
    }
    - (void)set_allObjects:(NSArray *)v {
        MSGSTART("DictionaryTester:-(void)set_allObjects:(NSArray*)v")

        /*i-905*/ if (v__allObjects == v) return;

        /*i-900*/ {
            v__allObjects = (id)v;
        }
    }
    - (void)set_dictionary:(NSMutableDictionary *)v {
        MSGSTART("DictionaryTester:-(void)set_dictionary:(NSMutableDictionary*)v")

        /*i-905*/ if (v__dictionary == v) return;

        /*i-900*/ {
            v__dictionary = (id)v;
        }
    }
    - (void)set_indexes:(NSMutableIndexSet *)v {
        MSGSTART("DictionaryTester:-(void)set_indexes:(NSMutableIndexSet*)v")

        /*i-905*/ if (v__indexes == v) return;

        /*i-900*/ {
            v__indexes = (id)v;
        }
    }
    - (void)set_key:(NSString *)v {
        MSGSTART("DictionaryTester:-(void)set_key:(NSString*)v")

        /*i-905*/ if (v__key == v) return;

        /*i-900*/ {
            v__key = (id)v;
        }
    }
    - (void)set_keyArray:(NSMutableArray *)v {
        MSGSTART("DictionaryTester:-(void)set_keyArray:(NSMutableArray*)v")

        /*i-905*/ if (v__keyArray == v) return;

        /*i-900*/ {
            v__keyArray = (id)v;
        }
    }
    - (void)set_object2:(id)v {
        MSGSTART("DictionaryTester:-(void)set_object2:(id)v")

        /*i-905*/ if (v__object2 == v) return;

        /*i-900*/ {
            v__object2 = (id)v;
        }
    }
    - (void)set_object:(id)v {
        MSGSTART("DictionaryTester:-(void)set_object:(id)v")

        /*i-905*/ if (v__object == v) return;

        /*i-900*/ {
            v__object = (id)v;
        }
    }
    - (void)set_objectArray:(NSMutableArray *)v {
        MSGSTART("DictionaryTester:-(void)set_objectArray:(NSMutableArray*)v")

        /*i-905*/ if (v__objectArray == v) return;

        /*i-900*/ {
            v__objectArray = (id)v;
        }
    }
    - (void)set_objectSet:(NSMutableSet *)v {
        MSGSTART("DictionaryTester:-(void)set_objectSet:(NSMutableSet*)v")

        /*i-905*/ if (v__objectSet == v) return;

        /*i-900*/ {
            v__objectSet = (id)v;
        }
    }
    - (void)setA:(NSMutableDictionary *)v {
        MSGSTART("DictionaryTester:-(void)setA:(NSMutableDictionary*)v")

        /*i-905*/ if (a == v) return;

        /*i-900*/ {
            a = (id)v;
        }
    }
    - (void)setB:(MutableDictionaryMirrorTesterImpl *)v {
        MSGSTART("DictionaryTester:-(void)setB:(MutableDictionaryMirrorTesterImpl*)v")

        /*i-905*/ if (b == v) return;

        /*i-900*/ {
            b = (id)v;
        }
/*i-850*/ REMOVEOWNER(b,self); ADDOWNER(v,self);
    }
    - (void)setC:(WeakMutableDictionaryMirrorTesterImpl *)v {
        MSGSTART("DictionaryTester:-(void)setC:(WeakMutableDictionaryMirrorTesterImpl*)v")

        /*i-905*/ if (c == v) return;

        /*i-900*/ {
            c = (id)v;
        }
/*i-850*/ REMOVEOWNER(c,self); ADDOWNER(v,self);
    }
    - (void)setCollections:(NSDictionary *)v {
        MSGSTART("DictionaryTester:-(void)setCollections:(NSDictionary*)v")

        /*i-905*/ if (v_collections == v) return;

        /*i-900*/ {
            v_collections = (id)v;
        }
    }
    - (void)setDictionary {
        MSGSTART("DictionaryTester:-(void)setDictionary")

        [self dictionary];
        ITERATECOLLECTIONS(NSMutableDictionary *,v,[v setDictionary:self.dictionary]; )
        [self passFailWithFormat : @"setDictionary"];
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("DictionaryTester:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setObjectForKey {
        MSGSTART("DictionaryTester:-(void)setObjectForKey")

        [self object];
        [self key];
        ITERATECOLLECTIONS(NSMutableDictionary *,v,[v setObject:self.object forKey:self.key]; )
        [self passFailWithFormat : @"setObjectForKey"];
    }
    - (void)setValueForKey {
        MSGSTART("DictionaryTester:-(void)setValueForKey")

        [self object];
        [self key];
        ITERATECOLLECTIONS(NSMutableDictionary *,v,[v setValue:self.object forKey:self.key]; )
        [self passFailWithFormat : @"setValueForKey"];
    }
    - (bool)stateGood {
        MSGSTART("DictionaryTester:-(bool)stateGood")
        return [a isEqualToDictionary:b];
    }
    - (void)step {
        MSGSTART("DictionaryTester:-(void)step")

        switch (rand() % 15) {
            case 0:[self  count]; break;

            case 1:[self isEqualToDictionary]; break;

            case 2:[self allKeys]; break;

            case 3:[self allKeysForObject]; break;

            case 4:[self allValues]; break;

            case 5:[self objectForKey]; break;

            case 6:[self objectsForKeysNotFoundMarker]; break;

            case 7:[self valueForKey]; break;

            case 8:[self setObjectForKey]; break;

            case 9:[self setValueForKey]; break;

            case 10:[self addEntriesFromDictionary]; break;

            case 11:[self setDictionary]; break;

            case 12:[self removeObjectForKey]; break;

            case 13:[self removeAllObjects]; break;

            case 14:[self removeObjectsForKeys]; break;
        }
    }
    - (NSString *)steps:(Int)N {
        MSGSTART("DictionaryTester:-(NSString*)steps:(Int)N")

        srand(1);
        while (N-- > 0) {
            [self nextTest];
            @autoreleasepool {
                [self step];
                [self verifyWillOpCounts];
                [self clearTest];
            }
            [self verifyRC];
            // printf(">%s\n",[self.a.description cStringUsingEncoding:NSASCIIStringEncoding]);
        }
        return b.errs.length || self.errs.length ? [NSString stringWithFormat:@"Errors:\n%@\n\n%@\n",b.errs,self.errs] : nil;
    }
    - (void)valueForKey {
        MSGSTART("DictionaryTester:-(void)valueForKey")
    }
    - (void)verifyRC {
        MSGSTART("DictionaryTester:-(void)verifyRC")

        for (CollectionTestObject *o in self._allObjects) {
            Int N = 0;
            if ([a isKindOfClass:[NSSet class]])
                if ([(NSSet *)a containsObject : o]) N = 1;
            if ([a isKindOfClass:[NSArray class]])
                for (id o2 in(NSArray *) a) {
                    if (o == o2) N++;
                }
            if ([a isKindOfClass:[NSDictionary class]])
                for (id k in(NSDictionary *) a) {
                    if ([(NSDictionary *)a objectForKey : k] == o) N++;
                }
            for (NSString *k in o.subObjects) {
                CollectionTestSubObject *so = [o.subObjects objectForKey:k];
                Int expRefCnt = [self expectNForSet:k givenBaseN:N];
                if ( (expRefCnt >= 0) && (expRefCnt != so.rcWillBe) )
                    [self passFail:NO format:@"Outer: Object %@ key %@ should have rc of %d",o.description,k,expRefCnt];
                if ( (expRefCnt >= 0) && (expRefCnt != so.rcInner) )
                    [self passFail:NO format:@"Inner: Object %@ key %@ should have rc of %d",o.description,k,expRefCnt];
            }
        }
    }
    - (void)verifyWillOpCounts {
        MSGSTART("DictionaryTester:-(void)verifyWillOpCounts")

        for (CollectionTestObject *o in self._allObjects) {
            for (CollectionTestSubObject *so in o.subObjects.allValues) {
                if (so.willAddCount)
                    [self passFail:NO format:@"Object %@ has willAddCount",o.description];
                if (so.willRemoveCount)
                    [self passFail:NO format:@"Object %@ has willRemoveCount",o.description];
            }
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: s





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         SetTester
    #define _WIClass_           SetTester__
    #define _className_         setTester
    #define _Class_             SetTester__
    @implementation SetTester

    @synthesize __owner_context = __owner_context;
    @synthesize _index = _index;
    @synthesize _index1 = _index1;
    @synthesize _range = _range;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassSetTester {
        MSGSTART("SetTester:-(void)_startObjectOfClassSetTester")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ b = ([MutableSetMirrorTesterImpl set]);  ADDOWNER(b,self);
        /*ivar*/ c = ([WeakMutableSetMirrorTesterImpl set]);  ADDOWNER(c,self);
        /*ivar*/ _index1 = (NSNotFound);
        /*ivar*/ v_collections = ([NSDictionary dictionary]);
        /*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ _index = (NSNotFound);
        /*ivar*/ a = ([MutableSet set]);

        /*i0*/ _range = NSMakeRange(NSNotFound,0);
        NSMutableArray *array = [NSMutableArray arrayWithCapacity:100];
        NSMutableArray *arrayk = [NSMutableArray arrayWithCapacity:100];
        for (Int i = 0; i < 100; i++) {
            CollectionTestObject *o = [[CollectionTestObject alloc] initWithInt:i tester:self];
            [array addObject:o];
            [arrayk addObject:[NSString stringWithFormat:@"k%d",(int)i]];
            printf("%p: %s %s\n",array.lastObject,( (CollectionTestObject *)array.lastObject ).description.UTF8String,( (NSString *)arrayk.lastObject ).description.UTF8String);
        }
        self._allObjects = array;
        self._allKeys = arrayk;
        [self verifyWillOpCounts];





        /*i10*/ self.collections = [NSMutableDictionary dictionaryWithObjectsAndKeys:self.a,@"std",self.b,@"strong",self.c,@"weak",nil];
    }
    - (NSArray *)_allKeys {
        MSGSTART("SetTester:-(NSArray*)_allKeys")

        /*i-999*/ NSArray * ret = v__allKeys;
        /*i999*/ return ret;
    }
    - (NSArray *)_allObjects {
        MSGSTART("SetTester:-(NSArray*)_allObjects")

        /*i-999*/ NSArray * ret = v__allObjects;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)_dictionary {
        MSGSTART("SetTester:-(NSMutableDictionary*)_dictionary")

        /*i-999*/ NSMutableDictionary * ret = v__dictionary;
        /*i999*/ return ret;
    }
    - (NSMutableIndexSet *)_indexes {
        MSGSTART("SetTester:-(NSMutableIndexSet*)_indexes")

        /*i-999*/ NSMutableIndexSet * ret = v__indexes;
        /*i999*/ return ret;
    }
    - (NSString *)_key {
        MSGSTART("SetTester:-(NSString*)_key")

        /*i-999*/ NSString * ret = v__key;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)_keyArray {
        MSGSTART("SetTester:-(NSMutableArray*)_keyArray")

        /*i-999*/ NSMutableArray * ret = v__keyArray;
        /*i999*/ return ret;
    }
    - (id)_object {
        MSGSTART("SetTester:-(id)_object")

        /*i-999*/ id ret = v__object;
        /*i999*/ return ret;
    }
    - (id)_object2 {
        MSGSTART("SetTester:-(id)_object2")

        /*i-999*/ id ret = v__object2;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)_objectArray {
        MSGSTART("SetTester:-(NSMutableArray*)_objectArray")

        /*i-999*/ NSMutableArray * ret = v__objectArray;
        /*i999*/ return ret;
    }
    - (NSMutableSet *)_objectSet {
        MSGSTART("SetTester:-(NSMutableSet*)_objectSet")

        /*i-999*/ NSMutableSet * ret = v__objectSet;
        /*i999*/ return ret;
    }
    - (NSMutableSet *)a {
        MSGSTART("SetTester:-(NSMutableSet*)a")

        /*i-999*/ NSMutableSet * ret = a;
        /*i999*/ return ret;
    }
    - (void)addObject {
        MSGSTART("SetTester:-(void)addObject")

        [self object];
        ITERATECOLLECTIONS(NSMutableSet *,v,[v addObject:self.object]; )
        [self passFailWithFormat : @"addObject"];
    }
    - (void)addObjectsFromArray {
        MSGSTART("SetTester:-(void)addObjectsFromArray")

        [self objectArray];
        ITERATECOLLECTIONS(NSMutableSet *,v,[v addObjectsFromArray:self.objectArray]; )
        [self passFailWithFormat : @"addObjectsFromArray"];
    }
    - (void)allObjects {
        MSGSTART("SetTester:-(void)allObjects")

        [self passFail :[[NSSet setWithArray:a.allObjects] isEqualToSet:[NSSet setWithArray:b.allObjects]] format : @"allObjects"];
    }
    - (MutableSetMirrorTesterImpl *)b {
        MSGSTART("SetTester:-(MutableSetMirrorTesterImpl*)b")

        /*i-999*/ MutableSetMirrorTesterImpl * ret = b;
        /*i999*/ return ret;
    }
    - (WeakMutableSetMirrorTesterImpl *)c {
        MSGSTART("SetTester:-(WeakMutableSetMirrorTesterImpl*)c")

        /*i-999*/ WeakMutableSetMirrorTesterImpl * ret = c;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("SetTester:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)clearTest {
        MSGSTART("SetTester:-(void)clearTest")

        [self._keyArray removeAllObjects];
        [self._objectArray removeAllObjects];
        [self._objectSet removeAllObjects];
        [self._dictionary removeAllObjects];
        [self._indexes removeAllIndexes];

        self._key = nil;
        self._keyArray = nil;
        self._dictionary = nil;
        self._object = nil;
        self._object2 = nil;
        self._objectArray = nil;
        self._objectSet = nil;
        self._indexes = nil;

        _index = _index1 = NSNotFound;
        _range = NSMakeRange(NSNotFound,0);
    }
    - (constchar *)cobjectName {
        MSGSTART("SetTester:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSDictionary *)collections {
        MSGSTART("SetTester:-(NSDictionary*)collections")

        /*i-999*/ NSDictionary * ret = v_collections;
        /*i999*/ return ret;
    }
    - (void)containsObject {
        MSGSTART("SetTester:-(void)containsObject")

        [self passFail :[a containsObject:self.object] == [b containsObject:self.object] format : @"containsObject"];
    }
    - (void)count {
        MSGSTART("SetTester:-(void)count")

        [self passFail : a.count == b.count format : @"count"];
    }
    - (void)dealloc {
        MSGSTART("SetTester:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(b,self); b = nil;

        REMOVEOWNER(c,self); c = nil;

        v__allObjects = nil;

        v__keyArray = nil;

        v__objectSet = nil;

        v_collections = nil;

        v_errs = nil;

        v__dictionary = nil;

        v__allKeys = nil;

        v__objectArray = nil;

        v__indexes = nil;

        a = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("SetTester:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)dictionary {
        MSGSTART("SetTester:-(NSMutableDictionary*)dictionary")
        if (!v__dictionary) self._dictionary = self.randDictionary;
        return v__dictionary;
    }
    - (void)die {
        MSGSTART("SetTester:-(void)die")

        /*i900*/}
    - (NSMutableString *)errs {
        MSGSTART("SetTester:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (Int)expectNForSet:(NSString *)set givenBaseN:(Int)N {
        MSGSTART("SetTester:-(Int)expectNForSet:(NSString*)set givenBaseN:(Int)N")

        if ([set isEqualToString:@"weak"]) return N;

        if ([set isEqualToString:@"strong"]) return 2 * N;

        return -1;
    }
    - (Unsigned)index {
        MSGSTART("SetTester:-(Unsigned)index")
        return _index == NSNotFound ? _index = ( a.count == 0 ? NSNotFound : (rand() % a.count) ) : _index;
    }
    - (Unsigned)index1 {
        MSGSTART("SetTester:-(Unsigned)index1")
        return _index1 == NSNotFound ? _index1 = rand() % (a.count + 1) : _index1;
    }
    - (NSMutableIndexSet *)indexes {
        MSGSTART("SetTester:-(NSMutableIndexSet*)indexes")
        if (!v__indexes) self._indexes = self.randInternalIndexSet;
        return v__indexes;
    }
    - (SetTester *)init {
        MSGSTART("SetTester:-(SetTester*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassSetTester];

/*i10001*/ return self;
    }
    - (void)intersectSet {
        MSGSTART("SetTester:-(void)intersectSet")

        [self objectSet];
        ITERATECOLLECTIONS(NSMutableSet *,v,[v intersectSet:self.objectSet]; )
        [self passFailWithFormat : @"intersectSet"];
    }
    - (void)intersectsSet {
        MSGSTART("SetTester:-(void)intersectsSet")

        [self passFail :[a intersectsSet:self.objectSet] == [b intersectsSet:self.objectSet] format : @"intersectsSet"];
    }
    - (void)isEqualToSet {
        MSGSTART("SetTester:-(void)isEqualToSet")

        [self passFail :[a isEqualToSet:self.objectSet] == [b isEqualToSet:self.objectSet] format : @"isEqualToSet"];
    }
    - (void)isSubsetOfSet {
        MSGSTART("SetTester:-(void)isSubsetOfSet")

        [self passFail :[a isSubsetOfSet:self.objectSet] == [b isSubsetOfSet:self.objectSet] format : @"isSubsetOfSet"];
    }
    - (NSString *)key {
        MSGSTART("SetTester:-(NSString*)key")
        if (!v__key) self._key = self.randKey;
        return v__key;
    }
    - (NSMutableArray *)keyArray {
        MSGSTART("SetTester:-(NSMutableArray*)keyArray")
        if (!v__keyArray) self._keyArray = self.randKeyArray;
        return v__keyArray;
    }
    - (void)member {
        MSGSTART("SetTester:-(void)member")

        [self passFail :[a member:self.object] == [b member:self.object] format : @"member"];
    }
    - (void)minusSet {
        MSGSTART("SetTester:-(void)minusSet")

        [self objectSet];
        ITERATECOLLECTIONS(NSMutableSet *,v,[v minusSet:self.objectSet]; )
        [self passFailWithFormat : @"minusSet"];
    }
    - (void)nextTest {
        MSGSTART("SetTester:-(void)nextTest")

        [self clearTest];
    }
    - (NSObject *)object {
        MSGSTART("SetTester:-(NSObject*)object")
        if (!v__object) self._object = self.randObject;
        return v__object;
    }
    - (NSObject *)object2 {
        MSGSTART("SetTester:-(NSObject*)object2")
        if (!v__object2) self._object2 = self.randObject;
        return v__object2;
    }
    - (NSMutableArray *)objectArray {
        MSGSTART("SetTester:-(NSMutableArray*)objectArray")
        if (!v__objectArray) self._objectArray = self.randArray;
        return v__objectArray;
    }
    - (NSMutableString *)objectName {
        MSGSTART("SetTester:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSMutableSet *)objectSet {
        MSGSTART("SetTester:-(NSMutableSet*)objectSet")
        if (!v__objectSet) self._objectSet = self.randSet;
        return v__objectSet;
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("SetTester:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (bool)passFailWithFormat:(NSString *)format,... {
        MSGSTART("SetTester:-(bool)passFailWithFormat:(NSString*)format,...")

        bool pass = self.stateGood;
        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (NSMutableArray *)randArray {
        MSGSTART("SetTester:-(NSMutableArray*)randArray")

        NSMutableArray * objects = [NSMutableArray array];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [objects addObject:self.randObject];
        }
        return objects;
    }
    - (NSMutableDictionary *)randDictionary {
        MSGSTART("SetTester:-(NSMutableDictionary*)randDictionary")

        NSMutableDictionary * d = [NSMutableDictionary dictionary];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [d setObject:self.randObject forKey:self.randKey];
        }
        return d;
    }
    - (NSMutableIndexSet *)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max {
        MSGSTART("SetTester:-(NSMutableIndexSet*)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max")

        NSMutableIndexSet * indexesv = [NSMutableIndexSet indexSet];
        if (count)
            for (Unsigned i = 0; i < count; i++) {
                Unsigned j,ii = ( rand() % ( (max + 1) - i ) );
                for (j = 0; [indexesv containsIndex:j] || (ii--); j++) {
                }
                [indexesv addIndex:j];
            }
        return indexesv;
    }
    - (NSMutableIndexSet *)randInternalIndexSet {
        MSGSTART("SetTester:-(NSMutableIndexSet*)randInternalIndexSet")
        return [self randIndexSetWithCount:rand() % (a.count + 1) max:a.count - 1];
    }
    - (NSRange)randInternalRange {
        MSGSTART("SetTester:-(NSRange)randInternalRange")

        Unsigned location = rand() % a.count,length = rand() % (a.count - location);
        return NSMakeRange(location,length);
    }
    - (NSString *)randKey {
        MSGSTART("SetTester:-(NSString*)randKey")
        return (NSString *)[self._allKeys objectAtIndex:rand() % self._allKeys.count];
    }
    - (NSMutableArray *)randKeyArray {
        MSGSTART("SetTester:-(NSMutableArray*)randKeyArray")

        NSMutableArray * keys = [NSMutableArray array];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [keys addObject:self.randKey];
        }
        return keys;
    }
    - (id)randObject {
        MSGSTART("SetTester:-(id)randObject")
        return [self._allObjects objectAtIndex:rand() % self._allObjects.count];
    }
    - (NSMutableSet *)randSet {
        MSGSTART("SetTester:-(NSMutableSet*)randSet")

        NSMutableSet * objects = [MutableSet set];
        Unsigned count = rand() % 10;
        for (Int i = 0; i < count; i++) {
            [objects addObject:self.randObject];
        }
        return objects;
    }
    - (NSRange)range {
        MSGSTART("SetTester:-(NSRange)range")
        return _range.location == NSNotFound ? self._range = self.randInternalRange : self._range;
    }
    - (void)removeAllObjects {
        MSGSTART("SetTester:-(void)removeAllObjects")

        ITERATECOLLECTIONS(NSMutableSet *,v,[v removeAllObjects]; )
        [self passFailWithFormat : @"removeAllObjects"];
    }
    - (void)removeObject {
        MSGSTART("SetTester:-(void)removeObject")

        [self object];
        ITERATECOLLECTIONS(NSMutableSet *,v,[v removeObject:self.object]; )
        [self passFailWithFormat : @"removeObject"];
    }
    - (void)set_allKeys:(NSArray *)v {
        MSGSTART("SetTester:-(void)set_allKeys:(NSArray*)v")

        /*i-905*/ if (v__allKeys == v) return;

        /*i-900*/ {
            v__allKeys = (id)v;
        }
    }
    - (void)set_allObjects:(NSArray *)v {
        MSGSTART("SetTester:-(void)set_allObjects:(NSArray*)v")

        /*i-905*/ if (v__allObjects == v) return;

        /*i-900*/ {
            v__allObjects = (id)v;
        }
    }
    - (void)set_dictionary:(NSMutableDictionary *)v {
        MSGSTART("SetTester:-(void)set_dictionary:(NSMutableDictionary*)v")

        /*i-905*/ if (v__dictionary == v) return;

        /*i-900*/ {
            v__dictionary = (id)v;
        }
    }
    - (void)set_indexes:(NSMutableIndexSet *)v {
        MSGSTART("SetTester:-(void)set_indexes:(NSMutableIndexSet*)v")

        /*i-905*/ if (v__indexes == v) return;

        /*i-900*/ {
            v__indexes = (id)v;
        }
    }
    - (void)set_key:(NSString *)v {
        MSGSTART("SetTester:-(void)set_key:(NSString*)v")

        /*i-905*/ if (v__key == v) return;

        /*i-900*/ {
            v__key = (id)v;
        }
    }
    - (void)set_keyArray:(NSMutableArray *)v {
        MSGSTART("SetTester:-(void)set_keyArray:(NSMutableArray*)v")

        /*i-905*/ if (v__keyArray == v) return;

        /*i-900*/ {
            v__keyArray = (id)v;
        }
    }
    - (void)set_object2:(id)v {
        MSGSTART("SetTester:-(void)set_object2:(id)v")

        /*i-905*/ if (v__object2 == v) return;

        /*i-900*/ {
            v__object2 = (id)v;
        }
    }
    - (void)set_object:(id)v {
        MSGSTART("SetTester:-(void)set_object:(id)v")

        /*i-905*/ if (v__object == v) return;

        /*i-900*/ {
            v__object = (id)v;
        }
    }
    - (void)set_objectArray:(NSMutableArray *)v {
        MSGSTART("SetTester:-(void)set_objectArray:(NSMutableArray*)v")

        /*i-905*/ if (v__objectArray == v) return;

        /*i-900*/ {
            v__objectArray = (id)v;
        }
    }
    - (void)set_objectSet:(NSMutableSet *)v {
        MSGSTART("SetTester:-(void)set_objectSet:(NSMutableSet*)v")

        /*i-905*/ if (v__objectSet == v) return;

        /*i-900*/ {
            v__objectSet = (id)v;
        }
    }
    - (void)setA:(NSMutableSet *)v {
        MSGSTART("SetTester:-(void)setA:(NSMutableSet*)v")

        /*i-905*/ if (a == v) return;

        /*i-900*/ {
            a = (id)v;
        }
    }
    - (void)setB:(MutableSetMirrorTesterImpl *)v {
        MSGSTART("SetTester:-(void)setB:(MutableSetMirrorTesterImpl*)v")

        /*i-905*/ if (b == v) return;

        /*i-900*/ {
            b = (id)v;
        }
/*i-850*/ REMOVEOWNER(b,self); ADDOWNER(v,self);
    }
    - (void)setByAddingObject {
        MSGSTART("SetTester:-(void)setByAddingObject")

        [self passFail :[[a setByAddingObject:self.object] isEqualToSet:[b setByAddingObject:self.object]] format : @"setByAddingObject"];
    }
    - (void)setByAddingObjectsFromArray {
        MSGSTART("SetTester:-(void)setByAddingObjectsFromArray")

        [self passFail :[[a setByAddingObjectsFromArray:self.objectArray] isEqualToSet:[b setByAddingObjectsFromArray:self.objectArray]] format : @"setByAddingObjectsFromArray"];
    }
    - (void)setByAddingObjectsFromSet {
        MSGSTART("SetTester:-(void)setByAddingObjectsFromSet")

        [self passFail :[[a setByAddingObjectsFromSet:self.objectSet] isEqualToSet:[b setByAddingObjectsFromSet:self.objectSet]] format : @"setByAddingObjectsFromSet"];
    }
    - (void)setC:(WeakMutableSetMirrorTesterImpl *)v {
        MSGSTART("SetTester:-(void)setC:(WeakMutableSetMirrorTesterImpl*)v")

        /*i-905*/ if (c == v) return;

        /*i-900*/ {
            c = (id)v;
        }
/*i-850*/ REMOVEOWNER(c,self); ADDOWNER(v,self);
    }
    - (void)setCollections:(NSDictionary *)v {
        MSGSTART("SetTester:-(void)setCollections:(NSDictionary*)v")

        /*i-905*/ if (v_collections == v) return;

        /*i-900*/ {
            v_collections = (id)v;
        }
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("SetTester:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setSet {
        MSGSTART("SetTester:-(void)setSet")

        [self objectSet];
        ITERATECOLLECTIONS(NSMutableSet *,v,[v setSet:self.objectSet]; )
        [self passFailWithFormat : @"setSet"];
    }
    - (bool)stateGood {
        MSGSTART("SetTester:-(bool)stateGood")
        return [a isEqualToSet:b];
    }
    - (void)step {
        MSGSTART("SetTester:-(void)step")

        switch (rand() % 25) {
            case 0:[self setByAddingObject]; break;

            case 2:[self setByAddingObjectsFromSet]; break;

            case 3:[self setByAddingObjectsFromArray]; break;

            case 4:
            case 1:[self count]; break;

            case 5:[self allObjects]; break;

            case 6:[self containsObject]; break;

            case 7:[self member]; break;

            case 8:[self isSubsetOfSet]; break;

            case 9:[self intersectsSet]; break;

            case 10:[self isEqualToSet]; break;

            case 11:
            case 19:
            case 20:
            case 21:
            case 22:[self addObject]; break;

            case 12:
            case 23:
            case 24:[self removeObject]; break;

            case 13:[self removeAllObjects]; break;

            case 14:[self addObjectsFromArray]; break;

            case 15:[self unionSet]; break;

            case 16:[self minusSet]; break;

            case 17:[self intersectSet]; break;

            case 18:[self setSet]; break;

            default: break;
        }
    }
    - (NSString *)steps:(Int)N {
        MSGSTART("SetTester:-(NSString*)steps:(Int)N")

        srand(1);
        while (N-- > 0) {
            [self nextTest];
            @autoreleasepool {
                [self step];
                [self verifyWillOpCounts];
                [self clearTest];
            }
            [self verifyRC];
            // printf(">%s\n",[self.a.description cStringUsingEncoding:NSASCIIStringEncoding]);
        }
        return b.errs.length || self.errs.length ? [NSString stringWithFormat:@"Errors:\n%@\n\n%@\n",b.errs,self.errs] : nil;
    }
    - (void)unionSet {
        MSGSTART("SetTester:-(void)unionSet")

        [self objectSet];
        ITERATECOLLECTIONS(NSMutableSet *,v,[v unionSet:self.objectSet]; )
        [self passFailWithFormat : @"unionSet"];
    }
    - (void)verifyRC {
        MSGSTART("SetTester:-(void)verifyRC")

        for (CollectionTestObject *o in self._allObjects) {
            Int N = 0;
            if ([a isKindOfClass:[NSSet class]])
                if ([(NSSet *)a containsObject : o]) N = 1;
            if ([a isKindOfClass:[NSArray class]])
                for (id o2 in(NSArray *) a) {
                    if (o == o2) N++;
                }
            if ([a isKindOfClass:[NSDictionary class]])
                for (id k in(NSDictionary *) a) {
                    if ([(NSDictionary *)a objectForKey : k] == o) N++;
                }
            for (NSString *k in o.subObjects) {
                CollectionTestSubObject *so = [o.subObjects objectForKey:k];
                Int expRefCnt = [self expectNForSet:k givenBaseN:N];
                if ( (expRefCnt >= 0) && (expRefCnt != so.rcWillBe) )
                    [self passFail:NO format:@"Outer: Object %@ key %@ should have rc of %d",o.description,k,expRefCnt];
                if ( (expRefCnt >= 0) && (expRefCnt != so.rcInner) )
                    [self passFail:NO format:@"Inner: Object %@ key %@ should have rc of %d",o.description,k,expRefCnt];
            }
        }
    }
    - (void)verifyWillOpCounts {
        MSGSTART("SetTester:-(void)verifyWillOpCounts")

        for (CollectionTestObject *o in self._allObjects) {
            for (CollectionTestSubObject *so in o.subObjects.allValues) {
                if (so.willAddCount)
                    [self passFail:NO format:@"Object %@ has willAddCount",o.description];
                if (so.willRemoveCount)
                    [self passFail:NO format:@"Object %@ has willRemoveCount",o.description];
            }
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
