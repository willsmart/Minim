// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 2 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D0





        @interface ClassCount : NSObject {
            LL count;
            NSString *name;
            LL nextID;
        }

        @property (nonatomic,readwrite) LL count;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readonly) NSString *name;
        @property (nonatomic,readwrite) LL nextID;
        - (void)_startObjectOfClassClassCount;
        + (ClassCount *)classCount;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (ClassCount *)initWithName:(NSString *)aname;
        - (NSString *)name;

        @end
    #endif // INCLUDE_IFACE_D0

    #ifdef INCLUDE_IFACE_D1





        @interface Singletons : NSObject<Ticker> {
        #ifndef __SWIFT__
                ArrayOfClassCounts *classCountArray;
        #endif  // __SWIFT__
        #ifndef __SWIFT__
                QuickHashTableOfClassCounts *classCountht;
        #endif  // __SWIFT__
            Files *files;
            NSString *v_homeURLPrefix;
            NSMutableString *htmlParseOutput;
            bool inTick;
            Log *log;
            ObjectGraph *objectGraph;
            bool online;
            NSMutableDictionary *regexCache;
            NSString *v_styleName;
            NSTimer *v_tim;
            ClassCount *totalObjectCount;
            Trace *trace;
            NSMutableArray *v_typeCountHistory;
            WIParse *wiParse;
        }

        #ifndef __SWIFT__
            @property (nonatomic,readonly) ArrayOfClassCounts *classCountArray;
        #endif  // __SWIFT__
        #ifndef __SWIFT__
            @property (nonatomic,readonly) QuickHashTableOfClassCounts *classCountht;
        #endif  // __SWIFT__
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readonly) Files *files;
        @property (strong,nonatomic,readwrite) NSString *homeURLPrefix;
        @property (strong,nonatomic,readonly) NSMutableString *htmlParseOutput;
        @property (nonatomic,readonly) bool inTick;
        @property (strong,nonatomic,readonly) Log *log;
        @property (strong,nonatomic,readonly) ObjectGraph *objectGraph;
        @property (nonatomic,readwrite) bool online;
        @property (strong,nonatomic,readonly) NSMutableDictionary *regexCache;
        @property (strong,nonatomic,readwrite) NSString *styleName;
        @property (strong,nonatomic,readwrite) NSTimer *tim;
        @property (strong,nonatomic,readwrite) ClassCount *totalObjectCount;
        @property (strong,nonatomic,readonly) Trace *trace;
        @property (strong,nonatomic,readwrite) NSMutableArray *typeCountHistory;
        @property (strong,nonatomic,readonly) WIParse *wiParse;
        - (void)_startObjectOfClassSingletons;
        + (Singletons *)_;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (Files *)files;
        + (Singletons *)getDefault;
        - (NSString *)homeURLPrefix;
        - (NSMutableString *)htmlParseOutput;
        - (Singletons *)init;
        - (Log *)log;
        - (ObjectGraph *)objectGraph;
        - (NSMutableDictionary *)regexCache;
        - (void)setHomeURLPrefix:(NSString *)v;
        - (void)setStyleName:(NSString *)v;
        - (void)setTim:(NSTimer *)v;
        - (void)setTotalObjectCount:(ClassCount *)v;
        - (void)setTypeCountHistory:(NSMutableArray *)v;
        - (void)startWithInterval:(float)interval;
        - (void)stop;
        - (NSString *)styleName;
        - (void)tick;
        - (NSTimer *)tim;
        - (ClassCount *)totalObjectCount;
        - (Trace *)trace;
        - (NSMutableArray *)typeCountHistory;
        - (WIParse *)wiParse;

        @end
    #endif // INCLUDE_IFACE_D1

    #ifdef INCLUDE_IFACE_D2





        @interface ObjectPointer : NSObject<ObjectEquateAndCopy> {
            LL objectIDInTotal;
        }

        @property (nonatomic,readonly) LL objectIDInTotal;
        - (void)_startObjectOfClassObjectPointer;
        - (id)copyWithZone:(NSZone *)zone;
        - (void)dealloc;
        - (void)die;
        - (Unsigned)hash;
        - (ObjectPointer *)initWithObjectID:(LL)aobjectIDInTotal;
        - (BOOL)isEqual:(id)obj;

        @end
    #endif // INCLUDE_IFACE_D2

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: c





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ClassCount
    #define _WIClass_           ClassCount__
    #define _className_         classCount
    #define _Class_             ClassCount__
    @implementation ClassCount

    @synthesize count = count;
    @synthesize nextID = nextID;
    - (void)_startObjectOfClassClassCount {
        MSGSTART("ClassCount:-(void)_startObjectOfClassClassCount")
    }
    + (ClassCount *)classCount {
        MSGSTART("ClassCount:+(ClassCount*)classCount")

        return [[ClassCount alloc] init];
    }
    - (void)dealloc {
        MSGSTART("ClassCount:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ name = nil;
/*i999*/}
    - (NSString *)description {
        MSGSTART("ClassCount:-(NSString*)description")
        return [NSString stringWithFormat:@"%@x%qu",name,count];
    }
    - (void)die {
        MSGSTART("ClassCount:-(void)die")

        /*i900*/}
    - (ClassCount *)initWithName:(NSString *)aname {
        MSGSTART("ClassCount:-(ClassCount*)initWithName:(NSString*)aname")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ name = aname;
        count = 0; nextID = 1;

        /*i11*/ [self _startObjectOfClassClassCount];

/*i10001*/ return self;
    }
    - (NSString *)name {
        MSGSTART("ClassCount:-(NSString*)name")

        /*i-999*/ NSString * ret = name;
        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: o





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ObjectPointer
    #define _WIClass_           ObjectPointer__
    #define _className_         objectPointer
    #define _Class_             ObjectPointer__
    @implementation ObjectPointer

    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassObjectPointer {
        MSGSTART("ObjectPointer:-(void)_startObjectOfClassObjectPointer")
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("ObjectPointer:-(id)copyWithZone:(NSZone*)zone")

        return [[ObjectPointer allocWithZone:zone] initWithObjectID:objectIDInTotal];
    }
    - (void)dealloc {
        MSGSTART("ObjectPointer:-(void)dealloc")

        /*i-151*/[self die];
/*i999*/}
    - (void)die {
        MSGSTART("ObjectPointer:-(void)die")

        /*i900*/}
    - (Unsigned)hash {
        MSGSTART("ObjectPointer:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (ObjectPointer *)initWithObjectID:(LL)aobjectIDInTotal {
        MSGSTART("ObjectPointer:-(ObjectPointer*)initWithObjectID:(LL)aobjectIDInTotal")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ objectIDInTotal = aobjectIDInTotal;

        /*i11*/ [self _startObjectOfClassObjectPointer];

/*i10001*/ return self;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("ObjectPointer:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: s





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         Singletons
    #define _WIClass_           Singletons__
    #define _className_         singletons
    #define _Class_             Singletons__
    @implementation Singletons

    #ifndef __SWIFT__
        @synthesize classCountArray = classCountArray;
    #endif  // __SWIFT__
    #ifndef __SWIFT__
        @synthesize classCountht = classCountht;
    #endif  // __SWIFT__
    @synthesize inTick = inTick;
    @synthesize online = online;
    - (void)_startObjectOfClassSingletons {
        MSGSTART("Singletons:-(void)_startObjectOfClassSingletons")

        /*i-800*/ g_totalObjectCount = totalObjectCount = [[ClassCount alloc] initWithName:@"All classes"];
        ContextIndex ci = {
            0
        };
        g_classCounts = [NSMutableArray array];
        g_classCountht = classCountht = NEWCONSb( QuickHashTableOfClassCounts,(ci,nil,2048) );
        g_classCountArray = classCountArray = NEWCONSb( ArrayOfClassCounts,() );

        /*i-500*//*ivar*/ v_homeURLPrefix = (@"http://192.168.2.2/");
        /*ivar*/ v_styleName = (@"Synesthete");
        /*ivar*/ online = (YES);
        /*ivar*/ v_typeCountHistory = ([NSMutableArray array]);

        /*i0*/ for (Int i = 0; i < 5; i++) {
            [self.typeCountHistory addObject:[NSMutableDictionary dictionary]];
        }
    }
    + (Singletons *)_ {
        MSGSTART("Singletons:+(Singletons*)_")
        return self.getDefault;
    }
    - (void)dealloc {
        MSGSTART("Singletons:-(void)dealloc")

        /*i-500*/[self stop];

/*i-151*/ [self die];
/*i0*/ {
            DELETE(QuickHashTableOfClassCounts,g_classCountht);
            DELETE(ArrayOfClassCounts,g_classCountArray);
            g_classCounts = nil;
        }




        REMOVEOWNER(objectGraph,self); objectGraph = nil;

        REMOVEOWNER(trace,self); trace = nil;

        v_homeURLPrefix = nil;

        REMOVEOWNER(wiParse,self); wiParse = nil;

        v_styleName = nil;

        REMOVEOWNER(log,self); log = nil;

        v_tim = nil;

        REMOVEOWNER(totalObjectCount,self); totalObjectCount = nil;

        REMOVEOWNER(files,self); files = nil;

        htmlParseOutput = nil;

        regexCache = nil;

        v_typeCountHistory = nil;
/*i999*/}
    - (NSString *)description {
        MSGSTART("Singletons:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = [NSMutableString stringWithFormat:@"\nx%qu Objects:\n",totalObjectCount.count];
        {
            UnsafeClassCount pcc;
            arrHeapSortb(UnsafeClassCount,g_classCountArray->a,obja.count > objb.count,0,g_classCountArray->upperBound(),pcc);
            IterateArray(UnsafeClassCount,cc,*g_classCountArray,
                         NSString * name = cc.name;
                         [ret appendFormat:@"%@    %@ x %qu << %u, %u, %u, %u, %u -- %d\n",
                          (int(cc.count) ==
                        ( (NSNumber *)[(NSDictionary *)[self.typeCountHistory objectAtIndex:1] objectForKey: name] ).intValue ? @"" : @"**"),
                          name,cc.count,
                          ( (NSNumber *)[(NSDictionary *)[self.typeCountHistory objectAtIndex:0] objectForKey: name] ).intValue,
                          ( (NSNumber *)[(NSDictionary *)[self.typeCountHistory objectAtIndex:1] objectForKey: name] ).intValue,
                          ( (NSNumber *)[(NSDictionary *)[self.typeCountHistory objectAtIndex:2] objectForKey: name] ).intValue,
                          ( (NSNumber *)[(NSDictionary *)[self.typeCountHistory objectAtIndex:3] objectForKey: name] ).intValue,
                          ( (NSNumber *)[(NSDictionary *)[self.typeCountHistory objectAtIndex:4] objectForKey: name] ).intValue,
                          int(cc.count) -
                          ( (NSNumber *)[(NSDictionary *)[self.typeCountHistory objectAtIndex:1] objectForKey: name] ).intValue
                         ];
            );
        }

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("Singletons:-(void)die")

        /*i900*/}
    - (Files *)files {
        MSGSTART("Singletons:-(Files*)files")

        return !files ? files = [Files new] : files;
    }
    + (Singletons *)getDefault {
        MSGSTART("Singletons:+(Singletons*)getDefault")

        if (!g_singletons)
            ADDSINGLETON(g_singletons = [[Singletons alloc] init]);
        return g_singletons;
    }
    - (NSString *)homeURLPrefix {
        MSGSTART("Singletons:-(NSString*)homeURLPrefix")

        /*i-999*/ NSString * ret = v_homeURLPrefix;
        /*i999*/ return ret;
    }
    - (NSMutableString *)htmlParseOutput {
        MSGSTART("Singletons:-(NSMutableString*)htmlParseOutput")

        return !htmlParseOutput ? htmlParseOutput = [NSMutableString new] : htmlParseOutput;
    }
    - (Singletons *)init {
        MSGSTART("Singletons:-(Singletons*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassSingletons];

/*i10001*/ return self;
    }
    - (Log *)log {
        MSGSTART("Singletons:-(Log*)log")
        return log ? log : (log = [[Log alloc] init]);
    }
    - (ObjectGraph *)objectGraph {
        MSGSTART("Singletons:-(ObjectGraph*)objectGraph")
        return !objectGraph ? objectGraph = [[ObjectGraph alloc] init] : objectGraph;
    }
    - (NSMutableDictionary *)regexCache {
        MSGSTART("Singletons:-(NSMutableDictionary*)regexCache")

        return !regexCache ? regexCache = @{}
               .mutableCopy : regexCache;
    }
    - (void)setHomeURLPrefix:(NSString *)v {
        MSGSTART("Singletons:-(void)setHomeURLPrefix:(NSString*)v")

        /*i-905*/ if (v_homeURLPrefix == v) return;

        /*i-900*/ {
            v_homeURLPrefix = (id)v;
        }
    }
    - (void)setStyleName:(NSString *)v {
        MSGSTART("Singletons:-(void)setStyleName:(NSString*)v")

        /*i-905*/ if (v_styleName == v) return;

        /*i-900*/ {
            v_styleName = (id)v;
        }
    }
    - (void)setTim:(NSTimer *)v {
        MSGSTART("Singletons:-(void)setTim:(NSTimer*)v")

        /*i-905*/ if (v_tim == v) return;

        /*i-900*/ {
            v_tim = (id)v;
        }
    }
    - (void)setTotalObjectCount:(ClassCount *)v {
        MSGSTART("Singletons:-(void)setTotalObjectCount:(ClassCount*)v")

        /*i-905*/ if (totalObjectCount == v) return;

        /*i-900*/ {
            totalObjectCount = (id)v;
        }
/*i-850*/ REMOVEOWNER(totalObjectCount,self); ADDOWNER(v,self);
    }
    - (void)setTypeCountHistory:(NSMutableArray *)v {
        MSGSTART("Singletons:-(void)setTypeCountHistory:(NSMutableArray*)v")

        /*i-905*/ if (v_typeCountHistory == v) return;

        /*i-900*/ {
            v_typeCountHistory = (id)v;
        }
    }
    - (void)startWithInterval:(float)interval {
        MSGSTART("Singletons:-(void)startWithInterval:(float)interval")

        [self.tim invalidate];
        self.tim = [NSTimer scheduledTimerWithTimeInterval:interval target:self selector:@selector(tick) userInfo:nil repeats:YES];
    }
    - (void)stop {
        MSGSTART("Singletons:-(void)stop")

        [self.tim invalidate];
        self.tim = nil;
    }
    - (NSString *)styleName {
        MSGSTART("Singletons:-(NSString*)styleName")

        /*i-999*/ NSString * ret = v_styleName;
        /*i999*/ return ret;
    }
    - (void)tick {
        MSGSTART("Singletons:-(void)tick")

        /*i-100*/ @synchronized(self) {
            if (inTick) return;

            inTick = YES;
        }

        /*i0*/ [Log sendToLog:@"Singletons" format:@"Singletons at %@\n%@\n\n",( (NSDate *)[NSDate date] ).description,self.description];
        if (!self.online) prnt("%s\n",self.description.UTF8String);
        NSMutableDictionary *d = (NSMutableDictionary *)[self.typeCountHistory objectAtIndex:4];
        [self.typeCountHistory removeLastObject];
        [d removeAllObjects];

        IterateArray(UnsafeClassCount,cc,*g_classCountArray,
                     NSString * key = cc.name;
                     [d setObject:@(cc.count) forKey:key];
        );
        [self.typeCountHistory insertObject:d atIndex:0];


/*i100*/ @synchronized(self) {
            inTick = NO;
        }
    }
    - (NSTimer *)tim {
        MSGSTART("Singletons:-(NSTimer*)tim")

        /*i-999*/ NSTimer * ret = v_tim;
        /*i999*/ return ret;
    }
    - (ClassCount *)totalObjectCount {
        MSGSTART("Singletons:-(ClassCount*)totalObjectCount")

        /*i-999*/ ClassCount * ret = totalObjectCount;
        /*i999*/ return ret;
    }
    - (Trace *)trace {
        MSGSTART("Singletons:-(Trace*)trace")
        return !trace ? trace = [[Trace alloc] init] : trace;
    }
    - (NSMutableArray *)typeCountHistory {
        MSGSTART("Singletons:-(NSMutableArray*)typeCountHistory")

        /*i-999*/ NSMutableArray * ret = v_typeCountHistory;
        /*i999*/ return ret;
    }
    - (WIParse *)wiParse {
        MSGSTART("Singletons:-(WIParse*)wiParse")

        return !wiParse ? wiParse = [WIParse new] : wiParse;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
