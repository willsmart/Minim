// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 2 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D4





        @interface MutableArrayMirrorTesterImpl : NSMutableArray<ClassObject, MutableArrayMirrorTester, Object> {
            Int __addingToMirrorArray;
            NSArray *__array;
            NSMutableDictionary *__arrayObjectIndexes;
            NSMutableArray *__mutableArray;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableArrayMirrorTesterImpl; @protected
            Int __removingFromMirrorArray;
            Unsigned array_count;
            id100 array_objects;
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            NSMutableString *v_errs;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            long version;
            Int weakObjectCount;
        }

        @property (nonatomic,readwrite) Int __addingToMirrorArray;
        @property (strong,nonatomic,readonly) NSArray *__array;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *__arrayObjectIndexes;
        @property (strong,nonatomic,readonly) NSMutableArray *__mutableArray;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Int __removingFromMirrorArray;
        @property (nonatomic,readwrite) Unsigned array_count;
        @property (nonatomic,readwrite) id100 array_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) id lastObject;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSEnumerator *reverseObjectEnumerator;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassMutableArrayMirrorTesterImpl;
        - (NSArray *)__array;
        - (NSMutableDictionary *)__arrayObjectIndexes;
        - (NSMutableArray *)__mutableArray;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_insertObject:(id)object atIndex:(Unsigned)index;
        - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectAtIndex:(Unsigned)index;
        - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (void)add:(Int)c toWillAddCountForObject:(id)object;
        - (void)add:(Int)c toWillRemoveCountForObject:(id)object;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)allObjectsMoved;
        + (MutableArrayMirrorTesterImpl *)array;
        - (NSArray *)arrayByAddingObject:(id)object;
        - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        + (MutableArrayMirrorTesterImpl *)arrayWithArray:(NSArray *)array;
        + (id)arrayWithCapacity:(Unsigned)numItems;
        + (MutableArrayMirrorTesterImpl *)arrayWithContentsOfFile:(NSString *)file;
        + (MutableArrayMirrorTesterImpl *)arrayWithContentsOfURL:(NSURL *)url;
        + (MutableArrayMirrorTesterImpl *)arrayWithObject:(id)object;
        + (MutableArrayMirrorTesterImpl *)arrayWithObjects:(id *)objects count:(Unsigned)count;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (NSString *)componentsJoinedByString:(NSString *)separator;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)doAddIndex:(Unsigned)index forObject:(id)object;
        - (void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object;
        - (void)doRemoveIndex:(Unsigned)index forObject:(id)object;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (NSMutableString *)errs;
        - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi;
        - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (id)firstObjectCommonWithArray:(NSArray *)array;
        - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange;
        - (Unsigned)hash;
        - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp;
        - (Unsigned)indexOfObject:(id)object;
        - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (MutableArrayMirrorTesterImpl *)init;
        - (MutableArrayMirrorTesterImpl *)initWithArray:(NSArray *)array;
        - (MutableArrayMirrorTesterImpl *)initWithArray:(NSArray *)array copyItems:(BOOL)copy;
        - (MutableArrayMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems;
        - (MutableArrayMirrorTesterImpl *)initWithCoder:(NSCoder *)coder;
        - (MutableArrayMirrorTesterImpl *)initWithContentsOfFile:(NSString *)file;
        - (MutableArrayMirrorTesterImpl *)initWithContentsOfURL:(NSURL *)url;
        - (MutableArrayMirrorTesterImpl *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (void)insertObject:(id)object atIndex:(Unsigned)index;
        - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToArray:(NSArray *)array;
        - (id)lastObject;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (id)objectAtIndex:(Unsigned)index;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSArray *)objects;
        - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)removeLastObject;
        - (void)removeObjectAtIndex:(Unsigned)index;
        - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (NSEnumerator *)reverseObjectEnumerator;
        - (void)set__arrayObjectIndexes:(NSMutableDictionary *)v;
        - (void)setArray:(NSArray *)array;
        - (void)setDelegateForArray:(NSArray *)v;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSData *)sortedArrayHint;
        - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint;
        - (NSArray *)sortedArrayUsingSelector:(SEL)selector;
        - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)sortUsingComparator:(NSComparator)cmptr;
        - (void)sortUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context;
        - (void)sortUsingSelector:(SEL)selector;
        - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)stateOK;
        - (NSArray *)subarrayWithRange:(NSRange)r;
        - (id)valueForKey:(NSString *)key;
        - (void)verifyMirrorArray;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface WeakMutableArrayMirrorTesterImpl : NSMutableArray<ClassObject, MutableArray, MutableArrayMirrorTester, Object, WeakCollection> {
            Int __addingToMirrorArray;
            NSArray *__array;
            NSMutableDictionary *__arrayObjectIndexes;
            NSMutableArray *__mutableArray;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WeakMutableArrayMirrorTesterImpl; @protected
            Int __removingFromMirrorArray;
            Unsigned array_count;
            id100 array_objects;
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            NSMutableString *v_errs;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            long version;
            Int weakObjectCount;
        }

        @property (nonatomic,readwrite) Int __addingToMirrorArray;
        @property (strong,nonatomic,readonly) NSArray *__array;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *__arrayObjectIndexes;
        @property (strong,nonatomic,readonly) NSMutableArray *__mutableArray;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Int __removingFromMirrorArray;
        @property (nonatomic,readwrite) Unsigned array_count;
        @property (nonatomic,readwrite) id100 array_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) id lastObject;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSEnumerator *reverseObjectEnumerator;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassWeakMutableArrayMirrorTesterImpl;
        - (NSArray *)__array;
        - (NSMutableDictionary *)__arrayObjectIndexes;
        - (NSMutableArray *)__mutableArray;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_insertObject:(id)object atIndex:(Unsigned)index;
        - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectAtIndex:(Unsigned)index;
        - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (void)add:(Int)c toWillAddCountForObject:(id)object;
        - (void)add:(Int)c toWillRemoveCountForObject:(id)object;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)allObjectsMoved;
        + (WeakMutableArrayMirrorTesterImpl *)array;
        - (NSArray *)arrayByAddingObject:(id)object;
        - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        + (WeakMutableArrayMirrorTesterImpl *)arrayWithArray:(NSArray *)array;
        + (id)arrayWithCapacity:(Unsigned)numItems;
        + (WeakMutableArrayMirrorTesterImpl *)arrayWithContentsOfFile:(NSString *)file;
        + (WeakMutableArrayMirrorTesterImpl *)arrayWithContentsOfURL:(NSURL *)url;
        + (WeakMutableArrayMirrorTesterImpl *)arrayWithObject:(id)object;
        + (WeakMutableArrayMirrorTesterImpl *)arrayWithObjects:(id *)objects count:(Unsigned)count;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (NSString *)componentsJoinedByString:(NSString *)separator;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)doAddIndex:(Unsigned)index forObject:(id)object;
        - (void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object;
        - (void)doRemoveIndex:(Unsigned)index forObject:(id)object;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (NSMutableString *)errs;
        - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi;
        - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (id)firstObjectCommonWithArray:(NSArray *)array;
        - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange;
        - (Unsigned)hash;
        - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp;
        - (Unsigned)indexOfObject:(id)object;
        - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (WeakMutableArrayMirrorTesterImpl *)init;
        - (WeakMutableArrayMirrorTesterImpl *)initWithArray:(NSArray *)array;
        - (WeakMutableArrayMirrorTesterImpl *)initWithArray:(NSArray *)array copyItems:(BOOL)copy;
        - (WeakMutableArrayMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems;
        - (WeakMutableArrayMirrorTesterImpl *)initWithCoder:(NSCoder *)coder;
        - (WeakMutableArrayMirrorTesterImpl *)initWithContentsOfFile:(NSString *)file;
        - (WeakMutableArrayMirrorTesterImpl *)initWithContentsOfURL:(NSURL *)url;
        - (WeakMutableArrayMirrorTesterImpl *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (void)insertObject:(id)object atIndex:(Unsigned)index;
        - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToArray:(NSArray *)array;
        - (id)lastObject;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (id)objectAtIndex:(Unsigned)index;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSArray *)objects;
        - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)removeLastObject;
        - (void)removeObjectAtIndex:(Unsigned)index;
        - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (NSEnumerator *)reverseObjectEnumerator;
        - (void)set__arrayObjectIndexes:(NSMutableDictionary *)v;
        - (void)setArray:(NSArray *)array;
        - (void)setDelegateForArray:(NSArray *)v;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSData *)sortedArrayHint;
        - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint;
        - (NSArray *)sortedArrayUsingSelector:(SEL)selector;
        - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)sortUsingComparator:(NSComparator)cmptr;
        - (void)sortUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context;
        - (void)sortUsingSelector:(SEL)selector;
        - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)stateOK;
        - (NSArray *)subarrayWithRange:(NSRange)r;
        - (id)valueForKey:(NSString *)key;
        - (void)verifyMirrorArray;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end
    #endif // INCLUDE_IFACE_D4

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: m





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableArrayMirrorTesterImpl
    #define _WIClass_           MutableArrayMirrorTesterImpl__
    #define _className_         mutableArrayMirrorTesterImpl
    #define _Class_             MutableArrayMirrorTesterImpl__
    @implementation MutableArrayMirrorTesterImpl

    @synthesize __addingToMirrorArray = __addingToMirrorArray;
    @synthesize __owner_context = __owner_context;
    @synthesize __removingFromMirrorArray = __removingFromMirrorArray;
    @synthesize array_count = array_count;
    @synthesize array_objects = array_objects;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassMutableArrayMirrorTesterImpl {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)_startObjectOfClassMutableArrayMirrorTesterImpl")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ version = (1);
        /*ivar*/ __arrayObjectIndexes = ([NSMutableDictionary dictionary]);

        /*i0*/ self.delegateForArray = self;
    }
    - (NSArray *)__array {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray*)__array")

        /*i-999*/ NSArray * ret = __array;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__arrayObjectIndexes {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSMutableDictionary*)__arrayObjectIndexes")

        /*i-999*/ NSMutableDictionary * ret = __arrayObjectIndexes;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)__mutableArray {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSMutableArray*)__mutableArray")

        /*i-999*/ NSMutableArray * ret = __mutableArray;
        /*i999*/ return ret;
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableArrayMirrorTesterImpl:-(bool)_addObjectsFromArray:(NSArray*)array")

        if (array.count) {
            Unsigned cwas = __array.count,added = 0;
            [self willTryToAddObjectsWithCount:array.count];
            for (NSObject *object in array) {
                bool weak = insertsWeakObjectsByDefault;
                if (![self shouldAddObject:object makeWeak:weak]) {
                    [self wontAddObject:object withIndex:cwas + added];
                }
                else {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) continue;

                    [self willAddObject:object withIndex:cwas + added];

                    [__mutableArray addObject:useObject];
                    if (weak) weakObjectCount++;

                    [self didAddObject:object withIndex:cwas + added];
                    added++;
                }
            }
            return added > 0;
        }
        else {
            return NO;
        }
    }
    - (bool)_insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("MutableArrayMirrorTesterImpl:-(bool)_insertObject:(id)object atIndex:(Unsigned)index")

        if (index == NSNotFound) return NO;

        if (index > __array.count) {
            ERR( "%d outside bounds [0,%d]\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            if (index != __array.count) [self objectsMovedFromRange:NSMakeRange( index,__array.count - (index + 1) ) toLocation:index + 1];
            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArrayMirrorTesterImpl:-(bool)_insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        bool ret = NO;
        if (objects.count != indexes.count) {
            ERR("Bad count");
            return NO;
        }
        Unsigned skipped = 0,move = 0,index = [indexes firstIndex],prvIndex;

        NSMutableIndexSet *addedInds = [[NSMutableIndexSet alloc] init];

        [self willTryToAddObjectsWithCount:objects.count];
        for (NSObject *object in objects) {
            bool weak = insertsWeakObjectsByDefault;
            if (![self shouldAddObject:object makeWeak:weak]) {
                [self wontAddObject:object withIndex:index];
                skipped++;
            }
            else {
                do {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) break;

                    [addedInds addIndex:index];
                    [self willAddObject:object withIndex:index - skipped];

                    [__mutableArray insertObject:useObject atIndex:index - skipped];
                    if (weak) weakObjectCount++;
                    move++;
                } while (NO);
            }
            index = [indexes indexGreaterThanIndex:index];
        }
        if (move) {
            for (prvIndex = __mutableArray.count + indexes.count - skipped,index = indexes.lastIndex; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
                if ([addedInds containsIndex:index]) {
                    [self objectsMovedFromRange:NSMakeRange( index - skipped,prvIndex - (index - skipped) ) toLocation:(index - skipped) + move];
                    prvIndex = index - skipped;
                    move--;
                }
                else {
                    skipped--;
                }
            }

            index = indexes.firstIndex;
            for (NSObject *object in objects) {
                if ([addedInds containsIndex:index])
                    [self didAddObject:object withIndex:index - skipped];
                else skipped++;
            }
            ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("MutableArrayMirrorTesterImpl:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSArray *was = [__array copy];
        [self willRemoveObjectsWithCount:was.count];
        for (Int i = int(was.count) - 1; i >= 0; i--) {
            [self willRemoveObject:[was objectAtIndex:i] fromIndex:i];
        }
        [__mutableArray removeAllObjects];
        weakObjectCount = 0;

        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObjectAtIndex:(Unsigned)index {
        MSGSTART("MutableArrayMirrorTesterImpl:-(bool)_removeObjectAtIndex:(Unsigned)index")

        if (index != NSNotFound) {
            if (index >= __array.count) {
                ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
                return NO;
            }
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object fromIndex:index];

            if (object.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self objectsMovedFromRange:NSMakeRange(index + 1,__array.count - index) toLocation:index];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArrayMirrorTesterImpl:-(bool)_removeObjectsAtIndexes:(NSIndexSet*)indexes")

        [self willRemoveObjectsWithCount : indexes.count];
        for (Unsigned index = [indexes lastIndex]; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObject:object fromIndex:index];

            [__mutableArray removeObjectAtIndex:index];
            if (object.isWeakSelf) --weakObjectCount;

            [self didRemoveObject:object];
        }
        for (Unsigned index = [indexes firstIndex],i = 0; index != NSNotFound; index = [indexes indexGreaterThanIndex:index],i++) {
            Unsigned nxtIndex = [indexes indexGreaterThanIndex:index];
            if (nxtIndex == NSNotFound) nxtIndex = __mutableArray.count + indexes.count;
            if (nxtIndex > index + 1) [self objectsMovedFromRange:NSMakeRange( index + 1,nxtIndex - (index + 1) ) toLocation:index - i];
        }
        return indexes.count > 0;
    }
    - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if (index == NSNotFound) return NO;

        if (index >= __array.count) {
            ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        NSObject *object2 = [__array objectAtIndex:index];
        if (object == object2) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;


            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object2 fromIndex:index];

            if (object2.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self didRemoveObject:object2];

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (void)add:(Int)c toWillAddCountForObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)add:(Int)c toWillAddCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didAdd];
            else if (c == 1) [o willAdd];
        }
    }
    - (void)add:(Int)c toWillRemoveCountForObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)add:(Int)c toWillRemoveCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didRemove];
            else if (c == 1) [o willRemove];
        }
    }
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)addObject:(id)object")

        [self insertObject : object atIndex : __mutableArray.count];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer toObjectsAtIndexes : indexes forKeyPath : keyPath options : options context : context];
    }
    - (void)allObjectsMoved {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)allObjectsMoved")



        [__arrayObjectIndexes removeAllObjects];
        Unsigned index = 0;
        for (NSObject *object in __array) {
            [self doAddIndex:index++ forObject:object];
        }

        /*i100*/ [arrayDelegate allObjectsMoved];
    }
    + (MutableArrayMirrorTesterImpl *)array {
        MSGSTART("MutableArrayMirrorTesterImpl:+(MutableArrayMirrorTesterImpl*)array")
        return [[MutableArrayMirrorTesterImpl alloc] init];
    }
    - (NSArray *)arrayByAddingObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray*)arrayByAddingObject:(id)object")

        return [self.objects arrayByAddingObject:object];
    }
    - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array")

        return [self.objects arrayByAddingObjectsFromArray:array];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    + (MutableArrayMirrorTesterImpl *)arrayWithArray:(NSArray *)array {
        MSGSTART("MutableArrayMirrorTesterImpl:+(MutableArrayMirrorTesterImpl*)arrayWithArray:(NSArray*)array")
        return [[MutableArrayMirrorTesterImpl alloc] initWithArray:array];
    }
    + (id)arrayWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableArrayMirrorTesterImpl:+(id)arrayWithCapacity:(Unsigned)numItems")

        return [[MutableArrayMirrorTesterImpl alloc] initWithCapacity:numItems];
    }
    + (MutableArrayMirrorTesterImpl *)arrayWithContentsOfFile:(NSString *)file {
        MSGSTART("MutableArrayMirrorTesterImpl:+(MutableArrayMirrorTesterImpl*)arrayWithContentsOfFile:(NSString*)file")
        return [[MutableArrayMirrorTesterImpl alloc] initWithContentsOfFile:file];
    }
    + (MutableArrayMirrorTesterImpl *)arrayWithContentsOfURL:(NSURL *)url {
        MSGSTART("MutableArrayMirrorTesterImpl:+(MutableArrayMirrorTesterImpl*)arrayWithContentsOfURL:(NSURL*)url")
        return [[MutableArrayMirrorTesterImpl alloc] initWithContentsOfURL:url];
    }
    + (MutableArrayMirrorTesterImpl *)arrayWithObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:+(MutableArrayMirrorTesterImpl*)arrayWithObject:(id)object")
        return [[MutableArrayMirrorTesterImpl alloc] initWithObjects:&object count:1];
    }
    + (MutableArrayMirrorTesterImpl *)arrayWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("MutableArrayMirrorTesterImpl:+(MutableArrayMirrorTesterImpl*)arrayWithObjects:(id*)objects count:(Unsigned)count")
        return [[MutableArrayMirrorTesterImpl alloc] initWithObjects:objects count:count];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableArrayMirrorTesterImpl:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableArrayMirrorTesterImpl:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSString *)componentsJoinedByString:(NSString *)separator")

        return [__array componentsJoinedByString:separator];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(BOOL)containsObject:(id)object")
        return [__array containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("MutableArrayMirrorTesterImpl:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (Unsigned)count {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)count")
        return [__array count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__array countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __array) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ v_errs = nil;

        __mutableArray = nil;

        __arrayObjectIndexes = nil;

        __array = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__array description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSString *)descriptionWithLocale:(id)locale")

        return [self.objects descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [self.objects descriptionWithLocale:locale indent:level];
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)didAddObject:(id)object withIndex:(Unsigned)index")

        /*i-950*/ // [self objectsMovedFromRange:NSMakeRange(index,__array.count-1-index) toLocation:index+1];
        [self doAddIndex : index forObject : object];

        /*i100*/ if (!__addingToMirrorArray) [self passFail:NO format:@"!!!ait did add while not adding\n"];
        [self add:-1 toWillAddCountForObject:object];
        __addingToMirrorArray--;
        [arrayDelegate didAddObject:object withIndex:index];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)didRemoveObject:(id)object")



        /*i100*/ if (!__removingFromMirrorArray) [self passFail:NO format:@"!!!ait did remove while not removing\n"];
        [self add:-1 toWillRemoveCountForObject:object];
        __removingFromMirrorArray--;
        [arrayDelegate didRemoveObject:object];
    }
    - (void)die {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)die")

        /*i900*/}
    - (void)doAddIndex:(Unsigned)index forObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)doAddIndex:(Unsigned)index forObject:(id)object")

        NSMutableIndexSet * indexes = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
        if (!indexes) {
            [__arrayObjectIndexes setObject:indexes = [NSMutableIndexSet indexSet] forWeakKey:object];
        }
        else if ([indexes containsIndex:index]) {
            [self passFail:NO format:@"!!!ai Index exists\n"]; ERR("a");
        }
        [indexes addIndex:index];
    }
    - (void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object")

        NSMutableIndexSet * indexes = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
        if (!indexes) {
            [self passFail:NO format:@"!!!ai Object not known (2)\n"]; ERR("a");
        }
        if (![indexes containsIndex:fromIndex]) {
            [self passFail:NO format:@"!!!ai Index doesn't exist (2)\n"]; ERR("a");
        }
        [indexes removeIndex:fromIndex];
        if ([indexes containsIndex:toIndex]) {
            [self passFail:NO format:@"!!!ai Index exists (2)\n"]; ERR("a");
        }
        [indexes addIndex:toIndex];
    }
    - (void)doRemoveIndex:(Unsigned)index forObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)doRemoveIndex:(Unsigned)index forObject:(id)object")

        NSMutableIndexSet * indexes = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
        if (!indexes) {
            [self passFail:NO format:@"!!!ai Object not known\n"]; ERR("a");
        }
        if (![indexes containsIndex:index]) {
            [self passFail:NO format:@"!!!ai Index doesn't exist\n"]; ERR("a");
        }
        if (indexes.count == 1) [__arrayObjectIndexes removeObjectForKey:(id < NSCopying >)object];
        else [indexes removeIndex:index];
    }
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)encodeWithCoder:(NSCoder*)coder")

        [__array encodeWithCoder : coder];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsAtIndexes : indexSet options : opts usingBlock : block];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSMutableString *)errs {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi")

        if (fromi != toi) {
            [__mutableArray exchangeObjectAtIndex:fromi withObjectAtIndex:toi];
            [self objectsSwappedWithIndex:fromi andIndex:toi];
            [self stateOK];
        }
    }
    - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate")

        return [self.objects filteredArrayUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        NSMutableIndexSet * toRemove = nil;
        Unsigned index = 0;
        for (NSObject *object in __array) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableIndexSet alloc] init];
                [toRemove addIndex:index];
            }
            index++;
        }
        if (toRemove) {
            [self _removeObjectsAtIndexes:toRemove];
            [self stateOK];
        }
    }
    - (id)firstObjectCommonWithArray:(NSArray *)array {
        MSGSTART("MutableArrayMirrorTesterImpl:-(id)firstObjectCommonWithArray:(NSArray*)array")

        return [__array firstObjectCommonWithArray:array];
    }
    - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange")

        [__array getObjects : aBuffer range : aRange];
        if (weakObjectCount) for (Int i = aRange.length + aRange.location - 1; i >= aRange.location; i--) {
                aBuffer[i] = [aBuffer[i] strongSelf];
            }

    }
    - (Unsigned)hash {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSIndexSet*)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSIndexSet*)indexesOfObjectsPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsPassingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSIndexSet*)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsWithOptions:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp")

        return [__array indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp];
    }
    - (Unsigned)indexOfObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)indexOfObject:(id)object")

        return [__array indexOfObject:object];
    }
    - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)indexOfObject:(id)object inRange:(NSRange)range")

        return [__array indexOfObject:object inRange:range];
    }
    - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectIdenticalTo:(id)object")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf]],[__array indexOfObjectIdenticalTo:[object weakSelf]]);
        else return [__array indexOfObjectIdenticalTo:object];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf] inRange:range],[__array indexOfObjectIdenticalTo:[object weakSelf] inRange:range]);
        else return [__array indexOfObjectIdenticalTo:object inRange:range];
    }
    - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectPassingTest:predicate];
    }
    - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectWithOptions:opts passingTest:predicate];
    }
    - (MutableArrayMirrorTesterImpl *)init {
        MSGSTART("MutableArrayMirrorTesterImpl:-(MutableArrayMirrorTesterImpl*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] init];

        /*i11*/ [self _startObjectOfClassMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableArrayMirrorTesterImpl *)initWithArray:(NSArray *)array {
        MSGSTART("MutableArrayMirrorTesterImpl:-(MutableArrayMirrorTesterImpl*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = (insertsWeakObjectsByDefault ? array.weakMutableCopy : [[NSMutableArray alloc] initWithArray:array]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableArrayMirrorTesterImpl *)initWithArray:(NSArray *)array copyItems:(BOOL)copy {
        MSGSTART("MutableArrayMirrorTesterImpl:-(MutableArrayMirrorTesterImpl*)initWithArray:(NSArray*)array copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithArray:array copyItems:copy];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableArrayMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableArrayMirrorTesterImpl:-(MutableArrayMirrorTesterImpl*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableArrayMirrorTesterImpl *)initWithCoder:(NSCoder *)coder {
        MSGSTART("MutableArrayMirrorTesterImpl:-(MutableArrayMirrorTesterImpl*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableArrayMirrorTesterImpl *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("MutableArrayMirrorTesterImpl:-(MutableArrayMirrorTesterImpl*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableArrayMirrorTesterImpl *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("MutableArrayMirrorTesterImpl:-(MutableArrayMirrorTesterImpl*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableArrayMirrorTesterImpl *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("MutableArrayMirrorTesterImpl:-(MutableArrayMirrorTesterImpl*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (void)insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)insertObject:(id)object atIndex:(Unsigned)index")

        if ([self _insertObject:object atIndex:index]) [self stateOK];
    }
    - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        if ([self _insertObjects:objects atIndexes:indexes]) [self stateOK];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("MutableArrayMirrorTesterImpl:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToArray:(NSArray *)array {
        MSGSTART("MutableArrayMirrorTesterImpl:-(BOOL)isEqualToArray:(NSArray*)array")

        return [__array isEqualToArray:array];
    }
    - (id)lastObject {
        MSGSTART("MutableArrayMirrorTesterImpl:-(id)lastObject")
        return weakObjectCount ? [__array.lastObject strongSelf] : __array.lastObject;
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)makeObjectsPerformSelector:(SEL)selector")

        [__array makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")

        [__array makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("MutableArrayMirrorTesterImpl:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (id)objectAtIndex:(Unsigned)index {
        MSGSTART("MutableArrayMirrorTesterImpl:-(id)objectAtIndex:(Unsigned)index")

        if (index >= __array.count) ERR( "Index %d is out of bounds [0,%d)",int(index),int(__array.count) );
        return weakObjectCount ? [__array[index] strongSelf] : __array[index];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSEnumerator*)objectEnumerator")
        return [__array objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objects {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray*)objects")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            Int i = 0;
            for (NSObject *o in __array) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : __array;
        }
        else {
            return __array;
        }
    }
    - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            NSArray *ret = [__array objectsAtIndexes:indexes];
            Int i = 0;
            for (NSObject *o in ret) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : ret;
        }
        else {
            return [__array objectsAtIndexes:indexes];
        }
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")



        for (Unsigned i = 0; i < fromRange.length; i++) {
            Unsigned j = (toLocation > fromRange.location ? fromRange.length - 1 - i : i);
            NSObject *object = [__array objectAtIndex:toLocation + j];
            [self doChangeIndex:fromRange.location + j toIndex:toLocation + j forObject:object];
        }

        /*i100*/ [arrayDelegate objectsMovedFromRange:fromRange toLocation:toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")



        NSObject * object1 = [__array objectAtIndex:toIndex];
        NSObject *object2 = [__array objectAtIndex:fromIndex];
        if (object1 != object2) {
            [self doChangeIndex:fromIndex toIndex:toIndex forObject:object1];
            [self doChangeIndex:toIndex toIndex:fromIndex forObject:object2];
        }

        /*i100*/ [arrayDelegate objectsSwappedWithIndex:fromIndex andIndex:toIndex];
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("MutableArrayMirrorTesterImpl:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes")

        return [self.objects pathsMatchingExtensions:filterTypes];
    }
    - (void)removeAllObjects {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeLastObject {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removeLastObject")

        if (__array.count) [self removeObjectAtIndex:__array.count - 1];
    }
    - (void)removeObjectAtIndex:(Unsigned)index {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removeObjectAtIndex:(Unsigned)index")

        if ([self _removeObjectAtIndex:index]) [self stateOK];
    }
    - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removeObjectsAtIndexes:(NSIndexSet*)indexes")

        if ([self _removeObjectsAtIndexes:indexes]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer forKeyPath : keyPath context : context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath context : context];
    }
    - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if ([self _replaceObjectAtIndex:index withObject:object]) [self stateOK];
    }
    - (NSEnumerator *)reverseObjectEnumerator {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSEnumerator*)reverseObjectEnumerator")
        return [__array reverseObjectEnumerator];
    }
    - (void)set__arrayObjectIndexes:(NSMutableDictionary *)v {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)set__arrayObjectIndexes:(NSMutableDictionary*)v")

        /*i-905*/ if (__arrayObjectIndexes == v) return;

        /*i-900*/ {
            __arrayObjectIndexes = (id)v;
        }
    }
    - (void)setArray:(NSArray *)array {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)setArray:(NSArray*)array")

        NSIndexSet * inss,*dels;
        if (![Util getInsertsAndDeletesAsIndexSetWhenChanging:__array to:array inss:&inss dels:&dels]) return;

        [self _removeObjectsAtIndexes:dels];
        NSArray *objs = [array objectsAtIndexes:inss];
        [self _insertObjects:objs atIndexes:inss];
        [self stateOK];
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)setValue:(id)value forKey:(NSString *)key")

        [__array setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setArray:__array.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setArray:__array.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableArrayMirrorTesterImpl:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSData *)sortedArrayHint {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSData*)sortedArrayHint")

        return [__array sortedArrayHint];
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayUsingComparator:cmptr];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors")

        return [self.objects sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context")

        return [self.objects sortedArrayUsingFunction:comparator context:context];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint")

        return [self.objects sortedArrayUsingFunction:comparator context:context hint:hint];
    }
    - (NSArray *)sortedArrayUsingSelector:(SEL)selector {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray*)sortedArrayUsingSelector:(SEL)selector")

        return [self.objects sortedArrayUsingSelector:selector];
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayWithOptions:opts usingComparator:cmptr];
    }
    - (void)sortUsingComparator:(NSComparator)cmptr {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)sortUsingComparator:(NSComparator)cmptr")

        [__mutableArray sortUsingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)sortUsingDescriptors:(NSArray*)sortDescriptors")

        [__mutableArray sortUsingDescriptors : sortDescriptors];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)sortUsingFunction:(Int (*)(id, id, void *))compare context:(void *)context")

        [__mutableArray sortUsingFunction : compare context : context];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingSelector:(SEL)selector {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)sortUsingSelector:(SEL)selector")

        [__mutableArray sortUsingSelector : selector];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        [__mutableArray sortWithOptions : opts usingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)stateOK {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ if (__addingToMirrorArray) [self passFail:NO format:@"!!!ait adding when state ok\n"];
        if (__removingFromMirrorArray) [self passFail:NO format:@"!!!ait removing when state ok\n"];
        [self verifyMirrorArray];



        array_count = 0;
        for (id o in __array) {
            array_objects.ids[array_count++] = (__bridge void *)o;
            if (array_count == 100) break;
        }
        memset( array_objects.ids + array_count,0,sizeof(array_objects.ids[0]) * (100 - array_count) );
        array_count = __array.count;



        /*i100*/ [arrayDelegate stateOK];
    }
    - (NSArray *)subarrayWithRange:(NSRange)r {
        MSGSTART("MutableArrayMirrorTesterImpl:-(NSArray*)subarrayWithRange:(NSRange)r")

        return [self.objects subarrayWithRange:r];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("MutableArrayMirrorTesterImpl:-(id)valueForKey:(NSString*)key")

        return [__array valueForKey:key];
    }
    - (void)verifyMirrorArray {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)verifyMirrorArray")

        Int c = 0;
        for (PointerKey *key in __arrayObjectIndexes) {
            c += ( (NSIndexSet *)[__arrayObjectIndexes objectForKey:key] ).count;
        }
        if (c != __array.count) {
            [self passFail:NO format:@"!!!ait count mismatch\n"];
        }
        else {
            Unsigned index = 0;
            for (NSObject *object in __array) {
                NSIndexSet *indexesv = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
                if (!indexesv) [self passFail:NO format:@"!!!ait Object not known\n"];
                if (![indexesv containsIndex:index]) [self passFail:NO format:@"!!!ait Index doesn't exist\n"];
                index++;
            }
        }
    }
    - (CollectionWeakness)weakness {
        MSGSTART("MutableArrayMirrorTesterImpl:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)willAddObject:(id)object withIndex:(Unsigned)index")



        /*i100*/ __addingToMirrorArray++;
        [self add:1 toWillAddCountForObject:object];
        [arrayDelegate willAddObject:object withIndex:index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")




        /*i100*/[self add : 1 toWillRemoveCountForObject : object];
        __removingFromMirrorArray++;
        [arrayDelegate willRemoveObject:object fromIndex:index];

/*i950*/ [self doRemoveIndex:index forObject:object];
        // [self objectsMovedFromRange:NSMakeRange(index+1,__array.count-1-index) toLocation:index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableArrayMirrorTesterImpl:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("MutableArrayMirrorTesterImpl:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [self.objects writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("MutableArrayMirrorTesterImpl:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [self.objects writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: w





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WeakMutableArrayMirrorTesterImpl
    #define _WIClass_           WeakMutableArrayMirrorTesterImpl__
    #define _className_         weakMutableArrayMirrorTesterImpl
    #define _Class_             WeakMutableArrayMirrorTesterImpl__
    @implementation WeakMutableArrayMirrorTesterImpl

    @synthesize __addingToMirrorArray = __addingToMirrorArray;
    @synthesize __owner_context = __owner_context;
    @synthesize __removingFromMirrorArray = __removingFromMirrorArray;
    @synthesize array_count = array_count;
    @synthesize array_objects = array_objects;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassWeakMutableArrayMirrorTesterImpl {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)_startObjectOfClassWeakMutableArrayMirrorTesterImpl")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ insertsWeakObjectsByDefault = (YES);
        /*ivar*/ version = (1);
        /*ivar*/ __arrayObjectIndexes = ([NSMutableDictionary dictionary]);

        /*i0*/ self.delegateForArray = self;
    }
    - (NSArray *)__array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray*)__array")

        /*i-999*/ NSArray * ret = __array;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__arrayObjectIndexes {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSMutableDictionary*)__arrayObjectIndexes")

        /*i-999*/ NSMutableDictionary * ret = __arrayObjectIndexes;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)__mutableArray {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSMutableArray*)__mutableArray")

        /*i-999*/ NSMutableArray * ret = __mutableArray;
        /*i999*/ return ret;
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(bool)_addObjectsFromArray:(NSArray*)array")

        if (array.count) {
            Unsigned cwas = __array.count,added = 0;
            [self willTryToAddObjectsWithCount:array.count];
            for (NSObject *object in array) {
                bool weak = insertsWeakObjectsByDefault;
                if (![self shouldAddObject:object makeWeak:weak]) {
                    [self wontAddObject:object withIndex:cwas + added];
                }
                else {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) continue;

                    [self willAddObject:object withIndex:cwas + added];

                    [__mutableArray addObject:useObject];
                    if (weak) weakObjectCount++;

                    [self didAddObject:object withIndex:cwas + added];
                    added++;
                }
            }
            return added > 0;
        }
        else {
            return NO;
        }
    }
    - (bool)_insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(bool)_insertObject:(id)object atIndex:(Unsigned)index")

        if (index == NSNotFound) return NO;

        if (index > __array.count) {
            ERR( "%d outside bounds [0,%d]\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            if (index != __array.count) [self objectsMovedFromRange:NSMakeRange( index,__array.count - (index + 1) ) toLocation:index + 1];
            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(bool)_insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        bool ret = NO;
        if (objects.count != indexes.count) {
            ERR("Bad count");
            return NO;
        }
        Unsigned skipped = 0,move = 0,index = [indexes firstIndex],prvIndex;

        NSMutableIndexSet *addedInds = [[NSMutableIndexSet alloc] init];

        [self willTryToAddObjectsWithCount:objects.count];
        for (NSObject *object in objects) {
            bool weak = insertsWeakObjectsByDefault;
            if (![self shouldAddObject:object makeWeak:weak]) {
                [self wontAddObject:object withIndex:index];
                skipped++;
            }
            else {
                do {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) break;

                    [addedInds addIndex:index];
                    [self willAddObject:object withIndex:index - skipped];

                    [__mutableArray insertObject:useObject atIndex:index - skipped];
                    if (weak) weakObjectCount++;
                    move++;
                } while (NO);
            }
            index = [indexes indexGreaterThanIndex:index];
        }
        if (move) {
            for (prvIndex = __mutableArray.count + indexes.count - skipped,index = indexes.lastIndex; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
                if ([addedInds containsIndex:index]) {
                    [self objectsMovedFromRange:NSMakeRange( index - skipped,prvIndex - (index - skipped) ) toLocation:(index - skipped) + move];
                    prvIndex = index - skipped;
                    move--;
                }
                else {
                    skipped--;
                }
            }

            index = indexes.firstIndex;
            for (NSObject *object in objects) {
                if ([addedInds containsIndex:index])
                    [self didAddObject:object withIndex:index - skipped];
                else skipped++;
            }
            ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSArray *was = [__array copy];
        [self willRemoveObjectsWithCount:was.count];
        for (Int i = int(was.count) - 1; i >= 0; i--) {
            [self willRemoveObject:[was objectAtIndex:i] fromIndex:i];
        }
        [__mutableArray removeAllObjects];
        weakObjectCount = 0;

        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObjectAtIndex:(Unsigned)index {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(bool)_removeObjectAtIndex:(Unsigned)index")

        if (index != NSNotFound) {
            if (index >= __array.count) {
                ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
                return NO;
            }
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object fromIndex:index];

            if (object.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self objectsMovedFromRange:NSMakeRange(index + 1,__array.count - index) toLocation:index];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(bool)_removeObjectsAtIndexes:(NSIndexSet*)indexes")

        [self willRemoveObjectsWithCount : indexes.count];
        for (Unsigned index = [indexes lastIndex]; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObject:object fromIndex:index];

            [__mutableArray removeObjectAtIndex:index];
            if (object.isWeakSelf) --weakObjectCount;

            [self didRemoveObject:object];
        }
        for (Unsigned index = [indexes firstIndex],i = 0; index != NSNotFound; index = [indexes indexGreaterThanIndex:index],i++) {
            Unsigned nxtIndex = [indexes indexGreaterThanIndex:index];
            if (nxtIndex == NSNotFound) nxtIndex = __mutableArray.count + indexes.count;
            if (nxtIndex > index + 1) [self objectsMovedFromRange:NSMakeRange( index + 1,nxtIndex - (index + 1) ) toLocation:index - i];
        }
        return indexes.count > 0;
    }
    - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if (index == NSNotFound) return NO;

        if (index >= __array.count) {
            ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        NSObject *object2 = [__array objectAtIndex:index];
        if (object == object2) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;


            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object2 fromIndex:index];

            if (object2.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self didRemoveObject:object2];

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (void)add:(Int)c toWillAddCountForObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)add:(Int)c toWillAddCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didAdd];
            else if (c == 1) [o willAdd];
        }
    }
    - (void)add:(Int)c toWillRemoveCountForObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)add:(Int)c toWillRemoveCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didRemove];
            else if (c == 1) [o willRemove];
        }
    }
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)addObject:(id)object")

        [self insertObject : object atIndex : __mutableArray.count];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer toObjectsAtIndexes : indexes forKeyPath : keyPath options : options context : context];
    }
    - (void)allObjectsMoved {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)allObjectsMoved")



        [__arrayObjectIndexes removeAllObjects];
        Unsigned index = 0;
        for (NSObject *object in __array) {
            [self doAddIndex:index++ forObject:object];
        }

        /*i100*/ [arrayDelegate allObjectsMoved];
    }
    + (WeakMutableArrayMirrorTesterImpl *)array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:+(WeakMutableArrayMirrorTesterImpl*)array")
        return [[WeakMutableArrayMirrorTesterImpl alloc] init];
    }
    - (NSArray *)arrayByAddingObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray*)arrayByAddingObject:(id)object")

        return [self.objects arrayByAddingObject:object];
    }
    - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array")

        return [self.objects arrayByAddingObjectsFromArray:array];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    + (WeakMutableArrayMirrorTesterImpl *)arrayWithArray:(NSArray *)array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:+(WeakMutableArrayMirrorTesterImpl*)arrayWithArray:(NSArray*)array")
        return [[WeakMutableArrayMirrorTesterImpl alloc] initWithArray:array];
    }
    + (id)arrayWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:+(id)arrayWithCapacity:(Unsigned)numItems")

        return [[WeakMutableArrayMirrorTesterImpl alloc] initWithCapacity:numItems];
    }
    + (WeakMutableArrayMirrorTesterImpl *)arrayWithContentsOfFile:(NSString *)file {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:+(WeakMutableArrayMirrorTesterImpl*)arrayWithContentsOfFile:(NSString*)file")
        return [[WeakMutableArrayMirrorTesterImpl alloc] initWithContentsOfFile:file];
    }
    + (WeakMutableArrayMirrorTesterImpl *)arrayWithContentsOfURL:(NSURL *)url {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:+(WeakMutableArrayMirrorTesterImpl*)arrayWithContentsOfURL:(NSURL*)url")
        return [[WeakMutableArrayMirrorTesterImpl alloc] initWithContentsOfURL:url];
    }
    + (WeakMutableArrayMirrorTesterImpl *)arrayWithObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:+(WeakMutableArrayMirrorTesterImpl*)arrayWithObject:(id)object")
        return [[WeakMutableArrayMirrorTesterImpl alloc] initWithObjects:&object count:1];
    }
    + (WeakMutableArrayMirrorTesterImpl *)arrayWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:+(WeakMutableArrayMirrorTesterImpl*)arrayWithObjects:(id*)objects count:(Unsigned)count")
        return [[WeakMutableArrayMirrorTesterImpl alloc] initWithObjects:objects count:count];
    }
    - (constchar *)cdescription {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSString *)componentsJoinedByString:(NSString *)separator")

        return [__array componentsJoinedByString:separator];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(BOOL)containsObject:(id)object")
        return [__array containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (Unsigned)count {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)count")
        return [__array count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__array countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __array) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ v_errs = nil;

        __mutableArray = nil;

        __arrayObjectIndexes = nil;

        __array = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__array description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSString *)descriptionWithLocale:(id)locale")

        return [self.objects descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [self.objects descriptionWithLocale:locale indent:level];
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)didAddObject:(id)object withIndex:(Unsigned)index")

        /*i-950*/ // [self objectsMovedFromRange:NSMakeRange(index,__array.count-1-index) toLocation:index+1];
        [self doAddIndex : index forObject : object];

        /*i100*/ [arrayDelegate didAddObject:object withIndex:index];

        if (!__addingToMirrorArray) [self passFail:NO format:@"!!!ait did add while not adding\n"];
        [self add:-1 toWillAddCountForObject:object];
        __addingToMirrorArray--;
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)didRemoveObject:(id)object")



        /*i100*/[arrayDelegate didRemoveObject : object];

        if (!__removingFromMirrorArray) [self passFail:NO format:@"!!!ait did remove while not removing\n"];
        [self add:-1 toWillRemoveCountForObject:object];
        __removingFromMirrorArray--;
    }
    - (void)die {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)die")

        /*i900*/}
    - (void)doAddIndex:(Unsigned)index forObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)doAddIndex:(Unsigned)index forObject:(id)object")

        NSMutableIndexSet * indexes = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
        if (!indexes) {
            [__arrayObjectIndexes setObject:indexes = [NSMutableIndexSet indexSet] forWeakKey:object];
        }
        else if ([indexes containsIndex:index]) {
            [self passFail:NO format:@"!!!ai Index exists\n"]; ERR("a");
        }
        [indexes addIndex:index];
    }
    - (void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object")

        NSMutableIndexSet * indexes = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
        if (!indexes) {
            [self passFail:NO format:@"!!!ai Object not known (2)\n"]; ERR("a");
        }
        if (![indexes containsIndex:fromIndex]) {
            [self passFail:NO format:@"!!!ai Index doesn't exist (2)\n"]; ERR("a");
        }
        [indexes removeIndex:fromIndex];
        if ([indexes containsIndex:toIndex]) {
            [self passFail:NO format:@"!!!ai Index exists (2)\n"]; ERR("a");
        }
        [indexes addIndex:toIndex];
    }
    - (void)doRemoveIndex:(Unsigned)index forObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)doRemoveIndex:(Unsigned)index forObject:(id)object")

        NSMutableIndexSet * indexes = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
        if (!indexes) {
            [self passFail:NO format:@"!!!ai Object not known\n"]; ERR("a");
        }
        if (![indexes containsIndex:index]) {
            [self passFail:NO format:@"!!!ai Index doesn't exist\n"]; ERR("a");
        }
        if (indexes.count == 1) [__arrayObjectIndexes removeObjectForKey:(id < NSCopying >)object];
        else [indexes removeIndex:index];
    }
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)encodeWithCoder:(NSCoder*)coder")

        [__array encodeWithCoder : coder];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsAtIndexes : indexSet options : opts usingBlock : block];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSMutableString *)errs {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi")

        if (fromi != toi) {
            [__mutableArray exchangeObjectAtIndex:fromi withObjectAtIndex:toi];
            [self objectsSwappedWithIndex:fromi andIndex:toi];
            [self stateOK];
        }
    }
    - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate")

        return [self.objects filteredArrayUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        NSMutableIndexSet * toRemove = nil;
        Unsigned index = 0;
        for (NSObject *object in __array) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableIndexSet alloc] init];
                [toRemove addIndex:index];
            }
            index++;
        }
        if (toRemove) {
            [self _removeObjectsAtIndexes:toRemove];
            [self stateOK];
        }
    }
    - (id)firstObjectCommonWithArray:(NSArray *)array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(id)firstObjectCommonWithArray:(NSArray*)array")

        return [__array firstObjectCommonWithArray:array];
    }
    - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange")

        [__array getObjects : aBuffer range : aRange];
        if (weakObjectCount) for (Int i = aRange.length + aRange.location - 1; i >= aRange.location; i--) {
                aBuffer[i] = [aBuffer[i] strongSelf];
            }

    }
    - (Unsigned)hash {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSIndexSet*)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSIndexSet*)indexesOfObjectsPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsPassingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSIndexSet*)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsWithOptions:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp")

        return [__array indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp];
    }
    - (Unsigned)indexOfObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)indexOfObject:(id)object")

        return [__array indexOfObject:object];
    }
    - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)indexOfObject:(id)object inRange:(NSRange)range")

        return [__array indexOfObject:object inRange:range];
    }
    - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectIdenticalTo:(id)object")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf]],[__array indexOfObjectIdenticalTo:[object weakSelf]]);
        else return [__array indexOfObjectIdenticalTo:object];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf] inRange:range],[__array indexOfObjectIdenticalTo:[object weakSelf] inRange:range]);
        else return [__array indexOfObjectIdenticalTo:object inRange:range];
    }
    - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectPassingTest:predicate];
    }
    - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectWithOptions:opts passingTest:predicate];
    }
    - (WeakMutableArrayMirrorTesterImpl *)init {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(WeakMutableArrayMirrorTesterImpl*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] init];

        /*i11*/ [self _startObjectOfClassWeakMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableArrayMirrorTesterImpl *)initWithArray:(NSArray *)array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(WeakMutableArrayMirrorTesterImpl*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = (insertsWeakObjectsByDefault ? array.weakMutableCopy : [[NSMutableArray alloc] initWithArray:array]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableArrayMirrorTesterImpl *)initWithArray:(NSArray *)array copyItems:(BOOL)copy {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(WeakMutableArrayMirrorTesterImpl*)initWithArray:(NSArray*)array copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithArray:array copyItems:copy];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableArrayMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(WeakMutableArrayMirrorTesterImpl*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassWeakMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableArrayMirrorTesterImpl *)initWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(WeakMutableArrayMirrorTesterImpl*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableArrayMirrorTesterImpl *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(WeakMutableArrayMirrorTesterImpl*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableArrayMirrorTesterImpl *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(WeakMutableArrayMirrorTesterImpl*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableArrayMirrorTesterImpl *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(WeakMutableArrayMirrorTesterImpl*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableArrayMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (void)insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)insertObject:(id)object atIndex:(Unsigned)index")

        if ([self _insertObject:object atIndex:index]) [self stateOK];
    }
    - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        if ([self _insertObjects:objects atIndexes:indexes]) [self stateOK];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToArray:(NSArray *)array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(BOOL)isEqualToArray:(NSArray*)array")

        return [__array isEqualToArray:array];
    }
    - (id)lastObject {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(id)lastObject")
        return weakObjectCount ? [__array.lastObject strongSelf] : __array.lastObject;
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)makeObjectsPerformSelector:(SEL)selector")

        [__array makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")

        [__array makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (id)objectAtIndex:(Unsigned)index {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(id)objectAtIndex:(Unsigned)index")

        if (index >= __array.count) ERR( "Index %d is out of bounds [0,%d)",int(index),int(__array.count) );
        return weakObjectCount ? [__array[index] strongSelf] : __array[index];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSEnumerator*)objectEnumerator")
        return [__array objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objects {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray*)objects")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            Int i = 0;
            for (NSObject *o in __array) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : __array;
        }
        else {
            return __array;
        }
    }
    - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            NSArray *ret = [__array objectsAtIndexes:indexes];
            Int i = 0;
            for (NSObject *o in ret) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : ret;
        }
        else {
            return [__array objectsAtIndexes:indexes];
        }
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")



        for (Unsigned i = 0; i < fromRange.length; i++) {
            Unsigned j = (toLocation > fromRange.location ? fromRange.length - 1 - i : i);
            NSObject *object = [__array objectAtIndex:toLocation + j];
            [self doChangeIndex:fromRange.location + j toIndex:toLocation + j forObject:object];
        }

        /*i100*/ [arrayDelegate objectsMovedFromRange:fromRange toLocation:toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")



        NSObject * object1 = [__array objectAtIndex:toIndex];
        NSObject *object2 = [__array objectAtIndex:fromIndex];
        if (object1 != object2) {
            [self doChangeIndex:fromIndex toIndex:toIndex forObject:object1];
            [self doChangeIndex:toIndex toIndex:fromIndex forObject:object2];
        }

        /*i100*/ [arrayDelegate objectsSwappedWithIndex:fromIndex andIndex:toIndex];
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes")

        return [self.objects pathsMatchingExtensions:filterTypes];
    }
    - (void)removeAllObjects {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeLastObject {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removeLastObject")

        if (__array.count) [self removeObjectAtIndex:__array.count - 1];
    }
    - (void)removeObjectAtIndex:(Unsigned)index {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removeObjectAtIndex:(Unsigned)index")

        if ([self _removeObjectAtIndex:index]) [self stateOK];
    }
    - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removeObjectsAtIndexes:(NSIndexSet*)indexes")

        if ([self _removeObjectsAtIndexes:indexes]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer forKeyPath : keyPath context : context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath context : context];
    }
    - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if ([self _replaceObjectAtIndex:index withObject:object]) [self stateOK];
    }
    - (NSEnumerator *)reverseObjectEnumerator {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSEnumerator*)reverseObjectEnumerator")
        return [__array reverseObjectEnumerator];
    }
    - (void)set__arrayObjectIndexes:(NSMutableDictionary *)v {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)set__arrayObjectIndexes:(NSMutableDictionary*)v")

        /*i-905*/ if (__arrayObjectIndexes == v) return;

        /*i-900*/ {
            __arrayObjectIndexes = (id)v;
        }
    }
    - (void)setArray:(NSArray *)array {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)setArray:(NSArray*)array")

        NSIndexSet * inss,*dels;
        if (![Util getInsertsAndDeletesAsIndexSetWhenChanging:__array to:array inss:&inss dels:&dels]) return;

        [self _removeObjectsAtIndexes:dels];
        NSArray *objs = [array objectsAtIndexes:inss];
        [self _insertObjects:objs atIndexes:inss];
        [self stateOK];
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)setValue:(id)value forKey:(NSString *)key")

        [__array setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setArray:__array.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setArray:__array.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("WeakMutableArrayMirrorTesterImpl:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSData *)sortedArrayHint {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSData*)sortedArrayHint")

        return [__array sortedArrayHint];
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayUsingComparator:cmptr];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors")

        return [self.objects sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context")

        return [self.objects sortedArrayUsingFunction:comparator context:context];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint")

        return [self.objects sortedArrayUsingFunction:comparator context:context hint:hint];
    }
    - (NSArray *)sortedArrayUsingSelector:(SEL)selector {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray*)sortedArrayUsingSelector:(SEL)selector")

        return [self.objects sortedArrayUsingSelector:selector];
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayWithOptions:opts usingComparator:cmptr];
    }
    - (void)sortUsingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)sortUsingComparator:(NSComparator)cmptr")

        [__mutableArray sortUsingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)sortUsingDescriptors:(NSArray*)sortDescriptors")

        [__mutableArray sortUsingDescriptors : sortDescriptors];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)sortUsingFunction:(Int (*)(id, id, void *))compare context:(void *)context")

        [__mutableArray sortUsingFunction : compare context : context];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingSelector:(SEL)selector {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)sortUsingSelector:(SEL)selector")

        [__mutableArray sortUsingSelector : selector];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        [__mutableArray sortWithOptions : opts usingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)stateOK {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ array_count = 0;
        for (id o in __array) {
            array_objects.ids[array_count++] = (__bridge void *)o;
            if (array_count == 100) break;
        }
        memset( array_objects.ids + array_count,0,sizeof(array_objects.ids[0]) * (100 - array_count) );
        array_count = __array.count;




        if (__addingToMirrorArray) [self passFail:NO format:@"!!!ait adding when state ok\n"];
        if (__removingFromMirrorArray) [self passFail:NO format:@"!!!ait removing when state ok\n"];
        [self verifyMirrorArray];

        /*i100*/ [arrayDelegate stateOK];
    }
    - (NSArray *)subarrayWithRange:(NSRange)r {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(NSArray*)subarrayWithRange:(NSRange)r")

        return [self.objects subarrayWithRange:r];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(id)valueForKey:(NSString*)key")

        return [__array valueForKey:key];
    }
    - (void)verifyMirrorArray {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)verifyMirrorArray")

        Int c = 0;
        for (PointerKey *key in __arrayObjectIndexes) {
            c += ( (NSIndexSet *)[__arrayObjectIndexes objectForKey:key] ).count;
        }
        if (c != __array.count) {
            [self passFail:NO format:@"!!!ait count mismatch\n"];
        }
        else {
            Unsigned index = 0;
            for (NSObject *object in __array) {
                NSIndexSet *indexesv = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
                if (!indexesv) [self passFail:NO format:@"!!!ait Object not known\n"];
                if (![indexesv containsIndex:index]) [self passFail:NO format:@"!!!ait Index doesn't exist\n"];
                index++;
            }
        }
    }
    - (CollectionWeakness)weakness {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)willAddObject:(id)object withIndex:(Unsigned)index")



        /*i100*/[arrayDelegate willAddObject : object withIndex : index];

        __addingToMirrorArray++;
        [self add:1 toWillAddCountForObject:object];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")




        /*i100*/[arrayDelegate willRemoveObject : object fromIndex : index];

        [self add:1 toWillRemoveCountForObject:object];
        __removingFromMirrorArray++;

/*i950*/ [self doRemoveIndex:index forObject:object];
        // [self objectsMovedFromRange:NSMakeRange(index+1,__array.count-1-index) toLocation:index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [self.objects writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("WeakMutableArrayMirrorTesterImpl:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [self.objects writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
