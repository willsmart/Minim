// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 2 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D0





        @interface Globals : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_Globals; @protected
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        - (void)_startObjectOfClassGlobals;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (NSMutableString *)objectName;

        @end





        @interface NSData (winterface)


        - (NSData *)sendAsBodyOfPOSTRequestWithURL:(NSURL *)url returningResponse:(NSURLResponse *__strong *)retresponse error:(NSError *__strong *)reterr;

        @end





        @interface NSMutableArray (winterface)


        - (void)addObject:(id)anObject weak:(bool)weakObject;
        - (void)addWeakObject:(id)anObject;
        - (void)insertObject:(id)anObject weak:(bool)weakObject atIndex:(Unsigned)index;
        - (void)insertWeakObject:(id)anObject atIndex:(Unsigned)index;
        - (void)mergeWith:(NSObject *)other;
        - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)anObject weak:(bool)weakObject;
        - (void)replaceObjectAtIndex:(Unsigned)index withWeakObject:(id)anObject;

        @end





        @interface NSMutableDictionary (winterface)


        - (void)mergeWith:(NSObject *)other;
        - (void)setObject:(id)anObject forPointerKey:(id)aKeyo;
        - (void)setObject:(id)anObject forWeakKey:(id)aKeyo;
        - (void)setObject:(id)anObject weak:(bool)weakObject forKey:(id)aKeyo weak:(bool)weakKey pointer:(bool)pointerKey;
        - (void)setWeakObject:(id)anObject forKey:(id)aKeyo;
        - (void)setWeakObject:(id)anObject forPointerKey:(id)aKeyo;
        - (void)setWeakObject:(id)anObject forWeakKey:(id)aKeyo;

        @end





        @interface NSMutableSet (winterface)


        - (void)addObject:(id)anObject weak:(bool)weakObject;
        - (void)addWeakObject:(id)anObject;
        - (void)mergeWith:(NSObject *)other;

        @end





        @interface NSMutableString (winterface)


        - (NSMutableString *)applyRegexes:(NSObject *)regexesArrayOrDictionary;
        - (void)match:(NSRegularExpression *)regex replace:(NSUInteger)count withString:(NSString *)replaceStr;

        @end





        @interface NSNull (winterface)


        @property (nonatomic,readonly) NSObject *asValidJsonObject;
        - (NSObject *)asValidJsonObject;

        @end





        @interface NSNumber (winterface)


        @property (nonatomic,readonly) NSObject *asValidJsonObject;
        - (NSObject *)asValidJsonObject;

        @end





        @interface WIVarArg : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIVarArg; @protected
            NSString *v_arg;
            bool debugAutorelease;
            bool isZombie;
            NSString *v_name;
            LL objectIDInClass;
            LL objectIDInTotal;
            Endpoint1 *v_type_endpoint;
            Endpoint1 *v_var_endpoint;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readwrite) NSString *arg;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) WIFile *file;
        @property (nonatomic,readwrite) NSIndexSet *indexesInVar;
        @property (nonatomic,readwrite) Unsigned indexInVar;
        @property (nonatomic,readonly) bool isZombie;
        @property (strong,nonatomic,readwrite) NSString *name;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) WIType *type;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *type_endpoint;
        @property (nonatomic,readwrite) WIVar *var;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *var_endpoint;
        - (void)_startObjectOfClassWIVarArg;
        - (NSString *)arg;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (WIVarArg *)copyByApplyingRegexes:(NSArray *)regexes;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (WIFile *)file;
        - (NSIndexSet *)indexesInVar;
        - (Unsigned)indexInVar;
        - (WIVarArg *)init;
        - (NSNumber *)isAcceptableType:(id)atype;
        - (NSNumber *)isAcceptableVar:(id)avar;
        - (NSString *)name;
        - (NSMutableString *)objectName;
        - (void)retract;
        - (void)setArg:(NSString *)v;
        - (void)setIndexesInVar:(NSIndexSet *)v;
        - (void)setIndexInVar:(Unsigned)v;
        - (void)setName:(NSString *)v;
        - (void)setType:(WIType *)v;
        - (void)setType_endpoint:(Endpoint1 *)v;
        - (void)setVar:(WIVar *)v;
        - (void)setVar_endpoint:(Endpoint1 *)v;
        - (WIType *)type;
        - (Endpoint1 *)type_endpoint;
        - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype;
        - (WIVar *)var;
        - (Endpoint1 *)var_endpoint;
        - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar;

        @end
    #endif // INCLUDE_IFACE_D0

    #ifdef INCLUDE_IFACE_D1





        @interface NSArray (winterface)


        @property (nonatomic,readonly) NSObject *asValidJsonObject;
        @property (nonatomic,readonly) NSString *jsonString;
        - (NSArray *)arrayByApplyingRegexes:(NSObject *)regexes;
        - (NSArray *)asStrong;
        - (NSObject *)asValidJsonObject;
        - (NSArray *)asWeak;
        - (NSArray *)copyWithWeakness:(CollectionWeakness)weakness;
        - (id)derefedObjectAtIndex:(Unsigned)index;
        - (NSString *)jsonString;
        - (NSMutableArray *)mutableCopyWithWeakness:(CollectionWeakness)weakness;
        - (NSArray *)strongCopy;
        - (NSMutableArray *)strongMutableCopy;
        - (NSArray *)weakCopy;
        - (NSMutableArray *)weakMutableCopy;
        - (CollectionWeakness)weakness;
        - (NSArray *)withWeakness:(CollectionWeakness)weakness;

        @end





        @interface NSDictionary (winterface)


        @property (nonatomic,readonly) NSObject *asValidJsonObject;
        @property (nonatomic,readonly) NSString *jsonString;
        - (NSDictionary *)asStrong;
        - (NSObject *)asValidJsonObject;
        - (NSDictionary *)asWeak;
        - (NSDictionary *)copyWithWeakness:(CollectionWeakness)weakness;
        - (id)derefedObjectForKey:(id)key;
        - (NSDictionary *)dictionaryByApplyingRegexes:(NSObject *)regexes;
        - (NSString *)jsonString;
        - (NSMutableDictionary *)mutableCopyWithWeakness:(CollectionWeakness)weakness;
        - (NSDictionary *)strongCopy;
        - (NSMutableDictionary *)strongMutableCopy;
        - (NSDictionary *)weakCopy;
        - (NSMutableDictionary *)weakMutableCopy;
        - (CollectionWeakness)weakness;
        - (NSDictionary *)withWeakness:(CollectionWeakness)weakness;

        @end





        @interface NSSet (winterface)


        @property (nonatomic,readonly) NSObject *asValidJsonObject;
        @property (nonatomic,readonly) NSString *jsonString;
        - (NSSet *)asStrong;
        - (NSObject *)asValidJsonObject;
        - (NSSet *)asWeak;
        - (NSSet *)copyWithWeakness:(CollectionWeakness)weakness;
        - (NSString *)jsonString;
        - (NSMutableSet *)mutableCopyWithWeakness:(CollectionWeakness)weakness;
        - (NSSet *)setByApplyingRegexes:(NSObject *)regexes;
        - (NSSet *)strongCopy;
        - (NSMutableSet *)strongMutableCopy;
        - (NSSet *)weakCopy;
        - (NSMutableSet *)weakMutableCopy;
        - (CollectionWeakness)weakness;
        - (NSSet *)withWeakness:(CollectionWeakness)weakness;

        @end





        @interface WIBody : NSObject<ClassObject, Object, Treeable> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIBody; @protected
            bool debugAutorelease;
            Endpoint1 *v_defaultValueForVar_endpoint;
            Endpoint1 *v_getterForVar_endpoint;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            Endpoint1 *v_setterForVar_endpoint;
            EndpointD *v_snippets;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSDictionary *asD3Tree;
        @property (nonatomic,readonly) NSString *asD3TreeJSON;
        @property (nonatomic,readonly) NSDictionary *asTree;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readwrite) WIVar *defaultValueForVar;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *defaultValueForVar_endpoint;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptiveName;
        @property (nonatomic,readwrite) WIVar *getterForVar;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *getterForVar_endpoint;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) kid keyInSetterForVar;
        @property (nonatomic,readwrite) NSSet *keysInSetterForVar;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSDictionary *seenTreeNodeData;
        @property (nonatomic,readwrite) WIVar *setterForVar;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *setterForVar_endpoint;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *snippets;
        @property (nonatomic,readonly) NSDictionary *treeNodeData;
        @property (nonatomic,readonly) NSSet *treePropertyNames;
        @property (nonatomic,readonly) NSSet *treeSingleNodePropertyNames;
        - (void)_startObjectOfClassWIBody;
        - (WIBody *)applyRegexes:(NSArray *)regexes to:(WIVar *)tov;
        - (NSDictionary *)asD3Tree;
        - (NSString *)asD3TreeJSON;
        - (NSDictionary *)asTree;
        - (NSMutableDictionary *)asTree:(NSMutableSet *)seen;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (WIVar *)defaultValueForVar;
        - (Endpoint1 *)defaultValueForVar_endpoint;
        - (NSObject<LinkEndpoint> *)defaultValueForVarToEndpoint:(id)adefaultValueForVar;
        - (NSString *)description;
        - (NSString *)descriptiveName;
        - (void)die;
        - (WIVar *)getterForVar;
        - (Endpoint1 *)getterForVar_endpoint;
        - (NSObject<LinkEndpoint> *)getterForVarToEndpoint:(id)agetterForVar;
        - (void)incorporateBody:(NSString *)body;
        - (WIBody *)init;
        - (NSNumber *)isAcceptableDefaultValueForVar:(id)adefaultValueForVar;
        - (NSNumber *)isAcceptableGetterForVar:(id)agetterForVar;
        - (NSNumber *)isAcceptableSetterForVar:(id)asetterForVar;
        - (NSNumber *)isAcceptableSnippet:(id)asnippet;
        - (kid)keyInSetterForVar;
        - (NSSet *)keysInSetterForVar;
        - (void)mergeWith:(WIBody *)other;
        - (NSMutableString *)objectName;
        - (void)removeAllSnippets;
        - (void)removeSnippetForKey:(id<NSCopying> )key;
        - (void)retract;
        - (NSDictionary *)seenTreeNodeData;
        - (void)setDefaultValueForVar:(WIVar *)v;
        - (void)setDefaultValueForVar_endpoint:(Endpoint1 *)v;
        - (void)setGetterForVar:(WIVar *)v;
        - (void)setGetterForVar_endpoint:(Endpoint1 *)v;
        - (void)setKeyInSetterForVar:(kid)v;
        - (void)setKeysInSetterForVar:(NSSet *)v;
        - (void)setSetterForVar:(WIVar *)v;
        - (void)setSetterForVar_endpoint:(Endpoint1 *)v;
        - (void)setSnippet:(id)v forKey:(id<NSCopying> )key;
        - (void)setSnippets:(EndpointD *)v;
        - (WIVar *)setterForVar;
        - (Endpoint1 *)setterForVar_endpoint;
        - (NSObject<LinkEndpoint> *)setterForVarToEndpoint:(id)asetterForVar;
        - (WIBodySnippet *)snippetAtOrdinal:(int)ordinal;
        - (WIBodySnippet *)snippetForKey:(id<NSCopying> )key;
        - (EndpointD *)snippets;
        - (NSObject<LinkEndpoint> *)snippetToEndpoint:(id)asnippet;
        + (NSRegularExpression *)splitterRegex;
        - (NSDictionary *)treeNodeData;
        - (NSSet *)treePropertyNames;
        - (NSSet *)treeSingleNodePropertyNames;

        @end





        @interface WIBodySnippet : NSObject<ClassObject, Object, Treeable> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIBodySnippet; @protected
            Endpoint1 *v_body_endpoint;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            MutableSet *v_strings;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSDictionary *asD3Tree;
        @property (nonatomic,readonly) NSString *asD3TreeJSON;
        @property (nonatomic,readonly) NSDictionary *asTree;
        @property (nonatomic,readwrite) WIBody *body;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *body_endpoint;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) kid keyInBody;
        @property (nonatomic,readwrite) NSSet *keysInBody;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSDictionary *seenTreeNodeData;
        @property (strong,nonatomic,readwrite) MutableSet *strings;
        @property (nonatomic,readonly) NSDictionary *treeNodeData;
        @property (nonatomic,readonly) NSSet *treePropertyNames;
        @property (nonatomic,readonly) NSSet *treeSingleNodePropertyNames;
        - (void)_startObjectOfClassWIBodySnippet;
        - (WIBodySnippet *)applyRegexes:(NSArray *)regexes to:(WIBody *)tob;
        - (NSDictionary *)asD3Tree;
        - (NSString *)asD3TreeJSON;
        - (NSDictionary *)asTree;
        - (NSMutableDictionary *)asTree:(NSMutableSet *)seen;
        - (WIBody *)body;
        - (Endpoint1 *)body_endpoint;
        - (NSObject<LinkEndpoint> *)bodyToEndpoint:(id)abody;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (WIBodySnippet *)init;
        - (NSNumber *)isAcceptableBody:(id)abody;
        - (kid)keyInBody;
        - (NSSet *)keysInBody;
        - (void)mergeWith:(WIBodySnippet *)other;
        - (NSMutableString *)objectName;
        - (void)retract;
        - (NSDictionary *)seenTreeNodeData;
        - (void)setBody:(WIBody *)v;
        - (void)setBody_endpoint:(Endpoint1 *)v;
        - (void)setKeyInBody:(kid)v;
        - (void)setKeysInBody:(NSSet *)v;
        - (void)setStrings:(MutableSet *)v;
        - (MutableSet *)strings;
        - (NSDictionary *)treeNodeData;
        - (NSSet *)treePropertyNames;
        - (NSSet *)treeSingleNodePropertyNames;

        @end





        @interface WIClass : NSObject<ClassObject, Object, Treeable> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIClass; @protected
            Endpoint1 *v_classInCtxt_endpoint;
            EndpointS *v_conformedProtocols;
            EndpointS *v_conformingClasss;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            Endpoint1 *v_protocolInCtxt_endpoint;
            MutableDictionary *v_settings;
            EndpointS *v_subclasss;
            EndpointS *v_subprotocols;
            EndpointS *v_superclasss;
            EndpointS *v_superprotocols;
            EndpointD *v_types;
            EndpointD *v_varCtxts;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSDictionary *asD3Tree;
        @property (nonatomic,readonly) NSString *asD3TreeJSON;
        @property (nonatomic,readonly) NSDictionary *asTree;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readwrite) WICtxt *classInCtxt;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *classInCtxt_endpoint;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *conformedProtocols;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *conformingClasss;
        @property (nonatomic,readonly) WICtxt *context;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptiveName;
        @property (nonatomic,readonly) WIFile *file;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) kid keyInClassInCtxt;
        @property (nonatomic,readwrite) kid keyInProtocolInCtxt;
        @property (nonatomic,readwrite) NSSet *keysInClassInCtxt;
        @property (nonatomic,readwrite) NSSet *keysInProtocolInCtxt;
        @property (nonatomic,readonly) NSString *name;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) WICtxt *protocolInCtxt;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *protocolInCtxt_endpoint;
        @property (nonatomic,readonly) NSDictionary *seenTreeNodeData;
        @property (strong,nonatomic,readwrite) MutableDictionary *settings;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *subclasss;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *subprotocols;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *superclasss;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *superprotocols;
        @property (nonatomic,readonly) NSDictionary *treeNodeData;
        @property (nonatomic,readonly) NSSet *treePropertyNames;
        @property (nonatomic,readonly) NSSet *treeSingleNodePropertyNames;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *types;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *varCtxts;
        - (void)_startObjectOfClassWIClass;
        - (void)addConformedProtocol:(WIClass *)v;
        - (void)addConformingClass:(WIClass *)v;
        - (void)addSubclass:(WIClass *)v;
        - (void)addSubprotocol:(WIClass *)v;
        - (void)addSuperclass:(WIClass *)v;
        - (void)addSuperprotocol:(WIClass *)v;
        - (void)applyConformedProtocolRegexes;
        - (WIClass *)applyRegexes;
        - (NSDictionary *)asD3Tree;
        - (NSString *)asD3TreeJSON;
        - (NSDictionary *)asTree;
        - (NSMutableDictionary *)asTree:(NSMutableSet *)seen;
        - (constchar *)cdescription;
        - (WICtxt *)classInCtxt;
        - (Endpoint1 *)classInCtxt_endpoint;
        - (NSObject<LinkEndpoint> *)classInCtxtToEndpoint:(id)aclassInCtxt;
        - (constchar *)cobjectName;
        - (EndpointS *)conformedProtocols;
        - (NSObject<LinkEndpoint> *)conformedProtocolToEndpoint:(id)aconformedProtocol;
        - (EndpointS *)conformingClasss;
        - (NSObject<LinkEndpoint> *)conformingClassToEndpoint:(id)aconformingClass;
        - (WICtxt *)context;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptiveName;
        - (void)die;
        - (WIType *)equivTypeTo:(WIType *)other;
        - (WIVarContext *)equivVarContextTo:(WIVarContext *)other;
        - (WIVar *)equivVarTo:(WIVar *)other;
        - (WIFile *)file;
        - (WIClass *)init;
        - (NSNumber *)isAcceptableClassInCtxt:(id)aclassInCtxt;
        - (NSNumber *)isAcceptableConformedProtocol:(id)aconformedProtocol;
        - (NSNumber *)isAcceptableConformingClass:(id)aconformingClass;
        - (NSNumber *)isAcceptableProtocolInCtxt:(id)aprotocolInCtxt;
        - (NSNumber *)isAcceptableSubclass:(id)asubclass;
        - (NSNumber *)isAcceptableSubprotocol:(id)asubprotocol;
        - (NSNumber *)isAcceptableSuperclass:(id)asuperclass;
        - (NSNumber *)isAcceptableSuperprotocol:(id)asuperprotocol;
        - (NSNumber *)isAcceptableType:(id)atype;
        - (NSNumber *)isAcceptableVarCtxt:(id)avarCtxt;
        - (kid)keyInClassInCtxt;
        - (kid)keyInProtocolInCtxt;
        - (NSSet *)keysInClassInCtxt;
        - (NSSet *)keysInProtocolInCtxt;
        - (void)mergeWith:(WIClass *)other;
        - (NSString *)name;
        - (NSMutableString *)objectName;
        #ifndef __SWIFT__
            - (void)process:(Token *)token regexes:(NSMutableArray *)regexes settings:(NSSet *)settings doingInitialSettings:(bool &)doingInitialSettings outerClass:(WIClass *)outerClass outerLinkType:(NSString *)outerLinkType outerLinkVar:(WIVar *)outerLinkVar mods:(NSArray *)mods;
        #endif // __SWIFT__
        - (WICtxt *)protocolInCtxt;
        - (Endpoint1 *)protocolInCtxt_endpoint;
        - (NSObject<LinkEndpoint> *)protocolInCtxtToEndpoint:(id)aprotocolInCtxt;
        - (void)removeAllConformedProtocols;
        - (void)removeAllConformingClasss;
        - (void)removeAllSubclasss;
        - (void)removeAllSubprotocols;
        - (void)removeAllSuperclasss;
        - (void)removeAllSuperprotocols;
        - (void)removeAllTypes;
        - (void)removeAllVarCtxts;
        - (void)removeConformedProtocol:(WIClass *)v;
        - (void)removeConformingClass:(WIClass *)v;
        - (void)removeSubclass:(WIClass *)v;
        - (void)removeSubprotocol:(WIClass *)v;
        - (void)removeSuperclass:(WIClass *)v;
        - (void)removeSuperprotocol:(WIClass *)v;
        - (void)removeTypeForKey:(id<NSCopying> )key;
        - (void)removeVarCtxtForKey:(id<NSCopying> )key;
        - (void)retract;
        - (NSDictionary *)seenTreeNodeData;
        - (void)setClassInCtxt:(WICtxt *)v;
        - (void)setClassInCtxt_endpoint:(Endpoint1 *)v;
        - (void)setConformedProtocols:(EndpointS *)v;
        - (void)setConformingClasss:(EndpointS *)v;
        - (void)setKeyInClassInCtxt:(kid)v;
        - (void)setKeyInProtocolInCtxt:(kid)v;
        - (void)setKeysInClassInCtxt:(NSSet *)v;
        - (void)setKeysInProtocolInCtxt:(NSSet *)v;
        - (void)setProtocolInCtxt:(WICtxt *)v;
        - (void)setProtocolInCtxt_endpoint:(Endpoint1 *)v;
        - (void)setSettings:(MutableDictionary *)v;
        - (void)setSubclasss:(EndpointS *)v;
        - (void)setSubprotocols:(EndpointS *)v;
        - (void)setSuperclasss:(EndpointS *)v;
        - (void)setSuperprotocols:(EndpointS *)v;
        - (MutableDictionary *)settings;
        - (void)setType:(id)v forKey:(id<NSCopying> )key;
        - (void)setTypes:(EndpointD *)v;
        - (void)setVarCtxt:(id)v forKey:(id<NSCopying> )key;
        - (void)setVarCtxts:(EndpointD *)v;
        - (EndpointS *)subclasss;
        - (NSObject<LinkEndpoint> *)subclassToEndpoint:(id)asubclass;
        - (EndpointS *)subprotocols;
        - (NSObject<LinkEndpoint> *)subprotocolToEndpoint:(id)asubprotocol;
        - (EndpointS *)superclasss;
        - (NSObject<LinkEndpoint> *)superclassToEndpoint:(id)asuperclass;
        - (EndpointS *)superprotocols;
        - (NSObject<LinkEndpoint> *)superprotocolToEndpoint:(id)asuperprotocol;
        - (NSDictionary *)treeNodeData;
        - (NSSet *)treePropertyNames;
        - (NSSet *)treeSingleNodePropertyNames;
        - (WIType *)typeForKey:(id<NSCopying> )key;
        - (EndpointD *)types;
        - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype;
        - (WIType *)typeWithModifiers:(NSArray *)mods;
        - (WIVarContext *)varCtxtForKey:(id<NSCopying> )key;
        - (EndpointD *)varCtxts;
        - (NSObject<LinkEndpoint> *)varCtxtToEndpoint:(id)avarCtxt;
        - (WIVarContext *)varCtxtWithSettings:(NSSet *)settings;

        @end





        @interface WICtxt : NSObject<ClassObject, Object, Treeable> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WICtxt; @protected
            EndpointD *v_clazzs;
            bool debugAutorelease;
            Endpoint1 *v_file_endpoint;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            EndpointD *v_protocols;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSDictionary *asD3Tree;
        @property (nonatomic,readonly) NSString *asD3TreeJSON;
        @property (nonatomic,readonly) NSDictionary *asTree;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *clazzs;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) WIFile *file;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *file_endpoint;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) kid keyInFile;
        @property (nonatomic,readwrite) NSSet *keysInFile;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *protocols;
        @property (nonatomic,readonly) NSDictionary *seenTreeNodeData;
        @property (nonatomic,readonly) NSDictionary *treeNodeData;
        @property (nonatomic,readonly) NSSet *treePropertyNames;
        @property (nonatomic,readonly) NSSet *treeSingleNodePropertyNames;
        - (void)_startObjectOfClassWICtxt;
        - (void)applyConformedProtocolRegexes;
        - (void)applyRegexes;
        - (NSDictionary *)asD3Tree;
        - (NSString *)asD3TreeJSON;
        - (NSDictionary *)asTree;
        - (NSMutableDictionary *)asTree:(NSMutableSet *)seen;
        - (constchar *)cdescription;
        - (WIClass *)classWithName:(NSString *)name;
        - (WIClass *)clazzForKey:(id<NSCopying> )key;
        - (EndpointD *)clazzs;
        - (NSObject<LinkEndpoint> *)clazzToEndpoint:(id)aclazz;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (WIClass *)equivClassTo:(WIClass *)other;
        - (WIType *)equivTypeTo:(WIType *)other;
        - (WIVarContext *)equivVarContextTo:(WIVarContext *)other;
        - (WIVar *)equivVarTo:(WIVar *)other;
        - (WIFile *)file;
        - (Endpoint1 *)file_endpoint;
        - (NSObject<LinkEndpoint> *)fileToEndpoint:(id)afile;
        - (WICtxt *)init;
        - (NSNumber *)isAcceptableClazz:(id)aclazz;
        - (NSNumber *)isAcceptableFile:(id)afile;
        - (NSNumber *)isAcceptableProtocol:(id)aprotocol;
        - (kid)keyInFile;
        - (NSSet *)keysInFile;
        - (void)mergeWith:(WICtxt *)other;
        - (NSMutableString *)objectName;
        - (void)process:(Token *)token regexes:(NSMutableArray *)regexes settings:(NSSet *)settings outerClass:(WIClass *)outerClass outerLinkType:(NSString *)outerLinkType outerLinkVar:(WIVar *)outerLinkVar mods:(NSArray *)mods;
        - (WIClass *)protocolForKey:(id<NSCopying> )key;
        - (EndpointD *)protocols;
        - (NSObject<LinkEndpoint> *)protocolToEndpoint:(id)aprotocol;
        - (WIClass *)protocolWithName:(NSString *)name;
        - (void)removeAllClazzs;
        - (void)removeAllProtocols;
        - (void)removeClazzForKey:(id<NSCopying> )key;
        - (void)removeProtocolForKey:(id<NSCopying> )key;
        - (void)retract;
        - (NSDictionary *)seenTreeNodeData;
        - (void)setClazz:(id)v forKey:(id<NSCopying> )key;
        - (void)setClazzs:(EndpointD *)v;
        - (void)setFile:(WIFile *)v;
        - (void)setFile_endpoint:(Endpoint1 *)v;
        - (void)setKeyInFile:(kid)v;
        - (void)setKeysInFile:(NSSet *)v;
        - (void)setProtocol:(id)v forKey:(id<NSCopying> )key;
        - (void)setProtocols:(EndpointD *)v;
        - (NSDictionary *)treeNodeData;
        - (NSSet *)treePropertyNames;
        - (NSSet *)treeSingleNodePropertyNames;

        @end





        @interface WIFile : NSObject<ClassObject, Object, Treeable> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIFile; @protected
            EndpointD *v_ctxts;
            bool debugAutorelease;
            PartiallyOrderedSet *v_includesSet;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            MutableDictionary *v_settings;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSDictionary *asD3Tree;
        @property (nonatomic,readonly) NSString *asD3TreeJSON;
        @property (nonatomic,readonly) NSDictionary *asTree;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *ctxts;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSArray *includes;
        @property (strong,nonatomic,readwrite) PartiallyOrderedSet *includesSet;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSDictionary *seenTreeNodeData;
        @property (strong,nonatomic,readwrite) MutableDictionary *settings;
        @property (nonatomic,readonly) NSDictionary *treeNodeData;
        @property (nonatomic,readonly) NSSet *treePropertyNames;
        @property (nonatomic,readonly) NSSet *treeSingleNodePropertyNames;
        - (void)_startObjectOfClassWIFile;
        - (void)applyConformedProtocolRegexes;
        - (void)applyRegexes;
        - (NSDictionary *)asD3Tree;
        - (NSString *)asD3TreeJSON;
        - (NSDictionary *)asTree;
        - (NSMutableDictionary *)asTree:(NSMutableSet *)seen;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (WICtxt *)contextWithRegexes:(NSArray *)regexes;
        - (WICtxt *)ctxtForKey:(id<NSCopying> )key;
        - (EndpointD *)ctxts;
        - (NSObject<LinkEndpoint> *)ctxtToEndpoint:(id)actxt;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (WIClass *)equivClassTo:(WIClass *)other;
        - (WICtxt *)equivContextTo:(WICtxt *)other;
        - (WIType *)equivTypeTo:(WIType *)other;
        - (WIVarContext *)equivVarContextTo:(WIVarContext *)other;
        - (WIVar *)equivVarTo:(WIVar *)other;
        - (NSArray *)includes;
        - (PartiallyOrderedSet *)includesSet;
        - (WIFile *)init;
        - (NSNumber *)isAcceptableCtxt:(id)actxt;
        - (void)mergeWith:(WIFile *)other;
        - (NSMutableString *)objectName;
        - (void)process:(NSArray *)tokens;
        - (void)process:(Token *)token regexes:(NSMutableArray *)regexes settings:(NSSet *)settings;
        - (void)removeAllCtxts;
        - (void)removeCtxtForKey:(id<NSCopying> )key;
        - (void)retract;
        - (NSDictionary *)seenTreeNodeData;
        - (void)setCtxt:(id)v forKey:(id<NSCopying> )key;
        - (void)setCtxts:(EndpointD *)v;
        - (void)setIncludesSet:(PartiallyOrderedSet *)v;
        - (void)setSettings:(MutableDictionary *)v;
        - (MutableDictionary *)settings;
        - (NSDictionary *)treeNodeData;
        - (NSSet *)treePropertyNames;
        - (NSSet *)treeSingleNodePropertyNames;

        @end





        @interface WIType : NSObject<ClassObject, Object, Treeable> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIType; @protected
            EndpointS *v_args;
            Endpoint1 *v_clazz_endpoint;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            EndpointS *v_vars;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *args;
        @property (nonatomic,readonly) NSDictionary *asD3Tree;
        @property (nonatomic,readonly) NSString *asD3TreeJSON;
        @property (nonatomic,readonly) NSDictionary *asTree;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readwrite) WIClass *clazz;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *clazz_endpoint;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptiveName;
        @property (nonatomic,readonly) WIFile *file;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) kid keyInClazz;
        @property (nonatomic,readwrite) NSSet *keysInClazz;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSDictionary *seenTreeNodeData;
        @property (nonatomic,readonly) NSDictionary *treeNodeData;
        @property (nonatomic,readonly) NSSet *treePropertyNames;
        @property (nonatomic,readonly) NSSet *treeSingleNodePropertyNames;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *vars;
        - (void)_startObjectOfClassWIType;
        - (void)addArg:(WIVarArg *)v;
        - (void)addVar:(WIVar *)v;
        - (WIType *)applyRegexes:(NSArray *)regexes;
        - (EndpointS *)args;
        - (NSObject<LinkEndpoint> *)argToEndpoint:(id)aarg;
        - (NSDictionary *)asD3Tree;
        - (NSString *)asD3TreeJSON;
        - (NSDictionary *)asTree;
        - (NSMutableDictionary *)asTree:(NSMutableSet *)seen;
        - (constchar *)cdescription;
        - (WIClass *)clazz;
        - (Endpoint1 *)clazz_endpoint;
        - (NSObject<LinkEndpoint> *)clazzToEndpoint:(id)aclazz;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptiveName;
        - (void)die;
        - (WIFile *)file;
        - (WIType *)init;
        - (NSNumber *)isAcceptableArg:(id)aarg;
        - (NSNumber *)isAcceptableClazz:(id)aclazz;
        - (NSNumber *)isAcceptableVar:(id)avar;
        - (kid)keyInClazz;
        - (NSSet *)keysInClazz;
        - (void)mergeWith:(WIType *)other;
        - (NSMutableString *)objectName;
        - (void)removeAllArgs;
        - (void)removeAllVars;
        - (void)removeArg:(WIVarArg *)v;
        - (void)removeVar:(WIVar *)v;
        - (void)retract;
        - (NSDictionary *)seenTreeNodeData;
        - (void)setArgs:(EndpointS *)v;
        - (void)setClazz:(WIClass *)v;
        - (void)setClazz_endpoint:(Endpoint1 *)v;
        - (void)setKeyInClazz:(kid)v;
        - (void)setKeysInClazz:(NSSet *)v;
        - (void)setVars:(EndpointS *)v;
        - (NSDictionary *)treeNodeData;
        - (NSSet *)treePropertyNames;
        - (NSSet *)treeSingleNodePropertyNames;
        - (EndpointS *)vars;
        - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar;

        @end





        @interface WIVar : NSObject<ClassObject, Object, Treeable> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIVar; @protected
            EndpointA *v_args;
            EndpointS *v_atomicVars;
            NSString *v_bindingType;
            WIVar *v_boundTo;
            Endpoint1 *v_context_endpoint;
            bool debugAutorelease;
            Endpoint1 *v_defaultValue_endpoint;
            EndpointS *v_fluidVars;
            Endpoint1 *v_getter_endpoint;
            bool isZombie;
            NSString *v_name;
            LL objectIDInClass;
            LL objectIDInTotal;
            EndpointD *v_setters;
            MutableDictionary *v_settings;
            Endpoint1 *v_type_endpoint;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointA *args;
        @property (nonatomic,readonly) NSDictionary *asD3Tree;
        @property (nonatomic,readonly) NSString *asD3TreeJSON;
        @property (nonatomic,readonly) NSDictionary *asTree;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *atomicVars;
        @property (strong,nonatomic,readwrite) NSString *bindingType;
        @property (strong,nonatomic,readwrite) WIVar *boundTo;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) WIVarContext *context;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *context_endpoint;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readwrite) WIBody *defaultValue;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *defaultValue_endpoint;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptiveName;
        @property (nonatomic,readonly) WIFile *file;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *fluidVars;
        @property (nonatomic,readwrite) WIBody *getter;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *getter_endpoint;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) kid keyInContext;
        @property (nonatomic,readwrite) NSSet *keysInContext;
        @property (strong,nonatomic,readwrite) NSString *name;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSDictionary *seenTreeNodeData;
        @property (nonatomic,readonly) NSString *selectorString;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *setters;
        @property (strong,nonatomic,readwrite) MutableDictionary *settings;
        @property (nonatomic,readonly) NSDictionary *treeNodeData;
        @property (nonatomic,readonly) NSSet *treePropertyNames;
        @property (nonatomic,readonly) NSSet *treeSingleNodePropertyNames;
        @property (nonatomic,readwrite) WIType *type;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *type_endpoint;
        - (void)_startObjectOfClassWIVar;
        - (void)addArg:(WIVarArg *)v;
        - (void)addAtomicVar:(WIVar *)v;
        - (void)addFluidVar:(WIVar *)v;
        - (WIVar *)applyRegexes:(NSArray *)regexes;
        - (WIVar *)applyRegexes:(NSArray *)regexes to:(WIVarContext *)tovc;
        - (WIVarArg *)argAtIndex:(Int)index;
        - (EndpointA *)args;
        - (NSObject<LinkEndpoint> *)argToEndpoint:(id)aarg;
        - (NSDictionary *)asD3Tree;
        - (NSString *)asD3TreeJSON;
        - (NSDictionary *)asTree;
        - (NSMutableDictionary *)asTree:(NSMutableSet *)seen;
        - (EndpointS *)atomicVars;
        - (NSObject<LinkEndpoint> *)atomicVarToEndpoint:(id)aatomicVar;
        - (NSString *)bindingType;
        - (WIVar *)boundTo;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (WIVarContext *)context;
        - (Endpoint1 *)context_endpoint;
        - (NSObject<LinkEndpoint> *)contextToEndpoint:(id)acontext;
        - (void)dealloc;
        - (WIBody *)defaultValue;
        - (Endpoint1 *)defaultValue_endpoint;
        - (NSObject<LinkEndpoint> *)defaultValueToEndpoint:(id)adefaultValue;
        - (NSString *)description;
        - (NSString *)descriptiveName;
        - (void)die;
        - (WIFile *)file;
        - (EndpointS *)fluidVars;
        - (NSObject<LinkEndpoint> *)fluidVarToEndpoint:(id)afluidVar;
        - (WIBody *)getter;
        - (Endpoint1 *)getter_endpoint;
        - (NSObject<LinkEndpoint> *)getterToEndpoint:(id)agetter;
        - (WIVar *)init;
        - (void)insertArg:(WIVarArg *)v atIndex:(Int)index;
        - (NSNumber *)isAcceptableArg:(id)aarg;
        - (NSNumber *)isAcceptableAtomicVar:(id)aatomicVar;
        - (NSNumber *)isAcceptableContext:(id)acontext;
        - (NSNumber *)isAcceptableDefaultValue:(id)adefaultValue;
        - (NSNumber *)isAcceptableFluidVar:(id)afluidVar;
        - (NSNumber *)isAcceptableGetter:(id)agetter;
        - (NSNumber *)isAcceptableSetter:(id)asetter;
        - (NSNumber *)isAcceptableType:(id)atype;
        - (kid)keyInContext;
        - (NSSet *)keysInContext;
        + (NSArray *)keyWithType:(WIType *)type name:(NSString *)name args:(NSArray *)args;
        - (void)mergeWith:(WIVar *)other;
        - (NSString *)name;
        - (NSMutableString *)objectName;
        #ifndef __SWIFT__
            - (void)process:(Token *)token regexes:(NSMutableArray *)regexes settings:(NSSet *)settings doingInitialSettings:(bool &)doingInitialSettings;
        #endif // __SWIFT__
        - (void)removeAllArgs;
        - (void)removeAllAtomicVars;
        - (void)removeAllFluidVars;
        - (void)removeAllSetters;
        - (void)removeArg:(WIVarArg *)v;
        - (void)removeArgAtIndex:(Int)index;
        - (void)removeAtomicVar:(WIVar *)v;
        - (void)removeFluidVar:(WIVar *)v;
        - (void)removeSetterForKey:(id<NSCopying> )key;
        - (void)retract;
        - (NSDictionary *)seenTreeNodeData;
        - (NSString *)selectorString;
        - (void)setArgs:(EndpointA *)v;
        - (void)setAtomicVars:(EndpointS *)v;
        - (void)setBindingType:(NSString *)v;
        - (void)setBoundTo:(WIVar *)v;
        - (void)setContext:(WIVarContext *)v;
        - (void)setContext_endpoint:(Endpoint1 *)v;
        - (void)setDefaultValue:(WIBody *)v;
        - (void)setDefaultValue_endpoint:(Endpoint1 *)v;
        - (void)setFluidVars:(EndpointS *)v;
        - (void)setGetter:(WIBody *)v;
        - (void)setGetter_endpoint:(Endpoint1 *)v;
        - (void)setKeyInContext:(kid)v;
        - (void)setKeysInContext:(NSSet *)v;
        - (void)setName:(NSString *)v;
        - (void)setSetter:(id)v forKey:(id<NSCopying> )key;
        - (void)setSetters:(EndpointD *)v;
        - (void)setSettings:(MutableDictionary *)v;
        - (WIBody *)setterForKey:(id<NSCopying> )key;
        - (EndpointD *)setters;
        - (NSObject<LinkEndpoint> *)setterToEndpoint:(id)asetter;
        - (WIBody *)setterWithSetterVar:(NSString *)setterVar;
        - (MutableDictionary *)settings;
        - (void)setType:(WIType *)v;
        - (void)setType_endpoint:(Endpoint1 *)v;
        - (NSDictionary *)treeNodeData;
        - (NSSet *)treePropertyNames;
        - (NSSet *)treeSingleNodePropertyNames;
        - (WIType *)type;
        - (Endpoint1 *)type_endpoint;
        - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype;

        @end





        @interface WIVarContext : NSObject<ClassObject, Object, Treeable> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIVarContext; @protected
            Endpoint1 *v_clazz_endpoint;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            EndpointD *v_vars;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) NSDictionary *asD3Tree;
        @property (nonatomic,readonly) NSString *asD3TreeJSON;
        @property (nonatomic,readonly) NSDictionary *asTree;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readwrite) WIClass *clazz;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *clazz_endpoint;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptiveName;
        @property (nonatomic,readonly) WIFile *file;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) kid keyInClazz;
        @property (nonatomic,readwrite) NSSet *keysInClazz;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) NSDictionary *seenTreeNodeData;
        @property (nonatomic,readonly) NSDictionary *treeNodeData;
        @property (nonatomic,readonly) NSSet *treePropertyNames;
        @property (nonatomic,readonly) NSSet *treeSingleNodePropertyNames;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *vars;
        - (void)_startObjectOfClassWIVarContext;
        - (void)_addArgsFromToken:(Token *)token key:(NSMutableArray *)key argTypes:(NSMutableArray *)argTypes argArgs:(NSMutableArray *)argArgs argNames:(NSMutableArray *)argNames regexes:(NSMutableArray *)regexes;
        - (WIVarContext *)applyRegexes:(NSArray *)regexes;
        - (WIVarContext *)applyRegexes:(NSArray *)regexes to:(WIClass *)toc;
        - (NSDictionary *)asD3Tree;
        - (NSString *)asD3TreeJSON;
        - (NSDictionary *)asTree;
        - (NSMutableDictionary *)asTree:(NSMutableSet *)seen;
        - (constchar *)cdescription;
        - (WIClass *)clazz;
        - (Endpoint1 *)clazz_endpoint;
        - (NSObject<LinkEndpoint> *)clazzToEndpoint:(id)aclazz;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptiveName;
        - (void)die;
        - (WIVar *)equivVarTo:(WIVar *)other;
        - (WIFile *)file;
        - (WIVarContext *)init;
        - (NSNumber *)isAcceptableClazz:(id)aclazz;
        - (NSNumber *)isAcceptableVar:(id)avar;
        - (kid)keyInClazz;
        - (NSSet *)keysInClazz;
        - (void)mergeWith:(WIVarContext *)other;
        - (NSMutableString *)objectName;
        - (void)removeAllVars;
        - (void)removeVarForKey:(id<NSCopying> )key;
        - (void)retract;
        - (NSDictionary *)seenTreeNodeData;
        - (void)setClazz:(WIClass *)v;
        - (void)setClazz_endpoint:(Endpoint1 *)v;
        - (void)setKeyInClazz:(kid)v;
        - (void)setKeysInClazz:(NSSet *)v;
        - (void)setVar:(id)v forKey:(id<NSCopying> )key;
        - (void)setVars:(EndpointD *)v;
        - (NSDictionary *)treeNodeData;
        - (NSSet *)treePropertyNames;
        - (NSSet *)treeSingleNodePropertyNames;
        - (WIType *)typeForFnBlock:(Token *)token mods:(NSMutableArray *)mods regexes:(NSMutableArray *)regexes;
        - (WIVar *)varForKey:(id<NSCopying> )key;
        - (WIVar *)varForVarToken:(Token *)token type:(WIType *)type regexes:(NSMutableArray *)regexes;
        - (EndpointD *)vars;
        - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar;
        - (WIVar *)varWithVarKey:(NSArray *)key;

        @end
    #endif // INCLUDE_IFACE_D1

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: g





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         Globals
    #define _WIClass_           Globals__
    #define _className_         globals
    #define _Class_             Globals__
    @implementation Globals

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassGlobals {
        MSGSTART("Globals:-(void)_startObjectOfClassGlobals")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (constchar *)cdescription {
        MSGSTART("Globals:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("Globals:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("Globals:-(void)dealloc")

        /*i-151*/[self die];
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("Globals:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("Globals:-(void)die")

        /*i900*/}
    - (NSMutableString *)objectName {
        MSGSTART("Globals:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: n





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSArray
    #define _WIClass_           NSArray__
    #define _className_         nSArray
    #define _Class_             NSArray__
    @implementation NSArray (winterface)

    - (NSArray *)arrayByApplyingRegexes:(NSObject *)regexes {
        MSGSTART("NSArray:-(NSArray*)arrayByApplyingRegexes:(NSObject*)regexes")

        NSMutableArray * ma = nil;
        NSInteger i = -1;
        for (NSObject *v in self) {
            i++;
            NSObject *v2 = ([v isKindOfClass:NSString.class] ? [(NSString *)v stringByApplyingRegexes : regexes] : v);
            if ([v isKindOfClass:NSDictionary.class])
                v2 = [(NSDictionary *)v dictionaryByApplyingRegexes : regexes];
            if ([v isKindOfClass:NSArray.class])
                v2 = [(NSArray *)v arrayByApplyingRegexes : regexes];
            if ([v isKindOfClass:NSSet.class])
                v2 = [(NSSet *)v setByApplyingRegexes : regexes];

            if (v != v2) {
                if (!ma) ma = self.mutableCopy;
                [ma replaceObjectAtIndex:i withObject:v2];
            }
        }
        return ma ? ma : self;
    }
    - (NSArray *)asStrong {
        MSGSTART("NSArray:-(NSArray*)asStrong")
        CollectionWeakness weakness = self.weakness;
        if (weakness & CollectionIsWeak) {
            NSMutableArray __block *ret = [NSMutableArray arrayWithCapacity:self.count];
            [self enumerateObjectsWithOptions:0 usingBlock: ^(id object,NSUInteger index,BOOL *stop) {
                 id addObject = ([object isWeakSelf] ? [object strongSelf] : object);
                 [ret addObject:addObject ? addObject:NSNull.null];
             }
            ];
            return ret;
        }
        else {
            return self;
        }
    }
    - (NSObject *)asValidJsonObject {
        MSGSTART("NSArray:-(NSObject*)asValidJsonObject")

        NSMutableArray * ret = nil;
        for (int i = ( (int)self.count ) - 1; i >= 0; i--) {
            NSObject *o = ( (NSObject *)self[i] ).asValidJsonObject;
            if (self[i] != o) {
                if (!ret) ret = self.mutableCopy;
                [ret replaceObjectAtIndex:i withObject:o];
            }
        }
        return ret ? ret : self;
    }
    - (NSArray *)asWeak {
        MSGSTART("NSArray:-(NSArray*)asWeak")
        CollectionWeakness weakness = self.weakness;
        if (weakness & CollectionIsStrong) {
            NSMutableArray __block *ret = [NSMutableArray arrayWithCapacity:self.count];
            [self enumerateObjectsWithOptions:0 usingBlock: ^(id object,NSUInteger index,BOOL *stop) {
                 [ret addObject:([object isWeakSelf] ? object : [object weakSelf])];
             }
            ];
            return ret;
        }
        else {
            return self;
        }
    }
    - (NSArray *)copyWithWeakness:(CollectionWeakness)weakness {
        MSGSTART("NSArray:-(NSArray*)copyWithWeakness:(CollectionWeakness)weakness")
        switch (weakness) {
            case CollectionIsEmpty : case CollectionIsWeakAndStrong:
            default: return self.copy;

            case CollectionIsWeak: return self.weakCopy;

            case CollectionIsStrong: return self.strongCopy;
        }
    }
    - (id)derefedObjectAtIndex:(Unsigned)index {
        MSGSTART("NSArray:-(id)derefedObjectAtIndex:(Unsigned)index")

        return [WeakObject deref:[self objectAtIndex:index]];
    }
    - (NSString *)jsonString {
        MSGSTART("NSArray:-(NSString*)jsonString")

        NSError * err = nil;
        return [NSString.alloc initWithData:[NSJSONSerialization dataWithJSONObject:self.asValidJsonObject options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSMutableArray *)mutableCopyWithWeakness:(CollectionWeakness)weakness {
        MSGSTART("NSArray:-(NSMutableArray*)mutableCopyWithWeakness:(CollectionWeakness)weakness")
        switch (weakness) {
            case CollectionIsEmpty:
            case CollectionIsWeakAndStrong:
            default: return self.mutableCopy;

            case CollectionIsWeak: return self.weakMutableCopy;

            case CollectionIsStrong: return self.strongMutableCopy;
        }
    }
    - (NSArray *)strongCopy {
        MSGSTART("NSArray:-(NSArray*)strongCopy")
        return self.asStrong.copy;
    }
    - (NSMutableArray *)strongMutableCopy {
        MSGSTART("NSArray:-(NSMutableArray*)strongMutableCopy")
        NSMutableArray * ret = (NSMutableArray *)self.asStrong;
        return [ret isEqual:self] ? self.mutableCopy : ret;
    }
    - (NSArray *)weakCopy {
        MSGSTART("NSArray:-(NSArray*)weakCopy")
        return self.asWeak.copy;
    }
    - (NSMutableArray *)weakMutableCopy {
        MSGSTART("NSArray:-(NSMutableArray*)weakMutableCopy")
        NSMutableArray * ret = (NSMutableArray *)self.asWeak;
        return [ret isEqual:self] ? self.mutableCopy : ret;
    }
    - (CollectionWeakness)weakness {
        MSGSTART("NSArray:-(CollectionWeakness)weakness")
        CollectionWeakness __block ret = CollectionIsEmpty;
        [self enumerateObjectsWithOptions:0 usingBlock: ^(id object,NSUInteger index,BOOL *stop) {
             if ( ( ( ret = (CollectionWeakness)( ret | ([object isWeakSelf] ? CollectionIsWeak : CollectionIsStrong) ) ) ) == CollectionIsWeakAndStrong ) *stop = YES;
         }
        ];
        return ret;
    }
    - (NSArray *)withWeakness:(CollectionWeakness)weakness {
        MSGSTART("NSArray:-(NSArray*)withWeakness:(CollectionWeakness)weakness")
        switch (weakness) {
            case CollectionIsEmpty:
            case CollectionIsWeakAndStrong:
            default: return self;

            case CollectionIsWeak: return self.asWeak;

            case CollectionIsStrong: return self.asStrong;
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSData
    #define _WIClass_           NSData__
    #define _className_         nSData
    #define _Class_             NSData__
    @implementation NSData (winterface)

    - (NSData *)sendAsBodyOfPOSTRequestWithURL:(NSURL *)url returningResponse:(NSURLResponse *__strong *)retresponse error:(NSError *__strong *)reterr {
        MSGSTART("NSData:-(NSData*)sendAsBodyOfPOSTRequestWithURL:(NSURL*)url returningResponse:(NSURLResponse*__strong*)retresponse error:(NSError*__strong*)reterr")

        NSError * err
            = nil;
        NSURLResponse *response = nil;
        if (reterr) *reterr = nil;
        if (retresponse) retresponse = nil;

        if (!g_singletons.online) {
            err = [NSError errorWithDomain:@"offline" code:1 userInfo:nil];
            return nil;
        }

        NSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:url];
        [request setHTTPMethod:@"POST"];
        [request setHTTPBody:self];

        response = nil;
        NSData *ret = [NSURLConnection sendSynchronousRequest:request returningResponse:&response error:&err];
        if (reterr) *reterr = err;
        if (retresponse) *retresponse = response;
        return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSDictionary
    #define _WIClass_           NSDictionary__
    #define _className_         nSDictionary
    #define _Class_             NSDictionary__
    @implementation NSDictionary (winterface)

    - (NSDictionary *)asStrong {
        MSGSTART("NSDictionary:-(NSDictionary*)asStrong")
        CollectionWeakness weakness = self.weakness;
        if (weakness & CollectionIsWeak) {
            NSMutableDictionary __block *ret = [NSMutableDictionary dictionaryWithCapacity:self.count];
            [self enumerateKeysAndObjectsWithOptions:0 usingBlock: ^(id key, id object, BOOL *stop) {
                 id addObject = ([object isWeakSelf] ? [object strongSelf] : object);
                 [ret setObject:addObject ? addObject:NSNull.null forKey:key];
             }
            ];
            return ret;
        }
        else {
            return self;
        }
    }
    - (NSObject *)asValidJsonObject {
        MSGSTART("NSDictionary:-(NSObject*)asValidJsonObject")

        NSMutableDictionary * ret = nil;
        for (NSObject<NSCopying> *key in self) {
            NSObject<NSCopying> *k = (NSObject<NSCopying> *)key.asValidJsonObject;
            NSObject *o = ( (NSObject *)self[key] ).asValidJsonObject;
            if (key != k) {
                if (!ret) ret = self.mutableCopy;
                [ret removeObjectForKey:key];
                ret[k] = o;
            }
            else if (self[key] != o) {
                if (!ret) ret = self.mutableCopy;
                ret[key] = o;
            }
        }
        return ret ? ret : self;
    }
    - (NSDictionary *)asWeak {
        MSGSTART("NSDictionary:-(NSDictionary*)asWeak")
        CollectionWeakness weakness = self.weakness;
        if (weakness & CollectionIsStrong) {
            NSMutableDictionary __block *ret = [NSMutableDictionary dictionaryWithCapacity:self.count];
            [self enumerateKeysAndObjectsWithOptions:0 usingBlock: ^(id key, id object,BOOL *stop) {
                 [ret setObject:([object isWeakSelf] ? object : [object weakSelf]) forKey:key];
             }
            ];
            return ret;
        }
        else {
            return self;
        }
    }
    - (NSDictionary *)copyWithWeakness:(CollectionWeakness)weakness {
        MSGSTART("NSDictionary:-(NSDictionary*)copyWithWeakness:(CollectionWeakness)weakness")
        switch (weakness) {
            case CollectionIsEmpty : case CollectionIsWeakAndStrong:
            default: return self.copy;

            case CollectionIsWeak: return self.weakCopy;

            case CollectionIsStrong: return self.strongCopy;
        }
    }
    - (id)derefedObjectForKey:(id)key {
        MSGSTART("NSDictionary:-(id)derefedObjectForKey:(id)key")

        return [WeakObject deref:[self objectForKey:key]];
    }
    - (NSDictionary *)dictionaryByApplyingRegexes:(NSObject *)regexes {
        MSGSTART("NSDictionary:-(NSDictionary*)dictionaryByApplyingRegexes:(NSObject*)regexes")

        NSMutableDictionary * md = nil;
        for (NSObject<NSCopying> *key in self) {
            NSObject *v = self[key];
            NSObject<NSCopying> *key2 = ([key isKindOfClass:NSString.class] ? [(NSString *)key stringByApplyingRegexes : regexes] : key);
            NSObject *v2 = ([v isKindOfClass:NSString.class] ? [(NSString *)v stringByApplyingRegexes : regexes] : v);

            if ([v isKindOfClass:NSDictionary.class])
                v2 = [(NSDictionary *)v dictionaryByApplyingRegexes : regexes];
            if ([key isKindOfClass:NSDictionary.class])
                key2 = [(NSDictionary *)key2 dictionaryByApplyingRegexes : regexes];

            if ([v isKindOfClass:NSArray.class])
                v2 = [(NSArray *)v arrayByApplyingRegexes : regexes];
            if ([key isKindOfClass:NSArray.class])
                key2 = [(NSArray *)key2 arrayByApplyingRegexes : regexes];

            if ([v isKindOfClass:NSSet.class])
                v2 = [(NSSet *)v setByApplyingRegexes : regexes];
            if ([key isKindOfClass:NSSet.class])
                key2 = [(NSSet *)key setByApplyingRegexes : regexes];

            if ( (key != key2) || (v != v2) ) {
                if (!md) md = self.mutableCopy;
                if (key != key2) {
                    [md removeObjectForKey:key];
                    md[key2] = v2;
                }
                else {
                    md[key] = v2;
                }
            }
        }
        return md ? md : self;
    }
    - (NSString *)jsonString {
        MSGSTART("NSDictionary:-(NSString*)jsonString")

        NSError * err = nil;
        return [NSString.alloc initWithData:[NSJSONSerialization dataWithJSONObject:self.asValidJsonObject options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSMutableDictionary *)mutableCopyWithWeakness:(CollectionWeakness)weakness {
        MSGSTART("NSDictionary:-(NSMutableDictionary*)mutableCopyWithWeakness:(CollectionWeakness)weakness")
        switch (weakness) {
            case CollectionIsEmpty:
            case CollectionIsWeakAndStrong:
            default: return self.mutableCopy;

            case CollectionIsWeak: return self.weakMutableCopy;

            case CollectionIsStrong: return self.strongMutableCopy;
        }
    }
    - (NSDictionary *)strongCopy {
        MSGSTART("NSDictionary:-(NSDictionary*)strongCopy")
        return self.asStrong.copy;
    }
    - (NSMutableDictionary *)strongMutableCopy {
        MSGSTART("NSDictionary:-(NSMutableDictionary*)strongMutableCopy")
        NSMutableDictionary * ret = (NSMutableDictionary *)self.asStrong;
        return [ret isEqual:self] ? self.mutableCopy : ret;
    }
    - (NSDictionary *)weakCopy {
        MSGSTART("NSDictionary:-(NSDictionary*)weakCopy")
        return self.asWeak.copy;
    }
    - (NSMutableDictionary *)weakMutableCopy {
        MSGSTART("NSDictionary:-(NSMutableDictionary*)weakMutableCopy")
        NSMutableDictionary * ret = (NSMutableDictionary *)self.asWeak;
        return [ret isEqual:self] ? self.mutableCopy : ret;
    }
    - (CollectionWeakness)weakness {
        MSGSTART("NSDictionary:-(CollectionWeakness)weakness")
        CollectionWeakness __block ret = CollectionIsEmpty;
        [self enumerateKeysAndObjectsWithOptions:0 usingBlock: ^(id key, id object, BOOL *stop) {
             if ( ( ( ret = (CollectionWeakness)( ret | ([object isWeakSelf] ? CollectionIsWeak : CollectionIsStrong) ) ) ) == CollectionIsWeakAndStrong ) *stop = YES;
         }
        ];
        return ret;
    }
    - (NSDictionary *)withWeakness:(CollectionWeakness)weakness {
        MSGSTART("NSDictionary:-(NSDictionary*)withWeakness:(CollectionWeakness)weakness")
        switch (weakness) {
            case CollectionIsEmpty:
            case CollectionIsWeakAndStrong:
            default: return self;

            case CollectionIsWeak: return self.asWeak;

            case CollectionIsStrong: return self.asStrong;
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSMutableArray
    #define _WIClass_           NSMutableArray__
    #define _className_         nSMutableArray
    #define _Class_             NSMutableArray__
    @implementation NSMutableArray (winterface)

    - (void)addObject:(id)anObject weak:(bool)weakObject {
        MSGSTART("NSMutableArray:-(void)addObject:(id)anObject weak:(bool)weakObject")

        if (weakObject) [self addWeakObject:anObject];
        else [self addObject:anObject];
    }
    - (void)addWeakObject:(id)anObject {
        MSGSTART("NSMutableArray:-(void)addWeakObject:(id)anObject")

        WeakObject * v = [[WeakObject alloc] initWithObject:anObject];
        [self addObject:v];
    }
    - (void)insertObject:(id)anObject weak:(bool)weakObject atIndex:(Unsigned)index {
        MSGSTART("NSMutableArray:-(void)insertObject:(id)anObject weak:(bool)weakObject atIndex:(Unsigned)index")

        if (weakObject) [self insertWeakObject:anObject atIndex:index];
        else [self insertObject:anObject atIndex:index];
    }
    - (void)insertWeakObject:(id)anObject atIndex:(Unsigned)index {
        MSGSTART("NSMutableArray:-(void)insertWeakObject:(id)anObject atIndex:(Unsigned)index")

        WeakObject * v = [[WeakObject alloc] initWithObject:anObject];
        [self insertObject:v atIndex:index];
    }
    - (void)mergeWith:(NSObject *)other {
        MSGSTART("NSMutableArray:-(void)mergeWith:(NSObject*)other")

        PartiallyOrderedSet * pos = [PartiallyOrderedSet partiallyOrderedSetWithArray:self];
        [pos mergeWith:other];
        [self setArray:pos.asArray];
    }
    - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)anObject weak:(bool)weakObject {
        MSGSTART("NSMutableArray:-(void)replaceObjectAtIndex:(Unsigned)index withObject:(id)anObject weak:(bool)weakObject")

        if (weakObject) [self replaceObjectAtIndex:index withWeakObject:(id)anObject];
        else [self replaceObjectAtIndex:index withObject:(id)anObject];
    }
    - (void)replaceObjectAtIndex:(Unsigned)index withWeakObject:(id)anObject {
        MSGSTART("NSMutableArray:-(void)replaceObjectAtIndex:(Unsigned)index withWeakObject:(id)anObject")

        WeakObject * v = [[WeakObject alloc] initWithObject:anObject];
        [self replaceObjectAtIndex:index withObject:v];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSMutableDictionary
    #define _WIClass_           NSMutableDictionary__
    #define _className_         nSMutableDictionary
    #define _Class_             NSMutableDictionary__
    @implementation NSMutableDictionary (winterface)

    - (void)mergeWith:(NSObject *)other {
        MSGSTART("NSMutableDictionary:-(void)mergeWith:(NSObject*)other")

        if ([other isKindOfClass:NSDictionary.class]) {
            NSDictionary *otherd = (NSDictionary *)other;
            for (NSObject<NSCopying> *k in otherd) {
                NSObject *v = [self objectForKey:k];
                NSObject *v2 = [otherd objectForKey:k];
                if (v) {
                    if (
                        (
                            ([v isKindOfClass:NSDictionary.class] && [v2 isKindOfClass:NSDictionary.class]) ||
                            (
                                ([v isKindOfClass:NSSet.class] || [v isKindOfClass:NSArray.class] || [v isKindOfClass:PartiallyOrderedSet.class]) &&
                                ([v2 isKindOfClass:NSSet.class] || [v2 isKindOfClass:NSArray.class] || [v2 isKindOfClass:PartiallyOrderedSet.class])
                            )
                        )
                        && [v respondsToSelector:@selector(mergeWith:)])
                        [(NSMutableDictionary *)v mergeWith : v2];
                }
                else if ([v2 isKindOfClass:NSDictionary.class]) {
                    [self setObject:v = NSMutableDictionary.dictionary forKey:k];
                    [(NSMutableDictionary *)v mergeWith : v2];
                }
                else if ([v2 conformsToProtocol:@protocol(NSCopying)]) {
                    [self setObject:v2.copy forKey:k];
                }
            }
        }
    }
    - (void)setObject:(id)anObject forPointerKey:(id)aKeyo {
        MSGSTART("NSMutableDictionary:-(void)setObject:(id)anObject forPointerKey:(id)aKeyo")

        PointerKey * k = [[PointerKey alloc] initWithObject:aKeyo];
        [self setObject:anObject forKey:k];
    }
    - (void)setObject:(id)anObject forWeakKey:(id)aKeyo {
        MSGSTART("NSMutableDictionary:-(void)setObject:(id)anObject forWeakKey:(id)aKeyo")

        WeakObject * k = [[WeakObject alloc] initWithObject:aKeyo];
        [self setObject:anObject forKey:k];
    }
    - (void)setObject:(id)anObject weak:(bool)weakObject forKey:(id)aKeyo weak:(bool)weakKey pointer:(bool)pointerKey {
        MSGSTART("NSMutableDictionary:-(void)setObject:(id)anObject weak:(bool)weakObject forKey:(id)aKeyo weak:(bool)weakKey pointer:(bool)pointerKey")

        if (weakKey) {
            if (weakObject) [self setWeakObject:anObject forWeakKey:aKeyo];
            else [self setObject:anObject forWeakKey:aKeyo];
        }
        else if (pointerKey) {
            if (weakObject) [self setWeakObject:anObject forPointerKey:aKeyo];
            else [self setObject:anObject forPointerKey:aKeyo];
        }
        else {
            if (weakObject) [self setWeakObject:anObject forKey:aKeyo];
            else [self setObject:anObject forKey:aKeyo];
        }
    }
    - (void)setWeakObject:(id)anObject forKey:(id)aKeyo {
        MSGSTART("NSMutableDictionary:-(void)setWeakObject:(id)anObject forKey:(id)aKeyo")

        WeakObject * v = [[WeakObject alloc] initWithObject:anObject];
        [self setObject:v forKey:aKeyo];
    }
    - (void)setWeakObject:(id)anObject forPointerKey:(id)aKeyo {
        MSGSTART("NSMutableDictionary:-(void)setWeakObject:(id)anObject forPointerKey:(id)aKeyo")

        WeakObject * v = [[WeakObject alloc] initWithObject:anObject];
        PointerKey *k = [[PointerKey alloc] initWithObject:aKeyo];
        [self setObject:v forKey:k];
    }
    - (void)setWeakObject:(id)anObject forWeakKey:(id)aKeyo {
        MSGSTART("NSMutableDictionary:-(void)setWeakObject:(id)anObject forWeakKey:(id)aKeyo")

        WeakObject * v = [[WeakObject alloc] initWithObject:anObject];
        WeakObject *k = [[WeakObject alloc] initWithObject:aKeyo];
        [self setObject:v forKey:k];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSMutableSet
    #define _WIClass_           NSMutableSet__
    #define _className_         nSMutableSet
    #define _Class_             NSMutableSet__
    @implementation NSMutableSet (winterface)

    - (void)addObject:(id)anObject weak:(bool)weakObject {
        MSGSTART("NSMutableSet:-(void)addObject:(id)anObject weak:(bool)weakObject")

        if (weakObject) [self addWeakObject:anObject];
        else [self addObject:anObject];
    }
    - (void)addWeakObject:(id)anObject {
        MSGSTART("NSMutableSet:-(void)addWeakObject:(id)anObject")

        WeakObject * v = [[WeakObject alloc] initWithObject:anObject];
        [self addObject:v];
    }
    - (void)mergeWith:(NSObject *)other {
        MSGSTART("NSMutableSet:-(void)mergeWith:(NSObject*)other")

        if ([other isKindOfClass:NSSet.class])
            [self unionSet:(NSSet *)other];
        else if ([other isKindOfClass:NSArray.class])
            [self addObjectsFromArray:(NSArray *)other];
        else if ([other isKindOfClass:PartiallyOrderedSet.class])
            [self unionSet:( (PartiallyOrderedSet *)other ).set];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSMutableString
    #define _WIClass_           NSMutableString__
    #define _className_         nSMutableString
    #define _Class_             NSMutableString__
    @implementation NSMutableString (winterface)

    - (NSMutableString *)applyRegexes:(NSObject *)regexesArrayOrDictionary {
        MSGSTART("NSMutableString:-(NSMutableString*)applyRegexes:(NSObject*)regexesArrayOrDictionary")

        if ([regexesArrayOrDictionary isKindOfClass:NSArray.class])
            for (NSObject *o in(NSArray *) regexesArrayOrDictionary) {
                [self applyRegexes:o];
            }
        else if ([regexesArrayOrDictionary isKindOfClass:NSDictionary.class])
            for (NSString *regexStr in(NSDictionary *) regexesArrayOrDictionary) {
                NSString *replaceStr = ( (NSDictionary *)regexesArrayOrDictionary )[regexStr];
                if ( !([regexStr isKindOfClass:NSString.class] && [replaceStr isKindOfClass:NSString.class]) )
                    continue;
                NSRegularExpression *regex = [RegexHelper regexForString:regexStr];
                if (!regex) continue;
                [self match:regex replace:1000 withString:replaceStr];
            }
        return self;
    }
    - (void)match:(NSRegularExpression *)regex replace:(NSUInteger)count withString:(NSString *)replaceStr {
        MSGSTART("NSMutableString:-(void)match:(NSRegularExpression*)regex replace:(NSUInteger)count withString:(NSString*)replaceStr")

        [regex replaceMatchesInString : self options : 0 range : NSMakeRange(0,self.length) withTemplate : replaceStr];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSNull
    #define _WIClass_           NSNull__
    #define _className_         nSNull
    #define _Class_             NSNull__
    @implementation NSNull (winterface)

    - (NSObject *)asValidJsonObject {
        MSGSTART("NSNull:-(NSObject*)asValidJsonObject")
        return self;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSNumber
    #define _WIClass_           NSNumber__
    #define _className_         nSNumber
    #define _Class_             NSNumber__
    @implementation NSNumber (winterface)

    - (NSObject *)asValidJsonObject {
        MSGSTART("NSNumber:-(NSObject*)asValidJsonObject")
        return self;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         NSSet
    #define _WIClass_           NSSet__
    #define _className_         nSSet
    #define _Class_             NSSet__
    @implementation NSSet (winterface)

    - (NSSet *)asStrong {
        MSGSTART("NSSet:-(NSSet*)asStrong")
        CollectionWeakness weakness = self.weakness;
        if (weakness & CollectionIsWeak) {
            NSMutableSet __block *ret = [NSMutableSet setWithCapacity:self.count];
            [self enumerateObjectsWithOptions:0 usingBlock: ^(id object,BOOL *stop) {
                 id addObject = ([object isWeakSelf] ? [object strongSelf] : object);
                 if (addObject)
                     [ret addObject:addObject];
             }
            ];
            return ret;
        }
        else {
            return self;
        }
    }
    - (NSObject *)asValidJsonObject {
        MSGSTART("NSSet:-(NSObject*)asValidJsonObject")
        return self.allObjects.asValidJsonObject;
    }
    - (NSSet *)asWeak {
        MSGSTART("NSSet:-(NSSet*)asWeak")
        CollectionWeakness weakness = self.weakness;
        if (weakness & CollectionIsStrong) {
            NSMutableSet __block *ret = [NSMutableSet setWithCapacity:self.count];
            [self enumerateObjectsWithOptions:0 usingBlock: ^(id object,BOOL *stop) {
                 [ret addObject:([object isWeakSelf] ? object : [object weakSelf])];
             }
            ];
            return ret;
        }
        else {
            return self;
        }
    }
    - (NSSet *)copyWithWeakness:(CollectionWeakness)weakness {
        MSGSTART("NSSet:-(NSSet*)copyWithWeakness:(CollectionWeakness)weakness")
        switch (weakness) {
            case CollectionIsEmpty:
            case CollectionIsWeakAndStrong:
            default: return self.copy;

            case CollectionIsWeak: return self.weakCopy;

            case CollectionIsStrong: return self.strongCopy;
        }
    }
    - (NSString *)jsonString {
        MSGSTART("NSSet:-(NSString*)jsonString")
        return self.allObjects.jsonString;
    }
    - (NSMutableSet *)mutableCopyWithWeakness:(CollectionWeakness)weakness {
        MSGSTART("NSSet:-(NSMutableSet*)mutableCopyWithWeakness:(CollectionWeakness)weakness")
        switch (weakness) {
            case CollectionIsEmpty:
            case CollectionIsWeakAndStrong:
            default: return self.mutableCopy;

            case CollectionIsWeak: return self.weakMutableCopy;

            case CollectionIsStrong: return self.strongMutableCopy;
        }
    }
    - (NSSet *)setByApplyingRegexes:(NSObject *)regexes {
        MSGSTART("NSSet:-(NSSet*)setByApplyingRegexes:(NSObject*)regexes")

        NSMutableSet * ms = nil;
        NSInteger i = -1;
        for (NSObject *v in self) {
            i++;
            NSObject *v2 = ([v isKindOfClass:NSString.class] ? [(NSString *)v stringByApplyingRegexes : regexes] : v);
            if ([v isKindOfClass:NSDictionary.class])
                v2 = [(NSDictionary *)v dictionaryByApplyingRegexes : regexes];
            if ([v isKindOfClass:NSArray.class])
                v2 = [(NSArray *)v arrayByApplyingRegexes : regexes];
            if ([v isKindOfClass:NSSet.class])
                v2 = [(NSSet *)v setByApplyingRegexes : regexes];

            if (v != v2) {
                if (!ms) ms = self.mutableCopy;
                [ms removeObject:v];
                [ms addObject:v2];
            }
        }
        return ms ? ms : self;
    }
    - (NSSet *)strongCopy {
        MSGSTART("NSSet:-(NSSet*)strongCopy")
        return self.asStrong.copy;
    }
    - (NSMutableSet *)strongMutableCopy {
        MSGSTART("NSSet:-(NSMutableSet*)strongMutableCopy")
        NSMutableSet * ret = (NSMutableSet *)self.asStrong;
        return [ret isEqual:self] ? self.mutableCopy : ret;
    }
    - (NSSet *)weakCopy {
        MSGSTART("NSSet:-(NSSet*)weakCopy")
        return self.asWeak.copy;
    }
    - (NSMutableSet *)weakMutableCopy {
        MSGSTART("NSSet:-(NSMutableSet*)weakMutableCopy")
        NSMutableSet * ret = (NSMutableSet *)self.asWeak;
        return [ret isEqual:self] ? self.mutableCopy : ret;
    }
    - (CollectionWeakness)weakness {
        MSGSTART("NSSet:-(CollectionWeakness)weakness")
        CollectionWeakness __block ret = CollectionIsEmpty;
        [self enumerateObjectsWithOptions:0 usingBlock: ^(id object,BOOL *stop) {
             if ( ( ( ret = (CollectionWeakness)( ret | ([object isWeakSelf] ? CollectionIsWeak : CollectionIsStrong) ) ) ) == CollectionIsWeakAndStrong ) *stop = YES;
         }
        ];
        return ret;
    }
    - (NSSet *)withWeakness:(CollectionWeakness)weakness {
        MSGSTART("NSSet:-(NSSet*)withWeakness:(CollectionWeakness)weakness")
        switch (weakness) {
            case CollectionIsEmpty:
            case CollectionIsWeakAndStrong:
            default: return self;

            case CollectionIsWeak: return self.asWeak;

            case CollectionIsStrong: return self.asStrong;
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: w





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIBody
    #define _WIClass_           WIBody__
    #define _className_         wIBody
    #define _Class_             WIBody__
    @implementation WIBody

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIBody {
        MSGSTART("WIBody:-(void)_startObjectOfClassWIBody")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-950*/ v_snippets = [[EndpointD alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableSnippet:) otherEndObjectToEndpoint:@selector(snippetToEndpoint:)];

        /*i-500*//*ivar*/ v_setterForVar_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSetterForVar:) otherEndObjectToEndpoint:@selector(setterForVarToEndpoint:)]);  ADDOWNER(v_setterForVar_endpoint,self);
        /*ivar*/ v_defaultValueForVar_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableDefaultValueForVar:) otherEndObjectToEndpoint:@selector(defaultValueForVarToEndpoint:)]);  ADDOWNER(v_defaultValueForVar_endpoint,self);
        /*ivar*/ v_getterForVar_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableGetterForVar:) otherEndObjectToEndpoint:@selector(getterForVarToEndpoint:)]);  ADDOWNER(v_getterForVar_endpoint,self);

        /*i0*/}
    - (WIBody *)applyRegexes:(NSArray *)regexes to:(WIVar *)tov {
        MSGSTART("WIBody:-(WIBody*)applyRegexes:(NSArray*)regexes to:(WIVar*)tov")

        WIBody * tob = nil;
        if (self.getterForVar) {
            tob = tov.getter;
            if (!tob) tov.getter = tob = [WIBody new];
        }
        else if (self.defaultValueForVar) {
            tob = tov.defaultValue;
            if (!tob) tov.defaultValue = tob = [WIBody new];
        }
        else if (self.setterForVar) {
            tob = [tov setterWithSetterVar:(NSString *)self.keyInSetterForVar];
        }
        else {
            return nil;
        }

        for (NSNumber *ordinal in self.snippets) {
            [[self snippetForKey:ordinal] applyRegexes:regexes to:tob];
        }
        return tob;
    }
    - (NSDictionary *)asD3Tree {
        MSGSTART("WIBody:-(NSDictionary*)asD3Tree")
        return [Treeable asD3Tree:self.asTree];
    }
    - (NSString *)asD3TreeJSON {
        MSGSTART("WIBody:-(NSString*)asD3TreeJSON")

        NSError * err = nil;
        return [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:self.asD3Tree options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSDictionary *)asTree {
        MSGSTART("WIBody:-(NSDictionary*)asTree")
        return [self asTree:NSMutableSet.set];
    }
    - (NSMutableDictionary *)asTree:(NSMutableSet *)seen {
        MSGSTART("WIBody:-(NSMutableDictionary*)asTree:(NSMutableSet*)seen")

        return ([Treeable asTree:seen object:self]);
    }
    - (constchar *)cdescription {
        MSGSTART("WIBody:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIBody:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("WIBody:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_snippets,self); v_snippets = nil;

        REMOVEOWNER(v_setterForVar_endpoint,self); v_setterForVar_endpoint = nil;

        REMOVEOWNER(v_defaultValueForVar_endpoint,self); v_defaultValueForVar_endpoint = nil;

        REMOVEOWNER(v_getterForVar_endpoint,self); v_getterForVar_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (WIVar *)defaultValueForVar {
        MSGSTART("WIBody:-(WIVar*)defaultValueForVar")
        return (WIVar *)v_defaultValueForVar_endpoint.value;
    }
    - (Endpoint1 *)defaultValueForVar_endpoint {
        MSGSTART("WIBody:-(Endpoint1*)defaultValueForVar_endpoint")

        /*i-999*/ Endpoint1 * ret = v_defaultValueForVar_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)defaultValueForVarToEndpoint:(id)adefaultValueForVar {
        MSGSTART("WIBody:-(NSObject<LinkEndpoint>*)defaultValueForVarToEndpoint:(id)adefaultValueForVar")
        return [adefaultValueForVar performSelector:@selector(defaultValue_endpoint)];
    }
    - (NSString *)description {
        MSGSTART("WIBody:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSString *)descriptiveName {
        MSGSTART("WIBody:-(NSString*)descriptiveName")

        NSMutableString * ret = @"".mutableCopy;
        NSArray *keys = [self.snippets.allKeys sortedArrayUsingSelector:@selector(compare:)];
        bool fst = YES;
        for (NSObject<NSCopying> *key in keys) {
            [ret appendFormat:(fst ? @"@%@ -- %@" : @" -- @%@ -- %@"),key,[self.snippets[key] strings].jsonString];
        }
        return ret;
    }
    - (void)die {
        MSGSTART("WIBody:-(void)die")
        self.getterForVar = nil;
        self.defaultValueForVar = nil;
        self.setterForVar = nil;
        [v_snippets removeAllObjects];

        /*i900*/}
    - (WIVar *)getterForVar {
        MSGSTART("WIBody:-(WIVar*)getterForVar")
        return (WIVar *)v_getterForVar_endpoint.value;
    }
    - (Endpoint1 *)getterForVar_endpoint {
        MSGSTART("WIBody:-(Endpoint1*)getterForVar_endpoint")

        /*i-999*/ Endpoint1 * ret = v_getterForVar_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)getterForVarToEndpoint:(id)agetterForVar {
        MSGSTART("WIBody:-(NSObject<LinkEndpoint>*)getterForVarToEndpoint:(id)agetterForVar")
        return [agetterForVar performSelector:@selector(getter_endpoint)];
    }
    - (void)incorporateBody:(NSString *)body {
        MSGSTART("WIBody:-(void)incorporateBody:(NSString*)body")

        NSArray * matches = [self.class.splitterRegex matchesInString:body options:0 range:NSMakeRange(0,body.length)];
        WIBodySnippet *snippet = nil;
        int at = 0;
        NSInteger remainder = 0;
        for (NSTextCheckingResult *match in matches) {
            remainder = match.range.location + match.range.length;
            NSString *s = [body substringWithRange:[match rangeAtIndex:1]];
            if (snippet || s.length) {
                if (!snippet) snippet = [self snippetAtOrdinal:at];
                [snippet.strings addObject:s];
            }
            if ([match rangeAtIndex:2].length) {
                at = [body substringWithRange:[match rangeAtIndex:2]].intValue;
                snippet = [self snippetAtOrdinal:at];
            }
        }
        if (remainder < body.length) {
            if (!snippet) snippet = [self snippetAtOrdinal:at];
            [snippet.strings addObject:[body substringWithRange:NSMakeRange(remainder,body.length - remainder)]];
        }
    }
    - (WIBody *)init {
        MSGSTART("WIBody:-(WIBody*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWIBody];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableDefaultValueForVar:(id)adefaultValueForVar {
        MSGSTART("WIBody:-(NSNumber*)isAcceptableDefaultValueForVar:(id)adefaultValueForVar")
        return [adefaultValueForVar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableGetterForVar:(id)agetterForVar {
        MSGSTART("WIBody:-(NSNumber*)isAcceptableGetterForVar:(id)agetterForVar")
        return [agetterForVar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSetterForVar:(id)asetterForVar {
        MSGSTART("WIBody:-(NSNumber*)isAcceptableSetterForVar:(id)asetterForVar")
        return [asetterForVar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSnippet:(id)asnippet {
        MSGSTART("WIBody:-(NSNumber*)isAcceptableSnippet:(id)asnippet")
        return [asnippet isKindOfClass:[WIBodySnippet class]] ? @YES : nil;
    }
    - (kid)keyInSetterForVar {
        MSGSTART("WIBody:-(kid)keyInSetterForVar")

        for (id<NSCopying> key in self.keysInSetterForVar) {
            return key;
        }
        return nil;
    }
    - (NSSet *)keysInSetterForVar {
        MSGSTART("WIBody:-(NSSet*)keysInSetterForVar")

        if (!v_setterForVar_endpoint.value) return [NSSet set];

        NSMutableDictionary<DictionaryLinkEndpoint> *setterForVar_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self setterForVarToEndpoint : v_setterForVar_endpoint.value];
        return (NSSet *)[setterForVar_ep.__dictionaryObjectKeys objectForKey:self];
    }
    - (void)mergeWith:(WIBody *)other {
        MSGSTART("WIBody:-(void)mergeWith:(WIBody*)other")

        for (NSObject<NSCopying> *k in other.snippets) {
            if (![self snippetForKey:k]) [self setSnippet:[WIBodySnippet new] forKey:k];
            [[self snippetForKey:k] mergeWith:[other snippetForKey:k]];
        }
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIBody:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removeAllSnippets {
        MSGSTART("WIBody:-(void)removeAllSnippets")
        [v_snippets removeAllObjects];
    }
    - (void)removeSnippetForKey:(id<NSCopying> )key {
        MSGSTART("WIBody:-(void)removeSnippetForKey:(id<NSCopying>)key")
        [v_snippets removeObjectForKey : key];
    }
    - (void)retract {
        MSGSTART("WIBody:-(void)retract")
        self.getterForVar = nil;
        self.defaultValueForVar = nil;
        self.setterForVar = nil;
        [self.snippets removeAllObjects];
    }
    - (NSDictionary *)seenTreeNodeData {
        MSGSTART("WIBody:-(NSDictionary*)seenTreeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i999*/ return ret ? ret : self.treeNodeData;
    }
    - (void)setDefaultValueForVar:(WIVar *)v {
        MSGSTART("WIBody:-(void)setDefaultValueForVar:(WIVar*)v")
        [v_defaultValueForVar_endpoint setValue : v];
    }
    - (void)setDefaultValueForVar_endpoint:(Endpoint1 *)v {
        MSGSTART("WIBody:-(void)setDefaultValueForVar_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIBody) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(defaultValueForVar_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_defaultValueForVar_endpoint == v) return;

        /*i-900*/ {
            v_defaultValueForVar_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_defaultValueForVar_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setGetterForVar:(WIVar *)v {
        MSGSTART("WIBody:-(void)setGetterForVar:(WIVar*)v")
        [v_getterForVar_endpoint setValue : v];
    }
    - (void)setGetterForVar_endpoint:(Endpoint1 *)v {
        MSGSTART("WIBody:-(void)setGetterForVar_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIBody) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(getterForVar_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_getterForVar_endpoint == v) return;

        /*i-900*/ {
            v_getterForVar_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_getterForVar_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setKeyInSetterForVar:(kid)v {
        MSGSTART("WIBody:-(void)setKeyInSetterForVar:(kid)v")

        self.keysInSetterForVar = [NSSet setWithObject:v];
    }
    - (void)setKeysInSetterForVar:(NSSet *)v {
        MSGSTART("WIBody:-(void)setKeysInSetterForVar:(NSSet*)v")

        NSMutableDictionary<DictionaryLinkEndpoint> *setterForVar_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self setterForVarToEndpoint : v_setterForVar_endpoint.value];
        NSSet *setterForVar_keys_were = self.keysInSetterForVar,*setterForVar_inss,*setterForVar_dels;
        if ([Util getInsertsAndDeletesForSetWhenChanging:setterForVar_keys_were to:v inss:&setterForVar_inss dels:&setterForVar_dels]) {
            for (id<NSCopying> key in setterForVar_dels) {
                [setterForVar_ep removeObjectForKey:key];
            }
            for (id<NSCopying> key in setterForVar_inss) {
                [setterForVar_ep setObject:self forKey:key];
            }
        }
    }
    - (void)setSetterForVar:(WIVar *)v {
        MSGSTART("WIBody:-(void)setSetterForVar:(WIVar*)v")
        [v_setterForVar_endpoint setValue : v];
    }
    - (void)setSetterForVar_endpoint:(Endpoint1 *)v {
        MSGSTART("WIBody:-(void)setSetterForVar_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIBody) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(setterForVar_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_setterForVar_endpoint == v) return;

        /*i-900*/ {
            v_setterForVar_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_setterForVar_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setSnippet:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WIBody:-(void)setSnippet:(id)v forKey:(id<NSCopying>)key")
        [v_snippets setObject : v forKey : key];
    }
    - (void)setSnippets:(EndpointD *)v {
        MSGSTART("WIBody:-(void)setSnippets:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIBody) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(snippets=\"blah\") to set the property)");

        /*i-905*/ if (v_snippets == v) return;

        /*i-900*/ {
            v_snippets = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_snippets,self); ADDOWNER(v,self);
    }
    - (WIVar *)setterForVar {
        MSGSTART("WIBody:-(WIVar*)setterForVar")
        return (WIVar *)v_setterForVar_endpoint.value;
    }
    - (Endpoint1 *)setterForVar_endpoint {
        MSGSTART("WIBody:-(Endpoint1*)setterForVar_endpoint")

        /*i-999*/ Endpoint1 * ret = v_setterForVar_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)setterForVarToEndpoint:(id)asetterForVar {
        MSGSTART("WIBody:-(NSObject<LinkEndpoint>*)setterForVarToEndpoint:(id)asetterForVar")
        return [asetterForVar performSelector:@selector(setters)];
    }
    - (WIBodySnippet *)snippetAtOrdinal:(int)ordinal {
        MSGSTART("WIBody:-(WIBodySnippet*)snippetAtOrdinal:(int)ordinal")

        WIBodySnippet * ret = [self snippetForKey:@(ordinal)];
        if (!ret) [self setSnippet:ret = [WIBodySnippet new] forKey:@(ordinal)];
        return ret;
    }
    - (WIBodySnippet *)snippetForKey:(id<NSCopying> )key {
        MSGSTART("WIBody:-(WIBodySnippet*)snippetForKey:(id<NSCopying>)key")
        return [v_snippets objectForKey:key];
    }
    - (EndpointD *)snippets {
        MSGSTART("WIBody:-(EndpointD*)snippets")

        /*i-999*/ EndpointD * ret = v_snippets;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)snippetToEndpoint:(id)asnippet {
        MSGSTART("WIBody:-(NSObject<LinkEndpoint>*)snippetToEndpoint:(id)asnippet")
        return [asnippet performSelector:@selector(body_endpoint)];
    }
    + (NSRegularExpression *)splitterRegex {
        MSGSTART("WIBody:+(NSRegularExpression*)splitterRegex")

        static NSRegularExpression * ret = nil;
        NSError *err = nil;
        if (!ret) ret = [NSRegularExpression regularExpressionWithPattern:
                         @"()@((-?\\d+)?)"
                         // @"((?:[^\"\@]*(?:\"(\\\\\\\\|\\\\\"|[^\"])++\")?)*+)\@((?:-?\\d+)?)"
                         options:NSRegularExpressionDotMatchesLineSeparators error:&err];
        return ret;
    }
    - (NSDictionary *)treeNodeData {
        MSGSTART("WIBody:-(NSDictionary*)treeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"type":@"Body",@"name":self.descriptiveName
        };

        /*i999*/ return ret ? ret : @{};
    }
    - (NSSet *)treePropertyNames {
        MSGSTART("WIBody:-(NSSet*)treePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i0*/ ret = @[];

            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (NSSet *)treeSingleNodePropertyNames {
        MSGSTART("WIBody:-(NSSet*)treeSingleNodePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIBodySnippet
    #define _WIClass_           WIBodySnippet__
    #define _className_         wIBodySnippet
    #define _Class_             WIBodySnippet__
    @implementation WIBodySnippet

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIBodySnippet {
        MSGSTART("WIBodySnippet:-(void)_startObjectOfClassWIBodySnippet")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_strings = ([MutableSet set]);  ADDOWNER(v_strings,self);
        /*ivar*/ v_body_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableBody:) otherEndObjectToEndpoint:@selector(bodyToEndpoint:)]);  ADDOWNER(v_body_endpoint,self);

        /*i0*/}
    - (WIBodySnippet *)applyRegexes:(NSArray *)regexes to:(WIBody *)tob {
        MSGSTART("WIBodySnippet:-(WIBodySnippet*)applyRegexes:(NSArray*)regexes to:(WIBody*)tob")

        WIBodySnippet * tos = [tob snippetAtOrdinal:( (NSNumber *)self.keyInBody ).intValue];
        [tos.strings mergeWith:[self.strings setByApplyingRegexes:regexes]];
        return tos;
    }
    - (NSDictionary *)asD3Tree {
        MSGSTART("WIBodySnippet:-(NSDictionary*)asD3Tree")
        return [Treeable asD3Tree:self.asTree];
    }
    - (NSString *)asD3TreeJSON {
        MSGSTART("WIBodySnippet:-(NSString*)asD3TreeJSON")

        NSError * err = nil;
        return [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:self.asD3Tree options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSDictionary *)asTree {
        MSGSTART("WIBodySnippet:-(NSDictionary*)asTree")
        return [self asTree:NSMutableSet.set];
    }
    - (NSMutableDictionary *)asTree:(NSMutableSet *)seen {
        MSGSTART("WIBodySnippet:-(NSMutableDictionary*)asTree:(NSMutableSet*)seen")

        return ([Treeable asTree:seen object:self]);
    }
    - (WIBody *)body {
        MSGSTART("WIBodySnippet:-(WIBody*)body")
        return (WIBody *)v_body_endpoint.value;
    }
    - (Endpoint1 *)body_endpoint {
        MSGSTART("WIBodySnippet:-(Endpoint1*)body_endpoint")

        /*i-999*/ Endpoint1 * ret = v_body_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)bodyToEndpoint:(id)abody {
        MSGSTART("WIBodySnippet:-(NSObject<LinkEndpoint>*)bodyToEndpoint:(id)abody")
        return [abody performSelector:@selector(snippets)];
    }
    - (constchar *)cdescription {
        MSGSTART("WIBodySnippet:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIBodySnippet:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("WIBodySnippet:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_strings,self); v_strings = nil;

        REMOVEOWNER(v_body_endpoint,self); v_body_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WIBodySnippet:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WIBodySnippet:-(void)die")
        self.body = nil;

        /*i900*/}
    - (WIBodySnippet *)init {
        MSGSTART("WIBodySnippet:-(WIBodySnippet*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWIBodySnippet];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableBody:(id)abody {
        MSGSTART("WIBodySnippet:-(NSNumber*)isAcceptableBody:(id)abody")
        return [abody isKindOfClass:[WIBody class]] ? @YES : nil;
    }
    - (kid)keyInBody {
        MSGSTART("WIBodySnippet:-(kid)keyInBody")

        for (id<NSCopying> key in self.keysInBody) {
            return key;
        }
        return nil;
    }
    - (NSSet *)keysInBody {
        MSGSTART("WIBodySnippet:-(NSSet*)keysInBody")

        if (!v_body_endpoint.value) return [NSSet set];

        NSMutableDictionary<DictionaryLinkEndpoint> *body_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self bodyToEndpoint : v_body_endpoint.value];
        return (NSSet *)[body_ep.__dictionaryObjectKeys objectForKey:self];
    }
    - (void)mergeWith:(WIBodySnippet *)other {
        MSGSTART("WIBodySnippet:-(void)mergeWith:(WIBodySnippet*)other")

        [self.strings mergeWith : other.strings];
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIBodySnippet:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)retract {
        MSGSTART("WIBodySnippet:-(void)retract")
        self.body = nil;
    }
    - (NSDictionary *)seenTreeNodeData {
        MSGSTART("WIBodySnippet:-(NSDictionary*)seenTreeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i999*/ return ret ? ret : self.treeNodeData;
    }
    - (void)setBody:(WIBody *)v {
        MSGSTART("WIBodySnippet:-(void)setBody:(WIBody*)v")
        [v_body_endpoint setValue : v];
    }
    - (void)setBody_endpoint:(Endpoint1 *)v {
        MSGSTART("WIBodySnippet:-(void)setBody_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIBodySnippet) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(body_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_body_endpoint == v) return;

        /*i-900*/ {
            v_body_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_body_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setKeyInBody:(kid)v {
        MSGSTART("WIBodySnippet:-(void)setKeyInBody:(kid)v")

        self.keysInBody = [NSSet setWithObject:v];
    }
    - (void)setKeysInBody:(NSSet *)v {
        MSGSTART("WIBodySnippet:-(void)setKeysInBody:(NSSet*)v")

        NSMutableDictionary<DictionaryLinkEndpoint> *body_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self bodyToEndpoint : v_body_endpoint.value];
        NSSet *body_keys_were = self.keysInBody,*body_inss,*body_dels;
        if ([Util getInsertsAndDeletesForSetWhenChanging:body_keys_were to:v inss:&body_inss dels:&body_dels]) {
            for (id<NSCopying> key in body_dels) {
                [body_ep removeObjectForKey:key];
            }
            for (id<NSCopying> key in body_inss) {
                [body_ep setObject:self forKey:key];
            }
        }
    }
    - (void)setStrings:(MutableSet *)v {
        MSGSTART("WIBodySnippet:-(void)setStrings:(MutableSet*)v")

        /*i-905*/ if (v_strings == v) return;

        /*i-900*/ {
            v_strings = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_strings,self); ADDOWNER(v,self);
    }
    - (MutableSet *)strings {
        MSGSTART("WIBodySnippet:-(MutableSet*)strings")

        /*i-999*/ MutableSet * ret = v_strings;
        /*i999*/ return ret;
    }
    - (NSDictionary *)treeNodeData {
        MSGSTART("WIBodySnippet:-(NSDictionary*)treeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"type":@"Snippet",
            @"name":[NSString stringWithFormat:@"@%@: %@",[(id)self.keyInBody jsonString],self.strings.jsonString]
        };


        /*i999*/ return ret ? ret : @{};
    }
    - (NSSet *)treePropertyNames {
        MSGSTART("WIBodySnippet:-(NSSet*)treePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (NSSet *)treeSingleNodePropertyNames {
        MSGSTART("WIBodySnippet:-(NSSet*)treeSingleNodePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIClass
    #define _WIClass_           WIClass__
    #define _className_         wIClass
    #define _Class_             WIClass__
    @implementation WIClass

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIClass {
        MSGSTART("WIClass:-(void)_startObjectOfClassWIClass")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-950*/ v_varCtxts = [[EndpointD alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableVarCtxt:) otherEndObjectToEndpoint:@selector(varCtxtToEndpoint:)];

        v_types = [[EndpointD alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableType:) otherEndObjectToEndpoint:@selector(typeToEndpoint:)];

        /*i-500*//*ivar*/ v_subclasss = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSubclass:) otherEndObjectToEndpoint:@selector(subclassToEndpoint:)]);  ADDOWNER(v_subclasss,self);
        /*ivar*/ v_conformingClasss = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableConformingClass:) otherEndObjectToEndpoint:@selector(conformingClassToEndpoint:)]);  ADDOWNER(v_conformingClasss,self);
        /*ivar*/ v_subprotocols = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSubprotocol:) otherEndObjectToEndpoint:@selector(subprotocolToEndpoint:)]);  ADDOWNER(v_subprotocols,self);
        /*ivar*/ v_superclasss = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSuperclass:) otherEndObjectToEndpoint:@selector(superclassToEndpoint:)]);  ADDOWNER(v_superclasss,self);
        /*ivar*/ v_protocolInCtxt_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableProtocolInCtxt:) otherEndObjectToEndpoint:@selector(protocolInCtxtToEndpoint:)]);  ADDOWNER(v_protocolInCtxt_endpoint,self);
        /*ivar*/ v_settings = ([MutableDictionary dictionary]);  ADDOWNER(v_settings,self);
        /*ivar*/ v_superprotocols = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSuperprotocol:) otherEndObjectToEndpoint:@selector(superprotocolToEndpoint:)]);  ADDOWNER(v_superprotocols,self);
        /*ivar*/ v_classInCtxt_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableClassInCtxt:) otherEndObjectToEndpoint:@selector(classInCtxtToEndpoint:)]);  ADDOWNER(v_classInCtxt_endpoint,self);
        /*ivar*/ v_conformedProtocols = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableConformedProtocol:) otherEndObjectToEndpoint:@selector(conformedProtocolToEndpoint:)]);  ADDOWNER(v_conformedProtocols,self);

        /*i0*/}
    - (void)addConformedProtocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)addConformedProtocol:(WIClass*)v")
        [v_conformedProtocols addObject : v];
    }
    - (void)addConformingClass:(WIClass *)v {
        MSGSTART("WIClass:-(void)addConformingClass:(WIClass*)v")
        [v_conformingClasss addObject : v];
    }
    - (void)addSubclass:(WIClass *)v {
        MSGSTART("WIClass:-(void)addSubclass:(WIClass*)v")
        [v_subclasss addObject : v];
    }
    - (void)addSubprotocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)addSubprotocol:(WIClass*)v")
        [v_subprotocols addObject : v];
    }
    - (void)addSuperclass:(WIClass *)v {
        MSGSTART("WIClass:-(void)addSuperclass:(WIClass*)v")
        [v_superclasss addObject : v];
    }
    - (void)addSuperprotocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)addSuperprotocol:(WIClass*)v")
        [v_superprotocols addObject : v];
    }
    - (void)applyConformedProtocolRegexes {
        MSGSTART("WIClass:-(void)applyConformedProtocolRegexes")

        NSArray * regexes = (NSArray *)self.context.keyInFile;
        if (!regexes.count) return;

        NSMutableSet *newConformedProtocols = nil;
        for (WIClass *conformedProtocol in self.conformedProtocols) {
            NSArray *protocolRegexes = (NSArray *)self.context.keyInFile;
            if (regexes.count < protocolRegexes.count) continue;

            int addAt;
            bool correctEnding = NO;
            for (addAt = 0; !correctEnding; addAt++) {
                correctEnding = YES;
                for (int i = 0; correctEnding && (i + addAt < regexes.count); i++) {
                    if (![regexes[i] isEqual:protocolRegexes[i + addAt + protocolRegexes.count - regexes.count]])
                        correctEnding = NO;
                }
            }
            if (!addAt) continue;

            NSMutableArray *newProtocolRegexes = protocolRegexes.mutableCopy;
            for (int i = addAt; i < regexes.count; i++) {
                [newProtocolRegexes addObject:[regexes[i] copy]];
            }

            WIClass *newConformedProtocol = [[self.file contextWithRegexes:newProtocolRegexes] equivClassTo:conformedProtocol];
            [newConformedProtocol mergeWith:conformedProtocol];

            [newConformedProtocol applyConformedProtocolRegexes];

            if (!newConformedProtocols) newConformedProtocols = self.conformedProtocols.mutableCopy;
            [newConformedProtocols removeObject:conformedProtocol];
            [newConformedProtocols addObject:newConformedProtocol];
        }

        if (newConformedProtocols) [self.conformedProtocols setSet:newConformedProtocols];
    }
    - (WIClass *)applyRegexes {
        MSGSTART("WIClass:-(WIClass*)applyRegexes")

        WICtxt * toctxt = [self.file ctxtForKey:@[]];
        if (self.context == toctxt) return self;

        NSArray *regexes = (NSArray *)self.context.keyInFile;
        WIClass *toc = (self.classInCtxt ?
                        [toctxt classWithName:[self.name stringByApplyingRegexes:regexes]] :
                        [toctxt protocolWithName:[self.name stringByApplyingRegexes:regexes]]
            );

        NSSet *superclasses = self.superclasss.copy;
        NSSet *subclasses = self.subclasss.copy;
        NSSet *superprotocols = self.superprotocols.copy;
        NSSet *subprotocols = self.subprotocols.copy;
        NSSet *conformedProtocols = self.conformedProtocols.copy;
        NSSet *conformingClasss = self.conformingClasss.copy;

        [self.superclasss removeAllObjects];
        [self.subclasss removeAllObjects];
        [self.superprotocols removeAllObjects];
        [self.subprotocols removeAllObjects];
        [self.conformedProtocols removeAllObjects];
        [self.conformingClasss removeAllObjects];

        NSMutableSet *newSuperclasses = NSMutableSet.set;
        NSMutableSet *newSubclasses = NSMutableSet.set;
        NSMutableSet *newSuperprotocols = NSMutableSet.set;
        NSMutableSet *newSubprotocols = NSMutableSet.set;
        NSMutableSet *newConformedProtocols = NSMutableSet.set;
        NSMutableSet *newConformingClasses = NSMutableSet.set;

        for (WIClass *c in superclasses) {
            [newSuperclasses addObject:[c applyRegexes]];
        }
        for (WIClass *c in subclasses) {
            [newSubclasses addObject:[c applyRegexes]];
        }
        for (WIClass *c in superprotocols) {
            [newSuperprotocols addObject:[c applyRegexes]];
        }
        for (WIClass *c in subprotocols) {
            [newSubprotocols addObject:[c applyRegexes]];
        }
        for (WIClass *c in conformedProtocols) {
            [newConformedProtocols addObject:[c applyRegexes]];
        }
        for (WIClass *c in conformingClasss) {
            [newConformingClasses addObject:[c applyRegexes]];
        }

        for (WIClass *c in newSuperclasses) {
            [toc addSuperclass:c];
        }
        for (WIClass *c in newSubclasses) {
            [toc addSubclass:c];
        }
        for (WIClass *c in newSuperprotocols) {
            [toc addSuperprotocol:c];
        }
        for (WIClass *c in newSubprotocols) {
            [toc addSubprotocol:c];
        }
        for (WIClass *c in newConformedProtocols) {
            [toc addConformedProtocol:c];
        }
        for (WIClass *c in newConformingClasses) {
            [toc addConformingClass:c];
        }

        [toc.settings mergeWith:[self.settings dictionaryByApplyingRegexes:regexes]];

        for (NSObject<NSCopying> *key in self.varCtxts) {
            [[self varCtxtForKey:key] applyRegexes:regexes to:toc];
        }
        return toc;
    }
    - (NSDictionary *)asD3Tree {
        MSGSTART("WIClass:-(NSDictionary*)asD3Tree")
        return [Treeable asD3Tree:self.asTree];
    }
    - (NSString *)asD3TreeJSON {
        MSGSTART("WIClass:-(NSString*)asD3TreeJSON")

        NSError * err = nil;
        return [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:self.asD3Tree options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSDictionary *)asTree {
        MSGSTART("WIClass:-(NSDictionary*)asTree")
        return [self asTree:NSMutableSet.set];
    }
    - (NSMutableDictionary *)asTree:(NSMutableSet *)seen {
        MSGSTART("WIClass:-(NSMutableDictionary*)asTree:(NSMutableSet*)seen")

        return ([Treeable asTree:seen object:self]);
    }
    - (constchar *)cdescription {
        MSGSTART("WIClass:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WICtxt *)classInCtxt {
        MSGSTART("WIClass:-(WICtxt*)classInCtxt")
        return (WICtxt *)v_classInCtxt_endpoint.value;
    }
    - (Endpoint1 *)classInCtxt_endpoint {
        MSGSTART("WIClass:-(Endpoint1*)classInCtxt_endpoint")

        /*i-999*/ Endpoint1 * ret = v_classInCtxt_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)classInCtxtToEndpoint:(id)aclassInCtxt {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)classInCtxtToEndpoint:(id)aclassInCtxt")
        return [aclassInCtxt performSelector:@selector(clazzs)];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIClass:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (EndpointS *)conformedProtocols {
        MSGSTART("WIClass:-(EndpointS*)conformedProtocols")

        /*i-999*/ EndpointS * ret = v_conformedProtocols;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)conformedProtocolToEndpoint:(id)aconformedProtocol {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)conformedProtocolToEndpoint:(id)aconformedProtocol")
        return [aconformedProtocol performSelector:@selector(conformingClasss)];
    }
    - (EndpointS *)conformingClasss {
        MSGSTART("WIClass:-(EndpointS*)conformingClasss")

        /*i-999*/ EndpointS * ret = v_conformingClasss;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)conformingClassToEndpoint:(id)aconformingClass {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)conformingClassToEndpoint:(id)aconformingClass")
        return [aconformingClass performSelector:@selector(conformedProtocols)];
    }
    - (WICtxt *)context {
        MSGSTART("WIClass:-(WICtxt*)context")
        return self.classInCtxt ? self.classInCtxt : self.protocolInCtxt;
    }
    - (void)dealloc {
        MSGSTART("WIClass:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_varCtxts,self); v_varCtxts = nil;

        REMOVEOWNER(v_subclasss,self); v_subclasss = nil;

        REMOVEOWNER(v_conformingClasss,self); v_conformingClasss = nil;

        REMOVEOWNER(v_subprotocols,self); v_subprotocols = nil;

        REMOVEOWNER(v_superclasss,self); v_superclasss = nil;

        REMOVEOWNER(v_protocolInCtxt_endpoint,self); v_protocolInCtxt_endpoint = nil;

        REMOVEOWNER(v_settings,self); v_settings = nil;

        REMOVEOWNER(v_superprotocols,self); v_superprotocols = nil;

        REMOVEOWNER(v_classInCtxt_endpoint,self); v_classInCtxt_endpoint = nil;

        REMOVEOWNER(v_types,self); v_types = nil;

        REMOVEOWNER(v_conformedProtocols,self); v_conformedProtocols = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WIClass:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSString *)descriptiveName {
        MSGSTART("WIClass:-(NSString*)descriptiveName")

        return [(NSDictionary *)self.context.keyInFile count] ?
               (self.settings.count ?
                [NSString stringWithFormat:@"%@ %@ =>(%@)",self.name,self.settings.jsonString,[(id)self.context.keyInFile jsonString]] :
                [NSString stringWithFormat:@"%@ =>(%@)",self.name,[(id)self.context.keyInFile jsonString]]
               ) :
               ([(NSDictionary *)self.settings count] ?
                [NSString stringWithFormat:@"%@ %@",self.name,self.settings.jsonString] :
                [NSString stringWithFormat:@"%@",self.name]
               )
        ;
    }
    - (void)die {
        MSGSTART("WIClass:-(void)die")
        self.classInCtxt = nil;
        self.protocolInCtxt = nil;
        [v_superclasss removeAllObjects];
        [v_subclasss removeAllObjects];
        [v_conformedProtocols removeAllObjects];
        [v_conformingClasss removeAllObjects];
        [v_superprotocols removeAllObjects];
        [v_subprotocols removeAllObjects];
        [v_varCtxts removeAllObjects];
        [v_types removeAllObjects];

        /*i900*/}
    - (WIType *)equivTypeTo:(WIType *)other {
        MSGSTART("WIClass:-(WIType*)equivTypeTo:(WIType*)other")

        return [self typeWithModifiers:(NSArray *)other.keyInClazz];
    }
    - (WIVarContext *)equivVarContextTo:(WIVarContext *)other {
        MSGSTART("WIClass:-(WIVarContext*)equivVarContextTo:(WIVarContext*)other")

        return [self varCtxtWithSettings:(NSSet *)other.keyInClazz];
    }
    - (WIVar *)equivVarTo:(WIVar *)other {
        MSGSTART("WIClass:-(WIVar*)equivVarTo:(WIVar*)other")

        return [[self equivVarContextTo:other.context] equivVarTo:other];
    }
    - (WIFile *)file {
        MSGSTART("WIClass:-(WIFile*)file")
        return self.context.file;
    }
    - (WIClass *)init {
        MSGSTART("WIClass:-(WIClass*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWIClass];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableClassInCtxt:(id)aclassInCtxt {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableClassInCtxt:(id)aclassInCtxt")
        return [aclassInCtxt isKindOfClass:[WICtxt class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableConformedProtocol:(id)aconformedProtocol {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableConformedProtocol:(id)aconformedProtocol")
        return [aconformedProtocol isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableConformingClass:(id)aconformingClass {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableConformingClass:(id)aconformingClass")
        return [aconformingClass isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableProtocolInCtxt:(id)aprotocolInCtxt {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableProtocolInCtxt:(id)aprotocolInCtxt")
        return [aprotocolInCtxt isKindOfClass:[WICtxt class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSubclass:(id)asubclass {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableSubclass:(id)asubclass")
        return [asubclass isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSubprotocol:(id)asubprotocol {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableSubprotocol:(id)asubprotocol")
        return [asubprotocol isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSuperclass:(id)asuperclass {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableSuperclass:(id)asuperclass")
        return [asuperclass isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSuperprotocol:(id)asuperprotocol {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableSuperprotocol:(id)asuperprotocol")
        return [asuperprotocol isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableType:(id)atype {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableType:(id)atype")
        return [atype isKindOfClass:[WIType class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableVarCtxt:(id)avarCtxt {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableVarCtxt:(id)avarCtxt")
        return [avarCtxt isKindOfClass:[WIVarContext class]] ? @YES : nil;
    }
    - (kid)keyInClassInCtxt {
        MSGSTART("WIClass:-(kid)keyInClassInCtxt")

        for (id<NSCopying> key in self.keysInClassInCtxt) {
            return key;
        }
        return nil;
    }
    - (kid)keyInProtocolInCtxt {
        MSGSTART("WIClass:-(kid)keyInProtocolInCtxt")

        for (id<NSCopying> key in self.keysInProtocolInCtxt) {
            return key;
        }
        return nil;
    }
    - (NSSet *)keysInClassInCtxt {
        MSGSTART("WIClass:-(NSSet*)keysInClassInCtxt")

        if (!v_classInCtxt_endpoint.value) return [NSSet set];

        NSMutableDictionary<DictionaryLinkEndpoint> *classInCtxt_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self classInCtxtToEndpoint : v_classInCtxt_endpoint.value];
        return (NSSet *)[classInCtxt_ep.__dictionaryObjectKeys objectForKey:self];
    }
    - (NSSet *)keysInProtocolInCtxt {
        MSGSTART("WIClass:-(NSSet*)keysInProtocolInCtxt")

        if (!v_protocolInCtxt_endpoint.value) return [NSSet set];

        NSMutableDictionary<DictionaryLinkEndpoint> *protocolInCtxt_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self protocolInCtxtToEndpoint : v_protocolInCtxt_endpoint.value];
        return (NSSet *)[protocolInCtxt_ep.__dictionaryObjectKeys objectForKey:self];
    }
    - (void)mergeWith:(WIClass *)other {
        MSGSTART("WIClass:-(void)mergeWith:(WIClass*)other")

        [self.settings mergeWith : other.settings];

        for (WIClass *o in other.superclasss) {
            [self addSuperclass:[self.file equivClassTo:o]];
        }
        for (WIClass *o in other.subclasss) {
            [self addSubclass:[self.file equivClassTo:o]];
        }
        {
            NSMutableSet *s = self.subclasss.copy;
            [self.subclasss minusSet:self.superclasss];
            [self.superclasss minusSet:s];
        }

        for (WIClass *o in other.conformedProtocols) {
            [self addConformedProtocol:[self.file equivClassTo:o]];
        }
        for (WIClass *o in other.conformingClasss) {
            [self addConformingClass:[self.file equivClassTo:o]];
        }
        {
            NSMutableSet *s = self.conformingClasss.copy;
            [self.conformingClasss minusSet:self.conformedProtocols];
            [self.conformedProtocols minusSet:s];
        }

        for (WIClass *o in other.superprotocols) {
            [self addSuperprotocol:[self.file equivClassTo:o]];
        }
        for (WIClass *o in other.subprotocols) {
            [self addSubprotocol:[self.file equivClassTo:o]];
        }
        {
            NSMutableSet *s = self.subprotocols.copy;
            [self.subprotocols minusSet:self.superprotocols];
            [self.superprotocols minusSet:s];
        }

        for (NSObject<NSCopying> *k in other.varCtxts) {
            WIVarContext *o = [other varCtxtForKey:k];
            [[self equivVarContextTo:o] mergeWith:o];
        }

        for (NSObject<NSCopying> *k in other.types) {
            WIType *o = [other typeForKey:k];
            [[self equivTypeTo:o] mergeWith:o];
        }
    }
    - (NSString *)name {
        MSGSTART("WIClass:-(NSString*)name")
        return (NSString *)(self.classInCtxt ? self.keyInClassInCtxt : self.keyInProtocolInCtxt);
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIClass:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    #ifndef __SWIFT__
        - (void)process:(Token *)token regexes:(NSMutableArray *)regexes settings:(NSSet *)settings doingInitialSettings:(bool &)doingInitialSettings outerClass:(WIClass *)outerClass outerLinkType:(NSString *)outerLinkType outerLinkVar:(WIVar *)outerLinkVar mods:(NSArray *)mods {
            MSGSTART("WIClass:-(void)process:(Token*)token regexes:(NSMutableArray*)regexes settings:(NSSet*)settings doingInitialSettings:(bool&)doingInitialSettings outerClass:(WIClass*)outerClass outerLinkType:(NSString*)outerLinkType outerLinkVar:(WIVar*)outerLinkVar mods:(NSArray*)mods")

            Token * t = [TokenHelper actualToken:token];
            NSArray *chs;

            if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"setting"]]) ) {
                if (doingInitialSettings && [TokenHelper isJustSetting:token]) {
                    [TokenHelper settingDictionaryForToken:token addTo:self.settings];
                }
                else {
                    NSSet *newSettings = [settings setByAddingObject:( (Token *)t.children[0] ).contents];
                    doingInitialSettings = NO;
                    for (Token *ch in chs) {
                        [self process:ch regexes:regexes settings:newSettings doingInitialSettings:doingInitialSettings outerClass:outerClass outerLinkType:outerLinkType outerLinkVar:outerLinkVar mods:mods];
                    }
                }
            }
            else if ([TokenHelper actualToken:t havingRuleIn:@[@"class",@"protocol",@"classwprotocol",@"mod"]]) {
                [[self.context.file contextWithRegexes:regexes] process:token regexes:regexes.mutableCopy settings:settings outerClass:self outerLinkType:nil outerLinkVar:nil mods:@[]];
            }
            else if ([TokenHelper actualToken:t havingRuleIn:@[@"regex"]]) {
                NSDictionary *re = @{
                    ( (Token *)t.children[0] ).contents:( (Token *)t.children[1] ).contents
                };
                if (![(NSDictionary *)regexes.lastObject isEqual : re])
                    [regexes addObject:re];
            }
            else if ( outerClass && ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"var",@"fn"]]) ) ) {
                WIVarContext *varCtxt = [outerClass varCtxtWithSettings:settings];
                WIVar *var = [varCtxt varForVarToken:t type:[self typeWithModifiers:mods] regexes:regexes];

                bool varDoingInitialSettings = YES;
                NSMutableArray *newRegexes = regexes.mutableCopy;
                for (Token *ch in chs) {
                    [var process:ch regexes:newRegexes settings:settings doingInitialSettings:varDoingInitialSettings];
                }
            }
        }
    #endif // __SWIFT__
    - (WICtxt *)protocolInCtxt {
        MSGSTART("WIClass:-(WICtxt*)protocolInCtxt")
        return (WICtxt *)v_protocolInCtxt_endpoint.value;
    }
    - (Endpoint1 *)protocolInCtxt_endpoint {
        MSGSTART("WIClass:-(Endpoint1*)protocolInCtxt_endpoint")

        /*i-999*/ Endpoint1 * ret = v_protocolInCtxt_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)protocolInCtxtToEndpoint:(id)aprotocolInCtxt {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)protocolInCtxtToEndpoint:(id)aprotocolInCtxt")
        return [aprotocolInCtxt performSelector:@selector(protocols)];
    }
    - (void)removeAllConformedProtocols {
        MSGSTART("WIClass:-(void)removeAllConformedProtocols")
        [v_conformedProtocols removeAllObjects];
    }
    - (void)removeAllConformingClasss {
        MSGSTART("WIClass:-(void)removeAllConformingClasss")
        [v_conformingClasss removeAllObjects];
    }
    - (void)removeAllSubclasss {
        MSGSTART("WIClass:-(void)removeAllSubclasss")
        [v_subclasss removeAllObjects];
    }
    - (void)removeAllSubprotocols {
        MSGSTART("WIClass:-(void)removeAllSubprotocols")
        [v_subprotocols removeAllObjects];
    }
    - (void)removeAllSuperclasss {
        MSGSTART("WIClass:-(void)removeAllSuperclasss")
        [v_superclasss removeAllObjects];
    }
    - (void)removeAllSuperprotocols {
        MSGSTART("WIClass:-(void)removeAllSuperprotocols")
        [v_superprotocols removeAllObjects];
    }
    - (void)removeAllTypes {
        MSGSTART("WIClass:-(void)removeAllTypes")
        [v_types removeAllObjects];
    }
    - (void)removeAllVarCtxts {
        MSGSTART("WIClass:-(void)removeAllVarCtxts")
        [v_varCtxts removeAllObjects];
    }
    - (void)removeConformedProtocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)removeConformedProtocol:(WIClass*)v")
        [v_conformedProtocols removeObject : v];
    }
    - (void)removeConformingClass:(WIClass *)v {
        MSGSTART("WIClass:-(void)removeConformingClass:(WIClass*)v")
        [v_conformingClasss removeObject : v];
    }
    - (void)removeSubclass:(WIClass *)v {
        MSGSTART("WIClass:-(void)removeSubclass:(WIClass*)v")
        [v_subclasss removeObject : v];
    }
    - (void)removeSubprotocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)removeSubprotocol:(WIClass*)v")
        [v_subprotocols removeObject : v];
    }
    - (void)removeSuperclass:(WIClass *)v {
        MSGSTART("WIClass:-(void)removeSuperclass:(WIClass*)v")
        [v_superclasss removeObject : v];
    }
    - (void)removeSuperprotocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)removeSuperprotocol:(WIClass*)v")
        [v_superprotocols removeObject : v];
    }
    - (void)removeTypeForKey:(id<NSCopying> )key {
        MSGSTART("WIClass:-(void)removeTypeForKey:(id<NSCopying>)key")
        [v_types removeObjectForKey : key];
    }
    - (void)removeVarCtxtForKey:(id<NSCopying> )key {
        MSGSTART("WIClass:-(void)removeVarCtxtForKey:(id<NSCopying>)key")
        [v_varCtxts removeObjectForKey : key];
    }
    - (void)retract {
        MSGSTART("WIClass:-(void)retract")
        self.classInCtxt = nil;
        self.protocolInCtxt = nil;
        [self.superclasss removeAllObjects];
        [self.subclasss removeAllObjects];
        [self.conformedProtocols removeAllObjects];
        [self.conformingClasss removeAllObjects];
        [self.superprotocols removeAllObjects];
        [self.subprotocols removeAllObjects];
        [self.varCtxts removeAllObjects];
        [self.types removeAllObjects];
    }
    - (NSDictionary *)seenTreeNodeData {
        MSGSTART("WIClass:-(NSDictionary*)seenTreeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i999*/ return ret ? ret : self.treeNodeData;
    }
    - (void)setClassInCtxt:(WICtxt *)v {
        MSGSTART("WIClass:-(void)setClassInCtxt:(WICtxt*)v")
        [v_classInCtxt_endpoint setValue : v];
    }
    - (void)setClassInCtxt_endpoint:(Endpoint1 *)v {
        MSGSTART("WIClass:-(void)setClassInCtxt_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(classInCtxt_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_classInCtxt_endpoint == v) return;

        /*i-900*/ {
            v_classInCtxt_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_classInCtxt_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setConformedProtocols:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setConformedProtocols:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(conformedProtocols=\"blah\") to set the property)");

        /*i-905*/ if (v_conformedProtocols == v) return;

        /*i-900*/ {
            v_conformedProtocols = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_conformedProtocols,self); ADDOWNER(v,self);
    }
    - (void)setConformingClasss:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setConformingClasss:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(conformingClasss=\"blah\") to set the property)");

        /*i-905*/ if (v_conformingClasss == v) return;

        /*i-900*/ {
            v_conformingClasss = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_conformingClasss,self); ADDOWNER(v,self);
    }
    - (void)setKeyInClassInCtxt:(kid)v {
        MSGSTART("WIClass:-(void)setKeyInClassInCtxt:(kid)v")

        self.keysInClassInCtxt = [NSSet setWithObject:v];
    }
    - (void)setKeyInProtocolInCtxt:(kid)v {
        MSGSTART("WIClass:-(void)setKeyInProtocolInCtxt:(kid)v")

        self.keysInProtocolInCtxt = [NSSet setWithObject:v];
    }
    - (void)setKeysInClassInCtxt:(NSSet *)v {
        MSGSTART("WIClass:-(void)setKeysInClassInCtxt:(NSSet*)v")

        NSMutableDictionary<DictionaryLinkEndpoint> *classInCtxt_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self classInCtxtToEndpoint : v_classInCtxt_endpoint.value];
        NSSet *classInCtxt_keys_were = self.keysInClassInCtxt,*classInCtxt_inss,*classInCtxt_dels;
        if ([Util getInsertsAndDeletesForSetWhenChanging:classInCtxt_keys_were to:v inss:&classInCtxt_inss dels:&classInCtxt_dels]) {
            for (id<NSCopying> key in classInCtxt_dels) {
                [classInCtxt_ep removeObjectForKey:key];
            }
            for (id<NSCopying> key in classInCtxt_inss) {
                [classInCtxt_ep setObject:self forKey:key];
            }
        }
    }
    - (void)setKeysInProtocolInCtxt:(NSSet *)v {
        MSGSTART("WIClass:-(void)setKeysInProtocolInCtxt:(NSSet*)v")

        NSMutableDictionary<DictionaryLinkEndpoint> *protocolInCtxt_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self protocolInCtxtToEndpoint : v_protocolInCtxt_endpoint.value];
        NSSet *protocolInCtxt_keys_were = self.keysInProtocolInCtxt,*protocolInCtxt_inss,*protocolInCtxt_dels;
        if ([Util getInsertsAndDeletesForSetWhenChanging:protocolInCtxt_keys_were to:v inss:&protocolInCtxt_inss dels:&protocolInCtxt_dels]) {
            for (id<NSCopying> key in protocolInCtxt_dels) {
                [protocolInCtxt_ep removeObjectForKey:key];
            }
            for (id<NSCopying> key in protocolInCtxt_inss) {
                [protocolInCtxt_ep setObject:self forKey:key];
            }
        }
    }
    - (void)setProtocolInCtxt:(WICtxt *)v {
        MSGSTART("WIClass:-(void)setProtocolInCtxt:(WICtxt*)v")
        [v_protocolInCtxt_endpoint setValue : v];
    }
    - (void)setProtocolInCtxt_endpoint:(Endpoint1 *)v {
        MSGSTART("WIClass:-(void)setProtocolInCtxt_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(protocolInCtxt_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_protocolInCtxt_endpoint == v) return;

        /*i-900*/ {
            v_protocolInCtxt_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_protocolInCtxt_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setSettings:(MutableDictionary *)v {
        MSGSTART("WIClass:-(void)setSettings:(MutableDictionary*)v")

        /*i-905*/ if (v_settings == v) return;

        /*i-900*/ {
            v_settings = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_settings,self); ADDOWNER(v,self);
    }
    - (void)setSubclasss:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setSubclasss:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(subclasss=\"blah\") to set the property)");

        /*i-905*/ if (v_subclasss == v) return;

        /*i-900*/ {
            v_subclasss = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_subclasss,self); ADDOWNER(v,self);
    }
    - (void)setSubprotocols:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setSubprotocols:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(subprotocols=\"blah\") to set the property)");

        /*i-905*/ if (v_subprotocols == v) return;

        /*i-900*/ {
            v_subprotocols = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_subprotocols,self); ADDOWNER(v,self);
    }
    - (void)setSuperclasss:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setSuperclasss:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(superclasss=\"blah\") to set the property)");

        /*i-905*/ if (v_superclasss == v) return;

        /*i-900*/ {
            v_superclasss = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_superclasss,self); ADDOWNER(v,self);
    }
    - (void)setSuperprotocols:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setSuperprotocols:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(superprotocols=\"blah\") to set the property)");

        /*i-905*/ if (v_superprotocols == v) return;

        /*i-900*/ {
            v_superprotocols = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_superprotocols,self); ADDOWNER(v,self);
    }
    - (MutableDictionary *)settings {
        MSGSTART("WIClass:-(MutableDictionary*)settings")

        /*i-999*/ MutableDictionary * ret = v_settings;
        /*i999*/ return ret;
    }
    - (void)setType:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WIClass:-(void)setType:(id)v forKey:(id<NSCopying>)key")
        [v_types setObject : v forKey : key];
    }
    - (void)setTypes:(EndpointD *)v {
        MSGSTART("WIClass:-(void)setTypes:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(types=\"blah\") to set the property)");

        /*i-905*/ if (v_types == v) return;

        /*i-900*/ {
            v_types = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_types,self); ADDOWNER(v,self);
    }
    - (void)setVarCtxt:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WIClass:-(void)setVarCtxt:(id)v forKey:(id<NSCopying>)key")
        [v_varCtxts setObject : v forKey : key];
    }
    - (void)setVarCtxts:(EndpointD *)v {
        MSGSTART("WIClass:-(void)setVarCtxts:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(varCtxts=\"blah\") to set the property)");

        /*i-905*/ if (v_varCtxts == v) return;

        /*i-900*/ {
            v_varCtxts = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_varCtxts,self); ADDOWNER(v,self);
    }
    - (EndpointS *)subclasss {
        MSGSTART("WIClass:-(EndpointS*)subclasss")

        /*i-999*/ EndpointS * ret = v_subclasss;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)subclassToEndpoint:(id)asubclass {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)subclassToEndpoint:(id)asubclass")
        return [asubclass performSelector:@selector(superclasss)];
    }
    - (EndpointS *)subprotocols {
        MSGSTART("WIClass:-(EndpointS*)subprotocols")

        /*i-999*/ EndpointS * ret = v_subprotocols;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)subprotocolToEndpoint:(id)asubprotocol {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)subprotocolToEndpoint:(id)asubprotocol")
        return [asubprotocol performSelector:@selector(superprotocols)];
    }
    - (EndpointS *)superclasss {
        MSGSTART("WIClass:-(EndpointS*)superclasss")

        /*i-999*/ EndpointS * ret = v_superclasss;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)superclassToEndpoint:(id)asuperclass {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)superclassToEndpoint:(id)asuperclass")
        return [asuperclass performSelector:@selector(subclasss)];
    }
    - (EndpointS *)superprotocols {
        MSGSTART("WIClass:-(EndpointS*)superprotocols")

        /*i-999*/ EndpointS * ret = v_superprotocols;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)superprotocolToEndpoint:(id)asuperprotocol {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)superprotocolToEndpoint:(id)asuperprotocol")
        return [asuperprotocol performSelector:@selector(subprotocols)];
    }
    - (NSDictionary *)treeNodeData {
        MSGSTART("WIClass:-(NSDictionary*)treeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"collapsed":@YES,
            @"type":(self.classInCtxt ? @"Class" : @"Protocol"),
            @"name":self.name,
            @"data":@{
                @"collapsed":@YES,
                @"path":@[
                    [(id)self.context.keyInFile jsonString],
                    self.classInCtxt ? self.name : [NSString stringWithFormat:@"<%@>",self.name]
                ]
            }
        };

        /*i999*/ return ret ? ret : @{};
    }
    - (NSSet *)treePropertyNames {
        MSGSTART("WIClass:-(NSSet*)treePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i0*/ ret = @[@"varCtxts",@"types",@"__settings"];

            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (NSSet *)treeSingleNodePropertyNames {
        MSGSTART("WIClass:-(NSSet*)treeSingleNodePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i0*/ ret = @[@"superclasss",@"conformedProtocols",@"superprotocols"];

            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (WIType *)typeForKey:(id<NSCopying> )key {
        MSGSTART("WIClass:-(WIType*)typeForKey:(id<NSCopying>)key")
        return [v_types objectForKey:key];
    }
    - (EndpointD *)types {
        MSGSTART("WIClass:-(EndpointD*)types")

        /*i-999*/ EndpointD * ret = v_types;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)typeToEndpoint:(id)atype")
        return [atype performSelector:@selector(clazz_endpoint)];
    }
    - (WIType *)typeWithModifiers:(NSArray *)mods {
        MSGSTART("WIClass:-(WIType*)typeWithModifiers:(NSArray*)mods")

        WIType * ret = [self typeForKey:mods];
        if (!ret) [self setType:ret = [WIType new] forKey:mods.copy];
        return ret;
    }
    - (WIVarContext *)varCtxtForKey:(id<NSCopying> )key {
        MSGSTART("WIClass:-(WIVarContext*)varCtxtForKey:(id<NSCopying>)key")
        return [v_varCtxts objectForKey:key];
    }
    - (EndpointD *)varCtxts {
        MSGSTART("WIClass:-(EndpointD*)varCtxts")

        /*i-999*/ EndpointD * ret = v_varCtxts;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)varCtxtToEndpoint:(id)avarCtxt {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)varCtxtToEndpoint:(id)avarCtxt")
        return [avarCtxt performSelector:@selector(clazz_endpoint)];
    }
    - (WIVarContext *)varCtxtWithSettings:(NSSet *)settings {
        MSGSTART("WIClass:-(WIVarContext*)varCtxtWithSettings:(NSSet*)settings")

        WIVarContext * ret = [self varCtxtForKey:settings];
        if (!ret) [self setVarCtxt:ret = [WIVarContext new] forKey:settings.copy];
        return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WICtxt
    #define _WIClass_           WICtxt__
    #define _className_         wICtxt
    #define _Class_             WICtxt__
    @implementation WICtxt

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWICtxt {
        MSGSTART("WICtxt:-(void)_startObjectOfClassWICtxt")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-950*/ v_clazzs = [[EndpointD alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableClazz:) otherEndObjectToEndpoint:@selector(clazzToEndpoint:)];

        v_protocols = [[EndpointD alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableProtocol:) otherEndObjectToEndpoint:@selector(protocolToEndpoint:)];

        /*i-500*//*ivar*/ v_file_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableFile:) otherEndObjectToEndpoint:@selector(fileToEndpoint:)]);  ADDOWNER(v_file_endpoint,self);

        /*i0*/}
    - (void)applyConformedProtocolRegexes {
        MSGSTART("WICtxt:-(void)applyConformedProtocolRegexes")

        for (NSArray *key in self.protocols) {
            [[self protocolForKey:key] applyConformedProtocolRegexes];
        }
        for (NSArray *key in self.clazzs) {
            [[self clazzForKey:key] applyConformedProtocolRegexes];
        }
    }
    - (void)applyRegexes {
        MSGSTART("WICtxt:-(void)applyRegexes")

        for (NSString *name in self.protocols) {
            [[self protocolForKey:name] applyRegexes];
        }
        for (NSString *name in self.clazzs) {
            [[self clazzForKey:name] applyRegexes];
        }
    }
    - (NSDictionary *)asD3Tree {
        MSGSTART("WICtxt:-(NSDictionary*)asD3Tree")
        return [Treeable asD3Tree:self.asTree];
    }
    - (NSString *)asD3TreeJSON {
        MSGSTART("WICtxt:-(NSString*)asD3TreeJSON")

        NSError * err = nil;
        return [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:self.asD3Tree options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSDictionary *)asTree {
        MSGSTART("WICtxt:-(NSDictionary*)asTree")
        return [self asTree:NSMutableSet.set];
    }
    - (NSMutableDictionary *)asTree:(NSMutableSet *)seen {
        MSGSTART("WICtxt:-(NSMutableDictionary*)asTree:(NSMutableSet*)seen")

        return ([Treeable asTree:seen object:self]);
    }
    - (constchar *)cdescription {
        MSGSTART("WICtxt:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WIClass *)classWithName:(NSString *)name {
        MSGSTART("WICtxt:-(WIClass*)classWithName:(NSString*)name")

        WIClass * ret = [self clazzForKey:name];
        if (!ret) [self setClazz:ret = [WIClass new] forKey:name.copy];
        return ret;
    }
    - (WIClass *)clazzForKey:(id<NSCopying> )key {
        MSGSTART("WICtxt:-(WIClass*)clazzForKey:(id<NSCopying>)key")
        return [v_clazzs objectForKey:key];
    }
    - (EndpointD *)clazzs {
        MSGSTART("WICtxt:-(EndpointD*)clazzs")

        /*i-999*/ EndpointD * ret = v_clazzs;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)clazzToEndpoint:(id)aclazz {
        MSGSTART("WICtxt:-(NSObject<LinkEndpoint>*)clazzToEndpoint:(id)aclazz")
        return [aclazz performSelector:@selector(classInCtxt_endpoint)];
    }
    - (constchar *)cobjectName {
        MSGSTART("WICtxt:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("WICtxt:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_protocols,self); v_protocols = nil;

        REMOVEOWNER(v_clazzs,self); v_clazzs = nil;

        REMOVEOWNER(v_file_endpoint,self); v_file_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WICtxt:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WICtxt:-(void)die")
        self.file = nil;
        [v_clazzs removeAllObjects];
        [v_protocols removeAllObjects];

        /*i900*/}
    - (WIClass *)equivClassTo:(WIClass *)other {
        MSGSTART("WICtxt:-(WIClass*)equivClassTo:(WIClass*)other")

        if (other.classInCtxt)
            return [self classWithName:(NSString *)other.keyInClassInCtxt];
        else if (other.protocolInCtxt)
            return [self protocolWithName:(NSString *)other.keyInProtocolInCtxt];
        else return nil;
    }
    - (WIType *)equivTypeTo:(WIType *)other {
        MSGSTART("WICtxt:-(WIType*)equivTypeTo:(WIType*)other")

        return [[self equivClassTo:other.clazz] equivTypeTo:other];
    }
    - (WIVarContext *)equivVarContextTo:(WIVarContext *)other {
        MSGSTART("WICtxt:-(WIVarContext*)equivVarContextTo:(WIVarContext*)other")

        return [[self equivClassTo:other.clazz] equivVarContextTo:other];
    }
    - (WIVar *)equivVarTo:(WIVar *)other {
        MSGSTART("WICtxt:-(WIVar*)equivVarTo:(WIVar*)other")

        return [[self equivClassTo:other.context.clazz] equivVarTo:other];
    }
    - (WIFile *)file {
        MSGSTART("WICtxt:-(WIFile*)file")
        return (WIFile *)v_file_endpoint.value;
    }
    - (Endpoint1 *)file_endpoint {
        MSGSTART("WICtxt:-(Endpoint1*)file_endpoint")

        /*i-999*/ Endpoint1 * ret = v_file_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)fileToEndpoint:(id)afile {
        MSGSTART("WICtxt:-(NSObject<LinkEndpoint>*)fileToEndpoint:(id)afile")
        return [afile performSelector:@selector(ctxts)];
    }
    - (WICtxt *)init {
        MSGSTART("WICtxt:-(WICtxt*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWICtxt];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableClazz:(id)aclazz {
        MSGSTART("WICtxt:-(NSNumber*)isAcceptableClazz:(id)aclazz")
        return [aclazz isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableFile:(id)afile {
        MSGSTART("WICtxt:-(NSNumber*)isAcceptableFile:(id)afile")
        return [afile isKindOfClass:[WIFile class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableProtocol:(id)aprotocol {
        MSGSTART("WICtxt:-(NSNumber*)isAcceptableProtocol:(id)aprotocol")
        return [aprotocol isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (kid)keyInFile {
        MSGSTART("WICtxt:-(kid)keyInFile")

        for (id<NSCopying> key in self.keysInFile) {
            return key;
        }
        return nil;
    }
    - (NSSet *)keysInFile {
        MSGSTART("WICtxt:-(NSSet*)keysInFile")

        if (!v_file_endpoint.value) return [NSSet set];

        NSMutableDictionary<DictionaryLinkEndpoint> *file_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self fileToEndpoint : v_file_endpoint.value];
        return (NSSet *)[file_ep.__dictionaryObjectKeys objectForKey:self];
    }
    - (void)mergeWith:(WICtxt *)other {
        MSGSTART("WICtxt:-(void)mergeWith:(WICtxt*)other")

        for (NSObject<NSCopying> *k in other.clazzs) {
            WIClass *o = [other clazzForKey:k];
            [[self equivClassTo:o] mergeWith:o];
        }
        for (NSObject<NSCopying> *k in other.protocols) {
            WIClass *o = [other protocolForKey:k];
            [[self equivClassTo:o] mergeWith:o];
        }
    }
    - (NSMutableString *)objectName {
        MSGSTART("WICtxt:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)process:(Token *)token regexes:(NSMutableArray *)regexes settings:(NSSet *)settings outerClass:(WIClass *)outerClass outerLinkType:(NSString *)outerLinkType outerLinkVar:(WIVar *)outerLinkVar mods:(NSArray *)mods {
        MSGSTART("WICtxt:-(void)process:(Token*)token regexes:(NSMutableArray*)regexes settings:(NSSet*)settings outerClass:(WIClass*)outerClass outerLinkType:(NSString*)outerLinkType outerLinkVar:(WIVar*)outerLinkVar mods:(NSArray*)mods")

        Token * t = [TokenHelper actualToken:token];
        NSArray *chs;
        bool doingInitialSettings = YES;

        if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"mod"]]) ) {
            NSMutableArray *newMods = @[].mutableCopy;
            for (Token *ch in chs) {
                if (![TokenHelper actualToken:ch havingRuleIn:@[@"class",@"protocol",@"classwprotocol"]])
                    [newMods addObject:ch.contents];
            }
            for (Token *ch in chs) {
                if ([TokenHelper actualToken:ch havingRuleIn:@[@"class",@"protocol",@"classwprotocol"]])
                    [self process:ch regexes:regexes settings:settings outerClass:outerClass outerLinkType:outerLinkType outerLinkVar:outerLinkVar mods:newMods];
            }
        }
        else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"class"]]) ) {
            NSString *name = ( (Token *)t.children[0] ).contents;
            NSString *sup = (t.children.count == 1 ? nil : ( (Token *)t.children[1] ).contents);
            WIClass *clazz = [self classWithName:name];
            if (sup) [clazz addSuperclass:[self classWithName:sup]];

            if (t == token) {
                NSMutableDictionary *settingMods = clazz.settings[@"mods"];
                if (![settingMods isKindOfClass:NSMutableDictionary.class]) clazz.settings[@"mods"] = settingMods = NSMutableDictionary.dictionary;
                for (NSString *mod in mods) {
                    [settingMods setObject:NSMutableDictionary.dictionary forKey:mod];
                }
            }
            else {
                for (Token *ch in chs) {
                    [clazz process:ch regexes:regexes settings:settings doingInitialSettings:doingInitialSettings outerClass:outerClass outerLinkType:outerLinkType outerLinkVar:outerLinkVar mods:mods];
                }
            }
        }
        else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"protocol"]]) ) {
            NSString *name = ( (Token *)t.children[0] ).contents;
            WIClass *protocol = [self protocolWithName:name];
            int index = -1;
            for (Token *pt in t.children) {
                if (++index) [protocol addSuperprotocol:[self protocolWithName:pt.contents]];
            }

            if (t == token) {
                NSMutableDictionary *settingMods = protocol.settings[@"mods"];
                if (![settingMods isKindOfClass:NSMutableSet.class]) protocol.settings[@"mods"] = settingMods = NSMutableDictionary.dictionary;
                for (NSString *mod in mods) {
                    [settingMods setObject:NSMutableDictionary.dictionary forKey:mod];
                }
            }
            else {
                for (Token *ch in chs) {
                    [protocol process:ch regexes:regexes settings:settings doingInitialSettings:doingInitialSettings outerClass:outerClass outerLinkType:outerLinkType outerLinkVar:outerLinkVar mods:mods];
                }
            }
        }
        else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"classwprotocol"]]) ) {
            Token *classt = t.children[0];
            Token *protocolt = t.children[1];

            NSString *name = ( (Token *)classt.children[0] ).contents;
            NSString *sup = (classt.children.count == 1 ? nil : ( (Token *)classt.children[1] ).contents);


            WIClass *clazz = [self classWithName:name];
            if (sup) [clazz addSuperclass:[self classWithName:sup]];
            for (Token *pt in protocolt.children) {
                [clazz addConformedProtocol:[self protocolWithName:pt.contents]];
            }

            if (t == token) {
                NSMutableDictionary *settingMods = clazz.settings[@"mods"];
                if (![settingMods isKindOfClass:NSMutableDictionary.class]) clazz.settings[@"mods"] = settingMods = NSMutableDictionary.dictionary;
                for (NSString *mod in mods) {
                    [settingMods setObject:NSMutableDictionary.dictionary forKey:mod];
                }
            }
            else {
                for (Token *ch in chs) {
                    [clazz process:ch regexes:regexes settings:settings doingInitialSettings:doingInitialSettings outerClass:outerClass outerLinkType:outerLinkType outerLinkVar:outerLinkVar mods:mods];
                }
            }
        }
    }
    - (WIClass *)protocolForKey:(id<NSCopying> )key {
        MSGSTART("WICtxt:-(WIClass*)protocolForKey:(id<NSCopying>)key")
        return [v_protocols objectForKey:key];
    }
    - (EndpointD *)protocols {
        MSGSTART("WICtxt:-(EndpointD*)protocols")

        /*i-999*/ EndpointD * ret = v_protocols;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)protocolToEndpoint:(id)aprotocol {
        MSGSTART("WICtxt:-(NSObject<LinkEndpoint>*)protocolToEndpoint:(id)aprotocol")
        return [aprotocol performSelector:@selector(protocolInCtxt_endpoint)];
    }
    - (WIClass *)protocolWithName:(NSString *)name {
        MSGSTART("WICtxt:-(WIClass*)protocolWithName:(NSString*)name")

        WIClass * ret = [self protocolForKey:name];
        if (!ret) [self setProtocol:ret = [WIClass new] forKey:name.copy];
        return ret;
    }
    - (void)removeAllClazzs {
        MSGSTART("WICtxt:-(void)removeAllClazzs")
        [v_clazzs removeAllObjects];
    }
    - (void)removeAllProtocols {
        MSGSTART("WICtxt:-(void)removeAllProtocols")
        [v_protocols removeAllObjects];
    }
    - (void)removeClazzForKey:(id<NSCopying> )key {
        MSGSTART("WICtxt:-(void)removeClazzForKey:(id<NSCopying>)key")
        [v_clazzs removeObjectForKey : key];
    }
    - (void)removeProtocolForKey:(id<NSCopying> )key {
        MSGSTART("WICtxt:-(void)removeProtocolForKey:(id<NSCopying>)key")
        [v_protocols removeObjectForKey : key];
    }
    - (void)retract {
        MSGSTART("WICtxt:-(void)retract")
        self.file = nil;
        [self.clazzs removeAllObjects];
        [self.protocols removeAllObjects];
    }
    - (NSDictionary *)seenTreeNodeData {
        MSGSTART("WICtxt:-(NSDictionary*)seenTreeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i999*/ return ret ? ret : self.treeNodeData;
    }
    - (void)setClazz:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WICtxt:-(void)setClazz:(id)v forKey:(id<NSCopying>)key")
        [v_clazzs setObject : v forKey : key];
    }
    - (void)setClazzs:(EndpointD *)v {
        MSGSTART("WICtxt:-(void)setClazzs:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WICtxt) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(clazzs=\"blah\") to set the property)");

        /*i-905*/ if (v_clazzs == v) return;

        /*i-900*/ {
            v_clazzs = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_clazzs,self); ADDOWNER(v,self);
    }
    - (void)setFile:(WIFile *)v {
        MSGSTART("WICtxt:-(void)setFile:(WIFile*)v")
        [v_file_endpoint setValue : v];
    }
    - (void)setFile_endpoint:(Endpoint1 *)v {
        MSGSTART("WICtxt:-(void)setFile_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WICtxt) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(file_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_file_endpoint == v) return;

        /*i-900*/ {
            v_file_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_file_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setKeyInFile:(kid)v {
        MSGSTART("WICtxt:-(void)setKeyInFile:(kid)v")

        self.keysInFile = [NSSet setWithObject:v];
    }
    - (void)setKeysInFile:(NSSet *)v {
        MSGSTART("WICtxt:-(void)setKeysInFile:(NSSet*)v")

        NSMutableDictionary<DictionaryLinkEndpoint> *file_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self fileToEndpoint : v_file_endpoint.value];
        NSSet *file_keys_were = self.keysInFile,*file_inss,*file_dels;
        if ([Util getInsertsAndDeletesForSetWhenChanging:file_keys_were to:v inss:&file_inss dels:&file_dels]) {
            for (id<NSCopying> key in file_dels) {
                [file_ep removeObjectForKey:key];
            }
            for (id<NSCopying> key in file_inss) {
                [file_ep setObject:self forKey:key];
            }
        }
    }
    - (void)setProtocol:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WICtxt:-(void)setProtocol:(id)v forKey:(id<NSCopying>)key")
        [v_protocols setObject : v forKey : key];
    }
    - (void)setProtocols:(EndpointD *)v {
        MSGSTART("WICtxt:-(void)setProtocols:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WICtxt) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(protocols=\"blah\") to set the property)");

        /*i-905*/ if (v_protocols == v) return;

        /*i-900*/ {
            v_protocols = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_protocols,self); ADDOWNER(v,self);
    }
    - (NSDictionary *)treeNodeData {
        MSGSTART("WICtxt:-(NSDictionary*)treeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"type":@"Context",
            @"name":[(id)self.keyInFile jsonString],
            @"data":self.keyInFile
        };

        /*i999*/ return ret ? ret : @{};
    }
    - (NSSet *)treePropertyNames {
        MSGSTART("WICtxt:-(NSSet*)treePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i0*/ ret = @[@"clazzs",@"protocols"];

            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (NSSet *)treeSingleNodePropertyNames {
        MSGSTART("WICtxt:-(NSSet*)treeSingleNodePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIFile
    #define _WIClass_           WIFile__
    #define _className_         wIFile
    #define _Class_             WIFile__
    @implementation WIFile

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIFile {
        MSGSTART("WIFile:-(void)_startObjectOfClassWIFile")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-950*/ v_ctxts = [[EndpointD alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableCtxt:) otherEndObjectToEndpoint:@selector(ctxtToEndpoint:)];

        /*i-500*//*ivar*/ v_includesSet = ([PartiallyOrderedSet partiallyOrderedSet]);  ADDOWNER(v_includesSet,self);
        /*ivar*/ v_settings = ([MutableDictionary dictionary]);  ADDOWNER(v_settings,self);

        /*i0*/}
    - (void)applyConformedProtocolRegexes {
        MSGSTART("WIFile:-(void)applyConformedProtocolRegexes")

        for (NSArray *key in self.ctxts) {
            if (key.count) [[self ctxtForKey:key] applyConformedProtocolRegexes];
        }
    }
    - (void)applyRegexes {
        MSGSTART("WIFile:-(void)applyRegexes")

        NSMutableArray * remove = NSMutableArray.array;
        for (NSArray *regexes in self.ctxts) {
            if (regexes.count) {
                [remove addObject:regexes];
                [[self ctxtForKey:regexes] applyRegexes];
            }
        }
        [self.ctxts removeObjectsForKeys:remove];
    }
    - (NSDictionary *)asD3Tree {
        MSGSTART("WIFile:-(NSDictionary*)asD3Tree")
        return [Treeable asD3Tree:self.asTree];
    }
    - (NSString *)asD3TreeJSON {
        MSGSTART("WIFile:-(NSString*)asD3TreeJSON")

        NSError * err = nil;
        return [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:self.asD3Tree options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSDictionary *)asTree {
        MSGSTART("WIFile:-(NSDictionary*)asTree")
        return [self asTree:NSMutableSet.set];
    }
    - (NSMutableDictionary *)asTree:(NSMutableSet *)seen {
        MSGSTART("WIFile:-(NSMutableDictionary*)asTree:(NSMutableSet*)seen")

        return ([Treeable asTree:seen object:self]);
    }
    - (constchar *)cdescription {
        MSGSTART("WIFile:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIFile:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WICtxt *)contextWithRegexes:(NSArray *)regexes {
        MSGSTART("WIFile:-(WICtxt*)contextWithRegexes:(NSArray*)regexes")

        WICtxt * ret = [self ctxtForKey:regexes];
        if (!ret) [self setCtxt:ret = [WICtxt new] forKey:regexes.copy];
        return ret;
    }
    - (WICtxt *)ctxtForKey:(id<NSCopying> )key {
        MSGSTART("WIFile:-(WICtxt*)ctxtForKey:(id<NSCopying>)key")
        return [v_ctxts objectForKey:key];
    }
    - (EndpointD *)ctxts {
        MSGSTART("WIFile:-(EndpointD*)ctxts")

        /*i-999*/ EndpointD * ret = v_ctxts;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)ctxtToEndpoint:(id)actxt {
        MSGSTART("WIFile:-(NSObject<LinkEndpoint>*)ctxtToEndpoint:(id)actxt")
        return [actxt performSelector:@selector(file_endpoint)];
    }
    - (void)dealloc {
        MSGSTART("WIFile:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_ctxts,self); v_ctxts = nil;

        REMOVEOWNER(v_includesSet,self); v_includesSet = nil;

        REMOVEOWNER(v_settings,self); v_settings = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WIFile:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WIFile:-(void)die")
        [v_ctxts removeAllObjects];

        /*i900*/}
    - (WIClass *)equivClassTo:(WIClass *)other {
        MSGSTART("WIFile:-(WIClass*)equivClassTo:(WIClass*)other")

        return [[self equivContextTo:other.context] equivClassTo:other];
    }
    - (WICtxt *)equivContextTo:(WICtxt *)other {
        MSGSTART("WIFile:-(WICtxt*)equivContextTo:(WICtxt*)other")

        return [self contextWithRegexes:(NSArray *)other.keyInFile];
    }
    - (WIType *)equivTypeTo:(WIType *)other {
        MSGSTART("WIFile:-(WIType*)equivTypeTo:(WIType*)other")

        return [[self equivContextTo:other.clazz.context] equivTypeTo:other];
    }
    - (WIVarContext *)equivVarContextTo:(WIVarContext *)other {
        MSGSTART("WIFile:-(WIVarContext*)equivVarContextTo:(WIVarContext*)other")

        return [[self equivContextTo:other.clazz.context] equivVarContextTo:other];
    }
    - (WIVar *)equivVarTo:(WIVar *)other {
        MSGSTART("WIFile:-(WIVar*)equivVarTo:(WIVar*)other")

        return [[self equivContextTo:other.context.clazz.context] equivVarTo:other];
    }
    - (NSArray *)includes {
        MSGSTART("WIFile:-(NSArray*)includes")

        return self.includesSet.asArray;
    }
    - (PartiallyOrderedSet *)includesSet {
        MSGSTART("WIFile:-(PartiallyOrderedSet*)includesSet")

        /*i-999*/ PartiallyOrderedSet * ret = v_includesSet;
        /*i999*/ return ret;
    }
    - (WIFile *)init {
        MSGSTART("WIFile:-(WIFile*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWIFile];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableCtxt:(id)actxt {
        MSGSTART("WIFile:-(NSNumber*)isAcceptableCtxt:(id)actxt")
        return [actxt isKindOfClass:[WICtxt class]] ? @YES : nil;
    }
    - (void)mergeWith:(WIFile *)other {
        MSGSTART("WIFile:-(void)mergeWith:(WIFile*)other")

        [self.includesSet mergeWith : other.includesSet];
        [self.settings mergeWith:other.settings];
        for (NSObject<NSCopying> *k in other.ctxts) {
            WICtxt *o = [other ctxtForKey:k];
            [[self equivContextTo:o] mergeWith:o];
        }
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIFile:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)process:(NSArray *)tokens {
        MSGSTART("WIFile:-(void)process:(NSArray*)tokens")

        NSMutableArray * regexes = NSMutableArray.array;
        NSSet *settings = NSSet.set;
        for (Token *token in tokens) {
            [self process:token regexes:regexes settings:settings];
        }
    }
    - (void)process:(Token *)token regexes:(NSMutableArray *)regexes settings:(NSSet *)settings {
        MSGSTART("WIFile:-(void)process:(Token*)token regexes:(NSMutableArray*)regexes settings:(NSSet*)settings")

        Token * t = [TokenHelper actualToken:token];
        NSArray *chs;

        if ([TokenHelper actualToken:t havingRuleIn:@[@"class",@"protocol",@"classwprotocol",@"mod"]]) {
            [[self contextWithRegexes:regexes] process:token regexes:regexes.mutableCopy settings:settings outerClass:nil outerLinkType:nil outerLinkVar:nil mods:@[]];
        }
        else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"file"]]) ) {
            for (Token *ch in chs) {
                [self process:ch regexes:regexes settings:settings];
            }
        }
        else if ([TokenHelper actualToken:t havingRuleIn:@[@"regex"]]) {
            NSDictionary *re = @{
                ( (Token *)t.children[0] ).contents : ( (Token *)t.children[1] ).contents
            };
            if (![(NSDictionary *)regexes.lastObject isEqual : re])
                [regexes addObject:re];
        }
        else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"setting"]]) ) {
            NSString *setting = ( (Token *)t.children[0] ).contents;
            if ([token.ruleName isEqualToString:@"setting"])
                [self.includesSet appendObject:setting];
            else if ([TokenHelper isJustSetting:token])
                [TokenHelper settingDictionaryForToken:token addTo:self.settings];
            else
                for (Token *ch in chs) {
                    [self process:ch regexes:regexes settings:[settings setByAddingObject:setting]];
                }
        }
    }
    - (void)removeAllCtxts {
        MSGSTART("WIFile:-(void)removeAllCtxts")
        [v_ctxts removeAllObjects];
    }
    - (void)removeCtxtForKey:(id<NSCopying> )key {
        MSGSTART("WIFile:-(void)removeCtxtForKey:(id<NSCopying>)key")
        [v_ctxts removeObjectForKey : key];
    }
    - (void)retract {
        MSGSTART("WIFile:-(void)retract")
        [self.ctxts removeAllObjects];
    }
    - (NSDictionary *)seenTreeNodeData {
        MSGSTART("WIFile:-(NSDictionary*)seenTreeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i999*/ return ret ? ret : self.treeNodeData;
    }
    - (void)setCtxt:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WIFile:-(void)setCtxt:(id)v forKey:(id<NSCopying>)key")
        [v_ctxts setObject : v forKey : key];
    }
    - (void)setCtxts:(EndpointD *)v {
        MSGSTART("WIFile:-(void)setCtxts:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIFile) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(ctxts=\"blah\") to set the property)");

        /*i-905*/ if (v_ctxts == v) return;

        /*i-900*/ {
            v_ctxts = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_ctxts,self); ADDOWNER(v,self);
    }
    - (void)setIncludesSet:(PartiallyOrderedSet *)v {
        MSGSTART("WIFile:-(void)setIncludesSet:(PartiallyOrderedSet*)v")

        /*i-905*/ if (v_includesSet == v) return;

        /*i-900*/ {
            v_includesSet = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_includesSet,self); ADDOWNER(v,self);
    }
    - (void)setSettings:(MutableDictionary *)v {
        MSGSTART("WIFile:-(void)setSettings:(MutableDictionary*)v")

        /*i-905*/ if (v_settings == v) return;

        /*i-900*/ {
            v_settings = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_settings,self); ADDOWNER(v,self);
    }
    - (MutableDictionary *)settings {
        MSGSTART("WIFile:-(MutableDictionary*)settings")

        /*i-999*/ MutableDictionary * ret = v_settings;
        /*i999*/ return ret;
    }
    - (NSDictionary *)treeNodeData {
        MSGSTART("WIFile:-(NSDictionary*)treeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"type":@"File"
        };

        /*i999*/ return ret ? ret : @{};
    }
    - (NSSet *)treePropertyNames {
        MSGSTART("WIFile:-(NSSet*)treePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i0*/ ret = @[@"includes",@"ctxts",@"settings"];

            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (NSSet *)treeSingleNodePropertyNames {
        MSGSTART("WIFile:-(NSSet*)treeSingleNodePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIType
    #define _WIClass_           WIType__
    #define _className_         wIType
    #define _Class_             WIType__
    @implementation WIType

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIType {
        MSGSTART("WIType:-(void)_startObjectOfClassWIType")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_vars = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableVar:) otherEndObjectToEndpoint:@selector(varToEndpoint:)]);  ADDOWNER(v_vars,self);
        /*ivar*/ v_args = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableArg:) otherEndObjectToEndpoint:@selector(argToEndpoint:)]);  ADDOWNER(v_args,self);
        /*ivar*/ v_clazz_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableClazz:) otherEndObjectToEndpoint:@selector(clazzToEndpoint:)]);  ADDOWNER(v_clazz_endpoint,self);

        /*i0*/}
    - (void)addArg:(WIVarArg *)v {
        MSGSTART("WIType:-(void)addArg:(WIVarArg*)v")
        [v_args addObject : v];
    }
    - (void)addVar:(WIVar *)v {
        MSGSTART("WIType:-(void)addVar:(WIVar*)v")
        [v_vars addObject : v];
    }
    - (WIType *)applyRegexes:(NSArray *)regexes {
        MSGSTART("WIType:-(WIType*)applyRegexes:(NSArray*)regexes")

        WIClass * toc = [self.clazz applyRegexes];
        return [toc typeWithModifiers:(NSArray *)self.keyInClazz];
    }
    - (EndpointS *)args {
        MSGSTART("WIType:-(EndpointS*)args")

        /*i-999*/ EndpointS * ret = v_args;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)argToEndpoint:(id)aarg {
        MSGSTART("WIType:-(NSObject<LinkEndpoint>*)argToEndpoint:(id)aarg")
        return [aarg performSelector:@selector(type_endpoint)];
    }
    - (NSDictionary *)asD3Tree {
        MSGSTART("WIType:-(NSDictionary*)asD3Tree")
        return [Treeable asD3Tree:self.asTree];
    }
    - (NSString *)asD3TreeJSON {
        MSGSTART("WIType:-(NSString*)asD3TreeJSON")

        NSError * err = nil;
        return [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:self.asD3Tree options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSDictionary *)asTree {
        MSGSTART("WIType:-(NSDictionary*)asTree")
        return [self asTree:NSMutableSet.set];
    }
    - (NSMutableDictionary *)asTree:(NSMutableSet *)seen {
        MSGSTART("WIType:-(NSMutableDictionary*)asTree:(NSMutableSet*)seen")

        return ([Treeable asTree:seen object:self]);
    }
    - (constchar *)cdescription {
        MSGSTART("WIType:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WIClass *)clazz {
        MSGSTART("WIType:-(WIClass*)clazz")
        return (WIClass *)v_clazz_endpoint.value;
    }
    - (Endpoint1 *)clazz_endpoint {
        MSGSTART("WIType:-(Endpoint1*)clazz_endpoint")

        /*i-999*/ Endpoint1 * ret = v_clazz_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)clazzToEndpoint:(id)aclazz {
        MSGSTART("WIType:-(NSObject<LinkEndpoint>*)clazzToEndpoint:(id)aclazz")
        return [aclazz performSelector:@selector(types)];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIType:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("WIType:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_vars,self); v_vars = nil;

        REMOVEOWNER(v_args,self); v_args = nil;

        REMOVEOWNER(v_clazz_endpoint,self); v_clazz_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WIType:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSString *)descriptiveName {
        MSGSTART("WIType:-(NSString*)descriptiveName")

        return [(NSDictionary *)self.clazz.context.keyInFile count] ?
               ([(NSArray *)self.keyInClazz count] ?
                [NSString stringWithFormat:@"%@ %@ =>(%@)",self.clazz.name,[(id)self.keyInClazz jsonString],[(id)self.clazz.context.keyInFile jsonString]] :
                [NSString stringWithFormat:@"%@ =>(%@)",self.clazz.name,[(id)self.clazz.context.keyInFile jsonString]]
               ) :
               ([(NSArray *)self.keyInClazz count] ?
                [NSString stringWithFormat:@"%@ %@",self.clazz.name,[(id)self.keyInClazz jsonString]] :
                [NSString stringWithFormat:@"%@",self.clazz.name]
               )
        ;
    }
    - (void)die {
        MSGSTART("WIType:-(void)die")
        self.clazz = nil;
        [v_vars removeAllObjects];
        [v_args removeAllObjects];

        /*i900*/}
    - (WIFile *)file {
        MSGSTART("WIType:-(WIFile*)file")
        return self.clazz.context.file;
    }
    - (WIType *)init {
        MSGSTART("WIType:-(WIType*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWIType];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableArg:(id)aarg {
        MSGSTART("WIType:-(NSNumber*)isAcceptableArg:(id)aarg")
        return [aarg isKindOfClass:[WIVarArg class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableClazz:(id)aclazz {
        MSGSTART("WIType:-(NSNumber*)isAcceptableClazz:(id)aclazz")
        return [aclazz isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableVar:(id)avar {
        MSGSTART("WIType:-(NSNumber*)isAcceptableVar:(id)avar")
        return [avar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (kid)keyInClazz {
        MSGSTART("WIType:-(kid)keyInClazz")

        for (id<NSCopying> key in self.keysInClazz) {
            return key;
        }
        return nil;
    }
    - (NSSet *)keysInClazz {
        MSGSTART("WIType:-(NSSet*)keysInClazz")

        if (!v_clazz_endpoint.value) return [NSSet set];

        NSMutableDictionary<DictionaryLinkEndpoint> *clazz_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self clazzToEndpoint : v_clazz_endpoint.value];
        return (NSSet *)[clazz_ep.__dictionaryObjectKeys objectForKey:self];
    }
    - (void)mergeWith:(WIType *)other {
        MSGSTART("WIType:-(void)mergeWith:(WIType*)other")
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIType:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removeAllArgs {
        MSGSTART("WIType:-(void)removeAllArgs")
        [v_args removeAllObjects];
    }
    - (void)removeAllVars {
        MSGSTART("WIType:-(void)removeAllVars")
        [v_vars removeAllObjects];
    }
    - (void)removeArg:(WIVarArg *)v {
        MSGSTART("WIType:-(void)removeArg:(WIVarArg*)v")
        [v_args removeObject : v];
    }
    - (void)removeVar:(WIVar *)v {
        MSGSTART("WIType:-(void)removeVar:(WIVar*)v")
        [v_vars removeObject : v];
    }
    - (void)retract {
        MSGSTART("WIType:-(void)retract")
        self.clazz = nil;
        [self.vars removeAllObjects];
        [self.args removeAllObjects];
    }
    - (NSDictionary *)seenTreeNodeData {
        MSGSTART("WIType:-(NSDictionary*)seenTreeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"type":@"Type",
            @"name":self.descriptiveName,
        };

        /*i999*/ return ret ? ret : self.treeNodeData;
    }
    - (void)setArgs:(EndpointS *)v {
        MSGSTART("WIType:-(void)setArgs:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIType) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(args=\"blah\") to set the property)");

        /*i-905*/ if (v_args == v) return;

        /*i-900*/ {
            v_args = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_args,self); ADDOWNER(v,self);
    }
    - (void)setClazz:(WIClass *)v {
        MSGSTART("WIType:-(void)setClazz:(WIClass*)v")
        [v_clazz_endpoint setValue : v];
    }
    - (void)setClazz_endpoint:(Endpoint1 *)v {
        MSGSTART("WIType:-(void)setClazz_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIType) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(clazz_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_clazz_endpoint == v) return;

        /*i-900*/ {
            v_clazz_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_clazz_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setKeyInClazz:(kid)v {
        MSGSTART("WIType:-(void)setKeyInClazz:(kid)v")

        self.keysInClazz = [NSSet setWithObject:v];
    }
    - (void)setKeysInClazz:(NSSet *)v {
        MSGSTART("WIType:-(void)setKeysInClazz:(NSSet*)v")

        NSMutableDictionary<DictionaryLinkEndpoint> *clazz_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self clazzToEndpoint : v_clazz_endpoint.value];
        NSSet *clazz_keys_were = self.keysInClazz,*clazz_inss,*clazz_dels;
        if ([Util getInsertsAndDeletesForSetWhenChanging:clazz_keys_were to:v inss:&clazz_inss dels:&clazz_dels]) {
            for (id<NSCopying> key in clazz_dels) {
                [clazz_ep removeObjectForKey:key];
            }
            for (id<NSCopying> key in clazz_inss) {
                [clazz_ep setObject:self forKey:key];
            }
        }
    }
    - (void)setVars:(EndpointS *)v {
        MSGSTART("WIType:-(void)setVars:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIType) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(vars=\"blah\") to set the property)");

        /*i-905*/ if (v_vars == v) return;

        /*i-900*/ {
            v_vars = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_vars,self); ADDOWNER(v,self);
    }
    - (NSDictionary *)treeNodeData {
        MSGSTART("WIType:-(NSDictionary*)treeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"collapsed":@YES,
            @"type":@"Type",
            @"name":[(id)self.keyInClazz jsonString],
        };

        /*i999*/ return ret ? ret : @{};
    }
    - (NSSet *)treePropertyNames {
        MSGSTART("WIType:-(NSSet*)treePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (NSSet *)treeSingleNodePropertyNames {
        MSGSTART("WIType:-(NSSet*)treeSingleNodePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (EndpointS *)vars {
        MSGSTART("WIType:-(EndpointS*)vars")

        /*i-999*/ EndpointS * ret = v_vars;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar {
        MSGSTART("WIType:-(NSObject<LinkEndpoint>*)varToEndpoint:(id)avar")
        return [avar performSelector:@selector(type_endpoint)];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIVar
    #define _WIClass_           WIVar__
    #define _className_         wIVar
    #define _Class_             WIVar__
    @implementation WIVar

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIVar {
        MSGSTART("WIVar:-(void)_startObjectOfClassWIVar")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-950*/ v_setters = [[EndpointD alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableSetter:) otherEndObjectToEndpoint:@selector(setterToEndpoint:)];

        /*i-500*//*ivar*/ v_context_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableContext:) otherEndObjectToEndpoint:@selector(contextToEndpoint:)]);  ADDOWNER(v_context_endpoint,self);
        /*ivar*/ v_atomicVars = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableAtomicVar:) otherEndObjectToEndpoint:@selector(atomicVarToEndpoint:)]);  ADDOWNER(v_atomicVars,self);
        /*ivar*/ v_type_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableType:) otherEndObjectToEndpoint:@selector(typeToEndpoint:)]);  ADDOWNER(v_type_endpoint,self);
        /*ivar*/ v_settings = ([MutableDictionary dictionary]);  ADDOWNER(v_settings,self);
        /*ivar*/ v_getter_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableGetter:) otherEndObjectToEndpoint:@selector(getterToEndpoint:)]);  ADDOWNER(v_getter_endpoint,self);
        /*ivar*/ v_args = ([[EndpointA alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableArg:) otherEndObjectToEndpoint:@selector(argToEndpoint:)]);  ADDOWNER(v_args,self);
        /*ivar*/ v_fluidVars = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableFluidVar:) otherEndObjectToEndpoint:@selector(fluidVarToEndpoint:)]);  ADDOWNER(v_fluidVars,self);
        /*ivar*/ v_defaultValue_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableDefaultValue:) otherEndObjectToEndpoint:@selector(defaultValueToEndpoint:)]);  ADDOWNER(v_defaultValue_endpoint,self);

        /*i0*/}
    - (void)addArg:(WIVarArg *)v {
        MSGSTART("WIVar:-(void)addArg:(WIVarArg*)v")
        [v_args addObject : v];
    }
    - (void)addAtomicVar:(WIVar *)v {
        MSGSTART("WIVar:-(void)addAtomicVar:(WIVar*)v")
        [v_atomicVars addObject : v];
    }
    - (void)addFluidVar:(WIVar *)v {
        MSGSTART("WIVar:-(void)addFluidVar:(WIVar*)v")
        [v_fluidVars addObject : v];
    }
    - (WIVar *)applyRegexes:(NSArray *)regexes {
        MSGSTART("WIVar:-(WIVar*)applyRegexes:(NSArray*)regexes")

        WIVarContext * tovc = [self.context applyRegexes:regexes];
        return [self applyRegexes:regexes to:tovc];
    }
    - (WIVar *)applyRegexes:(NSArray *)regexes to:(WIVarContext *)tovc {
        MSGSTART("WIVar:-(WIVar*)applyRegexes:(NSArray*)regexes to:(WIVarContext*)tovc")

        if (!( (NSArray *)self.context.clazz.context.keyInFile ).count) return self;

        NSString *name = [self.name stringByApplyingRegexes:regexes];
        NSMutableArray *args = NSMutableArray.array;
        for (WIVarArg *arg in self.args) {
            [args addObject:[arg copyByApplyingRegexes:regexes]];
        }
        WIType *type = [self.type applyRegexes:regexes];

        NSArray *key = [WIVar keyWithType:type name:name args:args];

        WIVar *tov = [tovc varWithVarKey:key];


        NSSet *fluidVars = self.fluidVars.copy;
        NSSet *atomicVars = self.atomicVars.copy;

        [self.fluidVars removeAllObjects];
        [self.atomicVars removeAllObjects];

        NSMutableSet *newFluidVars = NSMutableSet.set;
        NSMutableSet *newAtomicVars = NSMutableSet.set;

        for (WIVar *v in fluidVars) {
            [newFluidVars addObject:[v applyRegexes:regexes]];
        }
        for (WIVar *v in atomicVars) {
            [newAtomicVars addObject:[v applyRegexes:regexes]];
        }

        for (WIVar *v in newFluidVars) {
            [tov addFluidVar:v];
        }
        for (WIVar *v in newAtomicVars) {
            [tov addAtomicVar:v];
        }


        [tov.settings mergeWith:[self.settings dictionaryByApplyingRegexes:regexes]];

        [self.getter applyRegexes:regexes to:tov];
        [self.defaultValue applyRegexes:regexes to:tov];
        for (NSString *key in self.setters) {
            [[self setterForKey:key] applyRegexes:regexes to:tov];
        }

        if (self.bindingType) {
            tov.bindingType = self.bindingType;
            tov.boundTo = [self.boundTo applyRegexes:regexes];
        }
        return tov;
    }
    - (WIVarArg *)argAtIndex:(Int)index {
        MSGSTART("WIVar:-(WIVarArg*)argAtIndex:(Int)index")
        return [v_args objectAtIndex:index];
    }
    - (EndpointA *)args {
        MSGSTART("WIVar:-(EndpointA*)args")

        /*i-999*/ EndpointA * ret = v_args;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)argToEndpoint:(id)aarg {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)argToEndpoint:(id)aarg")
        return [aarg performSelector:@selector(var_endpoint)];
    }
    - (NSDictionary *)asD3Tree {
        MSGSTART("WIVar:-(NSDictionary*)asD3Tree")
        return [Treeable asD3Tree:self.asTree];
    }
    - (NSString *)asD3TreeJSON {
        MSGSTART("WIVar:-(NSString*)asD3TreeJSON")

        NSError * err = nil;
        return [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:self.asD3Tree options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSDictionary *)asTree {
        MSGSTART("WIVar:-(NSDictionary*)asTree")
        return [self asTree:NSMutableSet.set];
    }
    - (NSMutableDictionary *)asTree:(NSMutableSet *)seen {
        MSGSTART("WIVar:-(NSMutableDictionary*)asTree:(NSMutableSet*)seen")

        return ([Treeable asTree:seen object:self]);
    }
    - (EndpointS *)atomicVars {
        MSGSTART("WIVar:-(EndpointS*)atomicVars")

        /*i-999*/ EndpointS * ret = v_atomicVars;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)atomicVarToEndpoint:(id)aatomicVar {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)atomicVarToEndpoint:(id)aatomicVar")
        return [aatomicVar performSelector:@selector(fluidVars)];
    }
    - (NSString *)bindingType {
        MSGSTART("WIVar:-(NSString*)bindingType")

        /*i-999*/ NSString * ret = v_bindingType;
        /*i999*/ return ret;
    }
    - (WIVar *)boundTo {
        MSGSTART("WIVar:-(WIVar*)boundTo")

        /*i-999*/ WIVar * ret = v_boundTo;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("WIVar:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIVar:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WIVarContext *)context {
        MSGSTART("WIVar:-(WIVarContext*)context")
        return (WIVarContext *)v_context_endpoint.value;
    }
    - (Endpoint1 *)context_endpoint {
        MSGSTART("WIVar:-(Endpoint1*)context_endpoint")

        /*i-999*/ Endpoint1 * ret = v_context_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)contextToEndpoint:(id)acontext {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)contextToEndpoint:(id)acontext")
        return [acontext performSelector:@selector(vars)];
    }
    - (void)dealloc {
        MSGSTART("WIVar:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_context_endpoint,self); v_context_endpoint = nil;

        REMOVEOWNER(v_atomicVars,self); v_atomicVars = nil;

        REMOVEOWNER(v_boundTo,self); v_boundTo = nil;

        v_bindingType = nil;

        REMOVEOWNER(v_setters,self); v_setters = nil;

        v_name = nil;

        REMOVEOWNER(v_type_endpoint,self); v_type_endpoint = nil;

        REMOVEOWNER(v_settings,self); v_settings = nil;

        REMOVEOWNER(v_getter_endpoint,self); v_getter_endpoint = nil;

        REMOVEOWNER(v_args,self); v_args = nil;

        REMOVEOWNER(v_fluidVars,self); v_fluidVars = nil;

        REMOVEOWNER(v_defaultValue_endpoint,self); v_defaultValue_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (WIBody *)defaultValue {
        MSGSTART("WIVar:-(WIBody*)defaultValue")
        return (WIBody *)v_defaultValue_endpoint.value;
    }
    - (Endpoint1 *)defaultValue_endpoint {
        MSGSTART("WIVar:-(Endpoint1*)defaultValue_endpoint")

        /*i-999*/ Endpoint1 * ret = v_defaultValue_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)defaultValueToEndpoint:(id)adefaultValue {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)defaultValueToEndpoint:(id)adefaultValue")
        return [adefaultValue performSelector:@selector(defaultValueForVar_endpoint)];
    }
    - (NSString *)description {
        MSGSTART("WIVar:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSString *)descriptiveName {
        MSGSTART("WIVar:-(NSString*)descriptiveName")
        return [NSString stringWithFormat:@"%@::%@",self.context.descriptiveName,self.selectorString];
    }
    - (void)die {
        MSGSTART("WIVar:-(void)die")
        self.context = nil;
        self.type = nil;
        [v_args removeAllObjects];
        self.getter = nil;
        self.defaultValue = nil;
        [v_setters removeAllObjects];
        [v_atomicVars removeAllObjects];
        [v_fluidVars removeAllObjects];

        /*i900*/}
    - (WIFile *)file {
        MSGSTART("WIVar:-(WIFile*)file")
        return self.context.clazz.context.file;
    }
    - (EndpointS *)fluidVars {
        MSGSTART("WIVar:-(EndpointS*)fluidVars")

        /*i-999*/ EndpointS * ret = v_fluidVars;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)fluidVarToEndpoint:(id)afluidVar {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)fluidVarToEndpoint:(id)afluidVar")
        return [afluidVar performSelector:@selector(atomicVars)];
    }
    - (WIBody *)getter {
        MSGSTART("WIVar:-(WIBody*)getter")
        return (WIBody *)v_getter_endpoint.value;
    }
    - (Endpoint1 *)getter_endpoint {
        MSGSTART("WIVar:-(Endpoint1*)getter_endpoint")

        /*i-999*/ Endpoint1 * ret = v_getter_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)getterToEndpoint:(id)agetter {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)getterToEndpoint:(id)agetter")
        return [agetter performSelector:@selector(getterForVar_endpoint)];
    }
    - (WIVar *)init {
        MSGSTART("WIVar:-(WIVar*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWIVar];

/*i10001*/ return self;
    }
    - (void)insertArg:(WIVarArg *)v atIndex:(Int)index {
        MSGSTART("WIVar:-(void)insertArg:(WIVarArg*)v atIndex:(Int)index")
        [v_args insertObject : v atIndex : index];
    }
    - (NSNumber *)isAcceptableArg:(id)aarg {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableArg:(id)aarg")
        return [aarg isKindOfClass:[WIVarArg class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableAtomicVar:(id)aatomicVar {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableAtomicVar:(id)aatomicVar")
        return [aatomicVar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableContext:(id)acontext {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableContext:(id)acontext")
        return [acontext isKindOfClass:[WIVarContext class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableDefaultValue:(id)adefaultValue {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableDefaultValue:(id)adefaultValue")
        return [adefaultValue isKindOfClass:[WIBody class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableFluidVar:(id)afluidVar {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableFluidVar:(id)afluidVar")
        return [afluidVar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableGetter:(id)agetter {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableGetter:(id)agetter")
        return [agetter isKindOfClass:[WIBody class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSetter:(id)asetter {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableSetter:(id)asetter")
        return [asetter isKindOfClass:[WIBody class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableType:(id)atype {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableType:(id)atype")
        return [atype isKindOfClass:[WIType class]] ? @YES : nil;
    }
    - (kid)keyInContext {
        MSGSTART("WIVar:-(kid)keyInContext")

        for (id<NSCopying> key in self.keysInContext) {
            return key;
        }
        return nil;
    }
    - (NSSet *)keysInContext {
        MSGSTART("WIVar:-(NSSet*)keysInContext")

        if (!v_context_endpoint.value) return [NSSet set];

        NSMutableDictionary<DictionaryLinkEndpoint> *context_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self contextToEndpoint : v_context_endpoint.value];
        return (NSSet *)[context_ep.__dictionaryObjectKeys objectForKey:self];
    }
    + (NSArray *)keyWithType:(WIType *)type name:(NSString *)name args:(NSArray *)args {
        MSGSTART("WIVar:+(NSArray*)keyWithType:(WIType*)type name:(NSString*)name args:(NSArray*)args")

        NSMutableArray * key = @[
                name,
                type.clazz.classInCtxt ? type.clazz.name : NSNull.null,
                type.clazz.protocolInCtxt ? @[type.clazz.name] : NSNull.null,
                type.keyInClazz
            ].mutableCopy;
        for (WIVarArg *arg in args) {
            NSString *className = (NSString *)type.clazz.keyInClassInCtxt;
            NSString *protocolName = (NSString *)type.clazz.keyInProtocolInCtxt;
            NSArray *mods = (NSArray *)type.keyInClazz;
            [key addObject:@[
                 arg.name ? arg.name : NSNull.null,
                 arg.arg ? arg.arg : NSNull.null,
                 className ? className : NSNull.null,
                 protocolName ? @[protocolName] : NSNull.null,   // TODO
                 mods
             ]];
        }
        return key;
    }
    - (void)mergeWith:(WIVar *)other {
        MSGSTART("WIVar:-(void)mergeWith:(WIVar*)other")

        [self.settings mergeWith : other.settings];

        if (other.getter) {
            if (!self.getter) self.getter = [WIBody new];
            self.getter = other.getter;
        }
        if (other.defaultValue) {
            if (!self.defaultValue) self.defaultValue = [WIBody new];
            self.defaultValue = other.defaultValue;
        }
        for (NSObject<NSCopying> *k in other.setters) {
            if (![self setterForKey:k]) [self setSetter:[WIBody new] forKey:k];
            [[self setterForKey:k] mergeWith:[other setterForKey:k]];
        }

        if (other.boundTo)
            if (!self.boundTo) {
                // todo Ordered
                self.boundTo = other.boundTo;
                self.bindingType = other.bindingType;
            }

        for (WIVar *o in other.atomicVars) {
            [self addAtomicVar:[self.file equivVarTo:o]];
        }
        for (WIVar *o in other.fluidVars) {
            [self addFluidVar:[self.file equivVarTo:o]];
        }
        {
            NSMutableSet *s = self.fluidVars.copy;
            [self.fluidVars minusSet:self.atomicVars];
            [self.atomicVars minusSet:s];
        }
    }
    - (NSString *)name {
        MSGSTART("WIVar:-(NSString*)name")

        /*i-999*/ NSString * ret = v_name;
        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIVar:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    #ifndef __SWIFT__
        - (void)process:(Token *)token regexes:(NSMutableArray *)regexes settings:(NSSet *)settings doingInitialSettings:(bool &)doingInitialSettings {
            MSGSTART("WIVar:-(void)process:(Token*)token regexes:(NSMutableArray*)regexes settings:(NSSet*)settings doingInitialSettings:(bool&)doingInitialSettings")

            Token * t = [TokenHelper actualToken:token];
            NSArray *chs;

            if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"setting"]]) ) {
                if (doingInitialSettings && [TokenHelper isJustSetting:token]) {
                    [TokenHelper settingDictionaryForToken:token addTo:self.settings];
                }
                else {
                    NSSet *newSettings = [settings setByAddingObject:( (Token *)t.children[0] ).contents];
                    doingInitialSettings = NO;
                    for (Token *ch in chs) {
                        [self process:ch regexes:regexes settings:newSettings doingInitialSettings:doingInitialSettings];
                    }
                }
            }
            else if ([TokenHelper actualToken:t havingRuleIn:@[@"block"]]) {
                WIBody *body = self.getter;
                if (!body) self.getter = body = [WIBody new];
                [body incorporateBody:( (Token *)t.children[0] ).contents];
            }
            else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"getter"]]) ) {
                WIBody *body = self.getter;
                if (!body) self.getter = body = [WIBody new];
                if (chs.count) [body incorporateBody:( (Token *)( (Token *)chs[0] ).children[0] ).contents];
            }
            else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"init"]]) ) {
                WIBody *body = self.defaultValue;
                if (!body) self.defaultValue = body = [WIBody new];
                if (chs.count) [body incorporateBody:( (Token *)( (Token *)chs[0] ).children[0] ).contents];
            }
            else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"setter"]]) ) {
                NSString *setterVar = (t.children.count ? ( (Token *)t.children[0] ).contents : @"v");
                WIBody *body = [self setterWithSetterVar:setterVar];
                if (chs.count) [body incorporateBody:( (Token *)( (Token *)chs[0] ).children[0] ).contents];
            }
            else if ([TokenHelper actualToken:t havingRuleIn:@[@"regex"]]) {
                NSDictionary *re = @{
                    ( (Token *)t.children[0] ).contents:( (Token *)t.children[1] ).contents
                };
                if (![(NSDictionary *)regexes.lastObject isEqual : re])
                    [regexes addObject:re];
            }
            else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"link"]]) ) {
                NSString *linkType = ( (Token *)t.children[0] ).contents;
                WICtxt *ctxt = [self.context.clazz.context.file contextWithRegexes:regexes];
                NSMutableArray *newRegexes = regexes.mutableCopy;
                for (Token *ch in chs) {
                    [ctxt process:ch regexes:newRegexes settings:settings outerClass:nil outerLinkType:linkType outerLinkVar:self mods:@[]];
                }
            }
            else if ( (chs = [TokenHelper childrenForToken:token havingRuleIn:@[@"atomic"]]) ) {
                WIVarContext *varCtxt = [[[self.context.clazz.context.file contextWithRegexes:regexes] classWithName:self.context.clazz.name] varCtxtWithSettings:settings];
                NSMutableArray *newRegexes = regexes.mutableCopy;
                for (Token *ch in chs) {
                    [self addAtomicVar:[varCtxt varForVarToken:ch type:self.type regexes:newRegexes]];
                }
            }
        }
    #endif // __SWIFT__
    - (void)removeAllArgs {
        MSGSTART("WIVar:-(void)removeAllArgs")
        [v_args removeAllObjects];
    }
    - (void)removeAllAtomicVars {
        MSGSTART("WIVar:-(void)removeAllAtomicVars")
        [v_atomicVars removeAllObjects];
    }
    - (void)removeAllFluidVars {
        MSGSTART("WIVar:-(void)removeAllFluidVars")
        [v_fluidVars removeAllObjects];
    }
    - (void)removeAllSetters {
        MSGSTART("WIVar:-(void)removeAllSetters")
        [v_setters removeAllObjects];
    }
    - (void)removeArg:(WIVarArg *)v {
        MSGSTART("WIVar:-(void)removeArg:(WIVarArg*)v")
        [v_args removeObject : v];
    }
    - (void)removeArgAtIndex:(Int)index {
        MSGSTART("WIVar:-(void)removeArgAtIndex:(Int)index")
        [v_args removeObjectAtIndex : index];
    }
    - (void)removeAtomicVar:(WIVar *)v {
        MSGSTART("WIVar:-(void)removeAtomicVar:(WIVar*)v")
        [v_atomicVars removeObject : v];
    }
    - (void)removeFluidVar:(WIVar *)v {
        MSGSTART("WIVar:-(void)removeFluidVar:(WIVar*)v")
        [v_fluidVars removeObject : v];
    }
    - (void)removeSetterForKey:(id<NSCopying> )key {
        MSGSTART("WIVar:-(void)removeSetterForKey:(id<NSCopying>)key")
        [v_setters removeObjectForKey : key];
    }
    - (void)retract {
        MSGSTART("WIVar:-(void)retract")
        self.context = nil;
        self.type = nil;
        [self.args removeAllObjects];
        self.getter = nil;
        self.defaultValue = nil;
        [self.setters removeAllObjects];
        [self.atomicVars removeAllObjects];
        [self.fluidVars removeAllObjects];
    }
    - (NSDictionary *)seenTreeNodeData {
        MSGSTART("WIVar:-(NSDictionary*)seenTreeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"type":@"Var",
            @"name":self.descriptiveName
        };


        /*i999*/ return ret ? ret : self.treeNodeData;
    }
    - (NSString *)selectorString {
        MSGSTART("WIVar:-(NSString*)selectorString")

        NSMutableString * ret = [NSMutableString stringWithFormat:@"(%@)%@",self.type.descriptiveName,self.name];
        for (WIVarArg *arg in self.args) {
            [ret appendFormat:@"%@:(%@)%@",
             arg.arg ? [@" " stringByAppendingString : arg.arg]:
             (arg.indexInVar ?
                  @" ?" :
                  @""
             ),
             arg.type.descriptiveName,
             arg.name ? arg.name:@"?"
            ];
        }
        return ret;
    }
    - (void)setArgs:(EndpointA *)v {
        MSGSTART("WIVar:-(void)setArgs:(EndpointA*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(args=\"blah\") to set the property)");

        /*i-905*/ if (v_args == v) return;

        /*i-900*/ {
            v_args = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_args,self); ADDOWNER(v,self);
    }
    - (void)setAtomicVars:(EndpointS *)v {
        MSGSTART("WIVar:-(void)setAtomicVars:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(atomicVars=\"blah\") to set the property)");

        /*i-905*/ if (v_atomicVars == v) return;

        /*i-900*/ {
            v_atomicVars = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_atomicVars,self); ADDOWNER(v,self);
    }
    - (void)setBindingType:(NSString *)v {
        MSGSTART("WIVar:-(void)setBindingType:(NSString*)v")

        /*i-905*/ if (v_bindingType == v) return;

        /*i-900*/ {
            v_bindingType = (id)v;
        }
    }
    - (void)setBoundTo:(WIVar *)v {
        MSGSTART("WIVar:-(void)setBoundTo:(WIVar*)v")

        /*i-905*/ if (v_boundTo == v) return;

        /*i-900*/ {
            v_boundTo = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_boundTo,self); ADDOWNER(v,self);
    }
    - (void)setContext:(WIVarContext *)v {
        MSGSTART("WIVar:-(void)setContext:(WIVarContext*)v")
        [v_context_endpoint setValue : v];
    }
    - (void)setContext_endpoint:(Endpoint1 *)v {
        MSGSTART("WIVar:-(void)setContext_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(context_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_context_endpoint == v) return;

        /*i-900*/ {
            v_context_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_context_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setDefaultValue:(WIBody *)v {
        MSGSTART("WIVar:-(void)setDefaultValue:(WIBody*)v")
        [v_defaultValue_endpoint setValue : v];
    }
    - (void)setDefaultValue_endpoint:(Endpoint1 *)v {
        MSGSTART("WIVar:-(void)setDefaultValue_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(defaultValue_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_defaultValue_endpoint == v) return;

        /*i-900*/ {
            v_defaultValue_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_defaultValue_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setFluidVars:(EndpointS *)v {
        MSGSTART("WIVar:-(void)setFluidVars:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(fluidVars=\"blah\") to set the property)");

        /*i-905*/ if (v_fluidVars == v) return;

        /*i-900*/ {
            v_fluidVars = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_fluidVars,self); ADDOWNER(v,self);
    }
    - (void)setGetter:(WIBody *)v {
        MSGSTART("WIVar:-(void)setGetter:(WIBody*)v")
        [v_getter_endpoint setValue : v];
    }
    - (void)setGetter_endpoint:(Endpoint1 *)v {
        MSGSTART("WIVar:-(void)setGetter_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(getter_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_getter_endpoint == v) return;

        /*i-900*/ {
            v_getter_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_getter_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setKeyInContext:(kid)v {
        MSGSTART("WIVar:-(void)setKeyInContext:(kid)v")

        self.keysInContext = [NSSet setWithObject:v];
    }
    - (void)setKeysInContext:(NSSet *)v {
        MSGSTART("WIVar:-(void)setKeysInContext:(NSSet*)v")

        NSMutableDictionary<DictionaryLinkEndpoint> *context_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self contextToEndpoint : v_context_endpoint.value];
        NSSet *context_keys_were = self.keysInContext,*context_inss,*context_dels;
        if ([Util getInsertsAndDeletesForSetWhenChanging:context_keys_were to:v inss:&context_inss dels:&context_dels]) {
            for (id<NSCopying> key in context_dels) {
                [context_ep removeObjectForKey:key];
            }
            for (id<NSCopying> key in context_inss) {
                [context_ep setObject:self forKey:key];
            }
        }
    }
    - (void)setName:(NSString *)v {
        MSGSTART("WIVar:-(void)setName:(NSString*)v")

        /*i-905*/ if (v_name == v) return;

        /*i-900*/ {
            v_name = (id)v;
        }
    }
    - (void)setSetter:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WIVar:-(void)setSetter:(id)v forKey:(id<NSCopying>)key")
        [v_setters setObject : v forKey : key];
    }
    - (void)setSetters:(EndpointD *)v {
        MSGSTART("WIVar:-(void)setSetters:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(setters=\"blah\") to set the property)");

        /*i-905*/ if (v_setters == v) return;

        /*i-900*/ {
            v_setters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_setters,self); ADDOWNER(v,self);
    }
    - (void)setSettings:(MutableDictionary *)v {
        MSGSTART("WIVar:-(void)setSettings:(MutableDictionary*)v")

        /*i-905*/ if (v_settings == v) return;

        /*i-900*/ {
            v_settings = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_settings,self); ADDOWNER(v,self);
    }
    - (WIBody *)setterForKey:(id<NSCopying> )key {
        MSGSTART("WIVar:-(WIBody*)setterForKey:(id<NSCopying>)key")
        return [v_setters objectForKey:key];
    }
    - (EndpointD *)setters {
        MSGSTART("WIVar:-(EndpointD*)setters")

        /*i-999*/ EndpointD * ret = v_setters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)setterToEndpoint:(id)asetter {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)setterToEndpoint:(id)asetter")
        return [asetter performSelector:@selector(setterForVar_endpoint)];
    }
    - (WIBody *)setterWithSetterVar:(NSString *)setterVar {
        MSGSTART("WIVar:-(WIBody*)setterWithSetterVar:(NSString*)setterVar")

        WIBody * body = [self setterForKey:setterVar];
        if (!body) [self setSetter:body = [WIBody new] forKey:setterVar.copy];
        return body;
    }
    - (MutableDictionary *)settings {
        MSGSTART("WIVar:-(MutableDictionary*)settings")

        /*i-999*/ MutableDictionary * ret = v_settings;
        /*i999*/ return ret;
    }
    - (void)setType:(WIType *)v {
        MSGSTART("WIVar:-(void)setType:(WIType*)v")
        [v_type_endpoint setValue : v];
    }
    - (void)setType_endpoint:(Endpoint1 *)v {
        MSGSTART("WIVar:-(void)setType_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(type_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_type_endpoint == v) return;

        /*i-900*/ {
            v_type_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_type_endpoint,self); ADDOWNER(v,self);
    }
    - (NSDictionary *)treeNodeData {
        MSGSTART("WIVar:-(NSDictionary*)treeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"type":@"Var",
            @"name":self.boundTo ?
            [([(NSDictionary *)self.settings count] ?
              [NSString stringWithFormat:@"%@ %@",self.selectorString,self.settings.jsonString] :
              [NSString stringWithFormat:@"%@",self.selectorString]
             )
             stringByAppendingFormat : @" %@ %@",
             self.bindingType,self.boundTo.descriptiveName]:
            ([(NSDictionary *)self.settings count] ?
             [NSString stringWithFormat:@"%@ %@",self.selectorString,self.settings.jsonString] :
             [NSString stringWithFormat:@"%@",self.selectorString]
            ),
            @"binding":(self.boundTo ?
                        @{self.bindingType : self.boundTo.descriptiveName}
                        :
                        NSNull.null
            ),
            @"data":@{
                @"collapsed":@YES,
                @"path":@[
                    [(id)self.context.clazz.context.keyInFile jsonString],
                    self.context.clazz.classInCtxt ? self.context.clazz.name : [NSString stringWithFormat:@"<%@>",self.context.clazz.name],
                    [(id)self.context.keyInClazz jsonString],
                    self.selectorString
                ]
            }
        };

        /*i999*/ return ret ? ret : @{};
    }
    - (NSSet *)treePropertyNames {
        MSGSTART("WIVar:-(NSSet*)treePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i0*/ ret = @[@"getter",@"setters",@"defaultValue",@"atomicVars",@"__settings"];

            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (NSSet *)treeSingleNodePropertyNames {
        MSGSTART("WIVar:-(NSSet*)treeSingleNodePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (WIType *)type {
        MSGSTART("WIVar:-(WIType*)type")
        return (WIType *)v_type_endpoint.value;
    }
    - (Endpoint1 *)type_endpoint {
        MSGSTART("WIVar:-(Endpoint1*)type_endpoint")

        /*i-999*/ Endpoint1 * ret = v_type_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)typeToEndpoint:(id)atype")
        return [atype performSelector:@selector(vars)];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIVarArg
    #define _WIClass_           WIVarArg__
    #define _className_         wIVarArg
    #define _Class_             WIVarArg__
    @implementation WIVarArg

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIVarArg {
        MSGSTART("WIVarArg:-(void)_startObjectOfClassWIVarArg")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_var_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableVar:) otherEndObjectToEndpoint:@selector(varToEndpoint:)]);  ADDOWNER(v_var_endpoint,self);
        /*ivar*/ v_type_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableType:) otherEndObjectToEndpoint:@selector(typeToEndpoint:)]);  ADDOWNER(v_type_endpoint,self);

        /*i0*/}
    - (NSString *)arg {
        MSGSTART("WIVarArg:-(NSString*)arg")

        /*i-999*/ NSString * ret = v_arg;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("WIVarArg:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIVarArg:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WIVarArg *)copyByApplyingRegexes:(NSArray *)regexes {
        MSGSTART("WIVarArg:-(WIVarArg*)copyByApplyingRegexes:(NSArray*)regexes")

        WIVarArg * ret = [WIVarArg new];
        ret.name = [self.name stringByApplyingRegexes:regexes];
        ret.arg = [self.arg stringByApplyingRegexes:regexes];
        ret.type = [self.type applyRegexes:regexes];
        return ret;
    }
    - (void)dealloc {
        MSGSTART("WIVarArg:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_var_endpoint,self); v_var_endpoint = nil;

        v_arg = nil;

        REMOVEOWNER(v_type_endpoint,self); v_type_endpoint = nil;

        v_name = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WIVarArg:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WIVarArg:-(void)die")
        self.var = nil;
        self.type = nil;

        /*i900*/}
    - (WIFile *)file {
        MSGSTART("WIVarArg:-(WIFile*)file")
        return self.var.context.clazz.context.file;
    }
    - (NSIndexSet *)indexesInVar {
        MSGSTART("WIVarArg:-(NSIndexSet*)indexesInVar")

        if (!v_var_endpoint.value) return [NSIndexSet indexSet];

        NSMutableArray<ArrayLinkEndpoint> *var_ep = (NSMutableArray<ArrayLinkEndpoint> *)[self varToEndpoint : v_var_endpoint.value];
        return (NSIndexSet *)[var_ep.__arrayObjectIndexes objectForKey:self];
    }
    - (Unsigned)indexInVar {
        MSGSTART("WIVarArg:-(Unsigned)indexInVar")

        return self.indexesInVar.firstIndex;
    }
    - (WIVarArg *)init {
        MSGSTART("WIVarArg:-(WIVarArg*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWIVarArg];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableType:(id)atype {
        MSGSTART("WIVarArg:-(NSNumber*)isAcceptableType:(id)atype")
        return [atype isKindOfClass:[WIType class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableVar:(id)avar {
        MSGSTART("WIVarArg:-(NSNumber*)isAcceptableVar:(id)avar")
        return [avar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (NSString *)name {
        MSGSTART("WIVarArg:-(NSString*)name")

        /*i-999*/ NSString * ret = v_name;
        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIVarArg:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)retract {
        MSGSTART("WIVarArg:-(void)retract")
        self.var = nil;
        self.type = nil;
    }
    - (void)setArg:(NSString *)v {
        MSGSTART("WIVarArg:-(void)setArg:(NSString*)v")

        /*i-905*/ if (v_arg == v) return;

        /*i-900*/ {
            v_arg = (id)v;
        }
    }
    - (void)setIndexesInVar:(NSIndexSet *)v {
        MSGSTART("WIVarArg:-(void)setIndexesInVar:(NSIndexSet*)v")

        NSMutableArray<ArrayLinkEndpoint> *var_ep = (NSMutableArray<ArrayLinkEndpoint> *)[self varToEndpoint : v_var_endpoint.value];
        NSIndexSet *var_indexes_were = self.indexesInVar.copy;
        v = v.copy;
        Unsigned var_vi = v.firstIndex,var_wi = var_indexes_were.firstIndex;
        while ( (var_vi != NSNotFound) && (var_wi != NSNotFound) ) {
            if (var_vi == var_wi) {
                var_vi = [v indexGreaterThanIndex:var_vi];
                var_wi = [var_indexes_were indexGreaterThanIndex:var_wi];
            }
            else if (var_vi < var_wi) {
                [var_ep insertObject:self atIndex:var_vi];
                var_vi = [v indexGreaterThanIndex:var_vi];
            }
            else {
                [var_ep removeObjectAtIndex:var_wi];
                var_wi = [var_indexes_were indexGreaterThanIndex:var_wi];
            }
        }
        while (var_vi != NSNotFound) {
            [var_ep insertObject:self atIndex:var_vi];
            var_vi = [v indexGreaterThanIndex:var_vi];
        }
        while (var_wi != NSNotFound) {
            [var_ep removeObjectAtIndex:var_wi];
            var_wi = [var_indexes_were indexGreaterThanIndex:var_wi];
        }
    }
    - (void)setIndexInVar:(Unsigned)v {
        MSGSTART("WIVarArg:-(void)setIndexInVar:(Unsigned)v")

        self.indexesInVar = (v == NSNotFound ? [NSIndexSet indexSet] : [NSIndexSet indexSetWithIndex:v]);
    }
    - (void)setName:(NSString *)v {
        MSGSTART("WIVarArg:-(void)setName:(NSString*)v")

        /*i-905*/ if (v_name == v) return;

        /*i-900*/ {
            v_name = (id)v;
        }
    }
    - (void)setType:(WIType *)v {
        MSGSTART("WIVarArg:-(void)setType:(WIType*)v")
        [v_type_endpoint setValue : v];
    }
    - (void)setType_endpoint:(Endpoint1 *)v {
        MSGSTART("WIVarArg:-(void)setType_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVarArg) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(type_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_type_endpoint == v) return;

        /*i-900*/ {
            v_type_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_type_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setVar:(WIVar *)v {
        MSGSTART("WIVarArg:-(void)setVar:(WIVar*)v")
        [v_var_endpoint setValue : v];
    }
    - (void)setVar_endpoint:(Endpoint1 *)v {
        MSGSTART("WIVarArg:-(void)setVar_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVarArg) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(var_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_var_endpoint == v) return;

        /*i-900*/ {
            v_var_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_var_endpoint,self); ADDOWNER(v,self);
    }
    - (WIType *)type {
        MSGSTART("WIVarArg:-(WIType*)type")
        return (WIType *)v_type_endpoint.value;
    }
    - (Endpoint1 *)type_endpoint {
        MSGSTART("WIVarArg:-(Endpoint1*)type_endpoint")

        /*i-999*/ Endpoint1 * ret = v_type_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype {
        MSGSTART("WIVarArg:-(NSObject<LinkEndpoint>*)typeToEndpoint:(id)atype")
        return [atype performSelector:@selector(args)];
    }
    - (WIVar *)var {
        MSGSTART("WIVarArg:-(WIVar*)var")
        return (WIVar *)v_var_endpoint.value;
    }
    - (Endpoint1 *)var_endpoint {
        MSGSTART("WIVarArg:-(Endpoint1*)var_endpoint")

        /*i-999*/ Endpoint1 * ret = v_var_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar {
        MSGSTART("WIVarArg:-(NSObject<LinkEndpoint>*)varToEndpoint:(id)avar")
        return [avar performSelector:@selector(args)];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIVarContext
    #define _WIClass_           WIVarContext__
    #define _className_         wIVarContext
    #define _Class_             WIVarContext__
    @implementation WIVarContext

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIVarContext {
        MSGSTART("WIVarContext:-(void)_startObjectOfClassWIVarContext")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-950*/ v_vars = [[EndpointD alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableVar:) otherEndObjectToEndpoint:@selector(varToEndpoint:)];

        /*i-500*//*ivar*/ v_clazz_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableClazz:) otherEndObjectToEndpoint:@selector(clazzToEndpoint:)]);  ADDOWNER(v_clazz_endpoint,self);

        /*i0*/}
    - (void)_addArgsFromToken:(Token *)token key:(NSMutableArray *)key argTypes:(NSMutableArray *)argTypes argArgs:(NSMutableArray *)argArgs argNames:(NSMutableArray *)argNames regexes:(NSMutableArray *)regexes {
        MSGSTART("WIVarContext:-(void)_addArgsFromToken:(Token*)token key:(NSMutableArray*)key argTypes:(NSMutableArray*)argTypes argArgs:(NSMutableArray*)argArgs argNames:(NSMutableArray*)argNames regexes:(NSMutableArray*)regexes")

        for (Token *t in token.children) {
            if ([t.ruleName isEqualToString:@"argList"] || [t.ruleName isEqualToString:@"selArgList"]) {
                [self _addArgsFromToken:t key:key argTypes:argTypes argArgs:argArgs argNames:argNames regexes:regexes];
            }
            else {
                int nameArg = -1,argArg = -1,typeArg = -1;
                if ([t.ruleName isEqualToString:@"selArgDef"])
                    switch (t.children.count) {
                        case 1: argArg = -1; nameArg = -1; typeArg = 0; break;

                        case 2: argArg = -1; nameArg = 1; typeArg = 0; break;

                        case 3: argArg = 0; nameArg = 2; typeArg = 1; break;
                    }
                else if ([t.ruleName isEqualToString:@"argDef"])
                    switch (t.children.count) {
                        case 1: argArg = -1; nameArg = -1; typeArg = 0; break;

                        case 2: argArg = -1; nameArg = 1; typeArg = 0; break;
                    }
                else continue;


                NSString *name = (nameArg == -1 ? nil : ( (Token *)t.children[nameArg] ).contents);
                NSString *arg = (argArg == -1 ? nil : ( (Token *)t.children[argArg] ).contents);

                Token *typet = t.children[typeArg],*classt = typet;
                NSMutableArray *mods = @[].mutableCopy;
                if ([typet.ruleName isEqualToString:@"mod"])
                    for (Token *ch2 in typet.children) {
                        if (![TokenHelper actualToken:ch2 havingRuleIn:@[@"class",@"protocol",@"classwprotocol"]])
                            [mods addObject:ch2.contents];
                        else classt = ch2;
                    }
                WICtxt *ctxt = [self.clazz.context.file contextWithRegexes:regexes];
                NSString *className = nil,*protocolName = nil;
                if ([classt.ruleName isEqualToString:@"class"]) className = ( (Token *)classt.children[0] ).contents;
                else if ([classt.ruleName isEqualToString:@"classwprotocol"]) className = ( (Token *)( (Token *)classt.children[0] ).children[0] ).contents;
                else if ([classt.ruleName isEqualToString:@"protocol"]) protocolName = ( (Token *)classt.children[0] ).contents;

                WIType *argType;
                if ([classt.ruleName isEqualToString:@"fnblock"]) {
                    argType = [self typeForFnBlock:classt mods:mods regexes:regexes];
                }
                else {
                    WIClass *clazz = (className ? [ctxt classWithName:className] : [ctxt protocolWithName:protocolName]);
                    argType = [clazz typeWithModifiers:mods];
                }

                [key addObject:@[
                     name ? name : NSNull.null,
                     arg ? arg : NSNull.null,
                     className ? className : NSNull.null,
                     protocolName ? @[protocolName] : NSNull.null,     // TODO
                     mods
                 ]];

                [argTypes addObject:argType];
                [argNames addObject:name ? name:NSNull.null];
                [argArgs addObject:arg ? arg:NSNull.null];
            }
        }
    }
    - (WIVarContext *)applyRegexes:(NSArray *)regexes {
        MSGSTART("WIVarContext:-(WIVarContext*)applyRegexes:(NSArray*)regexes")

        WIClass * toc = [self.clazz applyRegexes];
        return [self applyRegexes:regexes to:toc];
    }
    - (WIVarContext *)applyRegexes:(NSArray *)regexes to:(WIClass *)toc {
        MSGSTART("WIVarContext:-(WIVarContext*)applyRegexes:(NSArray*)regexes to:(WIClass*)toc")

        if (!( (NSArray *)self.clazz.context.keyInFile ).count) return self;

        NSSet *newSettings = [(NSSet *)self.keyInClazz setByApplyingRegexes : regexes];

        WIVarContext *tovc = [toc varCtxtWithSettings:newSettings];
        for (NSObject<NSCopying> *key in self.vars) {
            [[self varForKey:key] applyRegexes:regexes to:tovc];
        }
        return tovc;
    }
    - (NSDictionary *)asD3Tree {
        MSGSTART("WIVarContext:-(NSDictionary*)asD3Tree")
        return [Treeable asD3Tree:self.asTree];
    }
    - (NSString *)asD3TreeJSON {
        MSGSTART("WIVarContext:-(NSString*)asD3TreeJSON")

        NSError * err = nil;
        return [[NSString alloc] initWithData:[NSJSONSerialization dataWithJSONObject:self.asD3Tree options:0 error:&err] encoding:NSUTF8StringEncoding];
    }
    - (NSDictionary *)asTree {
        MSGSTART("WIVarContext:-(NSDictionary*)asTree")
        return [self asTree:NSMutableSet.set];
    }
    - (NSMutableDictionary *)asTree:(NSMutableSet *)seen {
        MSGSTART("WIVarContext:-(NSMutableDictionary*)asTree:(NSMutableSet*)seen")

        return ([Treeable asTree:seen object:self]);
    }
    - (constchar *)cdescription {
        MSGSTART("WIVarContext:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WIClass *)clazz {
        MSGSTART("WIVarContext:-(WIClass*)clazz")
        return (WIClass *)v_clazz_endpoint.value;
    }
    - (Endpoint1 *)clazz_endpoint {
        MSGSTART("WIVarContext:-(Endpoint1*)clazz_endpoint")

        /*i-999*/ Endpoint1 * ret = v_clazz_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)clazzToEndpoint:(id)aclazz {
        MSGSTART("WIVarContext:-(NSObject<LinkEndpoint>*)clazzToEndpoint:(id)aclazz")
        return [aclazz performSelector:@selector(varCtxts)];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIVarContext:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("WIVarContext:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_vars,self); v_vars = nil;

        REMOVEOWNER(v_clazz_endpoint,self); v_clazz_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WIVarContext:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSString *)descriptiveName {
        MSGSTART("WIVarContext:-(NSString*)descriptiveName")

        return [(NSDictionary *)self.clazz.context.keyInFile count] ?
               ([(NSDictionary *)self.keyInClazz count] ?
                [NSString stringWithFormat:@"%@ %@ =>(%@)",self.clazz.name,[(id)self.keyInClazz jsonString],[(id)self.clazz.context.keyInFile jsonString]] :
                [NSString stringWithFormat:@"%@ =>(%@)",self.clazz.name,[(id)self.clazz.context.keyInFile jsonString]]
               ) :
               ([(NSDictionary *)self.keyInClazz count] ?
                [NSString stringWithFormat:@"%@ %@",self.clazz.name,[(id)self.keyInClazz jsonString]] :
                [NSString stringWithFormat:@"%@",self.clazz.name]
               )
        ;
    }
    - (void)die {
        MSGSTART("WIVarContext:-(void)die")
        self.clazz = nil;
        [v_vars removeAllObjects];

        /*i900*/}
    - (WIVar *)equivVarTo:(WIVar *)other {
        MSGSTART("WIVarContext:-(WIVar*)equivVarTo:(WIVar*)other")

        NSObject<NSCopying> *k = (NSObject<NSCopying> *)other.keyInContext;
        WIVar *ret = [self varForKey:k];
        if (!ret) {
            [self setVar:ret = [WIVar new] forKey:k];
            ret.type = [self.clazz.context.file equivTypeTo:other.type];
            for (WIVarArg *arg2 in other.args) {
                WIVarArg *arg = [WIVarArg new];
                [ret addArg:arg];
                arg.name = arg2.name.copy;
                arg.arg = arg2.arg.copy;
                arg.type = [self.clazz.context.file equivTypeTo:arg2.type];
            }
            ret.name = other.name.copy;
        }
        return ret;
    }
    - (WIFile *)file {
        MSGSTART("WIVarContext:-(WIFile*)file")
        return self.clazz.context.file;
    }
    - (WIVarContext *)init {
        MSGSTART("WIVarContext:-(WIVarContext*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWIVarContext];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableClazz:(id)aclazz {
        MSGSTART("WIVarContext:-(NSNumber*)isAcceptableClazz:(id)aclazz")
        return [aclazz isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableVar:(id)avar {
        MSGSTART("WIVarContext:-(NSNumber*)isAcceptableVar:(id)avar")
        return [avar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (kid)keyInClazz {
        MSGSTART("WIVarContext:-(kid)keyInClazz")

        for (id<NSCopying> key in self.keysInClazz) {
            return key;
        }
        return nil;
    }
    - (NSSet *)keysInClazz {
        MSGSTART("WIVarContext:-(NSSet*)keysInClazz")

        if (!v_clazz_endpoint.value) return [NSSet set];

        NSMutableDictionary<DictionaryLinkEndpoint> *clazz_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self clazzToEndpoint : v_clazz_endpoint.value];
        return (NSSet *)[clazz_ep.__dictionaryObjectKeys objectForKey:self];
    }
    - (void)mergeWith:(WIVarContext *)other {
        MSGSTART("WIVarContext:-(void)mergeWith:(WIVarContext*)other")

        for (NSObject<NSCopying> *k in other.vars) {
            WIVar *o = [other varForKey:k];
            [[self equivVarTo:o] mergeWith:o];
        }
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIVarContext:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removeAllVars {
        MSGSTART("WIVarContext:-(void)removeAllVars")
        [v_vars removeAllObjects];
    }
    - (void)removeVarForKey:(id<NSCopying> )key {
        MSGSTART("WIVarContext:-(void)removeVarForKey:(id<NSCopying>)key")
        [v_vars removeObjectForKey : key];
    }
    - (void)retract {
        MSGSTART("WIVarContext:-(void)retract")
        self.clazz = nil;
        [self.vars removeAllObjects];
    }
    - (NSDictionary *)seenTreeNodeData {
        MSGSTART("WIVarContext:-(NSDictionary*)seenTreeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"type":@"VarContext",
            @"name":self.descriptiveName,
            @"data":@{
                @"collapsed":@YES,
                @"path":@[
                    [(id)self.clazz.context.keyInFile jsonString],
                    self.clazz.classInCtxt ? self.clazz.name : [NSString stringWithFormat:@"<%@>",self.clazz.name],
                    [(id)self.keyInClazz jsonString]
                ]
            }
        };

        /*i999*/ return ret ? ret : self.treeNodeData;
    }
    - (void)setClazz:(WIClass *)v {
        MSGSTART("WIVarContext:-(void)setClazz:(WIClass*)v")
        [v_clazz_endpoint setValue : v];
    }
    - (void)setClazz_endpoint:(Endpoint1 *)v {
        MSGSTART("WIVarContext:-(void)setClazz_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVarContext) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(clazz_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_clazz_endpoint == v) return;

        /*i-900*/ {
            v_clazz_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_clazz_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setKeyInClazz:(kid)v {
        MSGSTART("WIVarContext:-(void)setKeyInClazz:(kid)v")

        self.keysInClazz = [NSSet setWithObject:v];
    }
    - (void)setKeysInClazz:(NSSet *)v {
        MSGSTART("WIVarContext:-(void)setKeysInClazz:(NSSet*)v")

        NSMutableDictionary<DictionaryLinkEndpoint> *clazz_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self clazzToEndpoint : v_clazz_endpoint.value];
        NSSet *clazz_keys_were = self.keysInClazz,*clazz_inss,*clazz_dels;
        if ([Util getInsertsAndDeletesForSetWhenChanging:clazz_keys_were to:v inss:&clazz_inss dels:&clazz_dels]) {
            for (id<NSCopying> key in clazz_dels) {
                [clazz_ep removeObjectForKey:key];
            }
            for (id<NSCopying> key in clazz_inss) {
                [clazz_ep setObject:self forKey:key];
            }
        }
    }
    - (void)setVar:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WIVarContext:-(void)setVar:(id)v forKey:(id<NSCopying>)key")
        [v_vars setObject : v forKey : key];
    }
    - (void)setVars:(EndpointD *)v {
        MSGSTART("WIVarContext:-(void)setVars:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVarContext) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(vars=\"blah\") to set the property)");

        /*i-905*/ if (v_vars == v) return;

        /*i-900*/ {
            v_vars = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_vars,self); ADDOWNER(v,self);
    }
    - (NSDictionary *)treeNodeData {
        MSGSTART("WIVarContext:-(NSDictionary*)treeNodeData")

        /*i-999*/ NSDictionary * ret = nil;
        /*i0*/ ret = @{
            @"type":@"VarContext",
            @"name":[(id)self.keyInClazz jsonString],
            @"data":@{
                @"collapsed":@YES,
                @"path":@[
                    [(id)self.clazz.context.keyInFile jsonString],
                    self.clazz.classInCtxt ? self.clazz.name : [NSString stringWithFormat:@"<%@>",self.clazz.name],
                    [(id)self.keyInClazz jsonString]
                ]
            }
        };

        /*i999*/ return ret ? ret : @{};
    }
    - (NSSet *)treePropertyNames {
        MSGSTART("WIVarContext:-(NSSet*)treePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i0*/ ret = @[@"vars"];

            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (NSSet *)treeSingleNodePropertyNames {
        MSGSTART("WIVarContext:-(NSSet*)treeSingleNodePropertyNames")

        /*i-999*/ static NSSet * retSet = nil;
        /*i-100*/ if (!retSet) {
            NSArray *ret = nil;
            /*i100*/ retSet = [NSSet setWithArray:ret ? ret:@[]];
        }
        /*i999*/ return retSet;
    }
    - (WIType *)typeForFnBlock:(Token *)token mods:(NSMutableArray *)mods regexes:(NSMutableArray *)regexes {
        MSGSTART("WIVarContext:-(WIType*)typeForFnBlock:(Token*)token mods:(NSMutableArray*)mods regexes:(NSMutableArray*)regexes")

        Token * typet = token.children[0],*classt = typet;
        NSMutableArray *mods2 = @[].mutableCopy;
        if ([typet.ruleName isEqualToString:@"mod"])
            for (Token *ch2 in typet.children) {
                if (![TokenHelper actualToken:ch2 havingRuleIn:@[@"class",@"protocol",@"classwprotocol"]])
                    [mods2 addObject:ch2.contents];
                else classt = ch2;
            }
        WICtxt *ctxt = [self.clazz.context.file contextWithRegexes:regexes];
        NSString *className = nil,*protocolName = nil;
        if ([classt.ruleName isEqualToString:@"class"]) className = ( (Token *)classt.children[0] ).contents;
        else if ([classt.ruleName isEqualToString:@"classwprotocol"]) className = ( (Token *)( (Token *)classt.children[0] ).children[0] ).contents;
        else if ([classt.ruleName isEqualToString:@"protocol"]) protocolName = ( (Token *)classt.children[0] ).contents;

        WIClass *clazz = (className ? [ctxt classWithName:className] : [ctxt protocolWithName:protocolName]);

        NSMutableArray *key = @[].mutableCopy;
        [key addObject:( (Token *)token.children[1] ).contents];

        [self _addArgsFromToken:token key:key argTypes:nil argArgs:nil argNames:nil regexes:regexes];
        [mods2 addObject:key];
        [mods addObject:mods2];
        return [clazz typeWithModifiers:mods];
    }
    - (WIVar *)varForKey:(id<NSCopying> )key {
        MSGSTART("WIVarContext:-(WIVar*)varForKey:(id<NSCopying>)key")
        return [v_vars objectForKey:key];
    }
    - (WIVar *)varForVarToken:(Token *)token type:(WIType *)type regexes:(NSMutableArray *)regexes {
        MSGSTART("WIVarContext:-(WIVar*)varForVarToken:(Token*)token type:(WIType*)type regexes:(NSMutableArray*)regexes")

        NSString * name = ( (Token *)token.children[0] ).contents;
        NSMutableArray *key = @[
                name,
                type.clazz.classInCtxt ? type.clazz.name : NSNull.null,
                type.clazz.protocolInCtxt ? @[type.clazz.name] : NSNull.null,
                type.keyInClazz
            ].mutableCopy;
        NSMutableArray *argTypes = @[].mutableCopy,*argArgs = @[].mutableCopy,*argNames = @[].mutableCopy;

        [self _addArgsFromToken:token key:key argTypes:argTypes argArgs:argArgs argNames:argNames regexes:regexes];

        WIVar *var = [self varForKey:key];
        if (!var) {
            [self setVar:var = [WIVar new] forKey:key];
            var.type = type;
            var.name = name;
            for (int i = 0; i < argTypes.count; i++) {
                WIVarArg *arg = [WIVarArg new];
                arg.type = argTypes[i];
                if ([argNames[i] isKindOfClass:NSString.class]) arg.name = argNames[i];
                if ([argArgs[i] isKindOfClass:NSString.class]) arg.arg = argArgs[i];
                [var addArg:arg];
            }
        }
        return var;
    }
    - (EndpointD *)vars {
        MSGSTART("WIVarContext:-(EndpointD*)vars")

        /*i-999*/ EndpointD * ret = v_vars;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar {
        MSGSTART("WIVarContext:-(NSObject<LinkEndpoint>*)varToEndpoint:(id)avar")
        return [avar performSelector:@selector(context_endpoint)];
    }
    - (WIVar *)varWithVarKey:(NSArray *)key {
        MSGSTART("WIVarContext:-(WIVar*)varWithVarKey:(NSArray*)key")

        WIVar * var = [self varForKey:key];
        if (!var) {
            [self setVar:var = [WIVar new] forKey:key];

            var.name = (NSString *)([key[0] isKindOfClass:NSNull.class] ? nil : key[0]);
            WICtxt *ctxt = self.clazz.context;
            WIClass *c = ([key[1] isKindOfClass:NSString.class] ?
                          [ctxt classWithName:key[1]] :
                          [ctxt protocolWithName:( (NSArray *)key[2] )[0]]
                );
            var.type = [c typeWithModifiers:(NSArray *)([key[3] isKindOfClass:NSNull.class] ? nil : key[3])];
            for (int i = 4; i < key.count; i++) {
                WIVarArg *arg = [WIVarArg new];
                NSArray *argKey = key[i];

                arg.name = (NSString *)([argKey[0] isKindOfClass:NSNull.class] ? nil : argKey[0]);
                arg.arg = (NSString *)([argKey[1] isKindOfClass:NSNull.class] ? nil : argKey[1]);
                WIClass *c = ([argKey[2] isKindOfClass:NSString.class] ?
                              [ctxt classWithName:argKey[2]] :
                              [ctxt protocolWithName:( (NSArray *)argKey[3] )[0]]
                    );
                arg.type = [c typeWithModifiers:(NSArray *)([argKey[4] isKindOfClass:NSNull.class] ? nil : argKey[4])];

                [var addArg:arg];
            }
        }
        return var;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
