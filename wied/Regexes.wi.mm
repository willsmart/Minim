//Minim autogenerated this file. HaND

//Tasks:
//    Embedded 2 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

#ifdef INCLUDE_IFACE_D0









@interface RegexHelper : NSObject<Object, ClassObject> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_RegexHelper; @protected
    bool debugAutorelease;
    bool isZombie;
    LL objectIDInClass;
    LL objectIDInTotal;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
-(void)_startObjectOfClassRegexHelper;
-(constchar*)cdescription;
-(constchar*)cobjectName;
-(void)dealloc;
-(NSString*)description;
-(void)die;
-(NSMutableString*)objectName;
+(NSRegularExpression*)regexForString:(NSString*)str;

@end









#endif // INCLUDE_IFACE_D0

#else // INCLUDE_IFACE





















#pragma mark -
#pragma mark Implementations:










// !!!: Implementations: r


















        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ RegexHelper
#define _WIClass_ RegexHelper__
#define _className_ regexHelper
#define _Class_ RegexHelper__
@implementation RegexHelper

@synthesize __owner_context=__owner_context;
@synthesize debugAutorelease=debugAutorelease;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
-(void)_startObjectOfClassRegexHelper {MSGSTART("RegexHelper:-(void)_startObjectOfClassRegexHelper")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i0*/}
-(constchar*)cdescription {MSGSTART("RegexHelper:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(constchar*)cobjectName {MSGSTART("RegexHelper:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)dealloc {MSGSTART("RegexHelper:-(void)dealloc")
  
  /*i-151*/[self die];
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("RegexHelper:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("RegexHelper:-(void)die")
  
  /*i900*/}
-(NSMutableString*)objectName {MSGSTART("RegexHelper:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }
+(NSRegularExpression*)regexForString:(NSString*)str {MSGSTART("RegexHelper:+(NSRegularExpression*)regexForString:(NSString*)str")

          NSRegularExpression *ret=Singletons._.regexCache[str];
          if (!ret) {
                ret=str.stringAsRegularExpression;
                Singletons._.regexCache[str]=(ret?ret:NSNull.null);
            }
          return([ret isKindOfClass:NSNull.class]?nil:ret);
    }

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_


















#endif // INCLUDE_IFACE
