// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 2 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D0





        @interface PartiallyOrderedSet : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_PartiallyOrderedSet; @protected
            NSMutableDictionary *v_afters;
            NSMutableDictionary *v_befores;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSMutableSet *v_set;
            NSMutableDictionary *v_usedKeys;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSMutableDictionary *afters;
        @property (nonatomic,readonly) NSArray *asArray;
        @property (strong,nonatomic,readonly) NSMutableDictionary *befores;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSMutableSet *set;
        @property (strong,nonatomic,readonly) NSMutableDictionary *usedKeys;
        - (void)_startObjectOfClassPartiallyOrderedSet;
        - (void)add:(NSObject *)v toArray:(NSMutableArray *)array todo:(NSMutableSet *)todo todoa:(NSMutableArray *)todoa;
        - (void)addObject:(NSObject *)v;
        - (NSMutableDictionary *)afters;
        - (void)appendObject:(NSObject *)v;
        - (NSArray *)asArray;
        - (NSMutableDictionary *)befores;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (PartiallyOrderedSet *)init;
        - (PartiallyOrderedSet *)initWithArray:(NSArray *)array;
        - (PartiallyOrderedSet *)initWithSet:(NSSet *)set;
        - (void)mergeWith:(NSObject *)other;
        - (NSMutableString *)objectName;
        + (PartiallyOrderedSet *)partiallyOrderedSet;
        + (PartiallyOrderedSet *)partiallyOrderedSetWithArray:(NSArray *)array;
        + (PartiallyOrderedSet *)partiallyOrderedSetWithSet:(NSSet *)set;
        - (NSMutableSet *)set;
        - (NSMutableDictionary *)usedKeys;

        @end
    #endif // INCLUDE_IFACE_D0

    #ifdef INCLUDE_IFACE_D1





        @interface Log : NSObject<BaseObject, ClassObject, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_Log; @protected
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSTimer *tim;
            NSMutableString *value;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSTimer *tim;
        @property (strong,nonatomic,readonly) NSMutableString *value;
        - (void)_startObjectOfClassLog;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        + (Log *)get;
        + (Log *)getDefault;
        - (Log *)init;
        + (void)log:(NSString *)format,...;
        - (NSMutableString *)objectName;
        + (void)sendToLog:(NSString *)logName format:(NSString *)format,...;
        - (void)setWithDictionary:(NSDictionary *)d;
        - (void)tick;
        - (NSTimer *)tim;
        - (NSMutableString *)value;

        @end





        @interface StringRequestURLDelegate : NSObject<ClassObject, NSURLConnectionDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_StringRequestURLDelegate; @protected
            StringRequestURLDelegateCompletionBlock v_completionBlock;
            NSURLConnection *v_connection;
            bool debugAutorelease;
            NSStringEncoding encoding;
            bool finished;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSMutableString *v_partialRequestedString;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (copy,nonatomic,readwrite) StringRequestURLDelegateCompletionBlock completionBlock;
        @property (strong,nonatomic,readwrite) NSURLConnection *connection;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) NSStringEncoding encoding;
        @property (nonatomic,readwrite) bool finished;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite) NSMutableString *partialRequestedString;
        - (void)_startObjectOfClassStringRequestURLDelegate;
        - (void)cancel;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (StringRequestURLDelegateCompletionBlock)completionBlock;
        - (NSURLConnection *)connection;
        - (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error;
        - (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data;
        - (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response;
        - (void)connectionDidFinishLoading:(NSURLConnection *)connection;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (StringRequestURLDelegate *)initWithEncoding:(NSStringEncoding)aencoding completionBlock:(StringRequestURLDelegateCompletionBlock)acompletionBlock;
        - (NSMutableString *)objectName;
        - (NSMutableString *)partialRequestedString;
        - (void)setCompletionBlock:(StringRequestURLDelegateCompletionBlock)v;
        - (void)setConnection:(NSURLConnection *)v;
        - (void)setPartialRequestedString:(NSMutableString *)v;

        @end
    #endif // INCLUDE_IFACE_D1

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: l





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         Log
    #define _WIClass_           Log__
    #define _className_         log
    #define _Class_             Log__
    @implementation Log

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassLog {
        MSGSTART("Log:-(void)_startObjectOfClassLog")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ value = ([[NSMutableString alloc] init]);

        /*i0*/}
    - (constchar *)cdescription {
        MSGSTART("Log:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("Log:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("Log:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ tim = nil;

        value = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("Log:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("Log:-(void)die")

        /*i900*/}
    + (Log *)get {
        MSGSTART("Log:+(Log*)get")
        return [[Log alloc] init];
    }
    + (Log *)getDefault {
        MSGSTART("Log:+(Log*)getDefault")
        return g_singletons.log;
    }
    - (Log *)init {
        MSGSTART("Log:-(Log*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassLog];

/*i10001*/ return self;
    }
    + (void)log:(NSString *)format,... {
        MSGSTART("Log:+(void)log:(NSString*)format,...")

        Log * log = [Log getDefault];
        va_list args; va_start(args,format);
        [log->value appendString:[[NSString alloc] initWithFormat:format arguments:args]];
        va_end(args);
        if (!log->tim) log->tim = [NSTimer scheduledTimerWithTimeInterval:1 target:log selector:@selector(tick) userInfo:nil repeats:NO];
    }
    - (NSMutableString *)objectName {
        MSGSTART("Log:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    + (void)sendToLog:(NSString *)logName format:(NSString *)format,... {
        MSGSTART("Log:+(void)sendToLog:(NSString*)logName format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        va_end(args);
        if (s.length) {
            NSURL *url = [NSURL URLWithString:[g_singletons.homeURLPrefix stringByAppendingFormat:@"savetext.php?fn=%@_console&append=1",[logName urlEncodeUsingEncoding:NSUTF8StringEncoding]]];

            NSString *post = [[NSString alloc] initWithFormat:@"txt=%@",[s urlEncodeUsingEncoding:NSUTF8StringEncoding]];

            [[post dataUsingEncoding:NSUTF8StringEncoding] sendAsBodyOfPOSTRequestWithURL:url returningResponse:nil error:nil];
        }
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("Log:-(void)setWithDictionary:(NSDictionary*)d")
    }
    - (void)tick {
        MSGSTART("Log:-(void)tick")

        NSString * s = value.copy;
        [value setString:@""];
        tim = nil;


        if (s.length) {
            NSURL *url = [NSURL URLWithString:[g_singletons.homeURLPrefix stringByAppendingFormat:@"savetext.php?fn=%@_console&append=1",g_singletons.styleName]];

            NSString *post = [[NSString alloc] initWithFormat:@"txt=%@",[s urlEncodeUsingEncoding:NSUTF8StringEncoding]];

            [[post dataUsingEncoding:NSUTF8StringEncoding] sendAsBodyOfPOSTRequestWithURL:url returningResponse:nil error:nil];
        }
    }
    - (NSTimer *)tim {
        MSGSTART("Log:-(NSTimer*)tim")

        /*i-999*/ NSTimer * ret = tim;
        /*i999*/ return ret;
    }
    - (NSMutableString *)value {
        MSGSTART("Log:-(NSMutableString*)value")

        /*i-999*/ NSMutableString * ret = value;
        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: p





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         PartiallyOrderedSet
    #define _WIClass_           PartiallyOrderedSet__
    #define _className_         partiallyOrderedSet
    #define _Class_             PartiallyOrderedSet__
    @implementation PartiallyOrderedSet

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassPartiallyOrderedSet {
        MSGSTART("PartiallyOrderedSet:-(void)_startObjectOfClassPartiallyOrderedSet")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_afters = ([NSMutableDictionary dictionary]);
        /*ivar*/ v_befores = ([NSMutableDictionary dictionary]);
        /*ivar*/ v_set = ([NSMutableSet set]);
        /*ivar*/ v_usedKeys = ([NSMutableDictionary dictionary]);

        /*i0*/}
    - (void)add:(NSObject *)v toArray:(NSMutableArray *)array todo:(NSMutableSet *)todo todoa:(NSMutableArray *)todoa {
        MSGSTART("PartiallyOrderedSet:-(void)add:(NSObject*)v toArray:(NSMutableArray*)array todo:(NSMutableSet*)todo todoa:(NSMutableArray*)todoa")

        NSSet * befores = [v_befores objectForKey:v];
        NSObject *before;
        if ([befores intersectsSet:todo])
            for (NSInteger ind = 0; ind < todo.count; ind++) {
                if ([befores containsObject:before = todoa[ind]]) {
                    [todoa removeObjectAtIndex:ind];
                    [todo removeObject:before];
                    [self add:before toArray:array todo:todo todoa:todoa];
                }
            }
        [array addObject:v];
    }
    - (void)addObject:(NSObject *)v {
        MSGSTART("PartiallyOrderedSet:-(void)addObject:(NSObject*)v")

        if ([v_set containsObject:v]) {
            NSObject<NSCopying> *key = [PointerKey nscopyingWithObject:v];
            [v_usedKeys
             setObject:key
             forKey:key
            ];
            [v_befores
             setObject:NSMutableSet.set
             forKey:key
            ];
            [v_afters
             setObject:NSMutableSet.set
             forKey:key
            ];
            [v_set addObject:v];
        }
    }
    - (NSMutableDictionary *)afters {
        MSGSTART("PartiallyOrderedSet:-(NSMutableDictionary*)afters")

        return v_afters.copy;
    }
    - (void)appendObject:(NSObject *)v {
        MSGSTART("PartiallyOrderedSet:-(void)appendObject:(NSObject*)v")

        if (![v_set containsObject:v]) {
            NSObject<NSCopying> *key = [PointerKey nscopyingWithObject:v];
            [v_usedKeys
             setObject:key
             forKey:key
            ];
            NSMutableSet *befores = NSMutableSet.set;
            [v_befores
             setObject:befores
             forKey:key
            ];
            [v_afters
             setObject:NSMutableSet.set
             forKey:key
            ];
            for (NSObject *v2 in v_set) {
                if (v2 == v) break;
                [befores addObject:v2];
                [v_afters[v2] addObject:v];
            }
            [v_set addObject:v];
        }
    }
    - (NSArray *)asArray {
        MSGSTART("PartiallyOrderedSet:-(NSArray*)asArray")

        NSMutableArray * ret = NSMutableArray.array;
        NSMutableSet *todo = v_set.mutableCopy;
        NSMutableArray *todoa = [v_set.allObjects sortedArrayUsingComparator: ^NSComparisonResult (NSObject *obj1,NSObject *obj2) {
                                     return [obj1 respondsToSelector:@selector(compare:)] && [obj2 respondsToSelector:@selector(compare:)] ?
                                     [(id)obj1 compare : (id)obj2] :
                                     ( (__bridge void *)obj1 < (__bridge void *)obj2 ?
                                       NSOrderedAscending :
                                       ( (__bridge void *)obj1 == (__bridge void *)obj2 ?
                            NSOrderedSame :
                            NSOrderedDescending
                             )
                                        )
                                     ;
                                 }
            ].mutableCopy;
        while (todo.count) {
            NSObject *v = todoa[0];
            [todoa removeObjectAtIndex:0];
            [todo removeObject:v];
            [self add:v toArray:ret todo:todo todoa:todoa];
        }
        return ret;
    }
    - (NSMutableDictionary *)befores {
        MSGSTART("PartiallyOrderedSet:-(NSMutableDictionary*)befores")

        return v_befores.copy;
    }
    - (constchar *)cdescription {
        MSGSTART("PartiallyOrderedSet:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("PartiallyOrderedSet:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("PartiallyOrderedSet:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ v_afters = nil;

        v_befores = nil;

        v_set = nil;

        v_usedKeys = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("PartiallyOrderedSet:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("PartiallyOrderedSet:-(void)die")

        /*i900*/}
    - (PartiallyOrderedSet *)init {
        MSGSTART("PartiallyOrderedSet:-(PartiallyOrderedSet*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassPartiallyOrderedSet];

/*i10001*/ return self;
    }
    - (PartiallyOrderedSet *)initWithArray:(NSArray *)array {
        MSGSTART("PartiallyOrderedSet:-(PartiallyOrderedSet*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassPartiallyOrderedSet];

/*i100*/ for (NSObject *v in array) {
            if ([v_set containsObject:v]) continue;
            [v_set addObject:v];
            NSObject<NSCopying> *key = [PointerKey nscopyingWithObject:v];
            [v_usedKeys
             setObject:key
             forKey:key
            ];
            NSMutableSet *befores = NSMutableSet.set;
            [v_befores
             setObject:befores
             forKey:key
            ];
            [v_afters
             setObject:NSMutableSet.set
             forKey:key
            ];
            for (NSObject *v2 in array) {
                if (v2 == v) break;
                [befores addObject:v2];
                [v_afters[v2] addObject:v];
            }
        }

/*i10001*/ return self;
    }
    - (PartiallyOrderedSet *)initWithSet:(NSSet *)set {
        MSGSTART("PartiallyOrderedSet:-(PartiallyOrderedSet*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassPartiallyOrderedSet];

/*i100*/ [v_set unionSet:set];
        for (NSObject *v in set) {
            NSObject<NSCopying> *key = [PointerKey nscopyingWithObject:v];
            [v_usedKeys
             setObject:key
             forKey:key
            ];
            [v_befores
             setObject:NSMutableSet.set
             forKey:key
            ];
            [v_afters
             setObject:NSMutableSet.set
             forKey:key
            ];
        }

/*i10001*/ return self;
    }
    - (void)mergeWith:(NSObject *)other {
        MSGSTART("PartiallyOrderedSet:-(void)mergeWith:(NSObject*)other")

        if ([other isKindOfClass:NSSet.class]) {
            for (NSObject *v in(NSSet *) other) {
                [self addObject:v];
            }
        }
        else if ([other isKindOfClass:NSArray.class]) {
            PartiallyOrderedSet *pos2 = [PartiallyOrderedSet partiallyOrderedSetWithArray:(NSArray *)other];
            [self mergeWith:pos2];
        }
        else if ([other isKindOfClass:PartiallyOrderedSet.class]) {
            PartiallyOrderedSet *otherPos = (PartiallyOrderedSet *)other;
            for (NSObject *v in otherPos->v_set) {
                if ([v_set containsObject:v]) {
                    NSMutableSet *befores = [v_befores objectForKey:v];
                    NSMutableSet *befores2 = [otherPos->v_befores objectForKey:v];
                    NSMutableSet *afters = [v_afters objectForKey:v];
                    NSMutableSet *afters2 = [otherPos->v_afters objectForKey:v];

                    [befores unionSet:befores2];
                    [befores minusSet:afters2];
                    [befores minusSet:afters];

                    [befores unionSet:afters2];
                    [afters minusSet:befores2];
                    [afters minusSet:befores];
                }
                else {
                    NSMutableSet *befores2 = [otherPos->v_befores objectForKey:v];
                    NSMutableSet *afters2 = [otherPos->v_afters objectForKey:v];
                    [v_set addObject:v];
                    NSObject<NSCopying> *key = [PointerKey nscopyingWithObject:v];
                    [v_usedKeys
                     setObject:key
                     forKey:key
                    ];
                    [v_befores
                     setObject:befores2.mutableCopy
                     forKey:key
                    ];
                    [v_afters
                     setObject:afters2.mutableCopy
                     forKey:key
                    ];
                }
            }
        }
    }
    - (NSMutableString *)objectName {
        MSGSTART("PartiallyOrderedSet:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    + (PartiallyOrderedSet *)partiallyOrderedSet {
        MSGSTART("PartiallyOrderedSet:+(PartiallyOrderedSet*)partiallyOrderedSet")
        return [self new];
    }
    + (PartiallyOrderedSet *)partiallyOrderedSetWithArray:(NSArray *)array {
        MSGSTART("PartiallyOrderedSet:+(PartiallyOrderedSet*)partiallyOrderedSetWithArray:(NSArray*)array")
        return [self.alloc initWithArray:array];
    }
    + (PartiallyOrderedSet *)partiallyOrderedSetWithSet:(NSSet *)set {
        MSGSTART("PartiallyOrderedSet:+(PartiallyOrderedSet*)partiallyOrderedSetWithSet:(NSSet*)set")
        return [self.alloc initWithSet:set];
    }
    - (NSMutableSet *)set {
        MSGSTART("PartiallyOrderedSet:-(NSMutableSet*)set")

        return v_set.copy;
    }
    - (NSMutableDictionary *)usedKeys {
        MSGSTART("PartiallyOrderedSet:-(NSMutableDictionary*)usedKeys")

        return v_usedKeys.copy;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: s





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         StringRequestURLDelegate
    #define _WIClass_           StringRequestURLDelegate__
    #define _className_         stringRequestURLDelegate
    #define _Class_             StringRequestURLDelegate__
    @implementation StringRequestURLDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize encoding = encoding;
    @synthesize finished = finished;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassStringRequestURLDelegate {
        MSGSTART("StringRequestURLDelegate:-(void)_startObjectOfClassStringRequestURLDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_partialRequestedString = ([NSMutableString string]);

        /*i0*/}
    - (void)cancel {
        MSGSTART("StringRequestURLDelegate:-(void)cancel")

        if (self.connection && !finished) {
            [self.connection cancel];
            // self;
            finished = YES;
            self.connection = nil;
        }
    }
    - (constchar *)cdescription {
        MSGSTART("StringRequestURLDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("StringRequestURLDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (StringRequestURLDelegateCompletionBlock)completionBlock {
        MSGSTART("StringRequestURLDelegate:-(StringRequestURLDelegateCompletionBlock)completionBlock")

        /*i-999*/ StringRequestURLDelegateCompletionBlock ret = v_completionBlock;
        /*i999*/ return ret;
    }
    - (NSURLConnection *)connection {
        MSGSTART("StringRequestURLDelegate:-(NSURLConnection*)connection")

        /*i-999*/ NSURLConnection * ret = v_connection;
        /*i999*/ return ret;
    }
    - (void)connection:(NSURLConnection *)connection didFailWithError:(NSError *)error {
        MSGSTART("StringRequestURLDelegate:-(void)connection:(NSURLConnection*)connection didFailWithError:(NSError *)error")

        self.completionBlock(nil,error);
        // self;
        finished = YES;
        self.connection = nil;
    }
    - (void)connection:(NSURLConnection *)connection didReceiveData:(NSData *)data {
        MSGSTART("StringRequestURLDelegate:-(void)connection:(NSURLConnection*)connection didReceiveData:(NSData *)data")

        NSString * str = [[NSString alloc] initWithData:data encoding:encoding];
        if (str) [self.partialRequestedString appendString:str];
    }
    - (void)connection:(NSURLConnection *)connection didReceiveResponse:(NSURLResponse *)response {
        MSGSTART("StringRequestURLDelegate:-(void)connection:(NSURLConnection*)connection didReceiveResponse:(NSURLResponse*)response")
    }
    - (void)connectionDidFinishLoading:(NSURLConnection *)connection {
        MSGSTART("StringRequestURLDelegate:-(void)connectionDidFinishLoading:(NSURLConnection *)connection")

        self.completionBlock(self.partialRequestedString,nil);
        // self;
        finished = YES;
        self.connection = nil;
    }
    - (void)dealloc {
        MSGSTART("StringRequestURLDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ v_completionBlock = nil;

        v_partialRequestedString = nil;

        v_connection = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("StringRequestURLDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("StringRequestURLDelegate:-(void)die")

        /*i900*/}
    - (StringRequestURLDelegate *)initWithEncoding:(NSStringEncoding)aencoding completionBlock:(StringRequestURLDelegateCompletionBlock)acompletionBlock {
        MSGSTART("StringRequestURLDelegate:-(StringRequestURLDelegate*)initWithEncoding:(NSStringEncoding)aencoding completionBlock:(StringRequestURLDelegateCompletionBlock)acompletionBlock")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ encoding = aencoding;
        self.completionBlock = acompletionBlock;

        /*i11*/ [self _startObjectOfClassStringRequestURLDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("StringRequestURLDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSMutableString *)partialRequestedString {
        MSGSTART("StringRequestURLDelegate:-(NSMutableString*)partialRequestedString")

        /*i-999*/ NSMutableString * ret = v_partialRequestedString;
        /*i999*/ return ret;
    }
    - (void)setCompletionBlock:(StringRequestURLDelegateCompletionBlock)v {
        MSGSTART("StringRequestURLDelegate:-(void)setCompletionBlock:(StringRequestURLDelegateCompletionBlock)v")

        /*i-905*/ if (v_completionBlock == v) return;

        /*i-900*/ {
            v_completionBlock = (id)v;
        }
    }
    - (void)setConnection:(NSURLConnection *)v {
        MSGSTART("StringRequestURLDelegate:-(void)setConnection:(NSURLConnection*)v")

        /*i-905*/ if (v_connection == v) return;

        /*i-900*/ {
            v_connection = (id)v;
        }
    }
    - (void)setPartialRequestedString:(NSMutableString *)v {
        MSGSTART("StringRequestURLDelegate:-(void)setPartialRequestedString:(NSMutableString*)v")

        /*i-905*/ if (v_partialRequestedString == v) return;

        /*i-900*/ {
            v_partialRequestedString = (id)v;
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
