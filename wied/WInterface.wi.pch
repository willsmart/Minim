//WInterface autogenerated this file. HaND

//Tasks:
//    Embedded 1 notes (look for "MARK:WI:" in the code)


        #define ITERATECOLLECTIONS(typ,v,...) \
        for (NSString *_key in self.collections) { \
            @autoreleasepool {} \
            testKey=_key; \
            typ v=[self.collections objectForKey:_key]; \
            @autoreleasepool { \
                NSObject *ret=nil; \
                __VA_ARGS__ \
                for (CollectionTestObject *o in self._allObjects) { \
                    CollectionTestSubObject *so=[o.subObjects objectForKey:_key]; \
                    Int opN=0; \
                    if ([ret isKindOfClass:[NSSet class]]) { \
                        if ([(NSSet*)ret containsObject:o]) opN=1; \
                    } \
                    if ([ret isKindOfClass:[NSArray class]]) { \
                        for (id o2 in (NSArray*)ret) if (o==o2) opN++; \
                    } \
                    if ([ret isKindOfClass:[NSDictionary class]]) { \
                        for (id k in (NSDictionary*)ret) if ([(NSDictionary*)ret  objectForKey:k]==o) opN++; \
                    } \
                    so.rcInner=so.rcWillBe-opN; \
                } \
            } \
            testKey=nil; \
        }

        extern NSString *testKey;

        #define OID_marker (0xbad0fad0dad0cad0LL)
        #define __Derived_CClass__ (class_getName([self class]))
        #define __Derived_Class__ [NSString stringWithFormat:@"%s",__Derived_CClass__]
        #ifndef OWNER_TRACKING_ON
        #define OWNER_TRACKING_ON NO
        #endif

        typedef NSInteger Int;
        typedef NSUInteger Unsigned;
        extern NSInteger __bpc,__breakAtBP;
        void BPoint();
        void ERR(const char *format,...);

        #ifdef TARGET_OS_IPHONE_
            #import <UIKit/UIKit.h>
        #else
            #define UIColor NSColor
            #define UIImage NSImage
            #define UIFont NSFont
            #define UIBezierPath NSBezierPath
            #define TARGET_OS_OSX 1
            #import <AppKit/AppKit.h>
        #endif
        #ifdef __SWIFT__
            #define NOSWIFT(...)
        #else
            #define NOSWIFT(...) __VA_ARGS__
        #endif

#import <Foundation/Foundation.h>
#import <objc/runtime.h>
#import <sys/mman.h>
#import <pthread.h>
#import <libkern/OSAtomic.h>
#import <execinfo.h>
#import <sys/sysctl.h>
#import <mach/host_info.h>
#import <mach/mach_host.h>
#import <mach/task_info.h>
#import <mach/task.h>
#import "Parse.h"









#include "WInterface.wi.decl.h"
        #ifndef __SWIFT__
        //#include <iostream>
        #define USEPROFILER
        #include "/Users/Will/Documents/BasicClassesCPP/Headers.h"
        #endif



















@protocol Array;
@protocol BaseClass;
@protocol BaseObject;
@protocol BasicTester;
@protocol ClassObject;
@protocol Codable;
@protocol DebugMutableArray;
@protocol DebugMutableDictionary;
@protocol DebugMutableSet;
@protocol DerivedBaseObject;
@protocol DerivedObject;
@protocol Dictionary;
@protocol EssentialBaseView;
@protocol HasAction;
@protocol LinkEndpoint;
@protocol List;
@protocol ListItem;
@protocol LogObjectProtocol;
@protocol Model;
@protocol ModelMutableArray;
@protocol ModelMutableDictionary;
@protocol ModelMutableSet;
@protocol MutableArrayDelegate;
@protocol MutableDictionaryDelegate;
@protocol MutableObjectDebuggerDelegate;
@protocol MutableSetDelegate;
@protocol MutableValueDelegate;
@protocol NotifiedByArray;
@protocol NotifiedByDictionary;
@protocol NotifiedBySet;
@protocol NotifyingMutableArray;
@protocol NotifyingMutableDictionary;
@protocol NotifyingMutableSet;
@protocol Object;
@protocol ObjectEquate;
@protocol RecievesSelector;
@protocol RefCountedObject;
@protocol Request;
@protocol RequestOwner;
@protocol SendsSelector;
@protocol Set;
@protocol TesterCounter;
@protocol Ticker;
@protocol URLResource;
@protocol URLResourceHandler;
@protocol Waiter;
@protocol WeakCollection;
@protocol WeakList;
@protocol WeakListItem;
@protocol BaseView;
@protocol Basic_ProxiedDictionaryDelegate;
@protocol Basic_SourcedProxiedDictionaryDelegate;
@protocol Commitable;
@protocol LRUCacheItem;
@protocol MinimalMutableArray;
@protocol MinimalMutableDictionary;
@protocol ModelArray;
@protocol ModelDictionary;
@protocol ModelSet;
@protocol MutableArrayIndexFollower;
@protocol MutableDictionaryDelegateWithEqualsCheck;
@protocol MutableDictionaryKeyFollower;
@protocol MutableSet;
@protocol ObjectEquateAndCopy;
@protocol RequestCache;
@protocol RootCodable;
@protocol Tester;
@protocol ValueLinkEndpoint;
@protocol ArrayLinkEndpoint;
@protocol Basic_ProxyDictionaryDelegate;
@protocol Basic_SourcedProxyDictionaryDelegate;
@protocol CommitableCollection;
@protocol DictionaryLinkEndpoint;
@protocol LRUCache;
@protocol MutableArray;
@protocol MutableDictionary;
@protocol MutableSetMirrorTester;
@protocol SetLinkEndpoint;
@protocol MutableArrayMirrorTester;
@protocol MutableDictionaryMirrorTester;
@class ClassCount;
@class CollectionTestObject;
@class CollectionTestSubObject;
@class File;
@class Files;
@class Globals;
@class IntCarrier;
@class JsonParser;
@class MemMonitor;
@class ULLCarrier;
@class URLHandlerRegistry;
@class Util;
@class WeakSelf;
@class WIBody;
@class WIClass;
@class WICtxt;
@class WIFile;
@class WIParse;
@class WIType;
@class WIVar;
@class WIVarArg;
@class WReaderToken;
@class DirtyObjectDictionaryDelegate;
@class DirtyObjectIndexArrayDelegate;
@class DirtyObjectSetDelegate;
@class Log;
@class Model;
@class MutableArrayDebuggerDelegate;
@class MutableArrayFollowerDelegate;
@class MutableDictionaryDebuggerDelegate;
@class MutableDictionaryFollowerDelegate;
@class MutableDictionaryUnionDelegate;
@class MutableDictionaryUnionDelegate1;
@class MutableSetDebuggerDelegate;
@class MutableSetFollowerDelegate;
@class MutableSetUnionDelegate;
@class MutableSetUnionDelegate1;
@class MutableValueDebuggerDelegate;
@class ObjectGraph;
@class PointerKey;
@class RequestProxy;
@class Singletons;
@class SinkCommitterArrayDelegate;
@class SinkCommitterSetDelegate;
@class SourceCommitterArrayDelegate;
@class SourceCommitterSetDelegate;
@class StringRequestURLDelegate;
@class Trace;
@class WeakList;
@class WeakObject;
@class WReader;
@class WReaderTokenizer;
@class ArrayTester;
@class AtomiclyMutableArray;
@class AtomiclyMutableDictionary;
@class AtomiclyMutableSet;
@class DictionaryTester;
@class Endpoint1;
@class ImmutableArray;
@class ImmutableDictionary;
@class ImmutableSet;
@class LRUCacheItem;
@class ModelArray;
@class ModelDictionary;
@class ModelOwnedObjectSet;
@class ModelSet;
@class MutableDictionaryPrefixedKeyDelegate;
@class MutableSet;
@class ObjectPointer;
@class RequestCaches;
@class SetTester;
@class WeakMutableSet;
@class Basic_ProxyDictionaryDelegate;
@class Basic_SourcedProxyDictionaryDelegate;
@class CommitableMutableDictionary;
@class EndpointA;
@class EndpointD;
@class EndpointS;
@class LRUCache;
@class MutableArray;
@class MutableDictionary;
@class MutableSetMirrorTesterImpl;
@class WeakMutableArray;
@class WeakMutableDictionary;
@class WeakMutableSetMirrorTesterImpl;
@class MutableArrayMirrorTesterImpl;
@class MutableDictionaryMirrorTesterImpl;
@class WeakMutableArrayMirrorTesterImpl;
@class WeakMutableDictionaryMirrorTesterImpl;
typedef __unsafe_unretained ClassCount* UnsafeClassCount;
#ifndef __SWIFT__
typedef Array<Array<double>*> ArrayOfArraysOfDoubles;
#endif// __SWIFT__
#ifndef __SWIFT__
typedef Array<UnsafeClassCount> ArrayOfClassCounts;
#endif// __SWIFT__
#ifndef __SWIFT__
typedef Array<double> ArrayOfDoubles;
#endif// __SWIFT__
#ifndef __SWIFT__
typedef Array<float> ArrayOfFloats;
#endif// __SWIFT__
#ifndef __SWIFT__
typedef Array<Int> ArrayOfInts;
#endif// __SWIFT__
#ifndef __SWIFT__
typedef Array<long double> ArrayOfLongDoubles;
#endif// __SWIFT__
#ifndef __SWIFT__
typedef Array<short> ArrayOfShorts;
#endif// __SWIFT__
#ifndef __SWIFT__
typedef Array<unsigned long long> ArrayOfULLs;
#endif// __SWIFT__
typedef unsigned char BYT;
typedef enum {CollectionIsEmpty=0,CollectionIsWeak=1,CollectionIsStrong=2,CollectionIsWeakAndStrong=3} CollectionWeakness;
typedef enum{stage_commitProperties=0,stage_startCommit,stage_willCommit,stage_commit,stage_didCommit,stage_finishCommit,stage_cleanupCommit,stage_none} CommitStage;
typedef const char constchar;
typedef unsigned int DWRD;
typedef struct{void *ids[100];} id100;
typedef int32_t Int32;
typedef int64_t Int64;
typedef struct{void *key,*value;} keyval;
typedef struct{keyval keyvals[100];} keyval100;
typedef id<NSCopying> kid;
typedef long long LL;
typedef long double longdouble;
typedef struct Mat44 Mat44;
#ifndef __SWIFT__
typedef QuickHashTable<Int> QuickHashOfInts;
#endif// __SWIFT__
#ifndef __SWIFT__
typedef QuickHashTable<UnsafeClassCount> QuickHashTableOfClassCounts;
#endif// __SWIFT__
typedef void(^StringRequestURLDelegateCompletionBlock)(NSString*,NSError*) ;
typedef unsigned long long ULL;
typedef uint32_t Unsigned32;
typedef uint64_t Unsigned64;
typedef struct Vec4 Vec4;
typedef unsigned short WRD;










        extern Int g_prevThreadId;
        Int getThreadId();
        ULL getThreadMask();

        NOSWIFT(
        bool authorized_thread(ULL&mask);
        bool authorize_thread(ULL&mask);
        void deauthorize_thread(ULL&mask);
        #define privateaccess(...) do {bool __needdeauth=authorize_thread(_PrivateAccessMask_);{__VA_ARGS__;}if (__needdeauth) deauthorize_thread(_PrivateAccessMask_);} while (false)
        )
    

        extern pthread_key_t ThreadKey_key_id;
        extern Int getThreadValueNamedId();
        extern Int setThreadValueNamedId(Int v);
    
        NOSWIFT(
        NSString *JSONStringForString(NSString *str, kid threadTmpDataKey=nil);
        NSString *JSONStringForCString(const char *from, Int length, NSMutableData *tmpData, kid threadTmpDataKey=nil);
        const unichar *JSONunicharsStringForCString(const char *from, Int length, NSMutableData *__strong*ptmpData, Int *retLength,kid threadTmpDataKey=nil);
        )

        extern NSMutableArray *singletons;
        #define ADDSINGLETON(o) [(!singletons?singletons=[NSMutableArray array]:singletons) addObject:o]
        void clearSingletons();

        NOSWIFT(
        template class QuickHashTable<UnsafeClassCount>;
        extern QuickHashTableOfClassCounts *g_classCountht;
        extern ArrayOfClassCounts *g_classCountArray;
        )
        extern NSMutableArray *g_classCounts;
        extern ClassCount *g_totalObjectCount;
        extern ClassCount *g_classCountForClass(Class clas);

        ULL obfuscateULL(ULL ull);

        extern Util* _Util_default;





















#pragma mark -
#pragma mark Structs:












#pragma mark -
#pragma mark Protocols:

@protocol Array 
@property (strong,nonatomic,readonly) NSArray* __array;
@property (atomic,readonly) Unsigned count;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
@property (nonatomic,readonly) id lastObject;
@property (nonatomic,readonly) NSEnumerator* objectEnumerator;
@property (nonatomic,readonly) NSEnumerator* reverseObjectEnumerator;
@property (nonatomic,readwrite) CollectionWeakness weakness;
@property (nonatomic,readonly) Int weakObjectCount;
-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
-(void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
-(NSArray*)arrayByAddingObject:(id)object;
-(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array;
-(NSString *)componentsJoinedByString:(NSString *)separator;
-(BOOL)containsObject:(id)object;
-(id)copyWithZone:(NSZone*)zone;
-(Unsigned)count;
-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len;
-(void)countWeakObjects;
-(NSString*)description;
-(NSString *)descriptionWithLocale:(id)locale;
-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
-(void)encodeWithCoder:(NSCoder*)coder;
-(void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block;
-(void)enumerateObjectsUsingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block;
-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block;
-(NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate;
-(id)firstObjectCommonWithArray:(NSArray*)array;
-(void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange;
-(NSIndexSet*)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate;
-(NSIndexSet*)indexesOfObjectsPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate;
-(NSIndexSet*)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate;
-(Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp;
-(Unsigned)indexOfObject:(id)object;
-(Unsigned)indexOfObject:(id)object inRange:(NSRange)range;
-(Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate;
-(Unsigned)indexOfObjectIdenticalTo:(id)object;
-(Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range;
-(Unsigned)indexOfObjectPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate;
-(Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate;
-(NSObject<Array>*)init;
-(NSObject<Array>*)initWithArray:(NSArray*)array;
-(NSObject<Array>*)initWithArray:(NSArray*)array copyItems:(BOOL)copy;
-(NSObject<Array>*)initWithCoder:(NSCoder*)coder;
-(NSObject<Array>*)initWithContentsOfFile:(NSString*)file;
-(NSObject<Array>*)initWithContentsOfURL:(NSURL*)url;
-(NSObject<Array>*)initWithObjects:(id*)objects count:(Unsigned)count;
-(BOOL)isEqualToArray:(NSArray*)array;
-(id)lastObject;
-(void)makeObjectsPerformSelector:(SEL)selector;
-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(id)objectAtIndex:(Unsigned)index;
-(NSEnumerator*)objectEnumerator;
-(NSArray*)objects;
-(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes;
-(NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;
-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath;
-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context;
-(NSEnumerator*)reverseObjectEnumerator;
-(void)setValue:(id)value forKey:(NSString *)key;
-(void)setWeakness:(CollectionWeakness)v;
-(NSData*)sortedArrayHint;
-(NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr;
-(NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context;
-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint;
-(NSArray*)sortedArrayUsingSelector:(SEL)selector;
-(NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
-(NSArray*)subarrayWithRange:(NSRange)r;
-(id)valueForKey:(NSString*)key;
-(CollectionWeakness)weakness;
-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

@end


















@protocol BaseClass 
+(id)get;
+(id)getWithDictionary:(NSDictionary*)d;

@end









@protocol BaseObject 
-(NSObject<BaseObject>*)init;
-(void)setWithDictionary:(NSDictionary*)d;

@end









@protocol BasicTester 
@property (strong,nonatomic,readwrite) NSMutableString* errs;
-(bool)passFail:(bool)pass format:(NSString*)format,...;

@end









@protocol ClassObject 

@end









@protocol Codable 
@property (nonatomic,readwrite) NSDictionary* asDictionary;
-(NSDictionary*)asDictionary;
-(void)setAsDictionary:(NSDictionary*)v;

@end









@protocol DebugMutableArray 
@property (nonatomic,readwrite) Unsigned array_count;
@property (nonatomic,readwrite) id100 array_objects;
-(void)stateOK;

@end









@protocol DebugMutableDictionary 
@property (nonatomic,readwrite) Unsigned dictionary_count;
@property (nonatomic,readwrite) keyval100 dictionary_objects;
-(void)stateOK;

@end









@protocol DebugMutableSet 
@property (nonatomic,readwrite) Unsigned set_count;
@property (nonatomic,readwrite) id100 set_objects;
-(void)stateOK;

@end









@protocol DerivedBaseObject 
-(NSObject<DerivedBaseObject>*)init;

@end









@protocol DerivedObject 

@end









@protocol Dictionary 
@property (strong,nonatomic,readonly) NSDictionary* __dictionary;
@property (nonatomic,readonly) NSArray* allKeys;
@property (nonatomic,readonly) NSArray* allValues;
@property (atomic,readonly) Unsigned count;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readonly) NSString* descriptionInStringsFileFormat;
@property (nonatomic,readonly) NSDate* fileCreationDate;
@property (nonatomic,readonly) BOOL fileExtensionHidden;
@property (nonatomic,readonly) NSNumber* fileGroupOwnerAccountID;
@property (nonatomic,readonly) NSString* fileGroupOwnerAccountName;
@property (nonatomic,readonly) OSType fileHFSCreatorCode;
@property (nonatomic,readonly) OSType fileHFSTypeCode;
@property (nonatomic,readonly) BOOL fileIsAppendOnly;
@property (nonatomic,readonly) BOOL fileIsImmutable;
@property (nonatomic,readonly) NSDate* fileModificationDate;
@property (nonatomic,readonly) NSNumber* fileOwnerAccountID;
@property (nonatomic,readonly) NSString* fileOwnerAccountName;
@property (nonatomic,readonly) Unsigned filePosixPermissions;
@property (nonatomic,readonly) ULL fileSize;
@property (nonatomic,readonly) Unsigned fileSystemFileNumber;
@property (nonatomic,readonly) Int fileSystemNumber;
@property (nonatomic,readonly) NSString* fileType;
@property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
@property (nonatomic,readonly) NSEnumerator* keyEnumerator;
@property (nonatomic,readonly) NSEnumerator* objectEnumerator;
@property (nonatomic,readwrite) CollectionWeakness weakness;
@property (nonatomic,readonly) Int weakObjectCount;
-(NSArray*)allKeys;
-(NSArray*)allKeysForObject:(id)object;
-(NSArray*)allValues;
-(id)copyWithZone:(NSZone*)zone;
-(Unsigned)count;
-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len;
-(void)countWeakObjects;
-(NSString*)description;
-(NSString*)descriptionInStringsFileFormat;
-(NSString *)descriptionWithLocale:(id)locale;
-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
-(void)encodeWithCoder:(NSCoder*)coder;
-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block;
-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block;
-(NSDate*)fileCreationDate;
-(BOOL)fileExtensionHidden;
-(NSNumber*)fileGroupOwnerAccountID;
-(NSString*)fileGroupOwnerAccountName;
-(OSType)fileHFSCreatorCode;
-(OSType)fileHFSTypeCode;
-(BOOL)fileIsAppendOnly;
-(BOOL)fileIsImmutable;
-(NSDate*)fileModificationDate;
-(NSNumber*)fileOwnerAccountID;
-(NSString*)fileOwnerAccountName;
-(Unsigned)filePosixPermissions;
-(ULL)fileSize;
-(Unsigned)fileSystemFileNumber;
-(Int)fileSystemNumber;
-(NSString*)fileType;
-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
-(NSObject<Dictionary>*)init;
-(NSObject<Dictionary>*)initWithCoder:(NSCoder*)coder;
-(NSObject<Dictionary>*)initWithContentsOfFile:(NSString*)file;
-(NSObject<Dictionary>*)initWithContentsOfURL:(NSURL*)url;
-(NSObject<Dictionary>*)initWithDictionary:(NSDictionary*)dictionary;
-(NSObject<Dictionary>*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy;
-(NSObject<Dictionary>*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary;
-(NSEnumerator*)keyEnumerator;
-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate;
-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate;
-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr;
-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector;
-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(NSEnumerator*)objectEnumerator;
-(id)objectForKey:(id<NSCopying>)key;
-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
-(void)setWeakness:(CollectionWeakness)v;
-(id)valueForKey:(NSString*)key;
-(CollectionWeakness)weakness;
-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

@end









@protocol EssentialBaseView 
-(void)layoutSubviews;

@end









@protocol HasAction 
-(void)act;

@end









@protocol LinkEndpoint 
@property (nonatomic,readonly) SEL acceptableSel;
@property (nonatomic,readonly) SEL otherEndObjectToEndpoint;
@property (strong,nonatomic,readonly) id owner;
@property (nonatomic,readonly) bool retains;
-(bool)_addReferrer:(NSObject<LinkEndpoint>*)ep;
-(void)_removeReferrer:(NSObject<LinkEndpoint>*)ep;
-(NSObject<LinkEndpoint>*)endpointForObject:(id)obj;
-(NSObject<LinkEndpoint>*)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
-(bool)unacceptable:(id)obj;

@end









@protocol List 
@property (strong,nonatomic,readwrite) NSObject<ListItem>* headItem;
@property (weak,nonatomic,readwrite) NSObject<ListItem>* tailItem;
-(void)clear;
-(void)dealloc;

@end









@protocol ListItem 
@property (weak,nonatomic,readwrite) NSObject<List>* list;
@property (strong,nonatomic,readwrite) NSObject<ListItem>* next;
@property (weak,nonatomic,readwrite) NSObject<ListItem>* prev;
-(void)append;
-(void)linkAfter:(NSObject<ListItem>*)prev;
-(void)linkBefore:(NSObject<ListItem>*)next;
-(void)prepend;
-(void)unlink;

@end









@protocol LogObjectProtocol 
@property (strong,nonatomic,readwrite) NSMutableString* logDescription;
-(NSMutableString*) logDescriptionRecurseWithStack:(NSMutableSet*)stack;

@end



























@protocol Model 
@property (strong,nonatomic,readwrite) ModelOwnedObjectSet* objectsOwnedOnlyByModels;
-(void)startOfAutoreleasePool;

@end









@protocol ModelMutableArray 
-(void)didAddObject:(id)object withIndex:(Unsigned)index;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index;

@end









@protocol ModelMutableDictionary 
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak;
#endif// __SWIFT__

@end









@protocol ModelMutableSet 
-(void)didAddObject:(id)object;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)willRemoveObject:(id)object;

@end









@protocol MutableArrayDelegate 
@property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate>* arrayDelegate;
@property (weak,nonatomic,readwrite) NSArray* delegateForArray;
-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v;
-(void)allObjectsMoved;
-(void)delegateForArrayChanged;
-(void)didAddObject:(id)object withIndex:(Unsigned)index;
-(void)didRemoveObject:(id)object;
-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
-(void)removedDelegate;
-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)stateOK;
-(void)willAddObject:(id)object withIndex:(Unsigned)index;
-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
-(void)willRemoveObjectsWithCount:(Unsigned)count;
-(void)willTryToAddObjectsWithCount:(Unsigned)count;
-(void)wontAddObject:(id)object withIndex:(Unsigned)index;

@end









@protocol MutableDictionaryDelegate 
@property (weak,nonatomic,readwrite) NSDictionary* delegateForDictionary;
@property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate>* dictionaryDelegate;
-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v;
-(void)delegateForDictionaryChanged;
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(void)removedDelegate;
-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)stateOK;
-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;

@end









@protocol MutableObjectDebuggerDelegate 
@property (nonatomic,readwrite) bool attached;
@property (strong,nonatomic,readwrite) NSString* name;
-(NSObject<MutableObjectDebuggerDelegate>*)initWithName:(NSString*)aname;

@end









@protocol MutableSetDelegate 
@property (weak,nonatomic,readwrite) NSSet* delegateForSet;
@property (strong,nonatomic,readonly) NSObject<MutableSetDelegate>* setDelegate;
-(void)addDelegate:(NSObject<MutableSetDelegate>*)v;
-(void)delegateForSetChanged;
-(void)didAddObject:(id)object;
-(void)didRemoveObject:(id)object;
-(void)removedDelegate;
-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)willAddObject:(id)object;
-(void)willRemoveObject:(id)object;

@end









@protocol MutableValueDelegate 
@property (weak,nonatomic,readwrite) NSObject<MutableValueDelegate>* parentValueDelegate;
@property (nonatomic,readwrite) bool retainsAsValueDelegate;
@property (weak,nonatomic,readwrite) NSObject<MutableValueDelegate>* valueDelegate;
@property (strong,nonatomic,readwrite,strong) NSObject<MutableValueDelegate>* valueDelegate_strong;
-(void)addDelegate:(NSObject<MutableValueDelegate>*)v;
-(void)dealloc;
-(void)didSetValueTo:(id)object;
-(void)removedDelegate;
-(void)removeDelegate:(NSObject<MutableValueDelegate>*)v;
-(void)unlinkValueDelegate;
-(void)willChangeValueFrom:(id)fromObject to:(id)toObject;

@end









@protocol NotifiedByArray 
@property (nonatomic,readwrite) NSObject<NotifyingMutableArray>* notifyingArray;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* notifyingArray_endpoint;
-(void)die;
-(NSNumber*)isAcceptableNotifyingArray:(id)anotifyingArray;
-(void)markDirty;
-(void)markDirtyByArray;
-(NSObject<NotifyingMutableArray>*)notifyingArray;
-(NSObject<LinkEndpoint>*)notifyingArrayToEndpoint:(id)anotifyingArray;
-(void)retract;
-(void)setNotifyingArray:(NSObject<NotifyingMutableArray>*)v;

@end









@protocol NotifiedByDictionary 
@property (nonatomic,readwrite) NSObject<NotifyingMutableDictionary>* notifyingDictionary;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* notifyingDictionary_endpoint;
-(void)die;
-(NSNumber*)isAcceptableNotifyingDictionary:(id)anotifyingDictionary;
-(void)markDirty;
-(void)markDirtyByDictionary;
-(NSObject<NotifyingMutableDictionary>*)notifyingDictionary;
-(NSObject<LinkEndpoint>*)notifyingDictionaryToEndpoint:(id)anotifyingDictionary;
-(void)retract;
-(void)setNotifyingDictionary:(NSObject<NotifyingMutableDictionary>*)v;

@end









@protocol NotifiedBySet 
@property (nonatomic,readwrite) NSObject<NotifyingMutableSet>* notifyingSet;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* notifyingSet_endpoint;
-(void)die;
-(NSNumber*)isAcceptableNotifyingSet:(id)anotifyingSet;
-(void)markDirty;
-(void)markDirtyBySet;
-(NSObject<NotifyingMutableSet>*)notifyingSet;
-(NSObject<LinkEndpoint>*)notifyingSetToEndpoint:(id)anotifyingSet;
-(void)retract;
-(void)setNotifyingSet:(NSObject<NotifyingMutableSet>*)v;

@end









@protocol NotifyingMutableArray 
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* arrayWatchers;
-(void)addArrayWatcher:(NSObject<NotifiedByArray>*)v;
-(NSObject<LinkEndpoint>*)arrayWatcherToEndpoint:(id)aarrayWatcher;
-(void)die;
-(NSNumber*)isAcceptableArrayWatcher:(id)aarrayWatcher;
-(void)removeAllArrayWatchers;
-(void)removeArrayWatcher:(NSObject<NotifiedByArray>*)v;
-(void)retract;
-(void)stateOK;

@end









@protocol NotifyingMutableDictionary 
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* dictionaryWatchers;
-(void)addDictionaryWatcher:(NSObject<NotifiedByDictionary>*)v;
-(NSObject<LinkEndpoint>*)dictionaryWatcherToEndpoint:(id)adictionaryWatcher;
-(void)die;
-(NSNumber*)isAcceptableDictionaryWatcher:(id)adictionaryWatcher;
-(void)removeAllDictionaryWatchers;
-(void)removeDictionaryWatcher:(NSObject<NotifiedByDictionary>*)v;
-(void)retract;
-(void)stateOK;

@end









@protocol NotifyingMutableSet 
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* setWatchers;
-(void)addSetWatcher:(NSObject<NotifiedBySet>*)v;
-(void)die;
-(NSNumber*)isAcceptableSetWatcher:(id)asetWatcher;
-(void)removeAllSetWatchers;
-(void)removeSetWatcher:(NSObject<NotifiedBySet>*)v;
-(void)retract;
-(NSObject<LinkEndpoint>*)setWatcherToEndpoint:(id)asetWatcher;
-(void)stateOK;

@end



























@protocol Object 
@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
-(constchar*)cdescription;
-(constchar*)cobjectName;
-(void)dealloc;
-(NSString*)description;
-(NSMutableString*)objectName;

@end









@protocol ObjectEquate 
@property (nonatomic,readonly) LL objectIDInTotal;
-(Unsigned)hash;
-(BOOL)isEqual:(id)obj;

@end









@protocol RecievesSelector 
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* selectorSenders;
-(void)addSelectorSender:(NSObject<SendsSelector>*)v;
-(void)die;
-(NSNumber*)isAcceptableSelectorSender:(id)aselectorSender;
-(void)removeAllSelectorSenders;
-(void)removeSelectorSender:(NSObject<SendsSelector>*)v;
-(void)retract;
-(NSObject<LinkEndpoint>*)selectorSenderToEndpoint:(id)aselectorSender;

@end









@protocol RefCountedObject 
@property (nonatomic,readonly) Int modelRetaincount;
@property (nonatomic,readwrite) bool noMOForNextRetain;
@property (nonatomic,readonly) bool onlyOwnedByModels;
@property (nonatomic,readonly) Int totalRetainCount;
-(void)dealloc;
-(void)modeladd;
-(void)modelautorelease;
-(void)modelrelease;
-(id)modelretain;
-(void)modelsub;
-(bool)onlyOwnedByModels;
-(void)retract;

@end









@protocol Request 
@property (nonatomic,readonly) float ageAsRequest;
@property (nonatomic,readwrite) NSObject<RequestCache>* cache;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* cache_endpoint;
@property (strong,nonatomic,readwrite) NSObject<NSCopying>* definingKey;
@property (nonatomic,readwrite) kid keyInCache;
@property (nonatomic,readwrite) NSSet* keysInCache;
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* owners;
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* proxys;
@property (strong,nonatomic,readonly) NSObject* result;
@property (nonatomic,readonly) float resultSize;
@property (strong,nonatomic,readwrite) NSDate* started_at;
@property (nonatomic,readonly) float worthAsRequest;
-(void)addOwner:(NSObject<RequestOwner>*)v;
-(void)addProxy:(RequestProxy*)v;
-(float)ageAsRequest;
-(NSObject<RequestCache>*)cache;
-(NSObject<LinkEndpoint>*)cacheToEndpoint:(id)acache;
-(void)die;
-(void)goRequest;
-(NSNumber*)isAcceptableCache:(id)acache;
-(NSNumber*)isAcceptableOwner:(id)aowner;
-(NSNumber*)isAcceptableProxy:(id)aproxy;
-(kid)keyInCache;
-(NSSet*)keysInCache;
-(NSObject<LinkEndpoint>*)ownerToEndpoint:(id)aowner;
-(NSObject<LinkEndpoint>*)proxyToEndpoint:(id)aproxy;
-(void)removeAllOwners;
-(void)removeAllProxys;
-(void)removeOwner:(NSObject<RequestOwner>*)v;
-(void)removeProxy:(RequestProxy*)v;
-(void)retract;
-(void)setCache:(NSObject<RequestCache>*)v;
-(void)setKeyInCache:(kid)v;
-(void)setKeysInCache:(NSSet*)v;

@end









@protocol RequestOwner 
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* requests;
-(void)addRequest:(NSObject<Request>*)v;
-(void)die;
-(void)doneRequestAsync:(NSObject<Request>*)request;
-(void)doneRequestSync:(NSObject<Request>*)request;
-(NSNumber*)isAcceptableRequest:(id)arequest;
-(void)removeAllRequests;
-(void)removeRequest:(NSObject<Request>*)v;
-(NSObject<LinkEndpoint>*)requestToEndpoint:(id)arequest;
-(void)retract;

@end









@protocol SendsSelector 
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* selectorReceivers;
-(void)addSelectorReceiver:(NSObject<RecievesSelector>*)v;
-(void)die;
-(NSNumber*)isAcceptableSelectorReceiver:(id)aselectorReceiver;
-(void)removeAllSelectorReceivers;
-(void)removeSelectorReceiver:(NSObject<RecievesSelector>*)v;
-(void)retract;
-(NSObject<LinkEndpoint>*)selectorReceiverToEndpoint:(id)aselectorReceiver;

@end









@protocol Set 
@property (strong,nonatomic,readonly) NSSet* __set;
@property (nonatomic,readonly) NSArray* allObjects;
@property (nonatomic,readonly) id anyObject;
@property (atomic,readonly) Unsigned count;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
@property (nonatomic,readonly) NSEnumerator* objectEnumerator;
@property (nonatomic,readwrite) bool retrievesWeakValues;
@property (nonatomic,readwrite) CollectionWeakness weakness;
@property (nonatomic,readonly) Int weakObjectCount;
-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
-(NSArray*)allObjects;
-(id)anyObject;
-(BOOL)containsObject:(id)object;
-(id)copyWithZone:(NSZone*)zone;
-(Unsigned)count;
-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len;
-(void)countWeakObjects;
-(NSString*)description;
-(NSString*)descriptionWithLocale:(id)locale;
-(void)encodeWithCoder:(NSCoder*)coder;
-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block;
-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block;
-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate;
-(NSObject<Set>*)init;
-(NSObject<Set>*)initWithArray:(NSArray*)array;
-(NSObject<Set>*)initWithCoder:(NSCoder*)coder;
-(NSObject<Set>*)initWithObjects:(id*)objects count:(Unsigned)count;
-(NSObject<Set>*)initWithSet:(NSSet*)set;
-(NSObject<Set>*)initWithSet:(NSSet*)set copyItems:(BOOL)copy;
-(BOOL)intersectsSet:(NSSet*)set;
-(BOOL)isEqualToSet:(NSSet*)set;
-(BOOL)isSubsetOfSet:(NSSet*)set;
-(void)makeObjectsPerformSelector:(SEL)selector;
-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
-(id)member:(id)object;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(NSEnumerator*)objectEnumerator;
-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate;
-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate;
-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
-(NSSet*)setByAddingObject:(id)object;
-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array;
-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set;
-(void)setValue:(id)value forKey:(NSString *)key;
-(void)setWeakness:(CollectionWeakness)v;
-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors;
-(id)valueForKey:(NSString*)key;
-(CollectionWeakness)weakness;

@end









@protocol TesterCounter 
-(void)add:(Int)c toWillAddCountForObject:(id)object;
-(void)add:(Int)c toWillRemoveCountForObject:(id)object;

@end









@protocol Ticker 
@property (nonatomic,readonly) bool inTick;
@property (strong,nonatomic,readwrite) NSTimer* tim;
-(void)dealloc;
-(void)startWithInterval:(float)interval;
-(void)stop;
-(void)tick;

@end

















































































@protocol URLResource 
@property (nonatomic,readwrite) NSURL* asURL;
@property (nonatomic,readwrite) NSDictionary* urlArgs;
@property (nonatomic,readwrite) NSString* urlArgString;
@property (nonatomic,readwrite) bool urlValid;
+(NSMutableDictionary*)argDictionaryForURL:(NSURL*)url;
+(NSMutableDictionary*)argStringDictionaryForURL:(NSURL*)url;
-(NSURL*)asURL;
+(NSObject<URLResource>*)cacheObjectForURL:(NSURL*)url;
+(NSObject*)makeResourceFromURL:(NSURL*)url;
+(NSObject*)objectFromString:(NSString*)s;
-(void)setAsURL:(NSURL*)v;
-(void)setUrlArgs:(NSDictionary*)v;
-(void)setUrlArgString:(NSString*)v;
+(NSURL*)simplifiedURLForURL:(NSURL*)url;
+(NSString*)stringFromObject:(NSObject*)o;
-(NSDictionary*)urlArgs;
-(NSString*)urlArgString;
+(NSURL*)urlForArgDictionary:(NSDictionary*)d;
+(NSURL*)urlForArgStringDictionary:(NSDictionary*)d;
+(NSString*)urlPrefix;
+(NSString*)urlScheme;
+(NSString*)urlType;

@end









@protocol URLResourceHandler 
-(NSObject*)makeResourceFromURL:(NSURL*)url;

@end









@protocol Waiter 
@property (nonatomic,readonly) double _waiterGoAtSeconds;
@property (nonatomic,readonly) bool waiterEnabled;
@property (strong,nonatomic,readwrite) NSTimer* waitTimer;
-(void)_enableWaiter:(NSTimer*)t;
-(void)cancelledWait;
-(void)dealloc;
-(void)stopWaiting;
-(void)waited;
-(void)waitForSeconds:(float)sec;

@end









@protocol WeakCollection 
@property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;

@end









@protocol WeakList 
@property (nonatomic,readwrite) Unsigned _count;
@property (nonatomic,readonly) Unsigned count;
@property (nonatomic,readwrite) NSObject<WeakListItem>* headItem;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* headItem_endpoint;
@property (nonatomic,readwrite) NSObject<WeakListItem>* tailItem;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* tailItem_endpoint;
-(void)append:(NSObject<WeakListItem>*)item;
-(Unsigned)count;
-(void)dealloc;
-(void)die;
-(NSObject<WeakListItem>*)headItem;
-(NSObject<LinkEndpoint>*)headItemToEndpoint:(id)aheadItem;
-(NSNumber*)isAcceptableHeadItem:(id)aheadItem;
-(NSNumber*)isAcceptableTailItem:(id)atailItem;
-(void)link:(NSObject<WeakListItem>*)item after:(NSObject<WeakListItem>*)prev;
-(void)link:(NSObject<WeakListItem>*)item before:(NSObject<WeakListItem>*)next;
-(void)prepend:(NSObject<WeakListItem>*)item;
-(void)retract;
-(void)setHeadItem:(NSObject<WeakListItem>*)v;
-(void)setTailItem:(NSObject<WeakListItem>*)v;
-(NSObject<WeakListItem>*)tailItem;
-(NSObject<LinkEndpoint>*)tailItemToEndpoint:(id)atailItem;

@end









@protocol WeakListItem 
@property (weak,nonatomic,readwrite) NSObject<WeakList>* list;
@property (nonatomic,readwrite) NSObject<WeakList>* listAsHead;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* listAsHead_endpoint;
@property (nonatomic,readwrite) NSObject<WeakList>* listAsTail;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* listAsTail_endpoint;
@property (nonatomic,readwrite) NSObject<WeakListItem>* next;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* next_endpoint;
@property (nonatomic,readwrite) NSObject<WeakListItem>* prev;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* prev_endpoint;
-(void)append;
-(void)dealloc;
-(void)die;
-(NSNumber*)isAcceptableListAsHead:(id)alistAsHead;
-(NSNumber*)isAcceptableListAsTail:(id)alistAsTail;
-(NSNumber*)isAcceptableNext:(id)anext;
-(NSNumber*)isAcceptablePrev:(id)aprev;
-(void)linkAfter:(NSObject<WeakListItem>*)prev;
-(void)linkBefore:(NSObject<WeakListItem>*)next;
-(NSObject<WeakList>*)listAsHead;
-(NSObject<LinkEndpoint>*)listAsHeadToEndpoint:(id)alistAsHead;
-(NSObject<WeakList>*)listAsTail;
-(NSObject<LinkEndpoint>*)listAsTailToEndpoint:(id)alistAsTail;
-(NSObject<WeakListItem>*)next;
-(NSObject<LinkEndpoint>*)nextToEndpoint:(id)anext;
-(void)prepend;
-(NSObject<WeakListItem>*)prev;
-(NSObject<LinkEndpoint>*)prevToEndpoint:(id)aprev;
-(void)retract;
-(void)setListAsHead:(NSObject<WeakList>*)v;
-(void)setListAsTail:(NSObject<WeakList>*)v;
-(void)setNext:(NSObject<WeakListItem>*)v;
-(void)setPrev:(NSObject<WeakListItem>*)v;
-(void)unlink;

@end









@protocol BaseView <EssentialBaseView>
-(NSObject<BaseView>*)init;
-(NSObject<BaseView>*)initWithCoder:(NSCoder*)aDecoder;
-(NSObject<BaseView>*)initWithFrame:(CGRect)frame;

@end









@protocol Basic_ProxiedDictionaryDelegate 
@property (nonatomic,readonly) NSDictionary* basic_delegateForDictionary;
#ifndef __SWIFT__
@property (strong,nonatomic,readwrite/*(public readonly)*/) Basic_ProxyDictionaryDelegate* basic_subDictionaryDelegate;
#endif// __SWIFT__
-(void)basic_attachDictionaryDelegateTo:(NSObject<MutableDictionaryDelegate>*)dictionary;
-(NSDictionary*)basic_delegateForDictionary;
-(void)basic_delegateForDictionaryChanged;
-(void)basic_didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(void)basic_stateOK;
-(void)basic_willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(void)dealloc;

@end









@protocol Basic_SourcedProxiedDictionaryDelegate 
@property (strong,nonatomic,readwrite/*(public readonly)*/) MutableDictionary* basic_subDictionaryDelegates;
-(void)basic_attachDictionaryDelegateTo:(NSObject<MutableDictionaryDelegate>*)dictionary forSource:(NSObject<NSCopying>*)source;
-(void)basic_delegateForDictionaryChangedForSource:(NSObject<NSCopying>*)source;
-(void)basic_didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key source:(NSObject<NSCopying>*)source;
-(void)basic_stateOKForSource:(NSObject<NSCopying>*)source;
-(void)basic_willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key source:(NSObject<NSCopying>*)source;
-(void)dealloc;

@end









@protocol Commitable <RefCountedObject>
@property (nonatomic,readwrite) bool _doneStage;
@property (nonatomic,readwrite) bool _isDirty;
@property (nonatomic,readwrite) bool alwaysChangedIfSourceChanged;
@property (nonatomic,readwrite) ULL commitFrame;
@property (nonatomic,readonly) CommitStage commitStage;
@property (nonatomic,readwrite) Model* dirtyInModel;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* dirtyInModel_endpoint;
@property (nonatomic,readonly) bool doneStage;
@property (nonatomic,readonly) bool isDirty;
@property (nonatomic,readwrite) bool modelObjectHasChanged;
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* sinkCommitters;
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointS* sourceCommitters;
@property (nonatomic,readwrite) long version;
-(void)addSinkCommitter:(NSObject<Commitable>*)v;
-(void)addSourceCommitter:(NSObject<Commitable>*)v;
-(void)cleanupCommit;
-(void)commit;
-(Int)commitProperties:(Int)substageIndex;
-(CommitStage)commitStage;
-(void)didCommit;
-(void)die;
-(Model*)dirtyInModel;
-(NSObject<LinkEndpoint>*)dirtyInModelToEndpoint:(id)adirtyInModel;
-(bool)doneStage;
-(void)finishCommit;
-(NSNumber*)isAcceptableDirtyInModel:(id)adirtyInModel;
-(NSNumber*)isAcceptableSinkCommitter:(id)asinkCommitter;
-(NSNumber*)isAcceptableSourceCommitter:(id)asourceCommitter;
-(bool)isDirty;
-(void)markDirty;
-(void)removeAllSinkCommitters;
-(void)removeAllSourceCommitters;
-(void)removeSinkCommitter:(NSObject<Commitable>*)v;
-(void)removeSourceCommitter:(NSObject<Commitable>*)v;
-(void)retract;
-(void)setDirtyInModel:(Model*)v;
-(NSObject<LinkEndpoint>*)sinkCommitterToEndpoint:(id)asinkCommitter;
-(NSObject<LinkEndpoint>*)sourceCommitterToEndpoint:(id)asourceCommitter;
-(void)startCommit;
-(void)willCommit;

@end









@protocol LRUCacheItem <ListItem>
@property (strong,nonatomic,readwrite) NSObject<NSCopying>* _cacheKey;
@property (nonatomic,readwrite) float age;
@property (strong,nonatomic,readwrite) NSObject<LRUCache>* cache;
@property (nonatomic,readwrite) float initialSize;
@property (nonatomic,readonly) float size;

@end









@protocol MinimalMutableArray <Array, DebugMutableArray, MutableArrayDelegate, ObjectEquate>
@property (strong,nonatomic,readonly) NSMutableArray* __mutableArray;
@property (nonatomic,readwrite) long version;
@property (nonatomic,readwrite) CollectionWeakness weakness;
-(bool)_insertObject:(id)object atIndex:(Unsigned)index;
-(bool)_removeObjectAtIndex:(Unsigned)index;
-(bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
-(void)addObject:(id)object;
+(id)arrayWithCapacity:(Unsigned)numItems;
-(void)dealloc;
-(NSObject<MinimalMutableArray>*)init;
-(NSObject<MinimalMutableArray>*)initWithArray:(NSArray*)array;
-(NSObject<MinimalMutableArray>*)initWithArray:(NSArray*)array copyItems:(BOOL)copy;
-(NSObject<MinimalMutableArray>*)initWithCapacity:(Unsigned)numItems;
-(NSObject<MinimalMutableArray>*)initWithCoder:(NSCoder*)coder;
-(NSObject<MinimalMutableArray>*)initWithContentsOfFile:(NSString*)file;
-(NSObject<MinimalMutableArray>*)initWithContentsOfURL:(NSURL*)url;
-(NSObject<MinimalMutableArray>*)initWithObjects:(id*)objects count:(Unsigned)count;
-(void)insertObject:(id)object atIndex:(Unsigned)index;
-(void)removeLastObject;
-(void)removeObjectAtIndex:(Unsigned)index;
-(void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
-(void)setWeakness:(CollectionWeakness)v;
-(void)stateOK;
-(CollectionWeakness)weakness;

@end









@protocol MinimalMutableDictionary <DebugMutableDictionary, Dictionary, MutableDictionaryDelegate, ObjectEquate>
@property (strong,nonatomic,readonly) NSMutableDictionary* __mutableDictionary;
@property (nonatomic,readwrite) long version;
@property (nonatomic,readwrite) CollectionWeakness weakness;
-(bool)_removeObjectForKey:(id<NSCopying>)key;
-(bool)_setObject:(id)object forKey:(id<NSCopying>)key;
-(void)dealloc;
+(id)dictionaryWithCapacity:(Unsigned)numItems;
-(NSObject<MinimalMutableDictionary>*)init;
-(NSObject<MinimalMutableDictionary>*)initWithCapacity:(Unsigned)numItems;
-(NSObject<MinimalMutableDictionary>*)initWithCoder:(NSCoder*)coder;
-(NSObject<MinimalMutableDictionary>*)initWithContentsOfFile:(NSString*)file;
-(NSObject<MinimalMutableDictionary>*)initWithContentsOfURL:(NSURL*)url;
-(NSObject<MinimalMutableDictionary>*)initWithDictionary:(NSDictionary*)dictionary;
-(NSObject<MinimalMutableDictionary>*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy;
-(NSObject<MinimalMutableDictionary>*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
-(void)removeObjectForKey:(id<NSCopying>)key;
-(void)setObject:(id)object forKey:(id<NSCopying>)key;
-(void)setWeakness:(CollectionWeakness)v;
-(void)stateOK;
-(CollectionWeakness)weakness;

@end









@protocol ModelArray <Array>
-(void)dealloc;
-(void)makeModel;
-(void)makeNonModel;

@end









@protocol ModelDictionary <Dictionary>
-(void)dealloc;
-(void)makeModel;
-(void)makeNonModel;

@end









@protocol ModelSet <Set>
-(void)dealloc;
-(void)makeModel;
-(void)makeNonModel;

@end









@protocol MutableArrayIndexFollower <BasicTester>
@property (strong,nonatomic,readwrite) NSMutableDictionary* __arrayObjectIndexes;
-(void)allObjectsMoved;
-(void)didAddObject:(id)object withIndex:(Unsigned)index;
-(void)doAddIndex:(Unsigned)index forObject:(id)object;
-(void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object;
-(void)doRemoveIndex:(Unsigned)index forObject:(id)object;
-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index;

@end









@protocol MutableDictionaryDelegateWithEqualsCheck <MutableDictionaryDelegate>
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak;
#endif// __SWIFT__

@end









@protocol MutableDictionaryKeyFollower <BasicTester>
@property (strong,nonatomic,readwrite) NSMutableDictionary* __dictionaryObjectKeys;
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;

@end









@protocol MutableSet <DebugMutableSet, MutableSetDelegate, ObjectEquate, Set>
@property (strong,nonatomic,readonly) NSMutableSet* __mutableSet;
@property (nonatomic,readwrite) long version;
@property (nonatomic,readwrite) CollectionWeakness weakness;
-(bool)_addObject:(id)object;
-(bool)_addObjectsFromArray:(NSArray*)array;
-(bool)_filterUsingPredicate:(NSPredicate *)predicate;
-(bool)_intersectSet:(NSSet*)set;
-(bool)_minusSet:(NSSet*)set;
-(bool)_removeAllObjects;
-(bool)_removeObject:(id)object;
-(bool)_setSet:(NSSet*)set;
-(bool)_unionSet:(NSSet*)set;
-(void)addObject:(id)object;
-(void)addObjectsFromArray:(NSArray*)array;
-(void)dealloc;
-(void)filterUsingPredicate:(NSPredicate *)predicate;
-(NSMutableSet*)getAndClear;
-(NSObject<MutableSet>*)init;
-(NSObject<MutableSet>*)initWithArray:(NSArray*)array;
-(NSObject<MutableSet>*)initWithCapacity:(Unsigned)numItems;
-(NSObject<MutableSet>*)initWithCoder:(NSCoder*)coder;
-(NSObject<MutableSet>*)initWithObjects:(id*)objects count:(Unsigned)count;
-(NSObject<MutableSet>*)initWithSet:(NSSet*)set;
-(NSObject<MutableSet>*)initWithSet:(NSSet*)set copyItems:(BOOL)copy;
-(void)intersectSet:(NSSet*)set;
-(void)minusSet:(NSSet*)set;
-(void)removeAllObjects;
-(void)removeObject:(id)object;
-(void)setSet:(NSSet*)set;
-(void)setWeakness:(CollectionWeakness)v;
+(id)setWithCapacity:(Unsigned)numItems;
-(void)stateOK;
-(void)unionSet:(NSSet*)set;
-(CollectionWeakness)weakness;

@end









@protocol ObjectEquateAndCopy <NSCopying, ObjectEquate>
-(id)copyWithZone:(NSZone*)zone;

@end









@protocol RequestCache <Codable>
@property (nonatomic,readwrite) NSDictionary* asDictionary;
@property (strong,nonatomic,readwrite/*(public readonly)*/) LRUCache* cache;
@property (nonatomic,readwrite) RequestCaches* caches;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* caches_endpoint;
@property (nonatomic,readwrite) kid keyInCaches;
@property (nonatomic,readwrite) NSSet* keysInCaches;
@property (strong,nonatomic,readwrite/*(public readonly)*/) WeakList* proxyList;
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointD* requests;
@property (nonatomic,readonly) NSObject<Request>* worthiestRequest;
-(NSDictionary*)asDictionary;
-(RequestCaches*)caches;
-(NSObject<LinkEndpoint>*)cachesToEndpoint:(id)acaches;
-(void)die;
-(NSObject*)immediateResultForKey:(id<NSCopying>)key;
-(NSObject*)immediateResultForKey:(id<NSCopying>)key requestData:(NSObject*)reqData;
-(NSNumber*)isAcceptableCaches:(id)acaches;
-(NSNumber*)isAcceptableRequest:(id)arequest;
-(kid)keyInCaches;
-(NSSet*)keysInCaches;
-(NSObject<Request>*)newRequestForKey:(NSObject<NSCopying>*)key data:(NSObject*)reqData;
-(void)prntList;
-(void)removeAllRequests;
-(void)removeRequestForKey:(id<NSCopying>)key;
-(NSObject<Request>*)requestForKey:(id<NSCopying>)key;
-(NSObject<Request>*)requestForKey:(id<NSCopying>)key requestData:(NSObject*)reqData owner:(NSObject<RequestOwner>*)owner;
-(NSObject<LinkEndpoint>*)requestToEndpoint:(id)arequest;
-(NSObject*)resultForKey:(id<NSCopying>)key;
-(NSObject*)resultForKey:(id<NSCopying>)key requestData:(NSObject*)reqData owner:(NSObject<RequestOwner>*)owner;
-(void)retract;
-(void)setAsDictionary:(NSDictionary*)v;
-(void)setCaches:(RequestCaches*)v;
-(void)setKeyInCaches:(kid)v;
-(void)setKeysInCaches:(NSSet*)v;
-(void)setRequest:(id)v forKey:(id<NSCopying>)key;
-(NSObject<Request>*)worthiestRequest;

@end









@protocol RootCodable <Codable>
@property (nonatomic,readwrite) NSData* asData;
@property (strong,nonatomic,readwrite) NSString* codingFilename;
@property (strong,nonatomic,readwrite) NSString* documentsCodingFilename;
-(NSData*)asData;
-(bool)deleteCodableFile;
-(NSString*)documentsCodingFilename;
-(void)loadCodable;
-(void)loadCodableFromFilename:(NSString*)fn;
-(void)saveCodable;
-(void)saveCodableToFilename:(NSString*)fn;
-(void)saveCodableToServer;
-(void)setAsData:(NSData*)v;
-(void)setDocumentsCodingFilename:(NSString*)v;

@end









@protocol Tester <BasicTester>
@property (strong,nonatomic,readwrite) NSArray* _allKeys;
@property (strong,nonatomic,readwrite) NSArray* _allObjects;
@property (strong,nonatomic,readwrite) NSMutableDictionary* _dictionary;
@property (nonatomic,readwrite) Unsigned _index;
@property (nonatomic,readwrite) Unsigned _index1;
@property (strong,nonatomic,readwrite) NSMutableIndexSet* _indexes;
@property (weak,nonatomic,readwrite) NSString* _key;
@property (strong,nonatomic,readwrite) NSMutableArray* _keyArray;
@property (weak,nonatomic,readwrite) id _object;
@property (weak,nonatomic,readwrite) id _object2;
@property (strong,nonatomic,readwrite) NSMutableArray* _objectArray;
@property (strong,nonatomic,readwrite) NSMutableSet* _objectSet;
@property (nonatomic,readwrite) NSRange _range;
@property (strong,nonatomic,readwrite) NSDictionary* collections;
@property (nonatomic,readonly) NSMutableDictionary* dictionary;
@property (nonatomic,readonly) Unsigned index;
@property (nonatomic,readonly) Unsigned index1;
@property (nonatomic,readonly) NSMutableIndexSet* indexes;
@property (nonatomic,readonly) NSString* key;
@property (nonatomic,readonly) NSMutableArray* keyArray;
@property (nonatomic,readonly) NSObject* object;
@property (nonatomic,readonly) NSObject* object2;
@property (nonatomic,readonly) NSMutableArray* objectArray;
@property (nonatomic,readonly) NSMutableSet* objectSet;
@property (nonatomic,readonly) NSMutableArray* randArray;
@property (nonatomic,readonly) NSMutableDictionary* randDictionary;
@property (nonatomic,readonly) NSMutableIndexSet* randInternalIndexSet;
@property (nonatomic,readonly) NSRange randInternalRange;
@property (nonatomic,readonly) NSString* randKey;
@property (nonatomic,readonly) NSMutableArray* randKeyArray;
@property (nonatomic,readonly) id randObject;
@property (nonatomic,readonly) NSMutableSet* randSet;
@property (nonatomic,readonly) NSRange range;
-(void)clearTest;
-(NSMutableDictionary*)dictionary;
-(Int)expectNForSet:(NSString*)set givenBaseN:(Int)N;
-(Unsigned)index;
-(Unsigned)index1;
-(NSMutableIndexSet*)indexes;
-(NSString*)key;
-(NSMutableArray*)keyArray;
-(void)nextTest;
-(NSObject*)object;
-(NSObject*)object2;
-(NSMutableArray*)objectArray;
-(NSMutableSet*)objectSet;
-(bool)passFailWithFormat:(NSString*)format,...;
-(NSMutableArray*)randArray;
-(NSMutableDictionary*)randDictionary;
-(NSMutableIndexSet*)randIndexSetWithCount:(Unsigned)count max:(Unsigned)max;
-(NSMutableIndexSet*)randInternalIndexSet;
-(NSRange)randInternalRange;
-(NSString*)randKey;
-(NSMutableArray*)randKeyArray;
-(id)randObject;
-(NSMutableSet*)randSet;
-(NSRange)range;
-(NSString*)steps:(Int)N;
-(void)verifyRC;
-(void)verifyWillOpCounts;

@end









@protocol ValueLinkEndpoint <MutableValueDelegate>
@property (weak,nonatomic,readwrite) id value;
@property (strong,nonatomic,readwrite,strong) id value_strong;
-(bool)_addReferrer:(NSObject<LinkEndpoint>*)ep;
-(void)_removeReferrer:(NSObject<LinkEndpoint>*)ep;
-(void)setValue:(id)v;
-(void)setValue_strong:(id)v;
-(id)value;
-(id)value_strong;

@end









@protocol ArrayLinkEndpoint <MutableArrayIndexFollower>
@property (nonatomic,readwrite) bool __restrictRef;
-(bool)_addReferrer:(NSObject<LinkEndpoint>*)ep;
-(void)_removeReferrer:(NSObject<LinkEndpoint>*)ep;
-(void)didAddObject:(id)object withIndex:(Unsigned)index;
-(NSObject<ArrayLinkEndpoint>*)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index;

@end









@protocol Basic_ProxyDictionaryDelegate <MutableDictionaryDelegate>
@property (weak,nonatomic,readwrite) NSObject<Basic_ProxiedDictionaryDelegate>* owner;
-(void)delegateForDictionaryChanged;
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(NSObject<Basic_ProxyDictionaryDelegate>*)initWithOwner:(NSObject<Basic_ProxiedDictionaryDelegate>*)aowner;
-(void)stateOK;
-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;

@end









@protocol Basic_SourcedProxyDictionaryDelegate <MutableDictionaryDelegate>
@property (weak,nonatomic,readwrite) NSObject<Basic_SourcedProxiedDictionaryDelegate>* owner;
@property (strong,nonatomic,readonly) NSObject<NSCopying>* source;
-(void)delegateForDictionaryChanged;
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(NSObject<Basic_SourcedProxyDictionaryDelegate>*)initWithOwner:(NSObject<Basic_SourcedProxiedDictionaryDelegate>*)aowner source:(NSObject<NSCopying>*)asource;
-(void)stateOK;
-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;

@end









@protocol CommitableCollection <Commitable>
-(Int)commitProperties:(Int)substageIndex;
-(void)stateOK;

@end









@protocol DictionaryLinkEndpoint <MutableDictionaryKeyFollower>
@property (nonatomic,readwrite) bool __restrictRef;
-(bool)_addReferrer:(NSObject<LinkEndpoint>*)ep;
-(void)_removeReferrer:(NSObject<LinkEndpoint>*)ep;
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(NSObject<DictionaryLinkEndpoint>*)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;

@end









@protocol LRUCache <Codable, List, MinimalMutableDictionary>
@property (nonatomic,readwrite) NSDictionary* asDictionary;
@property (nonatomic,readwrite) Int imi;
@property (nonatomic,readwrite) Int maxCount;
@property (nonatomic,readwrite) float maxSize;
@property (nonatomic,readwrite) float totalSize;
-(NSDictionary*)asDictionary;
-(void)clear;
-(NSObject*)derefedObjectForKey:(id<NSCopying>)key;
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(NSObject<LRUCacheItem>*)makeForKey:(NSObject<NSCopying>*)key;
-(NSString*)nextPath;
-(id)objectForKey:(id<NSCopying>)key;
-(void)setAsDictionary:(NSDictionary*)v;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;

@end









@protocol MutableArray <MinimalMutableArray>
-(bool)_addObjectsFromArray:(NSArray*)array;
-(bool)_insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes;
-(bool)_removeAllObjects;
-(bool)_removeObjectsAtIndexes:(NSIndexSet*)indexes;
-(void)addObjectsFromArray:(NSArray*)array;
-(void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi;
-(void)filterUsingPredicate:(NSPredicate *)predicate;
-(void)insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes;
-(void)removeAllObjects;
-(void)removeObjectsAtIndexes:(NSIndexSet*)indexes;
-(void)setArray:(NSArray*)array;
-(void)sortUsingComparator:(NSComparator)cmptr;
-(void)sortUsingDescriptors:(NSArray*)sortDescriptors;
-(void)sortUsingFunction:(Int (*)(id, id, void *))compare context:(void *)context;
-(void)sortUsingSelector:(SEL)selector;
-(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;

@end









@protocol MutableDictionary <MinimalMutableDictionary>
-(bool)_addEntriesFromDictionary:(NSDictionary*)dictionary;
-(bool)_removeAllObjects;
-(bool)_removeObjectsForKeys:(NSArray*)keys;
-(bool)_setDictionary:(NSDictionary*)dictionary;
-(bool)_setValue:(id)object forKey:(NSString*)key;
-(void)addEntriesFromDictionary:(NSDictionary*)dictionary;
-(void)removeAllObjects;
-(void)removeObjectsForKeys:(NSArray*)keys;
-(void)setDictionary:(NSDictionary*)dictionary;
-(void)setValue:(id)object forKey:(NSString*)key;

@end









@protocol MutableSetMirrorTester <BasicTester, MutableSet, TesterCounter>
@property (nonatomic,readwrite) Int __addingToMirrorSet;
@property (strong,nonatomic,readwrite) NSMutableSet* __mirrorSet;
@property (nonatomic,readwrite) Int __removingFromMirrorSet;
-(void)didAddObject:(id)object;
-(void)didRemoveObject:(id)object;
-(void)verifyMirrorSet;
-(void)willAddObject:(id)object;
-(void)willRemoveObject:(id)object;

@end









@protocol SetLinkEndpoint <MutableSet>
@property (nonatomic,readwrite) bool __restrictRef;
-(bool)_addReferrer:(NSObject<LinkEndpoint>*)ep;
-(void)_removeReferrer:(NSObject<LinkEndpoint>*)ep;
-(void)didAddObject:(id)object;
-(NSObject<SetLinkEndpoint>*)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)willRemoveObject:(id)object;

@end









@protocol MutableArrayMirrorTester <MutableArray, MutableArrayIndexFollower, TesterCounter>
@property (nonatomic,readwrite) Int __addingToMirrorArray;
@property (nonatomic,readwrite) Int __removingFromMirrorArray;
-(void)didAddObject:(id)object withIndex:(Unsigned)index;
-(void)didRemoveObject:(id)object;
-(void)stateOK;
-(void)verifyMirrorArray;
-(void)willAddObject:(id)object withIndex:(Unsigned)index;
-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index;

@end









@protocol MutableDictionaryMirrorTester <MutableDictionary, MutableDictionaryKeyFollower, TesterCounter>
@property (nonatomic,readwrite) Int __addingToMirrorDictionary;
@property (nonatomic,readwrite) Int __removingFromMirrorDictionary;
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(void)stateOK;
-(void)verifyMirrorDictionary;
-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;

@end


















        #define CHECKZOMBIE(fn) {if ([self respondsToSelector:@selector(isZombie)]&&[(id<Object>)self isZombie]) ERR("Zombie call to %p: " #fn,self);}





















#pragma mark -
#pragma mark Include interfaces:
#define INCLUDE_IFACE

#pragma mark -
#pragma mark Include interfaces:
#define INCLUDE_IFACE_D0
    #include "base.wi.mm"
    #include "Code.wi.mm"
    #include "collectionTester.wi.mm"
    #include "default.mm"
    #include "Files.wi.mm"
    #include "object.mm"
    #include "sys.mm"
    #include "token.mm"
    #include "token.wi.mm"
    #include "util.mm"
#undef INCLUDE_IFACE_D0

#pragma mark -
#pragma mark Include interfaces:
#define INCLUDE_IFACE_D1
    #include "collectionDictionary.wi.mm"
    #include "collectionNS.wi.mm"
    #include "collections.wi.mm"
    #include "collectionSet.wi.mm"
    #include "default.mm"
    #include "model.mm"
    #include "object.mm"
    #include "OID.wi.mm"
    #include "token.mm"
    #include "util.mm"
    #include "util.wi.mm"
#undef INCLUDE_IFACE_D1

#pragma mark -
#pragma mark Include interfaces:
#define INCLUDE_IFACE_D2
    #include "collectionAtomicAndTracker.wi.mm"
    #include "collectionDictionary.wi.mm"
    #include "collections.wi.mm"
    #include "collectionTester.wi.mm"
    #include "linkBase.wi.mm"
    #include "model.mm"
    #include "object.mm"
    #include "util.mm"
#undef INCLUDE_IFACE_D2

#pragma mark -
#pragma mark Include interfaces:
#define INCLUDE_IFACE_D3
    #include "collectionDictionary.wi.mm"
    #include "collections.wi.mm"
    #include "collectionSet.wi.mm"
    #include "linkBase.wi.mm"
    #include "util.mm"
#undef INCLUDE_IFACE_D3

#pragma mark -
#pragma mark Include interfaces:
#define INCLUDE_IFACE_D4
    #include "collectionArray.wi.mm"
    #include "collectionDictionary.wi.mm"
#undef INCLUDE_IFACE_D4

#undef INCLUDE_IFACE










        //extern void retainFn(NSObject *me,Int &rc,Int &arc);
        //extern void releaseFn(NSObject *me,Int &rc,Int &arc,bool debugAutorelease);
        //extern void autoreleaseFn(NSObject *me,Int &rc,Int &arc,bool debugAutorelease);
        NOSWIFT(
        extern void objInitFn(NSObject *me,LL &mei,LL &meci);
        extern void deallocFn(NSObject *me,LL &mei,LL &meci);
        )
        extern NSString *g_objectName(id object);
        extern const char *g_cobjectName(id object);

        extern ULL g_sequence;
        extern Trace *g_trace;
        void addTraceString(NSString *string);
        NSString *__getCurrentTraceString();

        #define ADDTRACE(__trcfnnm) TraceFunctionTracker __functionTracker((((__bridge const void*)self)!=(__bridge const void*)g_trace)&&(((__bridge const void*)self)!=(__bridge const void*)[g_trace class]),__trcfnnm);

        void addTrace(NSString *trace,Int depth);
        void addTraceCString(const char *trace,Int depth);
        void finishDepth(Int depth);
        void ADDOWNER(id object,id owner);
        void REMOVEOWNER(id object,id owner);
        void objectRetained(id object);
        void objectReleased(id object);
        void objectAutoreleasePending(id object);
        void objectAutoreleaseCollected(id object);
        void objectAllocated(id object);
        void objectDeallocated(id object);

        NSString *threadNameJSON();
        
        NOSWIFT(
        #define CurrentThreadHash ((ULL)(__bridge const void*)(id)NSThread.currentThread)

        extern QuickHashOfInts *g_noTraceHT;
        class TraceFunctionTracker {
            public:
                LL depth;
                static pthread_key_t key;
                TraceFunctionTracker(bool en,const char *fnName) {
                    if (!en) depth=-1;
                    else {
                        if (!key) pthread_key_create(&key,nil);
                        depth=((LL)pthread_getspecific(key))+1;
                        if (depth<0) depth=0;
                        pthread_setspecific(key,(const void*)depth);
                        addTraceCString(fnName,(int)depth);
                    }
                }
                ~TraceFunctionTracker() {
                    if (depth>=0) {
                        finishDepth((int)depth);
                        pthread_setspecific(key,(const void*)(LL)(depth-1));
                    }
                }
        };
        )
        extern Int g_numNamedThreads;

        extern ObjectGraph *g_objectGraph;
        #define OBJOWN(__owner,__obj,__c) [g_objectGraph object:__owner ownsObject:__obj count:__c]

        extern Model *_Model_default;

        extern Singletons *g_singletons;
        #ifndef UIONLY
        #define UIONLY(...)
        #endif
        #ifndef NOTUI
        #define NOTUI(...) __VA_ARGS__
        #endif

        extern URLHandlerRegistry *_URLHandlerRegistry_default;

        #ifndef __SWIFT__
        #define __NOSWIFT__
        #import "WInterface-Swift.h"
        #endif

        #undef MSGSTART
        #define _MSGSTART(fn) //if (strstr(fn,"meta")||strstr(fn,"Meta")) prnt("MSG:%p -- %s\n",(__bridge void*)self,fn);
        //#define LONGLIVEZOMBIES
        //#define MSGSTART(fn) CHECKZOMBIE(fn) ADDTRACE(fn) _MSGSTART(fn)
        #define MSGSTART(fn) CHECKZOMBIE(fn) _MSGSTART(fn)
        //#define MSGSTART(fn) _MSGSTART(fn)
        #define CALLWITHOWNER(__self,__fn,__owner) [__self __fn##WithOwner:__owner]



















