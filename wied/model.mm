// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 1 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D1





        @interface DirtyObjectDictionaryDelegate : NSObject<BaseObject, ClassObject, MutableDictionaryDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_DirtyObjectDictionaryDelegate; @protected
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        - (void)_startObjectOfClassDirtyObjectDictionaryDelegate;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        + (DirtyObjectDictionaryDelegate *)get;
        - (DirtyObjectDictionaryDelegate *)init;
        - (NSMutableString *)objectName;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;

        @end





        @interface DirtyObjectIndexArrayDelegate : NSObject<BaseObject, ClassObject, MutableArrayDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_DirtyObjectIndexArrayDelegate; @protected
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        - (void)_startObjectOfClassDirtyObjectIndexArrayDelegate;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)allObjectsMoved;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        + (DirtyObjectIndexArrayDelegate *)get;
        - (DirtyObjectIndexArrayDelegate *)init;
        - (NSMutableString *)objectName;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)setDelegateForArray:(NSArray *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;

        @end





        @interface DirtyObjectSetDelegate : NSObject<BaseObject, ClassObject, MutableSetDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_DirtyObjectSetDelegate; @protected
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<MutableSetDelegate> *setDelegate;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        - (void)_startObjectOfClassDirtyObjectSetDelegate;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        + (DirtyObjectSetDelegate *)get;
        - (DirtyObjectSetDelegate *)init;
        - (NSMutableString *)objectName;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end





        @interface Model : NSObject<ClassObject, Model, Object, Ticker, Waiter> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_Model; @protected
            double _waiterGoAtSeconds;
            ULL commitFrame;
            CommitStage commitStage;
            bool debugAutorelease;
            EndpointS *v_dirtyObjects;
            bool inCommit;
            bool inTick;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            ModelOwnedObjectSet *objectsOwnedOnlyByModels;
            NSTimer *v_tim;
            bool waiterEnabled;
            NSTimer *v_waitTimer;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) double _waiterGoAtSeconds;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) ULL commitFrame;
        @property (nonatomic,readonly) CommitStage commitStage;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *dirtyObjects;
        @property (nonatomic,readonly) bool inCommit;
        @property (nonatomic,readonly) bool inTick;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite) ModelOwnedObjectSet *objectsOwnedOnlyByModels;
        @property (strong,nonatomic,readwrite) NSTimer *tim;
        @property (nonatomic,readonly) bool waiterEnabled;
        @property (strong,nonatomic,readwrite) NSTimer *waitTimer;
        - (void)_startObjectOfClassModel;
        - (bool)_commit;
        - (void)_enableWaiter:(NSTimer *)t;
        - (void)addDirtyObject:(NSObject<Commitable> *)v;
        - (void)cancelledWait;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        + (bool)commit;
        - (void)dealloc;
        + (void)delayCommitsForSeconds:(double)sec;
        - (NSString *)description;
        - (void)die;
        - (EndpointS *)dirtyObjects;
        - (NSObject<LinkEndpoint> *)dirtyObjectToEndpoint:(id)adirtyObject;
        + (Model *)getDefault;
        - (Model *)init;
        - (NSNumber *)isAcceptableDirtyObject:(id)adirtyObject;
        - (NSMutableString *)objectName;
        - (ModelOwnedObjectSet *)objectsOwnedOnlyByModels;
        - (void)removeAllDirtyObjects;
        - (void)removeDirtyObject:(NSObject<Commitable> *)v;
        - (void)retract;
        - (void)setDirtyObjects:(EndpointS *)v;
        - (void)setObjectsOwnedOnlyByModels:(ModelOwnedObjectSet *)v;
        - (void)setTim:(NSTimer *)v;
        - (void)setWaitTimer:(NSTimer *)v;
        - (void)startOfAutoreleasePool;
        - (void)startWithInterval:(float)interval;
        - (void)stop;
        - (void)stopWaiting;
        - (void)tick;
        - (NSTimer *)tim;
        - (void)waited;
        - (void)waitForSeconds:(float)sec;
        - (NSTimer *)waitTimer;

        @end





        @interface SinkCommitterArrayDelegate : NSObject<ClassObject, MutableArrayDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_SinkCommitterArrayDelegate; @protected
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<Commitable> *owner;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSObject<Commitable> *owner;
        - (void)_startObjectOfClassSinkCommitterArrayDelegate;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)allObjectsMoved;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (SinkCommitterArrayDelegate *)initWithOwner:(NSObject<Commitable> *)aowner;
        - (NSMutableString *)objectName;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (NSObject<Commitable> *)owner;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)setDelegateForArray:(NSArray *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;

        @end





        @interface SinkCommitterSetDelegate : NSObject<ClassObject, MutableSetDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_SinkCommitterSetDelegate; @protected
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<Commitable> *owner;
            NSObject<MutableSetDelegate> *setDelegate;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSObject<Commitable> *owner;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        - (void)_startObjectOfClassSinkCommitterSetDelegate;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (SinkCommitterSetDelegate *)initWithOwner:(NSObject<Commitable> *)aowner;
        - (NSMutableString *)objectName;
        - (NSObject<Commitable> *)owner;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end





        @interface SourceCommitterArrayDelegate : NSObject<ClassObject, MutableArrayDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_SourceCommitterArrayDelegate; @protected
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<Commitable> *owner;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSObject<Commitable> *owner;
        - (void)_startObjectOfClassSourceCommitterArrayDelegate;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)allObjectsMoved;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (SourceCommitterArrayDelegate *)initWithOwner:(NSObject<Commitable> *)aowner;
        - (NSMutableString *)objectName;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (NSObject<Commitable> *)owner;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)setDelegateForArray:(NSArray *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;

        @end





        @interface SourceCommitterSetDelegate : NSObject<ClassObject, MutableSetDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_SourceCommitterSetDelegate; @protected
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<Commitable> *owner;
            NSObject<MutableSetDelegate> *setDelegate;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSObject<Commitable> *owner;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        - (void)_startObjectOfClassSourceCommitterSetDelegate;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (SourceCommitterSetDelegate *)initWithOwner:(NSObject<Commitable> *)aowner;
        - (NSMutableString *)objectName;
        - (NSObject<Commitable> *)owner;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif  // __SWIFT__
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end
    #endif      // INCLUDE_IFACE_D1

    #ifdef INCLUDE_IFACE_D2





        @interface ModelOwnedObjectSet : NSMutableSet<ClassObject, MutableSet, Object, WeakCollection> {
            NSMutableSet *__mutableSet;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_ModelOwnedObjectSet; @protected
            NSSet *__set;
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            bool retrievesWeakValues;
            Unsigned set_count;
            id100 set_objects;
            NSObject<MutableSetDelegate> *setDelegate;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSMutableSet *__mutableSet;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSSet *__set;
        @property (nonatomic,readonly) NSArray *allObjects;
        @property (nonatomic,readonly) id anyObject;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) bool retrievesWeakValues;
        @property (nonatomic,readwrite) Unsigned set_count;
        @property (nonatomic,readwrite) id100 set_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassModelOwnedObjectSet;
        - (NSMutableSet *)__mutableSet;
        - (NSSet *)__set;
        - (bool)_addObject:(id)object;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_filterUsingPredicate:(NSPredicate *)predicate;
        - (bool)_intersectSet:(NSSet *)set;
        - (bool)_minusSet:(NSSet *)set;
        - (bool)_removeAllObjects;
        - (bool)_removeObject:(id)object;
        - (bool)_setSet:(NSSet *)set;
        - (bool)_unionSet:(NSSet *)set;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (NSArray *)allObjects;
        - (id)anyObject;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (NSMutableSet *)getAndClear;
        - (Unsigned)hash;
        - (ModelOwnedObjectSet *)init;
        - (ModelOwnedObjectSet *)initWithArray:(NSArray *)array;
        - (ModelOwnedObjectSet *)initWithCapacity:(Unsigned)numItems;
        - (ModelOwnedObjectSet *)initWithCoder:(NSCoder *)coder;
        - (ModelOwnedObjectSet *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (ModelOwnedObjectSet *)initWithSet:(NSSet *)set;
        - (ModelOwnedObjectSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy;
        - (void)intersectSet:(NSSet *)set;
        - (BOOL)intersectsSet:(NSSet *)set;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToSet:(NSSet *)set;
        - (BOOL)isSubsetOfSet:(NSSet *)set;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)member:(id)object;
        - (void)minusSet:(NSSet *)set;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)removeObject:(id)object;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        + (ModelOwnedObjectSet *)set;
        - (NSSet *)setByAddingObject:(id)object;
        - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array;
        - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setSet:(NSSet *)set;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        + (ModelOwnedObjectSet *)setWithArray:(NSArray *)array;
        + (id)setWithCapacity:(Unsigned)numItems;
        + (ModelOwnedObjectSet *)setWithObject:(id)object;
        + (ModelOwnedObjectSet *)setWithSet:(NSSet *)set;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)stateOK;
        - (void)unionSet:(NSSet *)set;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end
    #endif // INCLUDE_IFACE_D2

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: d





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         DirtyObjectDictionaryDelegate
    #define _WIClass_           DirtyObjectDictionaryDelegate__
    #define _className_         dirtyObjectDictionaryDelegate
    #define _Class_             DirtyObjectDictionaryDelegate__
    @implementation DirtyObjectDictionaryDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassDirtyObjectDictionaryDelegate {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)_startObjectOfClassDirtyObjectDictionaryDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("DirtyObjectDictionaryDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("DirtyObjectDictionaryDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ dictionaryDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("DirtyObjectDictionaryDelegate:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)delegateForDictionaryChanged")
    }
    - (NSString *)description {
        MSGSTART("DirtyObjectDictionaryDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("DirtyObjectDictionaryDelegate:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        if (toObject)
            if ([toObject conformsToProtocol:@protocol(Commitable)]) [(NSObject < Commitable > *) toObject markDirty];



        /*i100*/ [dictionaryDelegate didReplaceObject:fromObject withObject:toObject forKey:key];
    }
    - (void)die {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)die")

        /*i900*/}
    + (DirtyObjectDictionaryDelegate *)get {
        MSGSTART("DirtyObjectDictionaryDelegate:+(DirtyObjectDictionaryDelegate*)get")
        return [[DirtyObjectDictionaryDelegate alloc] init];
    }
    - (DirtyObjectDictionaryDelegate *)init {
        MSGSTART("DirtyObjectDictionaryDelegate:-(DirtyObjectDictionaryDelegate*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassDirtyObjectDictionaryDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("DirtyObjectDictionaryDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)setWithDictionary:(NSDictionary*)d")
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("DirtyObjectDictionaryDelegate:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)stateOK")


        /*i100*/[dictionaryDelegate stateOK];
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("DirtyObjectDictionaryDelegate:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        if (fromObject)
            if ([fromObject conformsToProtocol:@protocol(Commitable)]) [(NSObject < Commitable > *) fromObject markDirty];



        /*i100*/ [dictionaryDelegate willReplaceObject:fromObject withObject:toObject forKey:key];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         DirtyObjectIndexArrayDelegate
    #define _WIClass_           DirtyObjectIndexArrayDelegate__
    #define _className_         dirtyObjectIndexArrayDelegate
    #define _Class_             DirtyObjectIndexArrayDelegate__
    @implementation DirtyObjectIndexArrayDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassDirtyObjectIndexArrayDelegate {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)_startObjectOfClassDirtyObjectIndexArrayDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)allObjectsMoved {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)allObjectsMoved")

        for (id o in delegateForArray) {
            if ([o conformsToProtocol:@protocol(Commitable)]) [(NSObject < Commitable > *) o markDirty];
        }



        /*i100*/ [arrayDelegate allObjectsMoved];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)didAddObject:(id)object withIndex:(Unsigned)index")

        Unsigned i = 0;
        for (id o in delegateForArray) {
            if ( (i++ >= index) && [o conformsToProtocol:@protocol(Commitable)] ) [(NSObject < Commitable > *) o markDirty];
        }



        /*i100*/ [arrayDelegate didAddObject:object withIndex:index];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)didRemoveObject:(id)object")


        /*i100*/[arrayDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)die")

        /*i900*/}
    + (DirtyObjectIndexArrayDelegate *)get {
        MSGSTART("DirtyObjectIndexArrayDelegate:+(DirtyObjectIndexArrayDelegate*)get")
        return [[DirtyObjectIndexArrayDelegate alloc] init];
    }
    - (DirtyObjectIndexArrayDelegate *)init {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(DirtyObjectIndexArrayDelegate*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassDirtyObjectIndexArrayDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")

        Unsigned i = 0,index = (toLocation < fromRange.location ? toLocation : fromRange.location);
        for (id o in delegateForArray) {
            if ( (i++ >= index) && [o conformsToProtocol:@protocol(Commitable)] ) [(NSObject < Commitable > *) o markDirty];
        }



        /*i100*/ [arrayDelegate objectsMovedFromRange:fromRange toLocation:toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")

        id o = [delegateForArray objectAtIndex:fromIndex];
        if ([o conformsToProtocol:@protocol(Commitable)]) [(NSObject < Commitable > *) o markDirty];
        o = [delegateForArray objectAtIndex:toIndex];
        if ([o conformsToProtocol:@protocol(Commitable)]) [(NSObject < Commitable > *) o markDirty];



        /*i100*/ [arrayDelegate objectsSwappedWithIndex:fromIndex andIndex:toIndex];
    }
    - (void)removedDelegate {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)setWithDictionary:(NSDictionary*)d")
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("DirtyObjectIndexArrayDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)stateOK")


        /*i100*/[arrayDelegate stateOK];
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)willAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate willAddObject : object withIndex : index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")

        Unsigned i = 0;
        for (id o in delegateForArray) {
            if ( (i++ > index) && [o conformsToProtocol:@protocol(Commitable)] ) [(NSObject < Commitable > *) o markDirty];
        }



        /*i100*/ [arrayDelegate willRemoveObject:object fromIndex:index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("DirtyObjectIndexArrayDelegate:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         DirtyObjectSetDelegate
    #define _WIClass_           DirtyObjectSetDelegate__
    #define _className_         dirtyObjectSetDelegate
    #define _Class_             DirtyObjectSetDelegate__
    @implementation DirtyObjectSetDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassDirtyObjectSetDelegate {
        MSGSTART("DirtyObjectSetDelegate:-(void)_startObjectOfClassDirtyObjectSetDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("DirtyObjectSetDelegate:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("DirtyObjectSetDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("DirtyObjectSetDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("DirtyObjectSetDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ setDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("DirtyObjectSetDelegate:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("DirtyObjectSetDelegate:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("DirtyObjectSetDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object {
        MSGSTART("DirtyObjectSetDelegate:-(void)didAddObject:(id)object")

        if ([object conformsToProtocol:@protocol(Commitable)]) [(NSObject < Commitable > *) object markDirty];



        /*i100*/ [setDelegate didAddObject:object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("DirtyObjectSetDelegate:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("DirtyObjectSetDelegate:-(void)die")

        /*i900*/}
    + (DirtyObjectSetDelegate *)get {
        MSGSTART("DirtyObjectSetDelegate:+(DirtyObjectSetDelegate*)get")
        return [[DirtyObjectSetDelegate alloc] init];
    }
    - (DirtyObjectSetDelegate *)init {
        MSGSTART("DirtyObjectSetDelegate:-(DirtyObjectSetDelegate*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassDirtyObjectSetDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("DirtyObjectSetDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("DirtyObjectSetDelegate:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("DirtyObjectSetDelegate:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("DirtyObjectSetDelegate:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("DirtyObjectSetDelegate:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("DirtyObjectSetDelegate:-(void)setWithDictionary:(NSDictionary*)d")
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("DirtyObjectSetDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)willAddObject:(id)object {
        MSGSTART("DirtyObjectSetDelegate:-(void)willAddObject:(id)object")


        /*i100*/[setDelegate willAddObject : object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("DirtyObjectSetDelegate:-(void)willRemoveObject:(id)object")

        if ([object conformsToProtocol:@protocol(Commitable)]) [(NSObject < Commitable > *) object markDirty];



        /*i100*/ [setDelegate willRemoveObject:object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: m





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         Model
    #define _WIClass_           Model__
    #define _className_         model
    #define _Class_             Model__
    @implementation Model

    @synthesize __owner_context = __owner_context;
    @synthesize _waiterGoAtSeconds = _waiterGoAtSeconds;
    @synthesize commitFrame = commitFrame;
    @synthesize commitStage = commitStage;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize inCommit = inCommit;
    @synthesize inTick = inTick;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize waiterEnabled = waiterEnabled;
    - (void)_startObjectOfClassModel {
        MSGSTART("Model:-(void)_startObjectOfClassModel")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_dirtyObjects = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableDirtyObject:) otherEndObjectToEndpoint:@selector(dirtyObjectToEndpoint:)]);  ADDOWNER(v_dirtyObjects,self);
        /*ivar*/ commitFrame = (1);
        /*ivar*/ objectsOwnedOnlyByModels = ([ModelOwnedObjectSet set]);  ADDOWNER(objectsOwnedOnlyByModels,self);
        /*ivar*/ waiterEnabled = (YES);
        /*ivar*/ inCommit = (NO);
        /*ivar*/ commitStage = (stage_none);

        /*i0*/ // [MutableSetDebuggerDelegate attachTo:self.dirtyObjects named:@"Dirty objects"];
    }
    - (bool)_commit {
        MSGSTART("Model:-(bool)_commit")

        /*i-999*/ NSSet * _dirties;
        @synchronized(self) {
            if (!self.waiterEnabled) return NO;

            if (inCommit) return NO;

            inCommit = YES;
            _dirties = [v_dirtyObjects getAndClear];
        }
        if (_dirties.count) {
            prnt("Committing\n");

            // prnt("Commit:{ ");for (NSObject<Commitable>* o in _dirties) prnt("%s ",[Util cnameFor:o]);prnt("}\n");

            commitFrame++;
            for (NSObject<Commitable> *o in _dirties) {
                o._isDirty = o._doneStage = NO;
                o.commitFrame = commitFrame;
            }


            /*i0*/ commitStage = stage_commitProperties;
            NSMutableSet *changed = [[MutableSet alloc] initWithCapacity:_dirties.count];
            for (Int nxt = 1,now = 0; nxt >= 0; now = nxt) {
                nxt = -1;
                for (NSObject<Commitable> *o in _dirties) {
                    if (!o.doneStage) {
                        Int i = [o commitProperties:now];
                        if (i > now) {
                            if ( (nxt == -1) || (nxt > i) ) nxt = i;
                        }
                        else {
                            o._doneStage = YES;
                        }
                    }
                }
            }
            for (NSObject<Commitable> *o in _dirties) {
                if (o.modelObjectHasChanged) [changed addObject:o];
                o._doneStage = NO;
            }

            if (changed.count) {
                // prnt("Commit 1\n");
                // prnt("Changed:{ ");for (NSObject<Commitable>* o in changed) prnt("%s ",[Util cnameFor:o]);prnt("}\n");
                commitStage = stage_startCommit;
                for (NSObject<Commitable> *o in changed) {
                    [o startCommit]; o._doneStage = YES;
                }
                for (NSObject<Commitable> *o in changed) {
                    o._doneStage = NO;
                }
                // prnt("Commit 2\n");
                commitStage = stage_willCommit;
                for (NSObject<Commitable> *o in changed) {
                    [o willCommit]; o._doneStage = YES;
                }
                for (NSObject<Commitable> *o in changed) {
                    o._doneStage = NO;
                }
                commitStage = stage_commit;
                // prnt("Commit 3\n");
                for (NSObject<Commitable> *o in changed) {
                    [o commit]; o._doneStage = YES;
                }
                for (NSObject<Commitable> *o in changed) {
                    o._doneStage = NO;
                }
                commitStage = stage_didCommit;
                // prnt("Commit 4\n");
                for (NSObject<Commitable> *o in changed) {
                    [o didCommit]; o._doneStage = YES;
                }
                for (NSObject<Commitable> *o in changed) {
                    o._doneStage = NO;
                }
                commitStage = stage_finishCommit;
                // prnt("Commit 5\n");
                for (NSObject<Commitable> *o in changed) {
                    [o finishCommit]; o._doneStage = YES;
                }
                for (NSObject<Commitable> *o in changed) {
                    o._doneStage = NO;
                }
                // prnt("Commit 6\n");
            }
            commitStage = stage_cleanupCommit;
            // prnt("Clean:{ ");for (NSObject<Commitable>* o in _dirties) prnt("%s ",[Util cnameFor:o]);prnt("}\n");
            for (NSObject<Commitable> *o in _dirties) {
                [o cleanupCommit]; o.modelObjectHasChanged = NO; o._doneStage = YES;
            }
            // for (NSObject<Commitable>* o in _dirties) o._doneStage=NO;
            commitStage = stage_none;

            // prnt("Commit c\n");
            // [changed removeAllObjects];

            // prnt("Commited\n");
        }
        // [_dirties removeAllObjects];

        /*i999*/ @synchronized(self) {
            inCommit = NO;
            return YES;
        }
        // prnt("Commit o\n");
    }
    - (void)_enableWaiter:(NSTimer *)t {
        MSGSTART("Model:-(void)_enableWaiter:(NSTimer*)t")

        if (t == self.waitTimer) {
            @synchronized(self) {
                _waiterGoAtSeconds = 0;
                self.waitTimer = nil;
                waiterEnabled = YES;
            }
            [self waited];
        }
    }
    - (void)addDirtyObject:(NSObject<Commitable> *)v {
        MSGSTART("Model:-(void)addDirtyObject:(NSObject<Commitable>*)v")
        [v_dirtyObjects addObject : v];
    }
    - (void)cancelledWait {
        MSGSTART("Model:-(void)cancelledWait")
    }
    - (constchar *)cdescription {
        MSGSTART("Model:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("Model:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    + (bool)commit {
        MSGSTART("Model:+(bool)commit")

        return [[Model getDefault] _commit];
    }
    - (void)dealloc {
        MSGSTART("Model:-(void)dealloc")

        /*i-500*/[self stop];

        [self stopWaiting];

/*i-151*/ [self die];
/*i0*/ v_tim = nil;

        REMOVEOWNER(v_dirtyObjects,self); v_dirtyObjects = nil;

        REMOVEOWNER(objectsOwnedOnlyByModels,self); objectsOwnedOnlyByModels = nil;

        v_waitTimer = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    + (void)delayCommitsForSeconds:(double)sec {
        MSGSTART("Model:+(void)delayCommitsForSeconds:(double)sec")

        [[Model getDefault] waitForSeconds : sec];
    }
    - (NSString *)description {
        MSGSTART("Model:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("Model:-(void)die")
        [v_dirtyObjects removeAllObjects];

        /*i900*/}
    - (EndpointS *)dirtyObjects {
        MSGSTART("Model:-(EndpointS*)dirtyObjects")

        /*i-999*/ EndpointS * ret = v_dirtyObjects;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)dirtyObjectToEndpoint:(id)adirtyObject {
        MSGSTART("Model:-(NSObject<LinkEndpoint>*)dirtyObjectToEndpoint:(id)adirtyObject")
        return [adirtyObject performSelector:@selector(dirtyInModel_endpoint)];
    }
    + (Model *)getDefault {
        MSGSTART("Model:+(Model*)getDefault")

        if (!_Model_default)
            ADDSINGLETON(_Model_default = [[Model alloc] init]);
        return _Model_default;
    }
    - (Model *)init {
        MSGSTART("Model:-(Model*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassModel];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableDirtyObject:(id)adirtyObject {
        MSGSTART("Model:-(NSNumber*)isAcceptableDirtyObject:(id)adirtyObject")
        return [adirtyObject conformsToProtocol:@protocol(Commitable)] ? @YES : nil;
    }
    - (NSMutableString *)objectName {
        MSGSTART("Model:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (ModelOwnedObjectSet *)objectsOwnedOnlyByModels {
        MSGSTART("Model:-(ModelOwnedObjectSet*)objectsOwnedOnlyByModels")

        /*i-999*/ ModelOwnedObjectSet * ret = objectsOwnedOnlyByModels;
        /*i999*/ return ret;
    }
    - (void)removeAllDirtyObjects {
        MSGSTART("Model:-(void)removeAllDirtyObjects")
        [v_dirtyObjects removeAllObjects];
    }
    - (void)removeDirtyObject:(NSObject<Commitable> *)v {
        MSGSTART("Model:-(void)removeDirtyObject:(NSObject<Commitable>*)v")
        [v_dirtyObjects removeObject : v];
    }
    - (void)retract {
        MSGSTART("Model:-(void)retract")
        [self.dirtyObjects removeAllObjects];
    }
    - (void)setDirtyObjects:(EndpointS *)v {
        MSGSTART("Model:-(void)setDirtyObjects:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_Model) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(dirtyObjects=\"blah\") to set the property)");

        /*i-905*/ if (v_dirtyObjects == v) return;

        /*i-900*/ {
            v_dirtyObjects = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_dirtyObjects,self); ADDOWNER(v,self);
    }
    - (void)setObjectsOwnedOnlyByModels:(ModelOwnedObjectSet *)v {
        MSGSTART("Model:-(void)setObjectsOwnedOnlyByModels:(ModelOwnedObjectSet*)v")

        /*i-905*/ if (objectsOwnedOnlyByModels == v) return;

        /*i-900*/ {
            objectsOwnedOnlyByModels = (id)v;
        }
/*i-850*/ REMOVEOWNER(objectsOwnedOnlyByModels,self); ADDOWNER(v,self);
    }
    - (void)setTim:(NSTimer *)v {
        MSGSTART("Model:-(void)setTim:(NSTimer*)v")

        /*i-905*/ if (v_tim == v) return;

        /*i-900*/ {
            v_tim = (id)v;
        }
    }
    - (void)setWaitTimer:(NSTimer *)v {
        MSGSTART("Model:-(void)setWaitTimer:(NSTimer*)v")

        /*i-905*/ if (v_waitTimer == v) return;

        /*i-900*/ {
            v_waitTimer = (id)v;
        }
    }
    - (void)startOfAutoreleasePool {
        MSGSTART("Model:-(void)startOfAutoreleasePool")

        for (NSObject<RefCountedObject> *o in objectsOwnedOnlyByModels) {
            o.noMOForNextRetain = YES;
        }
        NSMutableSet *s = [objectsOwnedOnlyByModels getAndClear];
        for (NSObject<RefCountedObject> *o in s) {
            [o retract];
        }
        [s removeAllObjects];
    }
    - (void)startWithInterval:(float)interval {
        MSGSTART("Model:-(void)startWithInterval:(float)interval")

        [self.tim invalidate];
        self.tim = [NSTimer scheduledTimerWithTimeInterval:interval target:self selector:@selector(tick) userInfo:nil repeats:YES];
    }
    - (void)stop {
        MSGSTART("Model:-(void)stop")

        [self.tim invalidate];
        self.tim = nil;
    }
    - (void)stopWaiting {
        MSGSTART("Model:-(void)stopWaiting")

        if (self.waitTimer)
            [self.waitTimer invalidate];
        @synchronized(self) {
            waiterEnabled = YES;
            _waiterGoAtSeconds = 0;
            self.waitTimer = nil;
        }
        [self cancelledWait];
    }
    - (void)tick {
        MSGSTART("Model:-(void)tick")

        /*i-100*/[self startOfAutoreleasePool];
        // @autoreleasepool {

        @synchronized(self) {
            if (inTick) return;

            inTick = YES;
        }

/*i-1*/ [self _commit];

/*i100*/  // }

        @synchronized(self) {
            inTick = NO;
        }
    }
    - (NSTimer *)tim {
        MSGSTART("Model:-(NSTimer*)tim")

        /*i-999*/ NSTimer * ret = v_tim;
        /*i999*/ return ret;
    }
    - (void)waited {
        MSGSTART("Model:-(void)waited")
    }
    - (void)waitForSeconds:(float)sec {
        MSGSTART("Model:-(void)waitForSeconds:(float)sec")

        double time = CFAbsoluteTimeGetCurrent();
        if (_waiterGoAtSeconds < time + sec) {
            if (self.waitTimer)
                [self.waitTimer invalidate];
            @synchronized(self) {
                waiterEnabled = NO; _waiterGoAtSeconds = time + sec;
            }
            self.waitTimer = [NSTimer scheduledTimerWithTimeInterval:sec target:self selector:@selector(_enableWaiter:) userInfo:nil repeats:NO];
        }
    }
    - (NSTimer *)waitTimer {
        MSGSTART("Model:-(NSTimer*)waitTimer")

        /*i-999*/ NSTimer * ret = v_waitTimer;
        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ModelOwnedObjectSet
    #define _WIClass_           ModelOwnedObjectSet__
    #define _className_         modelOwnedObjectSet
    #define _Class_             ModelOwnedObjectSet__
    @implementation ModelOwnedObjectSet

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize retrievesWeakValues = retrievesWeakValues;
    @synthesize set_count = set_count;
    @synthesize set_objects = set_objects;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassModelOwnedObjectSet {
        MSGSTART("ModelOwnedObjectSet:-(void)_startObjectOfClassModelOwnedObjectSet")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ insertsWeakObjectsByDefault = (YES);
        /*ivar*/ version = (1);

        /*i0*/ self.delegateForSet = self;
    }
    - (NSMutableSet *)__mutableSet {
        MSGSTART("ModelOwnedObjectSet:-(NSMutableSet*)__mutableSet")

        /*i-999*/ NSMutableSet * ret = __mutableSet;
        /*i999*/ return ret;
    }
    - (NSSet *)__set {
        MSGSTART("ModelOwnedObjectSet:-(NSSet*)__set")

        /*i-999*/ NSSet * ret = __set;
        /*i999*/ return ret;
    }
    - (bool)_addObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(bool)_addObject:(id)object")

        bool weak = insertsWeakObjectsByDefault;
        if ( (![__set containsObject:object]) && [self shouldAddObject:object makeWeak:weak] ) {
            [self willAddObject:object];
            [__mutableSet addObject:(weak ? [object weakSelf] : [object strongSelf])];
            if (weak) weakObjectCount++;
            [self didAddObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("ModelOwnedObjectSet:-(bool)_addObjectsFromArray:(NSArray*)array")

        bool ret = NO;
        for (NSObject *object in array) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("ModelOwnedObjectSet:-(bool)_filterUsingPredicate:(NSPredicate *)predicate")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_intersectSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(bool)_intersectSet:(NSSet*)set")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![set containsObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_minusSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(bool)_minusSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _removeObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("ModelOwnedObjectSet:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSSet *was = [__set copy];
        for (NSObject *object in was) {
            [self willRemoveObject:object];
        }
        weakObjectCount = 0;
        [__mutableSet removeAllObjects];
        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(bool)_removeObject:(id)object")

        if ([__set containsObject:object]) {
            [self willRemoveObject:object];
            if ([object isWeakSelf]) --weakObjectCount;
            [__mutableSet removeObject:object];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_setSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(bool)_setSet:(NSSet*)set")

        bool ret = [self _intersectSet:set];
        if ([self _unionSet:set]) ret = YES;
        return ret;
    }
    - (bool)_unionSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(bool)_unionSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("ModelOwnedObjectSet:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(void)addObject:(id)object")

        if ([self _addObject:object]) [self stateOK];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("ModelOwnedObjectSet:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("ModelOwnedObjectSet:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__set addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (NSArray *)allObjects {
        MSGSTART("ModelOwnedObjectSet:-(NSArray*)allObjects")
        return [__set allObjects];
    }
    - (id)anyObject {
        MSGSTART("ModelOwnedObjectSet:-(id)anyObject")
        return [[__set anyObject] selfWithWeakness:retrievesWeakValues];
    }
    - (constchar *)cdescription {
        MSGSTART("ModelOwnedObjectSet:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("ModelOwnedObjectSet:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(BOOL)containsObject:(id)object")
        return [__set containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("ModelOwnedObjectSet:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (Unsigned)count {
        MSGSTART("ModelOwnedObjectSet:-(Unsigned)count")
        return [__set count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("ModelOwnedObjectSet:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__set countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("ModelOwnedObjectSet:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __set) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("ModelOwnedObjectSet:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ setDelegate = nil;

        __mutableSet = nil;

        __set = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("ModelOwnedObjectSet:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("ModelOwnedObjectSet:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("ModelOwnedObjectSet:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__set description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("ModelOwnedObjectSet:-(NSString*)descriptionWithLocale:(id)locale")
        return [__set descriptionWithLocale:locale];
    }
    - (void)didAddObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(void)didAddObject:(id)object")


        /*i100*/[setDelegate didAddObject : object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("ModelOwnedObjectSet:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("ModelOwnedObjectSet:-(void)encodeWithCoder:(NSCoder*)coder")

        [__set encodeWithCoder : coder];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("ModelOwnedObjectSet:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("ModelOwnedObjectSet:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("ModelOwnedObjectSet:-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate")
        return [__set filteredSetUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("ModelOwnedObjectSet:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        if ([self _filterUsingPredicate:predicate]) [self stateOK];
    }
    - (NSMutableSet *)getAndClear {
        MSGSTART("ModelOwnedObjectSet:-(NSMutableSet*)getAndClear")

        NSMutableSet * ret = __mutableSet;
        for (id o in ret) {
            [self willRemoveObject:o];
        }
        __set = __mutableSet = [[NSMutableSet alloc] init];
        for (id o in ret) {
            [self didRemoveObject:o];
        }
        return ret;
    }
    - (Unsigned)hash {
        MSGSTART("ModelOwnedObjectSet:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (ModelOwnedObjectSet *)init {
        MSGSTART("ModelOwnedObjectSet:-(ModelOwnedObjectSet*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] init];

        /*i11*/ [self _startObjectOfClassModelOwnedObjectSet];

/*i10001*/ return self;
    }
    - (ModelOwnedObjectSet *)initWithArray:(NSArray *)array {
        MSGSTART("ModelOwnedObjectSet:-(ModelOwnedObjectSet*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithArray:array];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelOwnedObjectSet];

/*i10001*/ return self;
    }
    - (ModelOwnedObjectSet *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("ModelOwnedObjectSet:-(ModelOwnedObjectSet*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassModelOwnedObjectSet];

/*i10001*/ return self;
    }
    - (ModelOwnedObjectSet *)initWithCoder:(NSCoder *)coder {
        MSGSTART("ModelOwnedObjectSet:-(ModelOwnedObjectSet*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelOwnedObjectSet];

/*i10001*/ return self;
    }
    - (ModelOwnedObjectSet *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("ModelOwnedObjectSet:-(ModelOwnedObjectSet*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelOwnedObjectSet];

/*i10001*/ return self;
    }
    - (ModelOwnedObjectSet *)initWithSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(ModelOwnedObjectSet*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = (insertsWeakObjectsByDefault ? set.weakMutableCopy : [[NSMutableSet alloc] initWithSet:set]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelOwnedObjectSet];

/*i10001*/ return self;
    }
    - (ModelOwnedObjectSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy {
        MSGSTART("ModelOwnedObjectSet:-(ModelOwnedObjectSet*)initWithSet:(NSSet*)set copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithSet:set copyItems:copy];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassModelOwnedObjectSet];

/*i10001*/ return self;
    }
    - (void)intersectSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(void)intersectSet:(NSSet*)set")

        if ([self _intersectSet:set]) [self stateOK];
    }
    - (BOOL)intersectsSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(BOOL)intersectsSet:(NSSet*)set")
        return [__set intersectsSet:set];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("ModelOwnedObjectSet:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(BOOL)isEqualToSet:(NSSet*)set")
        return [__set isEqualToSet:set];
    }
    - (BOOL)isSubsetOfSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(BOOL)isSubsetOfSet:(NSSet*)set")
        return [__set isSubsetOfSet:set];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("ModelOwnedObjectSet:-(void)makeObjectsPerformSelector:(SEL)selector")
        [__set makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")
        [__set makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)member:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(id)member:(id)object")
        return [__set member:object];
    }
    - (void)minusSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(void)minusSet:(NSSet*)set")

        if ([self _minusSet:set]) [self stateOK];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("ModelOwnedObjectSet:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("ModelOwnedObjectSet:-(NSEnumerator*)objectEnumerator")
        return [__set objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("ModelOwnedObjectSet:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("ModelOwnedObjectSet:-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsPassingTest:predicate];
    }
    - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("ModelOwnedObjectSet:-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsWithOptions:opts passingTest:predicate];
    }
    - (void)removeAllObjects {
        MSGSTART("ModelOwnedObjectSet:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("ModelOwnedObjectSet:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("ModelOwnedObjectSet:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(void)removeObject:(id)object")

        if ([self _removeObject:object]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("ModelOwnedObjectSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__set removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("ModelOwnedObjectSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__set removeObserver : observer forKeyPath : keyPath context : context];
    }
    + (ModelOwnedObjectSet *)set {
        MSGSTART("ModelOwnedObjectSet:+(ModelOwnedObjectSet*)set")
        return [[ModelOwnedObjectSet alloc] init];
    }
    - (NSSet *)setByAddingObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(NSSet*)setByAddingObject:(id)object")
        return [__set setByAddingObject:object];
    }
    - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("ModelOwnedObjectSet:-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array")
        return [__set setByAddingObjectsFromArray:array];
    }
    - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set")
        return [__set setByAddingObjectsFromSet:set];
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("ModelOwnedObjectSet:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("ModelOwnedObjectSet:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(void)setSet:(NSSet*)set")

        if ([self _setSet:set]) [self stateOK];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("ModelOwnedObjectSet:-(void)setValue:(id)value forKey:(NSString *)key")
        [__set setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("ModelOwnedObjectSet:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setSet:__set.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setSet:__set.asStrong];
                break;
        }
    }
    + (ModelOwnedObjectSet *)setWithArray:(NSArray *)array {
        MSGSTART("ModelOwnedObjectSet:+(ModelOwnedObjectSet*)setWithArray:(NSArray*)array")
        return [[ModelOwnedObjectSet alloc] initWithArray:array];
    }
    + (id)setWithCapacity:(Unsigned)numItems {
        MSGSTART("ModelOwnedObjectSet:+(id)setWithCapacity:(Unsigned)numItems")

        return [[ModelOwnedObjectSet alloc] initWithCapacity:numItems];
    }
    + (ModelOwnedObjectSet *)setWithObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:+(ModelOwnedObjectSet*)setWithObject:(id)object")
        return [[ModelOwnedObjectSet alloc] initWithObjects:&object count:1];
    }
    + (ModelOwnedObjectSet *)setWithSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:+(ModelOwnedObjectSet*)setWithSet:(NSSet*)set")
        return [[ModelOwnedObjectSet alloc] initWithSet:set];
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("ModelOwnedObjectSet:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("ModelOwnedObjectSet:-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors")
        return [__set sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (void)stateOK {
        MSGSTART("ModelOwnedObjectSet:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ set_count = 0;
        for (id o in __set) {
            set_objects.ids[set_count++] = (__bridge void *)o;
            if (set_count == 100) break;
        }
        memset( set_objects.ids + set_count,0,sizeof(set_objects.ids[0]) * (100 - set_count) );
        set_count = __set.count;
    }
    - (void)unionSet:(NSSet *)set {
        MSGSTART("ModelOwnedObjectSet:-(void)unionSet:(NSSet*)set")

        if ([self _unionSet:set]) [self stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("ModelOwnedObjectSet:-(id)valueForKey:(NSString*)key")
        return [__set valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("ModelOwnedObjectSet:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(void)willAddObject:(id)object")


        /*i100*/[setDelegate willAddObject : object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("ModelOwnedObjectSet:-(void)willRemoveObject:(id)object")


        /*i100*/[setDelegate willRemoveObject : object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: s





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         SinkCommitterArrayDelegate
    #define _WIClass_           SinkCommitterArrayDelegate__
    #define _className_         sinkCommitterArrayDelegate
    #define _Class_             SinkCommitterArrayDelegate__
    @implementation SinkCommitterArrayDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassSinkCommitterArrayDelegate {
        MSGSTART("SinkCommitterArrayDelegate:-(void)_startObjectOfClassSinkCommitterArrayDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("SinkCommitterArrayDelegate:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)allObjectsMoved {
        MSGSTART("SinkCommitterArrayDelegate:-(void)allObjectsMoved")

        [self.owner markDirty];



        /*i100*/ [arrayDelegate allObjectsMoved];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("SinkCommitterArrayDelegate:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("SinkCommitterArrayDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("SinkCommitterArrayDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("SinkCommitterArrayDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ owner = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("SinkCommitterArrayDelegate:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("SinkCommitterArrayDelegate:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("SinkCommitterArrayDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("SinkCommitterArrayDelegate:-(void)didAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate didAddObject : object withIndex : index];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("SinkCommitterArrayDelegate:-(void)didRemoveObject:(id)object")

        [self.owner markDirty];
        if ([object conformsToProtocol:@protocol(Commitable)])
            if (![delegateForArray containsObject:object])
                [self.owner removeSinkCommitter:(NSObject < Commitable > *)object];



        /*i100*/ [arrayDelegate didRemoveObject:object];
    }
    - (void)die {
        MSGSTART("SinkCommitterArrayDelegate:-(void)die")

        /*i900*/}
    - (SinkCommitterArrayDelegate *)initWithOwner:(NSObject<Commitable> *)aowner {
        MSGSTART("SinkCommitterArrayDelegate:-(SinkCommitterArrayDelegate*)initWithOwner:(NSObject<Commitable>*)aowner")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ owner = aowner;

        /*i11*/ [self _startObjectOfClassSinkCommitterArrayDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("SinkCommitterArrayDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("SinkCommitterArrayDelegate:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")

        [self.owner markDirty];



        /*i100*/ [arrayDelegate objectsMovedFromRange:fromRange toLocation:toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("SinkCommitterArrayDelegate:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")

        [self.owner markDirty];



        /*i100*/ [arrayDelegate objectsSwappedWithIndex:fromIndex andIndex:toIndex];
    }
    - (NSObject<Commitable> *)owner {
        MSGSTART("SinkCommitterArrayDelegate:-(NSObject<Commitable>*)owner")

        /*i-999*/ NSObject<Commitable> *ret = owner;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("SinkCommitterArrayDelegate:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("SinkCommitterArrayDelegate:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("SinkCommitterArrayDelegate:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("SinkCommitterArrayDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("SinkCommitterArrayDelegate:-(void)stateOK")


        /*i100*/[arrayDelegate stateOK];
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("SinkCommitterArrayDelegate:-(void)willAddObject:(id)object withIndex:(Unsigned)index")

        [self.owner markDirty];
        if ([object conformsToProtocol:@protocol(Commitable)])
            if (![delegateForArray containsObject:object])
                [self.owner addSinkCommitter:(NSObject < Commitable > *)object];



        /*i100*/ [arrayDelegate willAddObject:object withIndex:index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("SinkCommitterArrayDelegate:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")


        /*i100*/[arrayDelegate willRemoveObject : object fromIndex : index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("SinkCommitterArrayDelegate:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("SinkCommitterArrayDelegate:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("SinkCommitterArrayDelegate:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         SinkCommitterSetDelegate
    #define _WIClass_           SinkCommitterSetDelegate__
    #define _className_         sinkCommitterSetDelegate
    #define _Class_             SinkCommitterSetDelegate__
    @implementation SinkCommitterSetDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassSinkCommitterSetDelegate {
        MSGSTART("SinkCommitterSetDelegate:-(void)_startObjectOfClassSinkCommitterSetDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("SinkCommitterSetDelegate:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("SinkCommitterSetDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("SinkCommitterSetDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("SinkCommitterSetDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ owner = nil;

        setDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("SinkCommitterSetDelegate:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("SinkCommitterSetDelegate:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("SinkCommitterSetDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object {
        MSGSTART("SinkCommitterSetDelegate:-(void)didAddObject:(id)object")

        if ([object conformsToProtocol:@protocol(Commitable)]) {
            [self.owner markDirty];
            [self.owner addSinkCommitter:(NSObject < Commitable > *)object];
        }



        /*i100*/ [setDelegate didAddObject:object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("SinkCommitterSetDelegate:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("SinkCommitterSetDelegate:-(void)die")

        /*i900*/}
    - (SinkCommitterSetDelegate *)initWithOwner:(NSObject<Commitable> *)aowner {
        MSGSTART("SinkCommitterSetDelegate:-(SinkCommitterSetDelegate*)initWithOwner:(NSObject<Commitable>*)aowner")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ owner = aowner;

        /*i11*/ [self _startObjectOfClassSinkCommitterSetDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("SinkCommitterSetDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSObject<Commitable> *)owner {
        MSGSTART("SinkCommitterSetDelegate:-(NSObject<Commitable>*)owner")

        /*i-999*/ NSObject<Commitable> *ret = owner;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("SinkCommitterSetDelegate:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("SinkCommitterSetDelegate:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("SinkCommitterSetDelegate:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("SinkCommitterSetDelegate:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("SinkCommitterSetDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)willAddObject:(id)object {
        MSGSTART("SinkCommitterSetDelegate:-(void)willAddObject:(id)object")


        /*i100*/[setDelegate willAddObject : object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("SinkCommitterSetDelegate:-(void)willRemoveObject:(id)object")

        if ([object conformsToProtocol:@protocol(Commitable)]) {
            [self.owner markDirty];
            [self.owner removeSinkCommitter:(NSObject < Commitable > *)object];
        }



        /*i100*/ [setDelegate willRemoveObject:object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         SourceCommitterArrayDelegate
    #define _WIClass_           SourceCommitterArrayDelegate__
    #define _className_         sourceCommitterArrayDelegate
    #define _Class_             SourceCommitterArrayDelegate__
    @implementation SourceCommitterArrayDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassSourceCommitterArrayDelegate {
        MSGSTART("SourceCommitterArrayDelegate:-(void)_startObjectOfClassSourceCommitterArrayDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("SourceCommitterArrayDelegate:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)allObjectsMoved {
        MSGSTART("SourceCommitterArrayDelegate:-(void)allObjectsMoved")

        [self.owner markDirty];



        /*i100*/ [arrayDelegate allObjectsMoved];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("SourceCommitterArrayDelegate:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("SourceCommitterArrayDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("SourceCommitterArrayDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("SourceCommitterArrayDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ owner = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("SourceCommitterArrayDelegate:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("SourceCommitterArrayDelegate:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("SourceCommitterArrayDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("SourceCommitterArrayDelegate:-(void)didAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate didAddObject : object withIndex : index];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("SourceCommitterArrayDelegate:-(void)didRemoveObject:(id)object")

        [self.owner markDirty];
        if ([object conformsToProtocol:@protocol(Commitable)])
            if (![delegateForArray containsObject:object])
                [self.owner removeSourceCommitter:(NSObject < Commitable > *)object];



        /*i100*/ [arrayDelegate didRemoveObject:object];
    }
    - (void)die {
        MSGSTART("SourceCommitterArrayDelegate:-(void)die")

        /*i900*/}
    - (SourceCommitterArrayDelegate *)initWithOwner:(NSObject<Commitable> *)aowner {
        MSGSTART("SourceCommitterArrayDelegate:-(SourceCommitterArrayDelegate*)initWithOwner:(NSObject<Commitable>*)aowner")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ owner = aowner;

        /*i11*/ [self _startObjectOfClassSourceCommitterArrayDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("SourceCommitterArrayDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("SourceCommitterArrayDelegate:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")

        [self.owner markDirty];



        /*i100*/ [arrayDelegate objectsMovedFromRange:fromRange toLocation:toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("SourceCommitterArrayDelegate:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")

        [self.owner markDirty];



        /*i100*/ [arrayDelegate objectsSwappedWithIndex:fromIndex andIndex:toIndex];
    }
    - (NSObject<Commitable> *)owner {
        MSGSTART("SourceCommitterArrayDelegate:-(NSObject<Commitable>*)owner")

        /*i-999*/ NSObject<Commitable> *ret = owner;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("SourceCommitterArrayDelegate:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("SourceCommitterArrayDelegate:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("SourceCommitterArrayDelegate:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("SourceCommitterArrayDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("SourceCommitterArrayDelegate:-(void)stateOK")


        /*i100*/[arrayDelegate stateOK];
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("SourceCommitterArrayDelegate:-(void)willAddObject:(id)object withIndex:(Unsigned)index")

        [self.owner markDirty];
        if ([object conformsToProtocol:@protocol(Commitable)])
            if (![delegateForArray containsObject:object])
                [self.owner addSourceCommitter:(NSObject < Commitable > *)object];



        /*i100*/ [arrayDelegate willAddObject:object withIndex:index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("SourceCommitterArrayDelegate:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")


        /*i100*/[arrayDelegate willRemoveObject : object fromIndex : index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("SourceCommitterArrayDelegate:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("SourceCommitterArrayDelegate:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("SourceCommitterArrayDelegate:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         SourceCommitterSetDelegate
    #define _WIClass_           SourceCommitterSetDelegate__
    #define _className_         sourceCommitterSetDelegate
    #define _Class_             SourceCommitterSetDelegate__
    @implementation SourceCommitterSetDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassSourceCommitterSetDelegate {
        MSGSTART("SourceCommitterSetDelegate:-(void)_startObjectOfClassSourceCommitterSetDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("SourceCommitterSetDelegate:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("SourceCommitterSetDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("SourceCommitterSetDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("SourceCommitterSetDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ owner = nil;

        setDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("SourceCommitterSetDelegate:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("SourceCommitterSetDelegate:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("SourceCommitterSetDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object {
        MSGSTART("SourceCommitterSetDelegate:-(void)didAddObject:(id)object")

        if ([object conformsToProtocol:@protocol(Commitable)]) {
            [self.owner markDirty];
            [self.owner addSourceCommitter:(NSObject < Commitable > *)object];
        }



        /*i100*/ [setDelegate didAddObject:object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("SourceCommitterSetDelegate:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("SourceCommitterSetDelegate:-(void)die")

        /*i900*/}
    - (SourceCommitterSetDelegate *)initWithOwner:(NSObject<Commitable> *)aowner {
        MSGSTART("SourceCommitterSetDelegate:-(SourceCommitterSetDelegate*)initWithOwner:(NSObject<Commitable>*)aowner")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ owner = aowner;

        /*i11*/ [self _startObjectOfClassSourceCommitterSetDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("SourceCommitterSetDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSObject<Commitable> *)owner {
        MSGSTART("SourceCommitterSetDelegate:-(NSObject<Commitable>*)owner")

        /*i-999*/ NSObject<Commitable> *ret = owner;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("SourceCommitterSetDelegate:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("SourceCommitterSetDelegate:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("SourceCommitterSetDelegate:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("SourceCommitterSetDelegate:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("SourceCommitterSetDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)willAddObject:(id)object {
        MSGSTART("SourceCommitterSetDelegate:-(void)willAddObject:(id)object")


        /*i100*/[setDelegate willAddObject : object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("SourceCommitterSetDelegate:-(void)willRemoveObject:(id)object")

        if ([object conformsToProtocol:@protocol(Commitable)]) {
            [self.owner markDirty];
            [self.owner removeSourceCommitter:(NSObject < Commitable > *)object];
        }



        /*i100*/ [setDelegate willRemoveObject:object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
