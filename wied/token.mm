// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 1 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D0





        @interface WReaderToken : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WReaderToken; @protected
            Int bracketCount;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSString *v_str;
            char type;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Int bracketCount;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite) NSString *str;
        @property (nonatomic,readwrite) char type;
        - (void)_startObjectOfClassWReaderToken;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (WReaderToken *)initWithString:(NSString *)astr bracketCount:(Int)bc type:(char)atype;
        - (NSMutableString *)objectName;
        - (void)setStr:(NSString *)v;
        - (NSString *)str;

        @end
    #endif // INCLUDE_IFACE_D0

    #ifdef INCLUDE_IFACE_D1





        @interface WReader : NSObject<BaseObject, ClassObject, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WReader; @protected
            NSString *v__fileName;
            NSString *v__fileString;
            bool debugAutorelease;
            bool isZombie;
            NSArray *lines;
            LL objectIDInClass;
            LL objectIDInTotal;
            Int pos;
            MutableDictionary *replaces;
            WReaderTokenizer *tokenizer;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readwrite) NSString *_fileName;
        @property (strong,nonatomic,readwrite) NSString *_fileString;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readonly) WReaderToken *currentToken;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) NSString *fileName;
        @property (nonatomic,readwrite) NSString *fileString;
        @property (nonatomic,readonly) bool isZombie;
        @property (strong,nonatomic,readonly) NSArray *lines;
        @property (nonatomic,readonly) NSString *localString;
        @property (nonatomic,readonly) WReaderToken *nextToken;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) Int pos;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) MutableDictionary *replaces;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) WReaderTokenizer *tokenizer;
        - (void)_startObjectOfClassWReader;
        - (NSString *)_fileName;
        - (NSString *)_fileString;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (WReaderToken *)currentToken;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (NSString *)fileName;
        - (NSString *)fileString;
        + (WReader *)get;
        - (WReader *)init;
        - (NSArray *)lines;
        - (NSString *)localString;
        - (WReaderToken *)nextToken;
        - (NSMutableString *)objectName;
        - (MutableDictionary *)replaces;
        - (void)set_fileName:(NSString *)v;
        - (void)set_fileString:(NSString *)v;
        - (void)setFileName:(NSString *)v;
        - (void)setFileString:(NSString *)v;
        - (void)setReplaces:(MutableDictionary *)v;
        - (void)setTokenizer:(WReaderTokenizer *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        - (NSString *)stringWithTokensInRange:(NSRange)r;
        - (WReaderTokenizer *)tokenizer;

        @end





        @interface WReaderTokenizer : NSObject<BaseObject, ClassObject, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WReaderTokenizer; @protected
            NSString *v__str;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSMutableArray *tokens;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readwrite) NSString *_str;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) NSString *str;
        @property (strong,nonatomic,readonly) NSMutableArray *tokens;
        @property (nonatomic,readonly) NSString *tokenStr;
        - (void)_startObjectOfClassWReaderTokenizer;
        - (NSString *)_str;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        + (WReaderTokenizer *)get;
        - (WReaderTokenizer *)init;
        - (NSMutableString *)objectName;
        - (void)set_str:(NSString *)v;
        - (void)setStr:(NSString *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        - (NSString *)str;
        - (NSMutableArray *)tokens;
        - (NSString *)tokenStr;

        @end
    #endif // INCLUDE_IFACE_D1

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: w





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WReader
    #define _WIClass_           WReader__
    #define _className_         wReader
    #define _Class_             WReader__
    @implementation WReader

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize pos = pos;
    - (void)_startObjectOfClassWReader {
        MSGSTART("WReader:-(void)_startObjectOfClassWReader")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v__fileString = (@"");
        /*ivar*/ v__fileName = (@"");
        /*ivar*/ tokenizer = ([[WReaderTokenizer alloc] init]);  ADDOWNER(tokenizer,self);
        /*ivar*/ lines = ([[NSArray alloc] init]);
        /*ivar*/ replaces = ([[MutableDictionary alloc] init]);  ADDOWNER(replaces,self);

        /*i0*/ pos = -1;
    }
    - (NSString *)_fileName {
        MSGSTART("WReader:-(NSString*)_fileName")

        /*i-999*/ NSString * ret = v__fileName;
        /*i999*/ return ret;
    }
    - (NSString *)_fileString {
        MSGSTART("WReader:-(NSString*)_fileString")

        /*i-999*/ NSString * ret = v__fileString;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("WReader:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WReader:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WReaderToken *)currentToken {
        MSGSTART("WReader:-(WReaderToken*)currentToken")

        if (pos < 0) pos = 0;
        if (pos >= tokenizer.tokens.count) return nil;

        return [tokenizer.tokens objectAtIndex:pos];
    }
    - (void)dealloc {
        MSGSTART("WReader:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ v__fileString = nil;

        v__fileName = nil;

        REMOVEOWNER(tokenizer,self); tokenizer = nil;

        lines = nil;

        REMOVEOWNER(replaces,self); replaces = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WReader:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WReader:-(void)die")

        /*i900*/}
    - (NSString *)fileName {
        MSGSTART("WReader:-(NSString*)fileName")
        return v__fileName;
    }
    - (NSString *)fileString {
        MSGSTART("WReader:-(NSString*)fileString")
        return v__fileString;
    }
    + (WReader *)get {
        MSGSTART("WReader:+(WReader*)get")
        return [[WReader alloc] init];
    }
    - (WReader *)init {
        MSGSTART("WReader:-(WReader*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWReader];

/*i10001*/ return self;
    }
    - (NSArray *)lines {
        MSGSTART("WReader:-(NSArray*)lines")

        /*i-999*/ NSArray * ret = lines;
        /*i999*/ return ret;
    }
    - (NSString *)localString {
        MSGSTART("WReader:-(NSString*)localString")

        NSMutableString * s = [NSMutableString string];
        Int range = 30;
        for (Int i = MAX(0,pos - range / 2); i <= MIN(tokenizer.tokens.count - 1,pos + (range + 1) / 2); i++) {
            if (i == pos) [s appendString:@">here>"];
            // [s appendFormat:@"(%c)%@",((WReaderToken*)[self.tokenizer.tokens objectAtIndex:i]).type,((WReaderToken*)[self.tokenizer.tokens objectAtIndex:i]).str];
            [s appendString:( (WReaderToken *)[tokenizer.tokens objectAtIndex:i] ).str];
            if (i == pos) [s appendString:@"<here<"];
        }
        return s;
    }
    - (WReaderToken *)nextToken {
        MSGSTART("WReader:-(WReaderToken*)nextToken")

        if (pos >= tokenizer.tokens.count) return nil;

        pos++;
        return self.currentToken;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WReader:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (MutableDictionary *)replaces {
        MSGSTART("WReader:-(MutableDictionary*)replaces")

        /*i-999*/ MutableDictionary * ret = replaces;
        /*i999*/ return ret;
    }
    - (void)set_fileName:(NSString *)v {
        MSGSTART("WReader:-(void)set_fileName:(NSString*)v")

        /*i-905*/ if (v__fileName == v) return;

        /*i-900*/ {
            v__fileName = (id)v;
        }
    }
    - (void)set_fileString:(NSString *)v {
        MSGSTART("WReader:-(void)set_fileString:(NSString*)v")

        /*i-905*/ if (v__fileString == v) return;

        /*i-900*/ {
            v__fileString = (id)v;
        }
    }
    - (void)setFileName:(NSString *)v {
        MSGSTART("WReader:-(void)setFileName:(NSString*)v")

        NSError * err = nil;
        self._fileName = v;
        NSString *s = [NSString stringWithContentsOfFile:v encoding:NSUTF8StringEncoding error:&err];
        self.fileString = s;
    }
    - (void)setFileString:(NSString *)v {
        MSGSTART("WReader:-(void)setFileString:(NSString*)v")

        self._fileString = [(v ? v.copy : @"")stringByReplacingOccurrencesOfString : @"\r" withString : @""];
        for (NSString *from in replaces.allKeys) {
            NSString *to = [replaces objectForKey:from];
            self._fileString = [v__fileString stringByReplacingOccurrencesOfString:from withString:to];
        }
        lines = [v componentsSeparatedByString:@"\n"];
        self.tokenizer.str = v;

        pos = -1;
    }
    - (void)setReplaces:(MutableDictionary *)v {
        MSGSTART("WReader:-(void)setReplaces:(MutableDictionary*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WReader) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(replaces=\"blah\") to set the property)");

        /*i-905*/ if (replaces == v) return;

        /*i-900*/ {
            replaces = (id)v;
        }
/*i-850*/ REMOVEOWNER(replaces,self); ADDOWNER(v,self);
    }
    - (void)setTokenizer:(WReaderTokenizer *)v {
        MSGSTART("WReader:-(void)setTokenizer:(WReaderTokenizer*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WReader) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(tokenizer=\"blah\") to set the property)");

        /*i-905*/ if (tokenizer == v) return;

        /*i-900*/ {
            tokenizer = (id)v;
        }
/*i-850*/ REMOVEOWNER(tokenizer,self); ADDOWNER(v,self);
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("WReader:-(void)setWithDictionary:(NSDictionary*)d")
    }
    - (NSString *)stringWithTokensInRange:(NSRange)r {
        MSGSTART("WReader:-(NSString*)stringWithTokensInRange:(NSRange)r")

        NSMutableString * s = [NSMutableString string];
        for (Int i = MAX(0,(int)r.location); i < MIN(tokenizer.tokens.count,r.location + r.length); i++) {
            [s appendString:( (WReaderToken *)[tokenizer.tokens objectAtIndex:i] ).str];
        }
        return s;
    }
    - (WReaderTokenizer *)tokenizer {
        MSGSTART("WReader:-(WReaderTokenizer*)tokenizer")

        /*i-999*/ WReaderTokenizer * ret = tokenizer;
        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WReaderToken
    #define _WIClass_           WReaderToken__
    #define _className_         wReaderToken
    #define _Class_             WReaderToken__
    @implementation WReaderToken

    @synthesize __owner_context = __owner_context;
    @synthesize bracketCount = bracketCount;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize type = type;
    - (void)_startObjectOfClassWReaderToken {
        MSGSTART("WReaderToken:-(void)_startObjectOfClassWReaderToken")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (constchar *)cdescription {
        MSGSTART("WReaderToken:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WReaderToken:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("WReaderToken:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ v_str = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WReaderToken:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [NSString stringWithFormat:@"<Token:%c:%d:%@>",type,(int)bracketCount,self.str];


        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WReaderToken:-(void)die")

        /*i900*/}
    - (WReaderToken *)initWithString:(NSString *)astr bracketCount:(Int)bc type:(char)atype {
        MSGSTART("WReaderToken:-(WReaderToken*)initWithString:(NSString*)astr bracketCount:(Int)bc type:(char)atype")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ self.str = astr.copy;
        bracketCount = bc;
        type = atype;

        /*i11*/ [self _startObjectOfClassWReaderToken];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WReaderToken:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)setStr:(NSString *)v {
        MSGSTART("WReaderToken:-(void)setStr:(NSString*)v")

        /*i-905*/ if (v_str == v) return;

        /*i-900*/ {
            v_str = (id)v;
        }
    }
    - (NSString *)str {
        MSGSTART("WReaderToken:-(NSString*)str")

        /*i-999*/ NSString * ret = v_str;
        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WReaderTokenizer
    #define _WIClass_           WReaderTokenizer__
    #define _className_         wReaderTokenizer
    #define _Class_             WReaderTokenizer__
    @implementation WReaderTokenizer

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWReaderTokenizer {
        MSGSTART("WReaderTokenizer:-(void)_startObjectOfClassWReaderTokenizer")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v__str = (@"");
        /*ivar*/ tokens = ([[MutableArray alloc] init]);

        /*i0*/}
    - (NSString *)_str {
        MSGSTART("WReaderTokenizer:-(NSString*)_str")

        /*i-999*/ NSString * ret = v__str;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("WReaderTokenizer:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WReaderTokenizer:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("WReaderTokenizer:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ v__str = nil;

        tokens = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WReaderTokenizer:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WReaderTokenizer:-(void)die")

        /*i900*/}
    + (WReaderTokenizer *)get {
        MSGSTART("WReaderTokenizer:+(WReaderTokenizer*)get")
        return [[WReaderTokenizer alloc] init];
    }
    - (WReaderTokenizer *)init {
        MSGSTART("WReaderTokenizer:-(WReaderTokenizer*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassWReaderTokenizer];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WReaderTokenizer:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)set_str:(NSString *)v {
        MSGSTART("WReaderTokenizer:-(void)set_str:(NSString*)v")

        /*i-905*/ if (v__str == v) return;

        /*i-900*/ {
            v__str = (id)v;
        }
    }
    - (void)setStr:(NSString *)v {
        MSGSTART("WReaderTokenizer:-(void)setStr:(NSString*)v")

        self._str = (v ? v.copy : @"");
        const char *mat[] = {
            "     r  w  n  .  +  -  *  /  \\  Q  q  _  ? ",
            "z zz rr ww nn .o +o -o zo co zo qs ss ww zo",
            "r rr rr ww nn .o +o -o zo co zo qs ss ww zo",
            "w zz rr ww ww .o +o -o zo co zo qs ss ww zo",
            "n zz rr ww nn Nn zo zo zo co zo qs ss ww zo",
            "N zz rr ww Nn zo zo zo zo co zo qs ss ww zo",
            ". zz rr ww n< .o +o -o zo co zo qs ss ww zo",
            "+ zz rr ww n< .o +o -o zo co zo qs ss ww zo",
            "- zz rr ww n< .o +o -o zo co zo qs ss ww zo",
            "s ss ss ss ss ss ss ss ss ss Ss ss zs ss ss",
            "S ss ss ss ss ss ss ss ss ss ss ss ss ss ss",
            "q qs qs qs qs qs qs qs qs qs Qs zs qs qs qs",
            "Q qs qs qs qs qs qs qs qs qs qs qs qs qs qs",
            "c zz rr ww nn .o +o -o b< l< zo qs ss ww zo",
            "C bc bc bc bc bc bc bc bc Cc bc bc bc bc bc",
            "b bc bc bc bc bc bc bc Bc bc bc bc bc bc bc",
            "B bc bc bc bc bc bc bc Bc zc bc bc bc bc bc",
            "l lc rr lc lc lc lc lc lc lc lc lc lc lc lc"
        };
        Int cols = 14;
        Int rows = 17;

        Int colForC[256];
        for (Int _c = 0; _c < 256; _c++) {
            Int c = ( ( (_c >= 'a') && (_c <= 'z') ) || ( (_c >= 'A') && (_c <= 'Z') ) ? 'w' :
                      ( (_c >= '0') && (_c <= '9') ? 'n' :
                        ( _c == '\"' ? 'Q' :
                                 ( _c == '\'' ? 'q' :
                                    (_c == '\n' ? 'r' : _c) ) ) ) );
            for (colForC[_c] = 0; (colForC[_c] < cols - 1) && (mat[0][2 + 3 * colForC[_c]] != c); colForC[_c]++) {
            }
        }

        Int rowForC[256];
        for (Int _c = 0; _c < 256; _c++) {
            for (rowForC[_c] = 0; (rowForC[_c] < rows - 1) && (mat[rowForC[_c] + 1][0] != _c); rowForC[_c]++) {
            }
            if (rowForC[_c] == rows) rowForC[_c] = -1;
        }

        char state = 'z';
        NSData *csd = [v dataUsingEncoding:NSASCIIStringEncoding allowLossyConversion:YES];
        const char *cs = (const char *)csd.bytes;

        NSMutableData *d = [NSMutableData dataWithLength:v.length];
        char *types = (char *)[d mutableBytes];

        Int ci = 0;
        while (ci < csd.length) {
            Int col = colForC[cs[ci]];
            Int row = rowForC[state];
            if (row < 0) {
                NSLog(@"Unknown state %c",state); break;
            }
            types[ci] = mat[row + 1][3 + 3 * col];
            state = mat[row + 1][2 + 3 * col];
            // printf("%c%c%c:%d:%d:%d ",cs[ci],types[ci],state,ci,col,row);
            if (types[ci] == '<') ci--;
            else if (types[ci] != '.') ci++;
        }


        Int typeWas = 0,bc = 0,indent = 0,_indent = 0;
        [self.tokens removeAllObjects];
        NSMutableString *s = [NSMutableString string];
        for (ci = 0; ci < v.length; ci++) {
            if (cs[ci] == '\n') {
                _indent = 0;
            }
            else if ( (_indent >= 0) && (cs[ci] == ' ') ) {
                _indent++;
            }
            else if (_indent >= 0) {
                indent = _indent; _indent = -1;
            }
            if ( (!ci) || ( (typeWas != 'o') && (types[ci] == typeWas) ) ) {
                typeWas = types[ci];
                [s appendFormat:@"%c",[v characterAtIndex:ci]];
            }
            else {
                if ([s isEqualToString:@"}"]) bc--;
                if ( (typeWas == 'c') && [s hasPrefix:@"/*"] && ( (s.length < 4) || ![s hasSuffix:@"*/"] ) ) [s appendString:@"*/"];
                [self.tokens addObject:[[WReaderToken alloc] initWithString:s bracketCount:bc + indent type:typeWas]];
                if ([s isEqualToString:@"{"]) bc++;
                [s setString:@""];
                [s appendFormat:@"%c",[v characterAtIndex:ci]];
                typeWas = types[ci];
            }
        }
        if (s.length) {
            if ([s isEqualToString:@"}"]) bc--;
            [self.tokens addObject:[[WReaderToken alloc] initWithString:s bracketCount:bc type:typeWas]];
            if ( (typeWas == 'c') && [s hasPrefix:@"//"] )
                [self.tokens addObject:[[WReaderToken alloc] initWithString:@"\n" bracketCount:bc type:'r']];
        }
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("WReaderTokenizer:-(void)setWithDictionary:(NSDictionary*)d")
    }
    - (NSString *)str {
        MSGSTART("WReaderTokenizer:-(NSString*)str")

        return v__str;
    }
    - (NSMutableArray *)tokens {
        MSGSTART("WReaderTokenizer:-(NSMutableArray*)tokens")

        /*i-999*/ NSMutableArray * ret = tokens;
        /*i999*/ return ret;
    }
    - (NSString *)tokenStr {
        MSGSTART("WReaderTokenizer:-(NSString*)tokenStr")

        NSMutableString * s = [NSMutableString string];
        for (WReaderToken *t in tokens) {
            [s appendFormat:@"%c:%d:\"%@\"\n",t.type,(int)t.bracketCount,t.str];
        }
        return s;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
