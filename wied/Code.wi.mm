// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 1 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D0





        @interface WIClass : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIClass; @protected
            EndpointS *v_ctxts;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            MutableDictionary *v_settings;
            EndpointS *v_subclazs;
            EndpointS *v_subprotocols;
            Endpoint1 *v_superclaz_endpoint;
            EndpointS *v_superprotocols;
            EndpointD *v_types;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *ctxts;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite) MutableDictionary *settings;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *subclazs;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *subprotocols;
        @property (nonatomic,readwrite) WIClass *superclaz;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *superclaz_endpoint;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *superprotocols;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *types;
        - (void)_startObjectOfClassWIClass;
        - (void)addCtxt:(WICtxt *)v;
        - (void)addSubclaz:(WIClass *)v;
        - (void)addSubprotocol:(WIClass *)v;
        - (void)addSuperprotocol:(WIClass *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (EndpointS *)ctxts;
        - (NSObject<LinkEndpoint> *)ctxtToEndpoint:(id)actxt;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (NSNumber *)isAcceptableCtxt:(id)actxt;
        - (NSNumber *)isAcceptableSubclaz:(id)asubclaz;
        - (NSNumber *)isAcceptableSubprotocol:(id)asubprotocol;
        - (NSNumber *)isAcceptableSuperclaz:(id)asuperclaz;
        - (NSNumber *)isAcceptableSuperprotocol:(id)asuperprotocol;
        - (NSNumber *)isAcceptableType:(id)atype;
        - (NSMutableString *)objectName;
        - (void)removeAllCtxts;
        - (void)removeAllSubclazs;
        - (void)removeAllSubprotocols;
        - (void)removeAllSuperprotocols;
        - (void)removeAllTypes;
        - (void)removeCtxt:(WICtxt *)v;
        - (void)removeSubclaz:(WIClass *)v;
        - (void)removeSubprotocol:(WIClass *)v;
        - (void)removeSuperprotocol:(WIClass *)v;
        - (void)removeTypeForKey:(id<NSCopying> )key;
        - (void)retract;
        - (void)setCtxts:(EndpointS *)v;
        - (void)setSettings:(MutableDictionary *)v;
        - (void)setSubclazs:(EndpointS *)v;
        - (void)setSubprotocols:(EndpointS *)v;
        - (void)setSuperclaz:(WIClass *)v;
        - (void)setSuperclaz_endpoint:(Endpoint1 *)v;
        - (void)setSuperprotocols:(EndpointS *)v;
        - (MutableDictionary *)settings;
        - (void)setType:(id)v forKey:(id<NSCopying> )key;
        - (void)setTypes:(EndpointD *)v;
        - (EndpointS *)subclazs;
        - (NSObject<LinkEndpoint> *)subclazToEndpoint:(id)asubclaz;
        - (EndpointS *)subprotocols;
        - (NSObject<LinkEndpoint> *)subprotocolToEndpoint:(id)asubprotocol;
        - (WIClass *)superclaz;
        - (Endpoint1 *)superclaz_endpoint;
        - (NSObject<LinkEndpoint> *)superclazToEndpoint:(id)asuperclaz;
        - (EndpointS *)superprotocols;
        - (NSObject<LinkEndpoint> *)superprotocolToEndpoint:(id)asuperprotocol;
        - (WIType *)typeForKey:(id<NSCopying> )key;
        - (EndpointD *)types;
        - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype;

        @end





        @interface WICtxt : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WICtxt; @protected
            Endpoint1 *v_claz_endpoint;
            bool debugAutorelease;
            Endpoint1 *v_file_endpoint;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            MutableDictionary *v_regexes;
            EndpointS *v_vars;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readwrite) WIClass *claz;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *claz_endpoint;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) WIFile *file;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *file_endpoint;
        @property (nonatomic,readwrite) NSIndexSet *indexesInFile;
        @property (nonatomic,readwrite) Unsigned indexInFile;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite) MutableDictionary *regexes;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *vars;
        - (void)_startObjectOfClassWICtxt;
        - (void)addVar:(WIVar *)v;
        - (constchar *)cdescription;
        - (WIClass *)claz;
        - (Endpoint1 *)claz_endpoint;
        - (NSObject<LinkEndpoint> *)clazToEndpoint:(id)aclaz;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (WIFile *)file;
        - (Endpoint1 *)file_endpoint;
        - (NSObject<LinkEndpoint> *)fileToEndpoint:(id)afile;
        - (NSIndexSet *)indexesInFile;
        - (Unsigned)indexInFile;
        - (NSNumber *)isAcceptableClaz:(id)aclaz;
        - (NSNumber *)isAcceptableFile:(id)afile;
        - (NSNumber *)isAcceptableVar:(id)avar;
        - (NSMutableString *)objectName;
        - (MutableDictionary *)regexes;
        - (void)removeAllVars;
        - (void)removeVar:(WIVar *)v;
        - (void)retract;
        - (void)setClaz:(WIClass *)v;
        - (void)setClaz_endpoint:(Endpoint1 *)v;
        - (void)setFile:(WIFile *)v;
        - (void)setFile_endpoint:(Endpoint1 *)v;
        - (void)setIndexesInFile:(NSIndexSet *)v;
        - (void)setIndexInFile:(Unsigned)v;
        - (void)setRegexes:(MutableDictionary *)v;
        - (void)setVars:(EndpointS *)v;
        - (EndpointS *)vars;
        - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar;

        @end





        @interface WIFile : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIFile; @protected
            EndpointA *v_ctxts;
            bool debugAutorelease;
            MutableArray *v_includes;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointA *ctxts;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite) MutableArray *includes;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        - (void)_startObjectOfClassWIFile;
        - (void)addCtxt:(WICtxt *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (WICtxt *)ctxtAtIndex:(Int)index;
        - (EndpointA *)ctxts;
        - (NSObject<LinkEndpoint> *)ctxtToEndpoint:(id)actxt;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (MutableArray *)includes;
        - (void)insertCtxt:(WICtxt *)v atIndex:(Int)index;
        - (NSNumber *)isAcceptableCtxt:(id)actxt;
        - (NSMutableString *)objectName;
        - (void)removeAllCtxts;
        - (void)removeCtxt:(WICtxt *)v;
        - (void)removeCtxtAtIndex:(Int)index;
        - (void)retract;
        - (void)setCtxts:(EndpointA *)v;
        - (void)setIncludes:(MutableArray *)v;

        @end





        @interface WIType : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIType; @protected
            Endpoint1 *v_claz_endpoint;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            EndpointS *v_vars;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readwrite) WIClass *claz;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *claz_endpoint;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) kid keyInClaz;
        @property (nonatomic,readwrite) NSSet *keysInClaz;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *vars;
        - (void)_startObjectOfClassWIType;
        - (void)addVar:(WIVar *)v;
        - (constchar *)cdescription;
        - (WIClass *)claz;
        - (Endpoint1 *)claz_endpoint;
        - (NSObject<LinkEndpoint> *)clazToEndpoint:(id)aclaz;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        - (NSNumber *)isAcceptableClaz:(id)aclaz;
        - (NSNumber *)isAcceptableVar:(id)avar;
        - (kid)keyInClaz;
        - (NSSet *)keysInClaz;
        - (NSMutableString *)objectName;
        - (void)removeAllVars;
        - (void)removeVar:(WIVar *)v;
        - (void)retract;
        - (void)setClaz:(WIClass *)v;
        - (void)setClaz_endpoint:(Endpoint1 *)v;
        - (void)setKeyInClaz:(kid)v;
        - (void)setKeysInClaz:(NSSet *)v;
        - (void)setVars:(EndpointS *)v;
        - (EndpointS *)vars;
        - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar;

        @end





        @interface WIVar : NSObject<Object, ClassObject> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WIVar; @protected
            EndpointA *v_args;
            NSString *v_bindingType;
            WIVar *v_boundTo;
            Endpoint1 *v_ctxt_endpoint;
            bool debugAutorelease;
            EndpointS *v_defaultValues;
            EndpointS *v_getters;
            bool isZombie;
            NSString *v_name;
            LL objectIDInClass;
            LL objectIDInTotal;
            EndpointD *v_setters;
            MutableDictionary *v_settings;
            Endpoint1 *v_type_endpoint;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointA *args;
        @property (strong,nonatomic,readwrite) NSString *bindingType;
        @property (strong,nonatomic,readwrite) WIVar *boundTo;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) WICtxt *ctxt;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *ctxt_endpoint;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *defaultValues;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *getters;
        @property (nonatomic,readonly) bool isZombie;
        @property (strong,nonatomic,readwrite) NSString *name;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointD *setters;
        @property (strong,nonatomic,readwrite) MutableDictionary *settings;
        @property (nonatomic,readwrite) WIType *type;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *type_endpoint;
        - (void)_startObjectOfClassWIVar;
        - (void)addArg:(WIVarArg *)v;
        - (void)addDefaultValue:(WIBody *)v;
        - (void)addGetter:(WIBody *)v;
        - (WIVarArg *)argAtIndex:(Int)index;
        - (EndpointA *)args;
        - (NSObject<LinkEndpoint> *)argToEndpoint:(id)aarg;
        - (NSString *)bindingType;
        - (WIVar *)boundTo;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (WICtxt *)ctxt;
        - (Endpoint1 *)ctxt_endpoint;
        - (NSObject<LinkEndpoint> *)ctxtToEndpoint:(id)actxt;
        - (void)dealloc;
        - (EndpointS *)defaultValues;
        - (NSObject<LinkEndpoint> *)defaultValueToEndpoint:(id)adefaultValue;
        - (NSString *)description;
        - (void)die;
        - (EndpointS *)getters;
        - (NSObject<LinkEndpoint> *)getterToEndpoint:(id)agetter;
        - (void)insertArg:(WIVarArg *)v atIndex:(Int)index;
        - (NSNumber *)isAcceptableArg:(id)aarg;
        - (NSNumber *)isAcceptableCtxt:(id)actxt;
        - (NSNumber *)isAcceptableDefaultValue:(id)adefaultValue;
        - (NSNumber *)isAcceptableGetter:(id)agetter;
        - (NSNumber *)isAcceptableSetter:(id)asetter;
        - (NSNumber *)isAcceptableType:(id)atype;
        - (NSString *)name;
        - (NSMutableString *)objectName;
        - (void)removeAllArgs;
        - (void)removeAllDefaultValues;
        - (void)removeAllGetters;
        - (void)removeAllSetters;
        - (void)removeArg:(WIVarArg *)v;
        - (void)removeArgAtIndex:(Int)index;
        - (void)removeDefaultValue:(WIBody *)v;
        - (void)removeGetter:(WIBody *)v;
        - (void)removeSetterForKey:(id<NSCopying> )key;
        - (void)retract;
        - (void)setArgs:(EndpointA *)v;
        - (void)setBindingType:(NSString *)v;
        - (void)setBoundTo:(WIVar *)v;
        - (void)setCtxt:(WICtxt *)v;
        - (void)setCtxt_endpoint:(Endpoint1 *)v;
        - (void)setDefaultValues:(EndpointS *)v;
        - (void)setGetters:(EndpointS *)v;
        - (void)setName:(NSString *)v;
        - (void)setSetter:(id)v forKey:(id<NSCopying> )key;
        - (void)setSetters:(EndpointD *)v;
        - (void)setSettings:(MutableDictionary *)v;
        - (WIBody *)setterForKey:(id<NSCopying> )key;
        - (EndpointD *)setters;
        - (NSObject<LinkEndpoint> *)setterToEndpoint:(id)asetter;
        - (MutableDictionary *)settings;
        - (void)setType:(WIType *)v;
        - (void)setType_endpoint:(Endpoint1 *)v;
        - (WIType *)type;
        - (Endpoint1 *)type_endpoint;
        - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype;

        @end
    #endif // INCLUDE_IFACE_D0

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: w





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIClass
    #define _WIClass_           WIClass__
    #define _className_         wIClass
    #define _Class_             WIClass__
    @implementation WIClass

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIClass {
        MSGSTART("WIClass:-(void)_startObjectOfClassWIClass")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-950*/ v_types = [[EndpointD alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableType:) otherEndObjectToEndpoint:@selector(typeToEndpoint:)];

        /*i-500*//*ivar*/ v_superclaz_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSuperclaz:) otherEndObjectToEndpoint:@selector(superclazToEndpoint:)]);  ADDOWNER(v_superclaz_endpoint,self);
        /*ivar*/ v_ctxts = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableCtxt:) otherEndObjectToEndpoint:@selector(ctxtToEndpoint:)]);  ADDOWNER(v_ctxts,self);
        /*ivar*/ v_subprotocols = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSubprotocol:) otherEndObjectToEndpoint:@selector(subprotocolToEndpoint:)]);  ADDOWNER(v_subprotocols,self);
        /*ivar*/ v_subclazs = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSubclaz:) otherEndObjectToEndpoint:@selector(subclazToEndpoint:)]);  ADDOWNER(v_subclazs,self);
        /*ivar*/ v_settings = ([MutableDictionary dictionary]);  ADDOWNER(v_settings,self);
        /*ivar*/ v_superprotocols = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSuperprotocol:) otherEndObjectToEndpoint:@selector(superprotocolToEndpoint:)]);  ADDOWNER(v_superprotocols,self);

        /*i0*/}
    - (void)addCtxt:(WICtxt *)v {
        MSGSTART("WIClass:-(void)addCtxt:(WICtxt*)v")
        [v_ctxts addObject : v];
    }
    - (void)addSubclaz:(WIClass *)v {
        MSGSTART("WIClass:-(void)addSubclaz:(WIClass*)v")
        [v_subclazs addObject : v];
    }
    - (void)addSubprotocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)addSubprotocol:(WIClass*)v")
        [v_subprotocols addObject : v];
    }
    - (void)addSuperprotocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)addSuperprotocol:(WIClass*)v")
        [v_superprotocols addObject : v];
    }
    - (constchar *)cdescription {
        MSGSTART("WIClass:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIClass:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (EndpointS *)ctxts {
        MSGSTART("WIClass:-(EndpointS*)ctxts")

        /*i-999*/ EndpointS * ret = v_ctxts;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)ctxtToEndpoint:(id)actxt {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)ctxtToEndpoint:(id)actxt")
        return [actxt performSelector:@selector(claz_endpoint)];
    }
    - (void)dealloc {
        MSGSTART("WIClass:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_superclaz_endpoint,self); v_superclaz_endpoint = nil;

        REMOVEOWNER(v_ctxts,self); v_ctxts = nil;

        REMOVEOWNER(v_subprotocols,self); v_subprotocols = nil;

        REMOVEOWNER(v_subclazs,self); v_subclazs = nil;

        REMOVEOWNER(v_settings,self); v_settings = nil;

        REMOVEOWNER(v_types,self); v_types = nil;

        REMOVEOWNER(v_superprotocols,self); v_superprotocols = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WIClass:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WIClass:-(void)die")
        [v_ctxts removeAllObjects];
        [v_types removeAllObjects];
        self.superclaz = nil;
        [v_subclazs removeAllObjects];
        [v_superprotocols removeAllObjects];
        [v_subprotocols removeAllObjects];

        /*i900*/}
    - (NSNumber *)isAcceptableCtxt:(id)actxt {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableCtxt:(id)actxt")
        return [actxt isKindOfClass:[WICtxt class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSubclaz:(id)asubclaz {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableSubclaz:(id)asubclaz")
        return [asubclaz isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSubprotocol:(id)asubprotocol {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableSubprotocol:(id)asubprotocol")
        return [asubprotocol isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSuperclaz:(id)asuperclaz {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableSuperclaz:(id)asuperclaz")
        return [asuperclaz isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSuperprotocol:(id)asuperprotocol {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableSuperprotocol:(id)asuperprotocol")
        return [asuperprotocol isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableType:(id)atype {
        MSGSTART("WIClass:-(NSNumber*)isAcceptableType:(id)atype")
        return [atype isKindOfClass:[WIType class]] ? @YES : nil;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIClass:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removeAllCtxts {
        MSGSTART("WIClass:-(void)removeAllCtxts")
        [v_ctxts removeAllObjects];
    }
    - (void)removeAllSubclazs {
        MSGSTART("WIClass:-(void)removeAllSubclazs")
        [v_subclazs removeAllObjects];
    }
    - (void)removeAllSubprotocols {
        MSGSTART("WIClass:-(void)removeAllSubprotocols")
        [v_subprotocols removeAllObjects];
    }
    - (void)removeAllSuperprotocols {
        MSGSTART("WIClass:-(void)removeAllSuperprotocols")
        [v_superprotocols removeAllObjects];
    }
    - (void)removeAllTypes {
        MSGSTART("WIClass:-(void)removeAllTypes")
        [v_types removeAllObjects];
    }
    - (void)removeCtxt:(WICtxt *)v {
        MSGSTART("WIClass:-(void)removeCtxt:(WICtxt*)v")
        [v_ctxts removeObject : v];
    }
    - (void)removeSubclaz:(WIClass *)v {
        MSGSTART("WIClass:-(void)removeSubclaz:(WIClass*)v")
        [v_subclazs removeObject : v];
    }
    - (void)removeSubprotocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)removeSubprotocol:(WIClass*)v")
        [v_subprotocols removeObject : v];
    }
    - (void)removeSuperprotocol:(WIClass *)v {
        MSGSTART("WIClass:-(void)removeSuperprotocol:(WIClass*)v")
        [v_superprotocols removeObject : v];
    }
    - (void)removeTypeForKey:(id<NSCopying> )key {
        MSGSTART("WIClass:-(void)removeTypeForKey:(id<NSCopying>)key")
        [v_types removeObjectForKey : key];
    }
    - (void)retract {
        MSGSTART("WIClass:-(void)retract")
        [self.ctxts removeAllObjects];
        [self.types removeAllObjects];
        self.superclaz = nil;
        [self.subclazs removeAllObjects];
        [self.superprotocols removeAllObjects];
        [self.subprotocols removeAllObjects];
    }
    - (void)setCtxts:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setCtxts:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(ctxts=\"blah\") to set the property)");

        /*i-905*/ if (v_ctxts == v) return;

        /*i-900*/ {
            v_ctxts = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_ctxts,self); ADDOWNER(v,self);
    }
    - (void)setSettings:(MutableDictionary *)v {
        MSGSTART("WIClass:-(void)setSettings:(MutableDictionary*)v")

        /*i-905*/ if (v_settings == v) return;

        /*i-900*/ {
            v_settings = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_settings,self); ADDOWNER(v,self);
    }
    - (void)setSubclazs:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setSubclazs:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(subclazs=\"blah\") to set the property)");

        /*i-905*/ if (v_subclazs == v) return;

        /*i-900*/ {
            v_subclazs = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_subclazs,self); ADDOWNER(v,self);
    }
    - (void)setSubprotocols:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setSubprotocols:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(subprotocols=\"blah\") to set the property)");

        /*i-905*/ if (v_subprotocols == v) return;

        /*i-900*/ {
            v_subprotocols = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_subprotocols,self); ADDOWNER(v,self);
    }
    - (void)setSuperclaz:(WIClass *)v {
        MSGSTART("WIClass:-(void)setSuperclaz:(WIClass*)v")
        [v_superclaz_endpoint setValue : v];
    }
    - (void)setSuperclaz_endpoint:(Endpoint1 *)v {
        MSGSTART("WIClass:-(void)setSuperclaz_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(superclaz_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_superclaz_endpoint == v) return;

        /*i-900*/ {
            v_superclaz_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_superclaz_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setSuperprotocols:(EndpointS *)v {
        MSGSTART("WIClass:-(void)setSuperprotocols:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(superprotocols=\"blah\") to set the property)");

        /*i-905*/ if (v_superprotocols == v) return;

        /*i-900*/ {
            v_superprotocols = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_superprotocols,self); ADDOWNER(v,self);
    }
    - (MutableDictionary *)settings {
        MSGSTART("WIClass:-(MutableDictionary*)settings")

        /*i-999*/ MutableDictionary * ret = v_settings;
        /*i999*/ return ret;
    }
    - (void)setType:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WIClass:-(void)setType:(id)v forKey:(id<NSCopying>)key")
        [v_types setObject : v forKey : key];
    }
    - (void)setTypes:(EndpointD *)v {
        MSGSTART("WIClass:-(void)setTypes:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIClass) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(types=\"blah\") to set the property)");

        /*i-905*/ if (v_types == v) return;

        /*i-900*/ {
            v_types = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_types,self); ADDOWNER(v,self);
    }
    - (EndpointS *)subclazs {
        MSGSTART("WIClass:-(EndpointS*)subclazs")

        /*i-999*/ EndpointS * ret = v_subclazs;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)subclazToEndpoint:(id)asubclaz {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)subclazToEndpoint:(id)asubclaz")
        return [asubclaz performSelector:@selector(superclaz_endpoint)];
    }
    - (EndpointS *)subprotocols {
        MSGSTART("WIClass:-(EndpointS*)subprotocols")

        /*i-999*/ EndpointS * ret = v_subprotocols;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)subprotocolToEndpoint:(id)asubprotocol {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)subprotocolToEndpoint:(id)asubprotocol")
        return [asubprotocol performSelector:@selector(superprotocols)];
    }
    - (WIClass *)superclaz {
        MSGSTART("WIClass:-(WIClass*)superclaz")
        return (WIClass *)v_superclaz_endpoint.value;
    }
    - (Endpoint1 *)superclaz_endpoint {
        MSGSTART("WIClass:-(Endpoint1*)superclaz_endpoint")

        /*i-999*/ Endpoint1 * ret = v_superclaz_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)superclazToEndpoint:(id)asuperclaz {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)superclazToEndpoint:(id)asuperclaz")
        return [asuperclaz performSelector:@selector(subclazs)];
    }
    - (EndpointS *)superprotocols {
        MSGSTART("WIClass:-(EndpointS*)superprotocols")

        /*i-999*/ EndpointS * ret = v_superprotocols;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)superprotocolToEndpoint:(id)asuperprotocol {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)superprotocolToEndpoint:(id)asuperprotocol")
        return [asuperprotocol performSelector:@selector(subprotocols)];
    }
    - (WIType *)typeForKey:(id<NSCopying> )key {
        MSGSTART("WIClass:-(WIType*)typeForKey:(id<NSCopying>)key")
        return [v_types objectForKey:key];
    }
    - (EndpointD *)types {
        MSGSTART("WIClass:-(EndpointD*)types")

        /*i-999*/ EndpointD * ret = v_types;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype {
        MSGSTART("WIClass:-(NSObject<LinkEndpoint>*)typeToEndpoint:(id)atype")
        return [atype performSelector:@selector(claz_endpoint)];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WICtxt
    #define _WIClass_           WICtxt__
    #define _className_         wICtxt
    #define _Class_             WICtxt__
    @implementation WICtxt

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWICtxt {
        MSGSTART("WICtxt:-(void)_startObjectOfClassWICtxt")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_vars = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableVar:) otherEndObjectToEndpoint:@selector(varToEndpoint:)]);  ADDOWNER(v_vars,self);
        /*ivar*/ v_claz_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableClaz:) otherEndObjectToEndpoint:@selector(clazToEndpoint:)]);  ADDOWNER(v_claz_endpoint,self);
        /*ivar*/ v_regexes = ([MutableDictionary dictionary]);  ADDOWNER(v_regexes,self);
        /*ivar*/ v_file_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableFile:) otherEndObjectToEndpoint:@selector(fileToEndpoint:)]);  ADDOWNER(v_file_endpoint,self);

        /*i0*/}
    - (void)addVar:(WIVar *)v {
        MSGSTART("WICtxt:-(void)addVar:(WIVar*)v")
        [v_vars addObject : v];
    }
    - (constchar *)cdescription {
        MSGSTART("WICtxt:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WIClass *)claz {
        MSGSTART("WICtxt:-(WIClass*)claz")
        return (WIClass *)v_claz_endpoint.value;
    }
    - (Endpoint1 *)claz_endpoint {
        MSGSTART("WICtxt:-(Endpoint1*)claz_endpoint")

        /*i-999*/ Endpoint1 * ret = v_claz_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)clazToEndpoint:(id)aclaz {
        MSGSTART("WICtxt:-(NSObject<LinkEndpoint>*)clazToEndpoint:(id)aclaz")
        return [aclaz performSelector:@selector(ctxts)];
    }
    - (constchar *)cobjectName {
        MSGSTART("WICtxt:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("WICtxt:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_vars,self); v_vars = nil;

        REMOVEOWNER(v_claz_endpoint,self); v_claz_endpoint = nil;

        REMOVEOWNER(v_regexes,self); v_regexes = nil;

        REMOVEOWNER(v_file_endpoint,self); v_file_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WICtxt:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WICtxt:-(void)die")
        self.claz = nil;
        [v_vars removeAllObjects];
        self.file = nil;

        /*i900*/}
    - (WIFile *)file {
        MSGSTART("WICtxt:-(WIFile*)file")
        return (WIFile *)v_file_endpoint.value;
    }
    - (Endpoint1 *)file_endpoint {
        MSGSTART("WICtxt:-(Endpoint1*)file_endpoint")

        /*i-999*/ Endpoint1 * ret = v_file_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)fileToEndpoint:(id)afile {
        MSGSTART("WICtxt:-(NSObject<LinkEndpoint>*)fileToEndpoint:(id)afile")
        return [afile performSelector:@selector(ctxts)];
    }
    - (NSIndexSet *)indexesInFile {
        MSGSTART("WICtxt:-(NSIndexSet*)indexesInFile")

        if (!v_file_endpoint.value) return [NSIndexSet indexSet];

        NSMutableArray<ArrayLinkEndpoint> *file_ep = (NSMutableArray<ArrayLinkEndpoint> *)[self fileToEndpoint : v_file_endpoint.value];
        return (NSIndexSet *)[file_ep.__arrayObjectIndexes objectForKey:self];
    }
    - (Unsigned)indexInFile {
        MSGSTART("WICtxt:-(Unsigned)indexInFile")

        return self.indexesInFile.firstIndex;
    }
    - (NSNumber *)isAcceptableClaz:(id)aclaz {
        MSGSTART("WICtxt:-(NSNumber*)isAcceptableClaz:(id)aclaz")
        return [aclaz isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableFile:(id)afile {
        MSGSTART("WICtxt:-(NSNumber*)isAcceptableFile:(id)afile")
        return [afile isKindOfClass:[WIFile class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableVar:(id)avar {
        MSGSTART("WICtxt:-(NSNumber*)isAcceptableVar:(id)avar")
        return [avar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WICtxt:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (MutableDictionary *)regexes {
        MSGSTART("WICtxt:-(MutableDictionary*)regexes")

        /*i-999*/ MutableDictionary * ret = v_regexes;
        /*i999*/ return ret;
    }
    - (void)removeAllVars {
        MSGSTART("WICtxt:-(void)removeAllVars")
        [v_vars removeAllObjects];
    }
    - (void)removeVar:(WIVar *)v {
        MSGSTART("WICtxt:-(void)removeVar:(WIVar*)v")
        [v_vars removeObject : v];
    }
    - (void)retract {
        MSGSTART("WICtxt:-(void)retract")
        self.claz = nil;
        [self.vars removeAllObjects];
        self.file = nil;
    }
    - (void)setClaz:(WIClass *)v {
        MSGSTART("WICtxt:-(void)setClaz:(WIClass*)v")
        [v_claz_endpoint setValue : v];
    }
    - (void)setClaz_endpoint:(Endpoint1 *)v {
        MSGSTART("WICtxt:-(void)setClaz_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WICtxt) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(claz_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_claz_endpoint == v) return;

        /*i-900*/ {
            v_claz_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_claz_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setFile:(WIFile *)v {
        MSGSTART("WICtxt:-(void)setFile:(WIFile*)v")
        [v_file_endpoint setValue : v];
    }
    - (void)setFile_endpoint:(Endpoint1 *)v {
        MSGSTART("WICtxt:-(void)setFile_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WICtxt) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(file_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_file_endpoint == v) return;

        /*i-900*/ {
            v_file_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_file_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setIndexesInFile:(NSIndexSet *)v {
        MSGSTART("WICtxt:-(void)setIndexesInFile:(NSIndexSet*)v")

        NSMutableArray<ArrayLinkEndpoint> *file_ep = (NSMutableArray<ArrayLinkEndpoint> *)[self fileToEndpoint : v_file_endpoint.value];
        NSIndexSet *file_indexes_were = self.indexesInFile.copy;
        v = v.copy;
        Unsigned file_vi = v.firstIndex,file_wi = file_indexes_were.firstIndex;
        while ( (file_vi != NSNotFound) && (file_wi != NSNotFound) ) {
            if (file_vi == file_wi) {
                file_vi = [v indexGreaterThanIndex:file_vi];
                file_wi = [file_indexes_were indexGreaterThanIndex:file_wi];
            }
            else if (file_vi < file_wi) {
                [file_ep insertObject:self atIndex:file_vi];
                file_vi = [v indexGreaterThanIndex:file_vi];
            }
            else {
                [file_ep removeObjectAtIndex:file_wi];
                file_wi = [file_indexes_were indexGreaterThanIndex:file_wi];
            }
        }
        while (file_vi != NSNotFound) {
            [file_ep insertObject:self atIndex:file_vi];
            file_vi = [v indexGreaterThanIndex:file_vi];
        }
        while (file_wi != NSNotFound) {
            [file_ep removeObjectAtIndex:file_wi];
            file_wi = [file_indexes_were indexGreaterThanIndex:file_wi];
        }
    }
    - (void)setIndexInFile:(Unsigned)v {
        MSGSTART("WICtxt:-(void)setIndexInFile:(Unsigned)v")

        self.indexesInFile = (v == NSNotFound ? [NSIndexSet indexSet] : [NSIndexSet indexSetWithIndex:v]);
    }
    - (void)setRegexes:(MutableDictionary *)v {
        MSGSTART("WICtxt:-(void)setRegexes:(MutableDictionary*)v")

        /*i-905*/ if (v_regexes == v) return;

        /*i-900*/ {
            v_regexes = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_regexes,self); ADDOWNER(v,self);
    }
    - (void)setVars:(EndpointS *)v {
        MSGSTART("WICtxt:-(void)setVars:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WICtxt) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(vars=\"blah\") to set the property)");

        /*i-905*/ if (v_vars == v) return;

        /*i-900*/ {
            v_vars = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_vars,self); ADDOWNER(v,self);
    }
    - (EndpointS *)vars {
        MSGSTART("WICtxt:-(EndpointS*)vars")

        /*i-999*/ EndpointS * ret = v_vars;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar {
        MSGSTART("WICtxt:-(NSObject<LinkEndpoint>*)varToEndpoint:(id)avar")
        return [avar performSelector:@selector(ctxt_endpoint)];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIFile
    #define _WIClass_           WIFile__
    #define _className_         wIFile
    #define _Class_             WIFile__
    @implementation WIFile

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIFile {
        MSGSTART("WIFile:-(void)_startObjectOfClassWIFile")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_includes = ([MutableArray array]);  ADDOWNER(v_includes,self);
        /*ivar*/ v_ctxts = ([[EndpointA alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableCtxt:) otherEndObjectToEndpoint:@selector(ctxtToEndpoint:)]);  ADDOWNER(v_ctxts,self);

        /*i0*/}
    - (void)addCtxt:(WICtxt *)v {
        MSGSTART("WIFile:-(void)addCtxt:(WICtxt*)v")
        [v_ctxts addObject : v];
    }
    - (constchar *)cdescription {
        MSGSTART("WIFile:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIFile:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WICtxt *)ctxtAtIndex:(Int)index {
        MSGSTART("WIFile:-(WICtxt*)ctxtAtIndex:(Int)index")
        return [v_ctxts objectAtIndex:index];
    }
    - (EndpointA *)ctxts {
        MSGSTART("WIFile:-(EndpointA*)ctxts")

        /*i-999*/ EndpointA * ret = v_ctxts;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)ctxtToEndpoint:(id)actxt {
        MSGSTART("WIFile:-(NSObject<LinkEndpoint>*)ctxtToEndpoint:(id)actxt")
        return [actxt performSelector:@selector(file_endpoint)];
    }
    - (void)dealloc {
        MSGSTART("WIFile:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_includes,self); v_includes = nil;

        REMOVEOWNER(v_ctxts,self); v_ctxts = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WIFile:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WIFile:-(void)die")
        [v_ctxts removeAllObjects];

        /*i900*/}
    - (MutableArray *)includes {
        MSGSTART("WIFile:-(MutableArray*)includes")

        /*i-999*/ MutableArray * ret = v_includes;
        /*i999*/ return ret;
    }
    - (void)insertCtxt:(WICtxt *)v atIndex:(Int)index {
        MSGSTART("WIFile:-(void)insertCtxt:(WICtxt*)v atIndex:(Int)index")
        [v_ctxts insertObject : v atIndex : index];
    }
    - (NSNumber *)isAcceptableCtxt:(id)actxt {
        MSGSTART("WIFile:-(NSNumber*)isAcceptableCtxt:(id)actxt")
        return [actxt isKindOfClass:[WICtxt class]] ? @YES : nil;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIFile:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removeAllCtxts {
        MSGSTART("WIFile:-(void)removeAllCtxts")
        [v_ctxts removeAllObjects];
    }
    - (void)removeCtxt:(WICtxt *)v {
        MSGSTART("WIFile:-(void)removeCtxt:(WICtxt*)v")
        [v_ctxts removeObject : v];
    }
    - (void)removeCtxtAtIndex:(Int)index {
        MSGSTART("WIFile:-(void)removeCtxtAtIndex:(Int)index")
        [v_ctxts removeObjectAtIndex : index];
    }
    - (void)retract {
        MSGSTART("WIFile:-(void)retract")
        [self.ctxts removeAllObjects];
    }
    - (void)setCtxts:(EndpointA *)v {
        MSGSTART("WIFile:-(void)setCtxts:(EndpointA*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIFile) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(ctxts=\"blah\") to set the property)");

        /*i-905*/ if (v_ctxts == v) return;

        /*i-900*/ {
            v_ctxts = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_ctxts,self); ADDOWNER(v,self);
    }
    - (void)setIncludes:(MutableArray *)v {
        MSGSTART("WIFile:-(void)setIncludes:(MutableArray*)v")

        /*i-905*/ if (v_includes == v) return;

        /*i-900*/ {
            v_includes = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_includes,self); ADDOWNER(v,self);
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIType
    #define _WIClass_           WIType__
    #define _className_         wIType
    #define _Class_             WIType__
    @implementation WIType

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIType {
        MSGSTART("WIType:-(void)_startObjectOfClassWIType")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_vars = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableVar:) otherEndObjectToEndpoint:@selector(varToEndpoint:)]);  ADDOWNER(v_vars,self);
        /*ivar*/ v_claz_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableClaz:) otherEndObjectToEndpoint:@selector(clazToEndpoint:)]);  ADDOWNER(v_claz_endpoint,self);

        /*i0*/}
    - (void)addVar:(WIVar *)v {
        MSGSTART("WIType:-(void)addVar:(WIVar*)v")
        [v_vars addObject : v];
    }
    - (constchar *)cdescription {
        MSGSTART("WIType:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WIClass *)claz {
        MSGSTART("WIType:-(WIClass*)claz")
        return (WIClass *)v_claz_endpoint.value;
    }
    - (Endpoint1 *)claz_endpoint {
        MSGSTART("WIType:-(Endpoint1*)claz_endpoint")

        /*i-999*/ Endpoint1 * ret = v_claz_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)clazToEndpoint:(id)aclaz {
        MSGSTART("WIType:-(NSObject<LinkEndpoint>*)clazToEndpoint:(id)aclaz")
        return [aclaz performSelector:@selector(types)];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIType:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("WIType:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_vars,self); v_vars = nil;

        REMOVEOWNER(v_claz_endpoint,self); v_claz_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("WIType:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WIType:-(void)die")
        self.claz = nil;
        [v_vars removeAllObjects];

        /*i900*/}
    - (NSNumber *)isAcceptableClaz:(id)aclaz {
        MSGSTART("WIType:-(NSNumber*)isAcceptableClaz:(id)aclaz")
        return [aclaz isKindOfClass:[WIClass class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableVar:(id)avar {
        MSGSTART("WIType:-(NSNumber*)isAcceptableVar:(id)avar")
        return [avar isKindOfClass:[WIVar class]] ? @YES : nil;
    }
    - (kid)keyInClaz {
        MSGSTART("WIType:-(kid)keyInClaz")

        for (id<NSCopying> key in self.keysInClaz) {
            return key;
        }
        return nil;
    }
    - (NSSet *)keysInClaz {
        MSGSTART("WIType:-(NSSet*)keysInClaz")

        if (!v_claz_endpoint.value) return [NSSet set];

        NSMutableDictionary<DictionaryLinkEndpoint> *claz_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self clazToEndpoint : v_claz_endpoint.value];
        return (NSSet *)[claz_ep.__dictionaryObjectKeys objectForKey:self];
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIType:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removeAllVars {
        MSGSTART("WIType:-(void)removeAllVars")
        [v_vars removeAllObjects];
    }
    - (void)removeVar:(WIVar *)v {
        MSGSTART("WIType:-(void)removeVar:(WIVar*)v")
        [v_vars removeObject : v];
    }
    - (void)retract {
        MSGSTART("WIType:-(void)retract")
        self.claz = nil;
        [self.vars removeAllObjects];
    }
    - (void)setClaz:(WIClass *)v {
        MSGSTART("WIType:-(void)setClaz:(WIClass*)v")
        [v_claz_endpoint setValue : v];
    }
    - (void)setClaz_endpoint:(Endpoint1 *)v {
        MSGSTART("WIType:-(void)setClaz_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIType) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(claz_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_claz_endpoint == v) return;

        /*i-900*/ {
            v_claz_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_claz_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setKeyInClaz:(kid)v {
        MSGSTART("WIType:-(void)setKeyInClaz:(kid)v")

        self.keysInClaz = [NSSet setWithObject:v];
    }
    - (void)setKeysInClaz:(NSSet *)v {
        MSGSTART("WIType:-(void)setKeysInClaz:(NSSet*)v")

        NSMutableDictionary<DictionaryLinkEndpoint> *claz_ep = (NSMutableDictionary<DictionaryLinkEndpoint> *)[self clazToEndpoint : v_claz_endpoint.value];
        NSSet *claz_keys_were = self.keysInClaz,*claz_inss,*claz_dels;
        if ([Util getInsertsAndDeletesForSetWhenChanging:claz_keys_were to:v inss:&claz_inss dels:&claz_dels]) {
            for (id<NSCopying> key in claz_dels) {
                [claz_ep removeObjectForKey:key];
            }
            for (id<NSCopying> key in claz_inss) {
                [claz_ep setObject:self forKey:key];
            }
        }
    }
    - (void)setVars:(EndpointS *)v {
        MSGSTART("WIType:-(void)setVars:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIType) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(vars=\"blah\") to set the property)");

        /*i-905*/ if (v_vars == v) return;

        /*i-900*/ {
            v_vars = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_vars,self); ADDOWNER(v,self);
    }
    - (EndpointS *)vars {
        MSGSTART("WIType:-(EndpointS*)vars")

        /*i-999*/ EndpointS * ret = v_vars;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)varToEndpoint:(id)avar {
        MSGSTART("WIType:-(NSObject<LinkEndpoint>*)varToEndpoint:(id)avar")
        return [avar performSelector:@selector(type_endpoint)];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WIVar
    #define _WIClass_           WIVar__
    #define _className_         wIVar
    #define _Class_             WIVar__
    @implementation WIVar

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassWIVar {
        MSGSTART("WIVar:-(void)_startObjectOfClassWIVar")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-950*/ v_setters = [[EndpointD alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSetter:) otherEndObjectToEndpoint:@selector(setterToEndpoint:)];

        /*i-500*//*ivar*/ v_defaultValues = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableDefaultValue:) otherEndObjectToEndpoint:@selector(defaultValueToEndpoint:)]);  ADDOWNER(v_defaultValues,self);
        /*ivar*/ v_args = ([[EndpointA alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableArg:) otherEndObjectToEndpoint:@selector(argToEndpoint:)]);  ADDOWNER(v_args,self);
        /*ivar*/ v_type_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableType:) otherEndObjectToEndpoint:@selector(typeToEndpoint:)]);  ADDOWNER(v_type_endpoint,self);
        /*ivar*/ v_settings = ([MutableDictionary dictionary]);  ADDOWNER(v_settings,self);
        /*ivar*/ v_getters = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableGetter:) otherEndObjectToEndpoint:@selector(getterToEndpoint:)]);  ADDOWNER(v_getters,self);
        /*ivar*/ v_ctxt_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableCtxt:) otherEndObjectToEndpoint:@selector(ctxtToEndpoint:)]);  ADDOWNER(v_ctxt_endpoint,self);

        /*i0*/}
    - (void)addArg:(WIVarArg *)v {
        MSGSTART("WIVar:-(void)addArg:(WIVarArg*)v")
        [v_args addObject : v];
    }
    - (void)addDefaultValue:(WIBody *)v {
        MSGSTART("WIVar:-(void)addDefaultValue:(WIBody*)v")
        [v_defaultValues addObject : v];
    }
    - (void)addGetter:(WIBody *)v {
        MSGSTART("WIVar:-(void)addGetter:(WIBody*)v")
        [v_getters addObject : v];
    }
    - (WIVarArg *)argAtIndex:(Int)index {
        MSGSTART("WIVar:-(WIVarArg*)argAtIndex:(Int)index")
        return [v_args objectAtIndex:index];
    }
    - (EndpointA *)args {
        MSGSTART("WIVar:-(EndpointA*)args")

        /*i-999*/ EndpointA * ret = v_args;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)argToEndpoint:(id)aarg {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)argToEndpoint:(id)aarg")
        return [aarg performSelector:@selector(var_endpoint)];
    }
    - (NSString *)bindingType {
        MSGSTART("WIVar:-(NSString*)bindingType")

        /*i-999*/ NSString * ret = v_bindingType;
        /*i999*/ return ret;
    }
    - (WIVar *)boundTo {
        MSGSTART("WIVar:-(WIVar*)boundTo")

        /*i-999*/ WIVar * ret = v_boundTo;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("WIVar:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WIVar:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (WICtxt *)ctxt {
        MSGSTART("WIVar:-(WICtxt*)ctxt")
        return (WICtxt *)v_ctxt_endpoint.value;
    }
    - (Endpoint1 *)ctxt_endpoint {
        MSGSTART("WIVar:-(Endpoint1*)ctxt_endpoint")

        /*i-999*/ Endpoint1 * ret = v_ctxt_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)ctxtToEndpoint:(id)actxt {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)ctxtToEndpoint:(id)actxt")
        return [actxt performSelector:@selector(vars)];
    }
    - (void)dealloc {
        MSGSTART("WIVar:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(v_defaultValues,self); v_defaultValues = nil;

        REMOVEOWNER(v_boundTo,self); v_boundTo = nil;

        REMOVEOWNER(v_args,self); v_args = nil;

        REMOVEOWNER(v_type_endpoint,self); v_type_endpoint = nil;

        v_bindingType = nil;

        REMOVEOWNER(v_settings,self); v_settings = nil;

        v_name = nil;

        REMOVEOWNER(v_setters,self); v_setters = nil;

        REMOVEOWNER(v_getters,self); v_getters = nil;

        REMOVEOWNER(v_ctxt_endpoint,self); v_ctxt_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (EndpointS *)defaultValues {
        MSGSTART("WIVar:-(EndpointS*)defaultValues")

        /*i-999*/ EndpointS * ret = v_defaultValues;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)defaultValueToEndpoint:(id)adefaultValue {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)defaultValueToEndpoint:(id)adefaultValue")
        return [adefaultValue performSelector:@selector(defaultValueForVar_endpoint)];
    }
    - (NSString *)description {
        MSGSTART("WIVar:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("WIVar:-(void)die")
        self.ctxt = nil;
        self.type = nil;
        [v_args removeAllObjects];
        [v_getters removeAllObjects];
        [v_defaultValues removeAllObjects];
        [v_setters removeAllObjects];

        /*i900*/}
    - (EndpointS *)getters {
        MSGSTART("WIVar:-(EndpointS*)getters")

        /*i-999*/ EndpointS * ret = v_getters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)getterToEndpoint:(id)agetter {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)getterToEndpoint:(id)agetter")
        return [agetter performSelector:@selector(getterForVar_endpoint)];
    }
    - (void)insertArg:(WIVarArg *)v atIndex:(Int)index {
        MSGSTART("WIVar:-(void)insertArg:(WIVarArg*)v atIndex:(Int)index")
        [v_args insertObject : v atIndex : index];
    }
    - (NSNumber *)isAcceptableArg:(id)aarg {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableArg:(id)aarg")
        return [aarg isKindOfClass:[WIVarArg class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableCtxt:(id)actxt {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableCtxt:(id)actxt")
        return [actxt isKindOfClass:[WICtxt class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableDefaultValue:(id)adefaultValue {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableDefaultValue:(id)adefaultValue")
        return [adefaultValue isKindOfClass:[WIBody class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableGetter:(id)agetter {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableGetter:(id)agetter")
        return [agetter isKindOfClass:[WIBody class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSetter:(id)asetter {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableSetter:(id)asetter")
        return [asetter isKindOfClass:[WIBody class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableType:(id)atype {
        MSGSTART("WIVar:-(NSNumber*)isAcceptableType:(id)atype")
        return [atype isKindOfClass:[WIType class]] ? @YES : nil;
    }
    - (NSString *)name {
        MSGSTART("WIVar:-(NSString*)name")

        /*i-999*/ NSString * ret = v_name;
        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WIVar:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)removeAllArgs {
        MSGSTART("WIVar:-(void)removeAllArgs")
        [v_args removeAllObjects];
    }
    - (void)removeAllDefaultValues {
        MSGSTART("WIVar:-(void)removeAllDefaultValues")
        [v_defaultValues removeAllObjects];
    }
    - (void)removeAllGetters {
        MSGSTART("WIVar:-(void)removeAllGetters")
        [v_getters removeAllObjects];
    }
    - (void)removeAllSetters {
        MSGSTART("WIVar:-(void)removeAllSetters")
        [v_setters removeAllObjects];
    }
    - (void)removeArg:(WIVarArg *)v {
        MSGSTART("WIVar:-(void)removeArg:(WIVarArg*)v")
        [v_args removeObject : v];
    }
    - (void)removeArgAtIndex:(Int)index {
        MSGSTART("WIVar:-(void)removeArgAtIndex:(Int)index")
        [v_args removeObjectAtIndex : index];
    }
    - (void)removeDefaultValue:(WIBody *)v {
        MSGSTART("WIVar:-(void)removeDefaultValue:(WIBody*)v")
        [v_defaultValues removeObject : v];
    }
    - (void)removeGetter:(WIBody *)v {
        MSGSTART("WIVar:-(void)removeGetter:(WIBody*)v")
        [v_getters removeObject : v];
    }
    - (void)removeSetterForKey:(id<NSCopying> )key {
        MSGSTART("WIVar:-(void)removeSetterForKey:(id<NSCopying>)key")
        [v_setters removeObjectForKey : key];
    }
    - (void)retract {
        MSGSTART("WIVar:-(void)retract")
        self.ctxt = nil;
        self.type = nil;
        [self.args removeAllObjects];
        [self.getters removeAllObjects];
        [self.defaultValues removeAllObjects];
        [self.setters removeAllObjects];
    }
    - (void)setArgs:(EndpointA *)v {
        MSGSTART("WIVar:-(void)setArgs:(EndpointA*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(args=\"blah\") to set the property)");

        /*i-905*/ if (v_args == v) return;

        /*i-900*/ {
            v_args = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_args,self); ADDOWNER(v,self);
    }
    - (void)setBindingType:(NSString *)v {
        MSGSTART("WIVar:-(void)setBindingType:(NSString*)v")

        /*i-905*/ if (v_bindingType == v) return;

        /*i-900*/ {
            v_bindingType = (id)v;
        }
    }
    - (void)setBoundTo:(WIVar *)v {
        MSGSTART("WIVar:-(void)setBoundTo:(WIVar*)v")

        /*i-905*/ if (v_boundTo == v) return;

        /*i-900*/ {
            v_boundTo = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_boundTo,self); ADDOWNER(v,self);
    }
    - (void)setCtxt:(WICtxt *)v {
        MSGSTART("WIVar:-(void)setCtxt:(WICtxt*)v")
        [v_ctxt_endpoint setValue : v];
    }
    - (void)setCtxt_endpoint:(Endpoint1 *)v {
        MSGSTART("WIVar:-(void)setCtxt_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(ctxt_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_ctxt_endpoint == v) return;

        /*i-900*/ {
            v_ctxt_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_ctxt_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setDefaultValues:(EndpointS *)v {
        MSGSTART("WIVar:-(void)setDefaultValues:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(defaultValues=\"blah\") to set the property)");

        /*i-905*/ if (v_defaultValues == v) return;

        /*i-900*/ {
            v_defaultValues = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_defaultValues,self); ADDOWNER(v,self);
    }
    - (void)setGetters:(EndpointS *)v {
        MSGSTART("WIVar:-(void)setGetters:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(getters=\"blah\") to set the property)");

        /*i-905*/ if (v_getters == v) return;

        /*i-900*/ {
            v_getters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_getters,self); ADDOWNER(v,self);
    }
    - (void)setName:(NSString *)v {
        MSGSTART("WIVar:-(void)setName:(NSString*)v")

        /*i-905*/ if (v_name == v) return;

        /*i-900*/ {
            v_name = (id)v;
        }
    }
    - (void)setSetter:(id)v forKey:(id<NSCopying> )key {
        MSGSTART("WIVar:-(void)setSetter:(id)v forKey:(id<NSCopying>)key")
        [v_setters setObject : v forKey : key];
    }
    - (void)setSetters:(EndpointD *)v {
        MSGSTART("WIVar:-(void)setSetters:(EndpointD*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(setters=\"blah\") to set the property)");

        /*i-905*/ if (v_setters == v) return;

        /*i-900*/ {
            v_setters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_setters,self); ADDOWNER(v,self);
    }
    - (void)setSettings:(MutableDictionary *)v {
        MSGSTART("WIVar:-(void)setSettings:(MutableDictionary*)v")

        /*i-905*/ if (v_settings == v) return;

        /*i-900*/ {
            v_settings = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_settings,self); ADDOWNER(v,self);
    }
    - (WIBody *)setterForKey:(id<NSCopying> )key {
        MSGSTART("WIVar:-(WIBody*)setterForKey:(id<NSCopying>)key")
        return [v_setters objectForKey:key];
    }
    - (EndpointD *)setters {
        MSGSTART("WIVar:-(EndpointD*)setters")

        /*i-999*/ EndpointD * ret = v_setters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)setterToEndpoint:(id)asetter {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)setterToEndpoint:(id)asetter")
        return [asetter performSelector:@selector(setterForVar_endpoint)];
    }
    - (MutableDictionary *)settings {
        MSGSTART("WIVar:-(MutableDictionary*)settings")

        /*i-999*/ MutableDictionary * ret = v_settings;
        /*i999*/ return ret;
    }
    - (void)setType:(WIType *)v {
        MSGSTART("WIVar:-(void)setType:(WIType*)v")
        [v_type_endpoint setValue : v];
    }
    - (void)setType_endpoint:(Endpoint1 *)v {
        MSGSTART("WIVar:-(void)setType_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_WIVar) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(type_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_type_endpoint == v) return;

        /*i-900*/ {
            v_type_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_type_endpoint,self); ADDOWNER(v,self);
    }
    - (WIType *)type {
        MSGSTART("WIVar:-(WIType*)type")
        return (WIType *)v_type_endpoint.value;
    }
    - (Endpoint1 *)type_endpoint {
        MSGSTART("WIVar:-(Endpoint1*)type_endpoint")

        /*i-999*/ Endpoint1 * ret = v_type_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)typeToEndpoint:(id)atype {
        MSGSTART("WIVar:-(NSObject<LinkEndpoint>*)typeToEndpoint:(id)atype")
        return [atype performSelector:@selector(vars)];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
