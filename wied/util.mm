//Minim autogenerated this file. HaND

//Tasks:
//    Embedded 2 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

#ifdef INCLUDE_IFACE_D0









@interface IntCarrier : NSObject<Object, ClassObject> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_IntCarrier; @protected
    bool debugAutorelease;
    Int intValue;
    bool isZombie;
    LL objectIDInClass;
    LL objectIDInTotal;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readwrite) Int intValue;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
-(void)_startObjectOfClassIntCarrier;
+(IntCarrier*)carrierWithInt:(Int)v;
-(constchar*)cdescription;
-(constchar*)cobjectName;
-(void)dealloc;
-(NSString*)description;
-(void)die;
-(IntCarrier*)initWithInt:(Int)v;
-(NSMutableString*)objectName;

@end









@interface MemMonitor : NSObject<Object, ClassObject> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_MemMonitor; @protected
    bool debugAutorelease;
    bool isZombie;
    LL objectIDInClass;
    LL objectIDInTotal;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
-(void)_startObjectOfClassMemMonitor;
-(constchar*)cdescription;
-(constchar*)cobjectName;
-(void)dealloc;
-(NSString*)description;
-(void)die;
+(NSString*)memString;
-(NSMutableString*)objectName;

@end









@interface ULLCarrier : NSObject<Object, ClassObject> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_ULLCarrier; @protected
    bool debugAutorelease;
    bool isZombie;
    LL objectIDInClass;
    LL objectIDInTotal;
    ULL ullValue;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
@property (nonatomic,readwrite) ULL ullValue;
-(void)_startObjectOfClassULLCarrier;
+(ULLCarrier*)carrierWithULL:(ULL)v;
-(constchar*)cdescription;
-(constchar*)cobjectName;
-(void)dealloc;
-(NSString*)description;
-(void)die;
-(ULLCarrier*)initWithULL:(ULL)v;
-(NSMutableString*)objectName;

@end









@interface URLHandlerRegistry : NSObject<Object, ClassObject> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_URLHandlerRegistry; @protected
    bool debugAutorelease;
    MutableArray* handlers;
    bool isZombie;
    LL objectIDInClass;
    LL objectIDInTotal;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (strong,nonatomic,readwrite/*(public readonly)*/) MutableArray* handlers;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
-(void)_startObjectOfClassURLHandlerRegistry;
-(bool)actOnURL:(NSURL*)url;
-(void)addHandler:(id)handler;
-(constchar*)cdescription;
-(constchar*)cobjectName;
-(void)dealloc;
-(NSString*)description;
-(void)die;
+(URLHandlerRegistry*)getDefault;
-(MutableArray*)handlers;
-(URLHandlerRegistry*)init;
-(NSObject*)makeResourceFromURL:(NSURL*)url;
-(NSMutableString*)objectName;
-(void)setHandlers:(MutableArray*)v;

@end









@interface Util : NSObject<Object, ClassObject> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_Util; @protected
    bool debugAutorelease;
    bool isZombie;
    LL objectIDInClass;
    LL objectIDInTotal;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
-(void)_startObjectOfClassUtil;
+(bool) getInsertsAndDeletesAsIndexSetWhenChanging:(NSArray*)from to:(NSArray*)to inss:(NSIndexSet*__strong*)pinss dels:(NSIndexSet*__strong*)pdels;
+(bool) getInsertsAndDeletesForSetWhenChanging:(NSSet*)from to:(NSSet*)to inss:(NSSet*__strong*)pinss dels:(NSSet*__strong*)pdels;
+(bool) getInsertsAndDeletesWhenChanging:(NSArray*)from to:(NSArray*)to inss:(NSArray*__strong*)pinss dels:(NSArray*__strong*)pdels;
+(bool) getInsertsDeletesAndChangesForDictionaryWhenChanging:(NSDictionary*)from to:(NSDictionary*)to insKeys:(NSSet*__strong*)pinss delKeys:(NSSet*__strong*)pdels changeKeys:(NSSet*__strong*)pchanges;
-(constchar*)cdescription;
+(const char*)cdescriptionFor:(id)object;
+(void)clearStaticData;
+(const char*)cnameFor:(id)object;
-(constchar*)cobjectName;
-(void)dealloc;
-(NSString*)description;
+(NSString*)descriptionFor:(id)object;
-(void)die;
+(Util*)getDefault;
+(void)logString:(NSString*)str object:(NSObject*)obj;
+(void)logStringRecurse:(NSString*)str object:(NSObject*)obj;
+(NSString*)nameFor:(id)object;
-(NSMutableString*)objectName;
+(bool)objectOrString:(id)a equals:(id)b;

@end









#endif // INCLUDE_IFACE_D0

#ifdef INCLUDE_IFACE_D1









@interface RequestProxy : NSObject<ClassObject, Object, WeakListItem> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_RequestProxy; @protected
    bool debugAutorelease;
    bool isZombie;
    NSObject<WeakList>* list;
    Endpoint1* v_listAsHead_endpoint;
    Endpoint1* v_listAsTail_endpoint;
    Endpoint1* v_next_endpoint;
    LL objectIDInClass;
    LL objectIDInTotal;
    Endpoint1* v_prev_endpoint;
    Endpoint1* v_request_endpoint;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readonly) bool isZombie;
@property (weak,nonatomic,readwrite) NSObject<WeakList>* list;
@property (nonatomic,readwrite) NSObject<WeakList>* listAsHead;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* listAsHead_endpoint;
@property (nonatomic,readwrite) NSObject<WeakList>* listAsTail;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* listAsTail_endpoint;
@property (nonatomic,readwrite) NSObject<WeakListItem>* next;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* next_endpoint;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
@property (nonatomic,readwrite) NSObject<WeakListItem>* prev;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* prev_endpoint;
@property (nonatomic,readwrite) NSObject<Request>* request;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* request_endpoint;
-(void)_startObjectOfClassRequestProxy;
-(void)append;
-(constchar*)cdescription;
-(constchar*)cobjectName;
-(void)dealloc;
-(NSString*)description;
-(void)die;
-(RequestProxy*)initWithRequest:(NSObject<Request>*)request;
-(NSNumber*)isAcceptableListAsHead:(id)alistAsHead;
-(NSNumber*)isAcceptableListAsTail:(id)alistAsTail;
-(NSNumber*)isAcceptableNext:(id)anext;
-(NSNumber*)isAcceptablePrev:(id)aprev;
-(NSNumber*)isAcceptableRequest:(id)arequest;
-(void)linkAfter:(NSObject<WeakListItem>*)prev;
-(void)linkBefore:(NSObject<WeakListItem>*)next;
-(NSObject<WeakList>*)list;
-(NSObject<WeakList>*)listAsHead;
-(Endpoint1*)listAsHead_endpoint;
-(NSObject<LinkEndpoint>*)listAsHeadToEndpoint:(id)alistAsHead;
-(NSObject<WeakList>*)listAsTail;
-(Endpoint1*)listAsTail_endpoint;
-(NSObject<LinkEndpoint>*)listAsTailToEndpoint:(id)alistAsTail;
-(NSObject<WeakListItem>*)next;
-(Endpoint1*)next_endpoint;
-(NSObject<LinkEndpoint>*)nextToEndpoint:(id)anext;
-(NSMutableString*)objectName;
-(void)prepend;
-(NSObject<WeakListItem>*)prev;
-(Endpoint1*)prev_endpoint;
-(NSObject<LinkEndpoint>*)prevToEndpoint:(id)aprev;
-(NSObject<Request>*)request;
-(Endpoint1*)request_endpoint;
-(NSObject<LinkEndpoint>*)requestToEndpoint:(id)arequest;
-(void)retract;
-(void)setList:(NSObject<WeakList>*)v;
-(void)setListAsHead:(NSObject<WeakList>*)v;
-(void)setListAsHead_endpoint:(Endpoint1*)v;
-(void)setListAsTail:(NSObject<WeakList>*)v;
-(void)setListAsTail_endpoint:(Endpoint1*)v;
-(void)setNext:(NSObject<WeakListItem>*)v;
-(void)setNext_endpoint:(Endpoint1*)v;
-(void)setPrev:(NSObject<WeakListItem>*)v;
-(void)setPrev_endpoint:(Endpoint1*)v;
-(void)setRequest:(NSObject<Request>*)v;
-(void)setRequest_endpoint:(Endpoint1*)v;
-(void)unlink;

@end









@interface WeakList : NSObject<BaseObject, ClassObject, Object, WeakList> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_WeakList; @protected
    Unsigned _count;
    bool debugAutorelease;
    Endpoint1* v_headItem_endpoint;
    bool isZombie;
    LL objectIDInClass;
    LL objectIDInTotal;
    Endpoint1* v_tailItem_endpoint;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readwrite) Unsigned _count;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readonly) Unsigned count;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readwrite) NSObject<WeakListItem>* headItem;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* headItem_endpoint;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
@property (nonatomic,readwrite) NSObject<WeakListItem>* tailItem;
@property (strong,nonatomic,readwrite/*(public readonly)*/) Endpoint1* tailItem_endpoint;
-(void)_startObjectOfClassWeakList;
-(void)append:(NSObject<WeakListItem>*)item;
-(constchar*)cdescription;
-(constchar*)cobjectName;
-(Unsigned)count;
-(void)dealloc;
-(NSString*)description;
-(void)die;
+(WeakList*)get;
-(NSObject<WeakListItem>*)headItem;
-(Endpoint1*)headItem_endpoint;
-(NSObject<LinkEndpoint>*)headItemToEndpoint:(id)aheadItem;
-(WeakList*)init;
-(NSNumber*)isAcceptableHeadItem:(id)aheadItem;
-(NSNumber*)isAcceptableTailItem:(id)atailItem;
-(void)link:(NSObject<WeakListItem>*)item after:(NSObject<WeakListItem>*)prev;
-(void)link:(NSObject<WeakListItem>*)item before:(NSObject<WeakListItem>*)next;
-(NSMutableString*)objectName;
-(void)prepend:(NSObject<WeakListItem>*)item;
-(void)retract;
-(void)setHeadItem:(NSObject<WeakListItem>*)v;
-(void)setHeadItem_endpoint:(Endpoint1*)v;
-(void)setTailItem:(NSObject<WeakListItem>*)v;
-(void)setTailItem_endpoint:(Endpoint1*)v;
-(void)setWithDictionary:(NSDictionary*)d;
-(NSObject<WeakListItem>*)tailItem;
-(Endpoint1*)tailItem_endpoint;
-(NSObject<LinkEndpoint>*)tailItemToEndpoint:(id)atailItem;

@end









#endif // INCLUDE_IFACE_D1

#ifdef INCLUDE_IFACE_D2









@interface LRUCacheItem : NSObject<ClassObject, LRUCacheItem, Object> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_LRUCacheItem; @protected
    NSObject<NSCopying>* v__cacheKey;
    float age;
    NSObject<LRUCache>* cache;
    bool debugAutorelease;
    float initialSize;
    bool isZombie;
    NSObject<List>* list;
    NSObject<ListItem>* v_next;
    NSObject* object;
    LL objectIDInClass;
    LL objectIDInTotal;
    NSObject<ListItem>* v_prev;
    float size;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (strong,nonatomic,readwrite) NSObject<NSCopying>* _cacheKey;
@property (nonatomic,readwrite) float age;
@property (strong,nonatomic,readwrite) NSObject<LRUCache>* cache;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readwrite) float initialSize;
@property (nonatomic,readonly) bool isZombie;
@property (weak,nonatomic,readwrite) NSObject<List>* list;
@property (strong,nonatomic,readwrite) NSObject<ListItem>* next;
@property (strong,nonatomic,readonly) NSObject* object;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
@property (weak,nonatomic,readwrite) NSObject<ListItem>* prev;
@property (nonatomic,readonly) float size;
-(void)_startObjectOfClassLRUCacheItem;
-(NSObject<NSCopying>*)_cacheKey;
-(void)append;
-(NSObject<LRUCache>*)cache;
-(constchar*)cdescription;
-(constchar*)cobjectName;
-(void)dealloc;
-(NSString*)description;
-(void)die;
-(LRUCacheItem*)initWithObject:(NSObject*)aobject size:(float)asize;
-(void)linkAfter:(NSObject<ListItem>*)prev;
-(void)linkBefore:(NSObject<ListItem>*)next;
-(NSObject<List>*)list;
-(NSObject<ListItem>*)next;
-(NSObject*)object;
-(NSMutableString*)objectName;
-(void)prepend;
-(NSObject<ListItem>*)prev;
-(void)set_cacheKey:(NSObject<NSCopying>*)v;
-(void)setCache:(NSObject<LRUCache>*)v;
-(void)setList:(NSObject<List>*)v;
-(void)setNext:(NSObject<ListItem>*)v;
-(void)setPrev:(NSObject<ListItem>*)v;
-(void)unlink;

@end









@interface RequestCaches : NSObject<BaseObject, ClassObject, Object, RootCodable> {
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_RequestCaches; @protected
    EndpointD* v_caches;
    NSString* v_codingFilename;
    bool debugAutorelease;
    NSString* v_documentsCodingFilename;
    bool isZombie;
    LL objectIDInClass;
    LL objectIDInTotal;
}

@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readwrite) NSData* asData;
@property (nonatomic,readwrite) NSDictionary* asDictionary;
@property (strong,nonatomic,readwrite/*(public readonly)*/) EndpointD* caches;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (strong,nonatomic,readwrite) NSString* codingFilename;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (nonatomic,readonly) NSString* description;
@property (strong,nonatomic,readwrite) NSString* documentsCodingFilename;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
@property (nonatomic,readonly) NSObject<Request>* worthiestRequest;
-(void)_startObjectOfClassRequestCaches;
-(NSData*)asData;
-(NSDictionary*)asDictionary;
-(NSObject<RequestCache>*)cacheForKey:(id<NSCopying>)key;
-(EndpointD*)caches;
-(NSObject<LinkEndpoint>*)cacheToEndpoint:(id)acache;
-(constchar*)cdescription;
-(void)clearCaches;
-(constchar*)cobjectName;
-(NSString*)codingFilename;
-(void)dealloc;
-(bool)deleteCodableFile;
-(NSString*)description;
-(void)die;
-(NSString*)documentsCodingFilename;
+(RequestCaches*)get;
-(Int)goForSeconds:(float)sec;
-(bool)goNext;
-(RequestCaches*)init;
-(NSNumber*)isAcceptableCache:(id)acache;
-(void)loadCodable;
-(void)loadCodableFromFilename:(NSString*)fn;
-(NSMutableString*)objectName;
-(void)removeAllCaches;
-(void)removeCacheForKey:(id<NSCopying>)key;
-(void)retract;
-(void)saveCodable;
-(void)saveCodableToFilename:(NSString*)fn;
-(void)saveCodableToServer;
-(void)setAsData:(NSData*)v;
-(void)setAsDictionary:(NSDictionary*)v;
-(void)setCache:(id)v forKey:(id<NSCopying>)key;
-(void)setCaches:(EndpointD*)v;
-(void)setCodingFilename:(NSString*)v;
-(void)setDocumentsCodingFilename:(NSString*)v;
-(void)setWithDictionary:(NSDictionary*)d;
-(NSObject<Request>*)worthiestRequest;

@end









#endif // INCLUDE_IFACE_D2

#ifdef INCLUDE_IFACE_D3









@interface LRUCache : NSMutableDictionary<BaseObject, ClassObject, LRUCache, Object> {
    NSDictionary* __dictionary;
    NSMutableDictionary* __mutableDictionary;
    LL __owner_context;
    @private ULL __private_access_thread_mask_in_LRUCache; @protected
    bool debugAutorelease;
    NSDictionary* delegateForDictionary;
    Unsigned dictionary_count;
    keyval100 dictionary_objects;
    NSObject<MutableDictionaryDelegate>* dictionaryDelegate;
    NSObject<ListItem>* v_headItem;
    Int imi;
    bool insertsWeakObjectsByDefault;
    bool isZombie;
    Int maxCount;
    float maxSize;
    LL objectIDInClass;
    LL objectIDInTotal;
    NSObject<ListItem>* v_tailItem;
    float totalSize;
    long version;
    Int weakObjectCount;
}

@property (strong,nonatomic,readonly) NSDictionary* __dictionary;
@property (strong,nonatomic,readonly) NSMutableDictionary* __mutableDictionary;
@property (nonatomic,readwrite) LL __owner_context;
@property (nonatomic,readonly) NSArray* allKeys;
@property (nonatomic,readonly) NSArray* allValues;
@property (nonatomic,readwrite) NSDictionary* asDictionary;
@property (nonatomic,readonly) constchar* cdescription;
@property (nonatomic,readonly) constchar* cobjectName;
@property (atomic,readonly) Unsigned count;
@property (nonatomic,readwrite) bool debugAutorelease;
@property (weak,nonatomic,readwrite) NSDictionary* delegateForDictionary;
@property (nonatomic,readonly) NSString* description;
@property (nonatomic,readonly) NSString* descriptionInStringsFileFormat;
@property (nonatomic,readwrite) Unsigned dictionary_count;
@property (nonatomic,readwrite) keyval100 dictionary_objects;
@property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate>* dictionaryDelegate;
@property (nonatomic,readonly) NSDate* fileCreationDate;
@property (nonatomic,readonly) BOOL fileExtensionHidden;
@property (nonatomic,readonly) NSNumber* fileGroupOwnerAccountID;
@property (nonatomic,readonly) NSString* fileGroupOwnerAccountName;
@property (nonatomic,readonly) OSType fileHFSCreatorCode;
@property (nonatomic,readonly) OSType fileHFSTypeCode;
@property (nonatomic,readonly) BOOL fileIsAppendOnly;
@property (nonatomic,readonly) BOOL fileIsImmutable;
@property (nonatomic,readonly) NSDate* fileModificationDate;
@property (nonatomic,readonly) NSNumber* fileOwnerAccountID;
@property (nonatomic,readonly) NSString* fileOwnerAccountName;
@property (nonatomic,readonly) Unsigned filePosixPermissions;
@property (nonatomic,readonly) ULL fileSize;
@property (nonatomic,readonly) Unsigned fileSystemFileNumber;
@property (nonatomic,readonly) Int fileSystemNumber;
@property (nonatomic,readonly) NSString* fileType;
@property (strong,nonatomic,readwrite) NSObject<ListItem>* headItem;
@property (nonatomic,readwrite) Int imi;
@property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
@property (nonatomic,readonly) bool isZombie;
@property (nonatomic,readonly) NSEnumerator* keyEnumerator;
@property (nonatomic,readwrite) Int maxCount;
@property (nonatomic,readwrite) float maxSize;
@property (nonatomic,readonly) NSEnumerator* objectEnumerator;
@property (nonatomic,readonly) LL objectIDInClass;
@property (nonatomic,readonly) LL objectIDInTotal;
@property (nonatomic,readonly) NSMutableString* objectName;
@property (weak,nonatomic,readwrite) NSObject<ListItem>* tailItem;
@property (nonatomic,readwrite) float totalSize;
@property (nonatomic,readwrite) long version;
@property (nonatomic,readwrite) CollectionWeakness weakness;
@property (nonatomic,readonly) Int weakObjectCount;
-(void)_startObjectOfClassLRUCache;
-(NSDictionary*)__dictionary;
-(NSMutableDictionary*)__mutableDictionary;
-(bool)_removeObjectForKey:(id<NSCopying>)key;
-(bool)_setObject:(id)object forKey:(id<NSCopying>)key;
-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v;
-(NSArray*)allKeys;
-(NSArray*)allKeysForObject:(id)object;
-(NSArray*)allValues;
-(NSDictionary*)asDictionary;
-(constchar*)cdescription;
-(void)clear;
-(constchar*)cobjectName;
-(id)copyWithZone:(NSZone*)zone;
-(Unsigned)count;
-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len;
-(void)countWeakObjects;
-(void)dealloc;
-(NSDictionary*)delegateForDictionary;
-(void)delegateForDictionaryChanged;
-(NSObject*)derefedObjectForKey:(id<NSCopying>)key;
-(NSString*)description;
-(NSString*)descriptionInStringsFileFormat;
-(NSString *)descriptionWithLocale:(id)locale;
-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
+(LRUCache*)dictionary;
-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate;
+(id)dictionaryWithCapacity:(Unsigned)numItems;
+(LRUCache*)dictionaryWithContentsOfFile:(NSString*)file;
+(LRUCache*)dictionaryWithContentsOfURL:(NSURL*)url;
+(LRUCache*)dictionaryWithDictionary:(NSDictionary*)dictionary;
+(LRUCache*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key;
+(LRUCache*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(void)die;
-(void)encodeWithCoder:(NSCoder*)coder;
-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block;
-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block;
-(NSDate*)fileCreationDate;
-(BOOL)fileExtensionHidden;
-(NSNumber*)fileGroupOwnerAccountID;
-(NSString*)fileGroupOwnerAccountName;
-(OSType)fileHFSCreatorCode;
-(OSType)fileHFSTypeCode;
-(BOOL)fileIsAppendOnly;
-(BOOL)fileIsImmutable;
-(NSDate*)fileModificationDate;
-(NSNumber*)fileOwnerAccountID;
-(NSString*)fileOwnerAccountName;
-(Unsigned)filePosixPermissions;
-(ULL)fileSize;
-(Unsigned)fileSystemFileNumber;
-(Int)fileSystemNumber;
-(NSString*)fileType;
+(LRUCache*)get;
-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
-(Unsigned)hash;
-(NSObject<ListItem>*)headItem;
-(LRUCache*)init;
-(LRUCache*)initWithCapacity:(Unsigned)numItems;
-(LRUCache*)initWithCoder:(NSCoder*)coder;
-(LRUCache*)initWithContentsOfFile:(NSString*)file;
-(LRUCache*)initWithContentsOfURL:(NSURL*)url;
-(LRUCache*)initWithDictionary:(NSDictionary*)dictionary;
-(LRUCache*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy;
-(LRUCache*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
-(BOOL)isEqual:(id)obj;
-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary;
-(NSEnumerator*)keyEnumerator;
-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate;
-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate;
-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr;
-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector;
-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
-(NSObject<LRUCacheItem>*)makeForKey:(NSObject<NSCopying>*)key;
-(id)mutableCopyWithZone:(NSZone*)zone;
-(NSString*)nextPath;
-(NSEnumerator*)objectEnumerator;
-(id)objectForKey:(id<NSCopying>)key;
-(NSMutableString*)objectName;
-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
-(void)removedDelegate;
-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v;
-(void)removeObjectForKey:(id<NSCopying>)key;
-(void)setAsDictionary:(NSDictionary*)v;
-(void)setDelegateForDictionary:(NSDictionary*)v;
-(void)setHeadItem:(NSObject<ListItem>*)v;
-(void)setObject:(id)object forKey:(id<NSCopying>)key;
-(void)setTailItem:(NSObject<ListItem>*)v;
-(void)setWeakness:(CollectionWeakness)v;
-(void)setWithDictionary:(NSDictionary*)d;
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak;
#endif// __SWIFT__
-(void)stateOK;
-(NSObject<ListItem>*)tailItem;
-(id)valueForKey:(NSString*)key;
-(CollectionWeakness)weakness;
-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key;
-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

@end









#endif // INCLUDE_IFACE_D3

#else // INCLUDE_IFACE





















#pragma mark -
#pragma mark Implementations:










// !!!: Implementations: i


















        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ IntCarrier
#define _WIClass_ IntCarrier__
#define _className_ intCarrier
#define _Class_ IntCarrier__
@implementation IntCarrier

@synthesize __owner_context=__owner_context;
@synthesize debugAutorelease=debugAutorelease;
@synthesize intValue=intValue;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
-(void)_startObjectOfClassIntCarrier {MSGSTART("IntCarrier:-(void)_startObjectOfClassIntCarrier")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i0*/}
+(IntCarrier*)carrierWithInt:(Int)v {MSGSTART("IntCarrier:+(IntCarrier*)carrierWithInt:(Int)v")

          return([[IntCarrier alloc] initWithInt:v]);
    }
-(constchar*)cdescription {MSGSTART("IntCarrier:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(constchar*)cobjectName {MSGSTART("IntCarrier:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)dealloc {MSGSTART("IntCarrier:-(void)dealloc")
  
  /*i-151*/[self die];
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("IntCarrier:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i0*/return([NSString stringWithFormat:@"%d",(int)intValue]);
  
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("IntCarrier:-(void)die")
  
  /*i900*/}
-(IntCarrier*)initWithInt:(Int)v {MSGSTART("IntCarrier:-(IntCarrier*)initWithInt:(Int)v")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i0*/intValue=v;
      
  /*i11*/[self _startObjectOfClassIntCarrier];

/*i10001*/return(self);}
-(NSMutableString*)objectName {MSGSTART("IntCarrier:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_


















// !!!: Implementations: l


















        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ LRUCache
#define _WIClass_ LRUCache__
#define _className_ lRUCache
#define _Class_ LRUCache__
@implementation LRUCache

@synthesize __owner_context=__owner_context;
@synthesize debugAutorelease=debugAutorelease;
@synthesize dictionary_count=dictionary_count;
@synthesize dictionary_objects=dictionary_objects;
@synthesize imi=imi;
@synthesize insertsWeakObjectsByDefault=insertsWeakObjectsByDefault;
@synthesize isZombie=isZombie;
@synthesize maxCount=maxCount;
@synthesize maxSize=maxSize;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
@synthesize totalSize=totalSize;
@synthesize version=version;
@synthesize weakObjectCount=weakObjectCount;
-(void)_startObjectOfClassLRUCache {MSGSTART("LRUCache:-(void)_startObjectOfClassLRUCache")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i-500*//*ivar*/imi=(1);
   /*ivar*/maxSize=(100000000);
   /*ivar*/version=(1);
   /*ivar*/maxCount=(1000000);
  
  /*i0*/self.delegateForDictionary=self;
    





}
-(NSDictionary*)__dictionary {MSGSTART("LRUCache:-(NSDictionary*)__dictionary")
  
  /*i-999*/NSDictionary* ret=__dictionary;
  /*i999*/return(ret);}
-(NSMutableDictionary*)__mutableDictionary {MSGSTART("LRUCache:-(NSMutableDictionary*)__mutableDictionary")
  
  /*i-999*/NSMutableDictionary* ret=__mutableDictionary;
  /*i999*/return(ret);}
-(bool)_removeObjectForKey:(id<NSCopying>)key {MSGSTART("LRUCache:-(bool)_removeObjectForKey:(id<NSCopying>)key")

          NSObject *object=[__dictionary objectForKey:key];
          if (!object) return(NO);
          [self willReplaceObject:object withObject:nil forKey:key];
          if ([object isWeakSelf]) --weakObjectCount;
          [__mutableDictionary removeObjectForKey:key];
          [self didReplaceObject:object withObject:nil forKey:key];
          return(YES);
    }
-(bool)_setObject:(id)object forKey:(id<NSCopying>)key {MSGSTART("LRUCache:-(bool)_setObject:(id)object forKey:(id<NSCopying>)key")

          if (!object) return([self _removeObjectForKey:key]);
          id was=[__dictionary objectForKey:key];
          if (was==object) return(NO);
          bool weak=insertsWeakObjectsByDefault;
          if (![self shouldAddObject:object forKey:key makeWeak:weak]) return(NO);
          if (was) {
                [self willReplaceObject:was withObject:object forKey:key];
                if ([was isWeakSelf]) --weakObjectCount;
                [__mutableDictionary setObject:(weak?[object weakSelf]:[object strongSelf]) forKey:key];
                if (weak) weakObjectCount++;
                [self didReplaceObject:was withObject:object forKey:key];
            }
          else {
                [self willReplaceObject:nil withObject:object forKey:key];
                [__mutableDictionary setObject:(weak?[object weakSelf]:[object strongSelf]) forKey:key];
                if (weak) weakObjectCount++;
                [self didReplaceObject:nil withObject:object forKey:key];
            }
          return(YES);
    }
-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v {MSGSTART("LRUCache:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

          if (v.dictionaryDelegate) return;
          if (v==self) return;
          if (dictionaryDelegate) [dictionaryDelegate addDelegate:v];
          else {
                dictionaryDelegate=v;
                v.delegateForDictionary=self.delegateForDictionary;
                [v delegateForDictionaryChanged];
            }
    }
-(NSArray*)allKeys {MSGSTART("LRUCache:-(NSArray*)allKeys")
  return([__dictionary allKeys]);}
-(NSArray*)allKeysForObject:(id)object {MSGSTART("LRUCache:-(NSArray*)allKeysForObject:(id)object")
  return([__dictionary allKeysForObject:object]);}
-(NSArray*)allValues {MSGSTART("LRUCache:-(NSArray*)allValues")
  return([__dictionary allValues]);}
-(NSDictionary*)asDictionary {MSGSTART("LRUCache:-(NSDictionary*)asDictionary")
  
  /*i-999*/NSMutableDictionary *ret=[NSMutableDictionary dictionary];NSDictionary *imret=ret;
              
  /*i0*/NSMutableArray *list=[[NSMutableArray alloc] init];
              for (LRUCacheItem *item=(LRUCacheItem*)self.headItem;item;item=(LRUCacheItem*)item.next) {
                    UIONLY(
                      if ([item.object isKindOfClass:[UIImage class]]) {
                            //[(UIImage*)item.object writeImageToFileWithPath:[self nextPath]];
                            [ret setObject:[NSDictionary dictionaryWithObjectsAndKeys:
                                    @(item.size),@"size",
                                    @(item.age),@"age",
                                    @(item.initialSize),@"initialSize",
                                    UIImagePNGRepresentation((UIImage*)item.object),@"objectImage",
                                    nil] forKey:item._cacheKey];
                            [list addObject:item._cacheKey];
                        }
                      else )
                    NOTUI(
                      if ([item.object isKindOfClass:[NSImage class]]) {
                            NSImage *image=(NSImage*)item.object;
                            [image lockFocus];
                            NSBitmapImageRep *bitmapRep = [[NSBitmapImageRep alloc] initWithFocusedViewRect:NSMakeRect(0, 0, image.size.width, image.size.height)];
                            [image unlockFocus];
                            NSData *data=[bitmapRep representationUsingType:NSPNGFileType properties:nil];
                            [ret setObject:[NSDictionary dictionaryWithObjectsAndKeys:
                                    @(item.size),@"size",
                                    @(item.age),@"age",
                                    @(item.initialSize),@"initialSize",
                                    data,@"objectImage",
                                    nil] forKey:item._cacheKey];
                            [list addObject:item._cacheKey];
                        }
                      else )
                    if ([item.object conformsToProtocol:@protocol(NSCoding)]) {
                          [ret setObject:[NSDictionary dictionaryWithObjectsAndKeys:
                                  @(item.size),@"size",
                                  @(item.age),@"age",
                                  @(item.initialSize),@"initialSize",
                                  item.object,@"object",
                                  nil] forKey:item._cacheKey];
                          [list addObject:item._cacheKey];
                      }
                }
              if (ret.count) [ret setObject:list.copy forKey:@"___li_st___"];
        

              
  /*i999*/return(imret);
        }
-(constchar*)cdescription {MSGSTART("LRUCache:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)clear {MSGSTART("LRUCache:-(void)clear")


          while (self.headItem) [self.headItem unlink];
      
  /*i100*/[self removeAllObjects];
        totalSize=0;
    }
-(constchar*)cobjectName {MSGSTART("LRUCache:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(id)copyWithZone:(NSZone*)zone {MSGSTART("LRUCache:-(id)copyWithZone:(NSZone*)zone")

          return([[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary]);
    }
-(Unsigned)count {MSGSTART("LRUCache:-(Unsigned)count")
  return([__dictionary count]);}
-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len {MSGSTART("LRUCache:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

          Unsigned ret=[__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
          return(ret);
    }
-(void)countWeakObjects {MSGSTART("LRUCache:-(void)countWeakObjects")

          Int c=0;
          for (kid o in __dictionary) if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
          weakObjectCount=c;
    }
-(void)dealloc {MSGSTART("LRUCache:-(void)dealloc")
  
  /*i-500*/[self clear];
/*i-151*/[self die];
/*i-100*/[self removeAllObjects];
/*i0*/v_headItem=nil;

__mutableDictionary=nil;

dictionaryDelegate=nil;

__dictionary=nil;
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSDictionary*)delegateForDictionary {MSGSTART("LRUCache:-(NSDictionary*)delegateForDictionary")
  
  /*i-999*/NSDictionary* ret=delegateForDictionary;
  /*i999*/return(ret);}
-(void)delegateForDictionaryChanged {MSGSTART("LRUCache:-(void)delegateForDictionaryChanged")
}
-(NSObject*)derefedObjectForKey:(id<NSCopying>)key {MSGSTART("LRUCache:-(NSObject*)derefedObjectForKey:(id<NSCopying>)key")
  
  /*i-999*/NSObject *ret=[self objectForKey:key];
          
  /*i-10*/if ([ret isKindOfClass:[LRUCacheItem class]]) {
                ret=((LRUCacheItem*)ret).object;
            }
          
  /*i999*/return(ret);
    }
-(NSString*)description {MSGSTART("LRUCache:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i0*/return([__dictionary description]);
  
  /*i999*/return(ret);
    }
-(NSString*)descriptionInStringsFileFormat {MSGSTART("LRUCache:-(NSString*)descriptionInStringsFileFormat")
  return([__dictionary descriptionInStringsFileFormat]);}
-(NSString *)descriptionWithLocale:(id)locale {MSGSTART("LRUCache:-(NSString *)descriptionWithLocale:(id)locale")

          return([__dictionary descriptionWithLocale:locale]);
    }
-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {MSGSTART("LRUCache:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

          return([__dictionary descriptionWithLocale:locale indent:level]);
    }
+(LRUCache*)dictionary {MSGSTART("LRUCache:+(LRUCache*)dictionary")
  return([[LRUCache alloc] init]);}
-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate {MSGSTART("LRUCache:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")
  
  /*i-999*/NSObject<MutableDictionaryDelegate>* ret=dictionaryDelegate;
  /*i999*/return(ret);}
+(id)dictionaryWithCapacity:(Unsigned)numItems {MSGSTART("LRUCache:+(id)dictionaryWithCapacity:(Unsigned)numItems")

          return([[LRUCache alloc] initWithCapacity:numItems]);
    }
+(LRUCache*)dictionaryWithContentsOfFile:(NSString*)file {MSGSTART("LRUCache:+(LRUCache*)dictionaryWithContentsOfFile:(NSString*)file")
  return([[LRUCache alloc] initWithContentsOfFile:file]);}
+(LRUCache*)dictionaryWithContentsOfURL:(NSURL*)url {MSGSTART("LRUCache:+(LRUCache*)dictionaryWithContentsOfURL:(NSURL*)url")
  return([[LRUCache alloc] initWithContentsOfURL:url]);}
+(LRUCache*)dictionaryWithDictionary:(NSDictionary*)dictionary {MSGSTART("LRUCache:+(LRUCache*)dictionaryWithDictionary:(NSDictionary*)dictionary")
  return([[LRUCache alloc] initWithDictionary:dictionary]);}
+(LRUCache*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key {MSGSTART("LRUCache:+(LRUCache*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
  return([[LRUCache alloc] initWithObjects:&object forKeys:&key count:1]);}
+(LRUCache*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {MSGSTART("LRUCache:+(LRUCache*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
  return([[LRUCache alloc] initWithObjects:objects forKeys:keys count:/*ivar*/count]);}
-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key {MSGSTART("LRUCache:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

          {
                if (toObject) {
                      NSObject<LRUCacheItem> *item=(NSObject<LRUCacheItem>*)toObject;
                      [item prepend];
                      while ((self.tailItem!=item)&&((self.count>maxCount)||(self.totalSize>maxSize))) {
                            [self removeObjectForKey:((NSObject<LRUCacheItem>*)self.tailItem)._cacheKey];
                        }
                  }
            }
    

          
  /*i100*/[dictionaryDelegate didReplaceObject:fromObject withObject:toObject forKey:key];
    }
-(void)die {MSGSTART("LRUCache:-(void)die")
  
  /*i900*/}
-(void)encodeWithCoder:(NSCoder*)coder {MSGSTART("LRUCache:-(void)encodeWithCoder:(NSCoder*)coder")

          [__dictionary encodeWithCoder:coder];
    }
-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block {MSGSTART("LRUCache:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

          [__dictionary enumerateKeysAndObjectsUsingBlock:block];
    }
-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block {MSGSTART("LRUCache:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

          [__dictionary enumerateKeysAndObjectsWithOptions:opts usingBlock:block];
    }
-(NSDate*)fileCreationDate {MSGSTART("LRUCache:-(NSDate*)fileCreationDate")
  return([__dictionary fileCreationDate]);}
-(BOOL)fileExtensionHidden {MSGSTART("LRUCache:-(BOOL)fileExtensionHidden")
  return([__dictionary fileExtensionHidden]);}
-(NSNumber*)fileGroupOwnerAccountID {MSGSTART("LRUCache:-(NSNumber*)fileGroupOwnerAccountID")
  return([__dictionary fileGroupOwnerAccountID]);}
-(NSString*)fileGroupOwnerAccountName {MSGSTART("LRUCache:-(NSString*)fileGroupOwnerAccountName")
  return([__dictionary fileGroupOwnerAccountName]);}
-(OSType)fileHFSCreatorCode {MSGSTART("LRUCache:-(OSType)fileHFSCreatorCode")
  return([__dictionary fileHFSCreatorCode]);}
-(OSType)fileHFSTypeCode {MSGSTART("LRUCache:-(OSType)fileHFSTypeCode")
  return([__dictionary fileHFSTypeCode]);}
-(BOOL)fileIsAppendOnly {MSGSTART("LRUCache:-(BOOL)fileIsAppendOnly")
  return([__dictionary fileIsAppendOnly]);}
-(BOOL)fileIsImmutable {MSGSTART("LRUCache:-(BOOL)fileIsImmutable")
  return([__dictionary fileIsImmutable]);}
-(NSDate*)fileModificationDate {MSGSTART("LRUCache:-(NSDate*)fileModificationDate")
  return([__dictionary fileModificationDate]);}
-(NSNumber*)fileOwnerAccountID {MSGSTART("LRUCache:-(NSNumber*)fileOwnerAccountID")
  return([__dictionary fileOwnerAccountID]);}
-(NSString*)fileOwnerAccountName {MSGSTART("LRUCache:-(NSString*)fileOwnerAccountName")
  return([__dictionary fileOwnerAccountName]);}
-(Unsigned)filePosixPermissions {MSGSTART("LRUCache:-(Unsigned)filePosixPermissions")
  return([__dictionary filePosixPermissions]);}
-(ULL)fileSize {MSGSTART("LRUCache:-(ULL)fileSize")
  return([__dictionary fileSize]);}
-(Unsigned)fileSystemFileNumber {MSGSTART("LRUCache:-(Unsigned)fileSystemFileNumber")
  return([__dictionary fileSystemFileNumber]);}
-(Int)fileSystemNumber {MSGSTART("LRUCache:-(Int)fileSystemNumber")
  return([__dictionary fileSystemNumber]);}
-(NSString*)fileType {MSGSTART("LRUCache:-(NSString*)fileType")
  return([__dictionary fileType]);}
+(LRUCache*)get {MSGSTART("LRUCache:+(LRUCache*)get")
  return([[LRUCache alloc] init]);}
-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {MSGSTART("LRUCache:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

          [__dictionary getObjects:objects andKeys:keys];
    }
-(Unsigned)hash {MSGSTART("LRUCache:-(Unsigned)hash")
  return((Unsigned)obfuscateULL(objectIDInTotal));}
-(NSObject<ListItem>*)headItem {MSGSTART("LRUCache:-(NSObject<ListItem>*)headItem")
  
  /*i-999*/NSObject<ListItem>* ret=v_headItem;
  /*i999*/return(ret);}
-(LRUCache*)init {MSGSTART("LRUCache:-(LRUCache*)init")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i-100*/__dictionary=__mutableDictionary=[[NSMutableDictionary alloc] init];
      
  /*i11*/[self _startObjectOfClassLRUCache];

/*i10001*/return(self);}
-(LRUCache*)initWithCapacity:(Unsigned)numItems {MSGSTART("LRUCache:-(LRUCache*)initWithCapacity:(Unsigned)numItems")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i-100*/__dictionary=__mutableDictionary=[[NSMutableDictionary alloc] initWithCapacity:numItems];
          if (insertsWeakObjectsByDefault) __dictionary=__mutableDictionary=__dictionary.weakMutableCopy;
      
  /*i11*/[self _startObjectOfClassLRUCache];

/*i10001*/return(self);}
-(LRUCache*)initWithCoder:(NSCoder*)coder {MSGSTART("LRUCache:-(LRUCache*)initWithCoder:(NSCoder*)coder")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i-100*/__dictionary=__mutableDictionary=[[NSMutableDictionary alloc] initWithCoder:coder];
          if (insertsWeakObjectsByDefault) __dictionary=__mutableDictionary=__dictionary.weakMutableCopy;
      
  /*i-99*/[self countWeakObjects];
    
/*i11*/[self _startObjectOfClassLRUCache];

/*i10001*/return(self);}
-(LRUCache*)initWithContentsOfFile:(NSString*)file {MSGSTART("LRUCache:-(LRUCache*)initWithContentsOfFile:(NSString*)file")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i-100*/__dictionary=__mutableDictionary=[[NSMutableDictionary alloc] initWithContentsOfFile:file];
          if (insertsWeakObjectsByDefault) __dictionary=__mutableDictionary=__dictionary.weakMutableCopy;
      
  /*i-99*/[self countWeakObjects];
    
/*i11*/[self _startObjectOfClassLRUCache];

/*i10001*/return(self);}
-(LRUCache*)initWithContentsOfURL:(NSURL*)url {MSGSTART("LRUCache:-(LRUCache*)initWithContentsOfURL:(NSURL*)url")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i-100*/__dictionary=__mutableDictionary=[[NSMutableDictionary alloc] initWithContentsOfURL:url];
          if (insertsWeakObjectsByDefault) __dictionary=__mutableDictionary=__dictionary.weakMutableCopy;
      
  /*i-99*/[self countWeakObjects];
    
/*i11*/[self _startObjectOfClassLRUCache];

/*i10001*/return(self);}
-(LRUCache*)initWithDictionary:(NSDictionary*)dictionary {MSGSTART("LRUCache:-(LRUCache*)initWithDictionary:(NSDictionary*)dictionary")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i-100*/__dictionary=__mutableDictionary=[[NSMutableDictionary alloc] initWithDictionary:dictionary];
          if (insertsWeakObjectsByDefault) __dictionary=__mutableDictionary=__dictionary.weakMutableCopy;
      
  /*i-99*/[self countWeakObjects];
    
/*i11*/[self _startObjectOfClassLRUCache];

/*i10001*/return(self);}
-(LRUCache*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy {MSGSTART("LRUCache:-(LRUCache*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i-100*/__dictionary=__mutableDictionary=[[NSMutableDictionary alloc] initWithDictionary:dictionary copyItems:copy];
          if (insertsWeakObjectsByDefault) __dictionary=__mutableDictionary=__dictionary.weakMutableCopy;
      
  /*i-99*/[self countWeakObjects];
    
/*i11*/[self _startObjectOfClassLRUCache];

/*i10001*/return(self);}
-(LRUCache*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {MSGSTART("LRUCache:-(LRUCache*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i-100*/__dictionary=__mutableDictionary=[[NSMutableDictionary alloc] initWithObjects:objects forKeys:keys count:/*ivar*/count];
          if (insertsWeakObjectsByDefault) __dictionary=__mutableDictionary=__dictionary.weakMutableCopy;
      
  /*i-99*/[self countWeakObjects];
    
/*i11*/[self _startObjectOfClassLRUCache];

/*i10001*/return(self);}
-(BOOL)isEqual:(id)obj {MSGSTART("LRUCache:-(BOOL)isEqual:(id)obj")
  
  /*i-999*/bool ret=(obj==self)||
                      ([obj respondsToSelector:@selector(objectIDInTotal)]&&
                        (((NSObject<ObjectEquate>*)obj).objectIDInTotal==objectIDInTotal));
          
  /*i999*/return(ret);
    }
-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary {MSGSTART("LRUCache:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
  return([__dictionary isEqualToDictionary:dictionary]);}
-(NSEnumerator*)keyEnumerator {MSGSTART("LRUCache:-(NSEnumerator*)keyEnumerator")
  return([__dictionary keyEnumerator]);}
-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate {MSGSTART("LRUCache:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

          return([__dictionary keysOfEntriesPassingTest:predicate]);
    }
-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate {MSGSTART("LRUCache:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

          return([__dictionary keysOfEntriesWithOptions:opts passingTest:predicate]);
    }
-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr {MSGSTART("LRUCache:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

          return([__dictionary keysSortedByValueUsingComparator:cmptr]);
    }
-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector {MSGSTART("LRUCache:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

          return([__dictionary keysSortedByValueUsingSelector:selector]);
    }
-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {MSGSTART("LRUCache:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

          return([__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr]);
    }
-(NSObject<LRUCacheItem>*)makeForKey:(NSObject<NSCopying>*)key {MSGSTART("LRUCache:-(NSObject<LRUCacheItem>*)makeForKey:(NSObject<NSCopying>*)key")
  
  /*i-999*/NSObject<LRUCacheItem> *ret=nil;
          
  /*i999*/return(ret);
    }
-(id)mutableCopyWithZone:(NSZone*)zone {MSGSTART("LRUCache:-(id)mutableCopyWithZone:(NSZone*)zone")

          return([[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary]);
    }
-(NSString*)nextPath {MSGSTART("LRUCache:-(NSString*)nextPath")

          NSString *dir=[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) lastObject];
          return([dir stringByAppendingFormat:@"/render_%04d.png",(int)imi++]);
    }
-(NSEnumerator*)objectEnumerator {MSGSTART("LRUCache:-(NSEnumerator*)objectEnumerator")
  return([__dictionary objectEnumerator]);}
-(id)objectForKey:(id<NSCopying>)key {MSGSTART("LRUCache:-(id)objectForKey:(id<NSCopying>)key")
  
  /*i-100*/NSObject<LRUCacheItem> *item=[__dictionary objectForKey:key];
          if (item) {
                totalSize-=item.initialSize;
                [item prepend];
                totalSize+=((item.initialSize=item.size));
            }
          else if ((item=[self makeForKey:(NSObject<NSCopying>*)key])) {
                [self setObject:item forKey:key];
            }
      
  /*i-10*/id ret=[__dictionary objectForKey:key];
          
  /*i999*/return(ret);
    }
-(NSMutableString*)objectName {MSGSTART("LRUCache:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }
-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {MSGSTART("LRUCache:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

          return([__dictionary objectsForKeys:keys notFoundMarker:anObject]);
    }
-(void)removedDelegate {MSGSTART("LRUCache:-(void)removedDelegate")
  
  /*i-100*/dictionaryDelegate=nil;}
-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v {MSGSTART("LRUCache:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

          if (dictionaryDelegate) {
                if (dictionaryDelegate==v) {
                      v.delegateForDictionary=nil;
                      dictionaryDelegate=v.dictionaryDelegate;
                      [v removedDelegate];
                      [v delegateForDictionaryChanged];
                  }
                else [dictionaryDelegate removeDelegate:v];
            }
    }
-(void)removeObjectForKey:(id<NSCopying>)key {MSGSTART("LRUCache:-(void)removeObjectForKey:(id<NSCopying>)key")

          if ([self _removeObjectForKey:key]) [self stateOK];
    }
-(void)setAsDictionary:(NSDictionary*)v {MSGSTART("LRUCache:-(void)setAsDictionary:(NSDictionary*)v")

              [self clear];

              NSArray *list=[v objectForKey:@"___li_st___"];
              for (NSString *key in list) if (![key isEqual:@"___li_st___"]) {
                    NSDictionary *d=[v objectForKey:key];
                    if (d) {
                          NSNumber *size=[d objectForKey:@"size"];
                          NSNumber *age=[d objectForKey:@"age"];
                          NSNumber *initialSize=[d objectForKey:@"initialSize"];
                          NSObject *object=[d objectForKey:@"object"];
                          UIONLY(
                            if (!object) {
                                  object=[d objectForKey:@"objectImage"];
                                  if (object) {
                                        if ([object isKindOfClass:[NSData class]]) object=[UIImage imageWithData:(NSData*)object];
                                        else object=nil;
                                    }
                              })
                          NOTUI(
                            if (!object) {
                                  object=[d objectForKey:@"objectImage"];
                                  if (object) {
                                        if ([object isKindOfClass:[NSData class]]) object=[[NSImage alloc] initWithData:(NSData*)object];
                                        else object=nil;
                                    }
                              })
                          if (size&&object) {
                                LRUCacheItem *item=[[LRUCacheItem alloc] initWithObject:object size:size.floatValue];
                                if (age) item.age=age.floatValue;
                                if (initialSize) item.initialSize=initialSize.floatValue;
                                [self setObject:item forKey:key];
                            }
                      }
                }
        

        }
-(void)setDelegateForDictionary:(NSDictionary*)v {MSGSTART("LRUCache:-(void)setDelegateForDictionary:(NSDictionary*)v")
  
  /*i-905*/if(delegateForDictionary==v)return;
  /*i-900*/{delegateForDictionary=(id)v;}}
-(void)setHeadItem:(NSObject<ListItem>*)v {MSGSTART("LRUCache:-(void)setHeadItem:(NSObject<ListItem>*)v")
  
  /*i-905*/if(v_headItem==v)return;
  /*i-900*/{v_headItem=(id)v;}}
-(void)setObject:(id)object forKey:(id<NSCopying>)key {MSGSTART("LRUCache:-(void)setObject:(id)object forKey:(id<NSCopying>)key")

          if ([self _setObject:object forKey:key]) [self stateOK];
    }
-(void)setTailItem:(NSObject<ListItem>*)v {MSGSTART("LRUCache:-(void)setTailItem:(NSObject<ListItem>*)v")
  
  /*i-905*/if(v_tailItem==v)return;
  /*i-900*/{v_tailItem=(id)v;}}
-(void)setWeakness:(CollectionWeakness)v {MSGSTART("LRUCache:-(void)setWeakness:(CollectionWeakness)v")

              switch (v) {
                    case CollectionIsEmpty:[self removeAllObjects];break;
                    case CollectionIsWeakAndStrong:default:break;
                    case CollectionIsWeak:
                        if (self.weakness&CollectionIsStrong) [self setDictionary:__dictionary.asWeak];
                        break;
                    case CollectionIsStrong:
                        if (self.weakness&CollectionIsWeak) [self setDictionary:__dictionary.asStrong];
                        break;
                }
        
}
-(void)setWithDictionary:(NSDictionary*)d {MSGSTART("LRUCache:-(void)setWithDictionary:(NSDictionary*)d")
}
#ifndef __SWIFT__
-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak {MSGSTART("LRUCache:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")
  
  /*i-999*/bool ret=YES;
          
  /*i0*/{
              if (![object conformsToProtocol:@protocol(LRUCacheItem)]) ret=NO;
              NSObject<LRUCacheItem> *item=(NSObject<LRUCacheItem>*)object;
              if (item.cache) return(NO);
          }
    

/*i100*/if (ret&&dictionaryDelegate) ret=[dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];
        
/*i999*/return(ret);
    }
#endif// __SWIFT__
-(void)stateOK {MSGSTART("LRUCache:-(void)stateOK")
  
  /*i-100*/version++;
  /*i0*/dictionary_count=0;
          for (id k in __dictionary) {
                dictionary_objects.keyvals[dictionary_count].key=(__bridge void*)k;
                dictionary_objects.keyvals[dictionary_count++].value=(__bridge void*)[__dictionary objectForKey:k];
                if (dictionary_count==100) break;
            }
          memset(dictionary_objects.keyvals+dictionary_count,0,sizeof(dictionary_objects.keyvals[0])*(100-dictionary_count));
          dictionary_count=__dictionary.count;
      
  /*i100*/[dictionaryDelegate stateOK];
    }
-(NSObject<ListItem>*)tailItem {MSGSTART("LRUCache:-(NSObject<ListItem>*)tailItem")
  
  /*i-999*/NSObject<ListItem>* ret=v_tailItem;
  /*i999*/return(ret);}
-(id)valueForKey:(NSString*)key {MSGSTART("LRUCache:-(id)valueForKey:(NSString*)key")
  return([__dictionary valueForKey:key]);}
-(CollectionWeakness)weakness {MSGSTART("LRUCache:-(CollectionWeakness)weakness")
  

  return(self.count?(weakObjectCount?(weakObjectCount==self.count?CollectionIsWeak:CollectionIsWeakAndStrong):CollectionIsWeak):CollectionIsEmpty);}
-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key {MSGSTART("LRUCache:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

          {
                if (fromObject) {
                      NSObject<LRUCacheItem> *item=(NSObject<LRUCacheItem>*)fromObject;
                      totalSize-=item.initialSize;
                      [item unlink];
                      item.list=item.cache=nil;
                      item._cacheKey=nil;
                  }            

                if (toObject) {
                      NSObject<LRUCacheItem> *item=(NSObject<LRUCacheItem>*)toObject;
                      item.list=item.cache=self;
                      item._cacheKey=(NSObject<NSCopying>*)key;
                      totalSize+=((item.initialSize=item.size));
                  }
            }
    

          
  /*i100*/[dictionaryDelegate willReplaceObject:fromObject withObject:toObject forKey:key];
    }
-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {MSGSTART("LRUCache:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

          return([__dictionary writeToFile:path atomically:flag]);
    }
-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {MSGSTART("LRUCache:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

          return([__dictionary writeToURL:url atomically:flag]);
    }

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_









        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ LRUCacheItem
#define _WIClass_ LRUCacheItem__
#define _className_ lRUCacheItem
#define _Class_ LRUCacheItem__
@implementation LRUCacheItem

@synthesize __owner_context=__owner_context;
@synthesize age=age;
@synthesize debugAutorelease=debugAutorelease;
@synthesize initialSize=initialSize;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
@synthesize size=size;
-(void)_startObjectOfClassLRUCacheItem {MSGSTART("LRUCacheItem:-(void)_startObjectOfClassLRUCacheItem")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i0*/}
-(NSObject<NSCopying>*)_cacheKey {MSGSTART("LRUCacheItem:-(NSObject<NSCopying>*)_cacheKey")
  
  /*i-999*/NSObject<NSCopying>* ret=v__cacheKey;
  /*i999*/return(ret);}
-(void)append {MSGSTART("LRUCacheItem:-(void)append")
  [self linkBefore:nil];}
-(NSObject<LRUCache>*)cache {MSGSTART("LRUCacheItem:-(NSObject<LRUCache>*)cache")
  
  /*i-999*/NSObject<LRUCache>* ret=cache;
  /*i999*/return(ret);}
-(constchar*)cdescription {MSGSTART("LRUCacheItem:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(constchar*)cobjectName {MSGSTART("LRUCacheItem:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)dealloc {MSGSTART("LRUCacheItem:-(void)dealloc")
  
  /*i-151*/[self die];
/*i0*/cache=nil;

object=nil;

v_next=nil;

v__cacheKey=nil;
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("LRUCacheItem:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("LRUCacheItem:-(void)die")
  
  /*i900*/}
-(LRUCacheItem*)initWithObject:(NSObject*)aobject size:(float)asize {MSGSTART("LRUCacheItem:-(LRUCacheItem*)initWithObject:(NSObject*)aobject size:(float)asize")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i0*/size=asize;
          object=aobject;
      
  /*i11*/[self _startObjectOfClassLRUCacheItem];

/*i10001*/return(self);}
-(void)linkAfter:(NSObject<ListItem>*)prev {MSGSTART("LRUCacheItem:-(void)linkAfter:(NSObject<ListItem>*)prev")

          if (prev==self) return;
          if (prev?(prev==self.prev):(list.headItem==self)) return;
          [self unlink];
          if ((self.next=(prev?prev.next:list.headItem))) self.next.prev=self;
          else list.tailItem=self;
          if ((self.prev=prev)) prev.next=self;
          else list.headItem=self;
    }
-(void)linkBefore:(NSObject<ListItem>*)next {MSGSTART("LRUCacheItem:-(void)linkBefore:(NSObject<ListItem>*)next")

          if (next==self) return;
          if (next?(next==self.next):(list.tailItem==self)) return;
          [self unlink];
          if ((self.next=next)) next.prev=self;
          else list.tailItem=self;
          if ((self.prev=(next?next.prev:list.tailItem))) self.prev.next=self;
          else list.headItem=self;
    }
-(NSObject<List>*)list {MSGSTART("LRUCacheItem:-(NSObject<List>*)list")
  
  /*i-999*/NSObject<List>* ret=list;
  /*i999*/return(ret);}
-(NSObject<ListItem>*)next {MSGSTART("LRUCacheItem:-(NSObject<ListItem>*)next")
  
  /*i-999*/NSObject<ListItem>* ret=v_next;
  /*i999*/return(ret);}
-(NSObject*)object {MSGSTART("LRUCacheItem:-(NSObject*)object")
  
  /*i-999*/NSObject* ret=object;
  /*i999*/return(ret);}
-(NSMutableString*)objectName {MSGSTART("LRUCacheItem:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }
-(void)prepend {MSGSTART("LRUCacheItem:-(void)prepend")
  [self linkAfter:nil];}
-(NSObject<ListItem>*)prev {MSGSTART("LRUCacheItem:-(NSObject<ListItem>*)prev")
  
  /*i-999*/NSObject<ListItem>* ret=v_prev;
  /*i999*/return(ret);}
-(void)set_cacheKey:(NSObject<NSCopying>*)v {MSGSTART("LRUCacheItem:-(void)set_cacheKey:(NSObject<NSCopying>*)v")
  
  /*i-905*/if(v__cacheKey==v)return;
  /*i-900*/{v__cacheKey=(id)v;}}
-(void)setCache:(NSObject<LRUCache>*)v {MSGSTART("LRUCacheItem:-(void)setCache:(NSObject<LRUCache>*)v")
  
  /*i-905*/if(cache==v)return;
  /*i-900*/{cache=(id)v;}}
-(void)setList:(NSObject<List>*)v {MSGSTART("LRUCacheItem:-(void)setList:(NSObject<List>*)v")
  
  /*i-905*/if(list==v)return;
  /*i-900*/{list=(id)v;}}
-(void)setNext:(NSObject<ListItem>*)v {MSGSTART("LRUCacheItem:-(void)setNext:(NSObject<ListItem>*)v")
  
  /*i-905*/if(v_next==v)return;
  /*i-900*/{v_next=(id)v;}}
-(void)setPrev:(NSObject<ListItem>*)v {MSGSTART("LRUCacheItem:-(void)setPrev:(NSObject<ListItem>*)v")
  
  /*i-905*/if(v_prev==v)return;
  /*i-900*/{v_prev=(id)v;}}
-(void)unlink {MSGSTART("LRUCacheItem:-(void)unlink")

          if (self.prev) self.prev.next=self.next;
          else if (list.headItem==self) list.headItem=self.next;
          if (self.next) self.next.prev=self.prev;
          else if (list.tailItem==self) list.tailItem=self.prev;
          self.prev=self.next=nil;
    }

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_


















// !!!: Implementations: m


















        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ MemMonitor
#define _WIClass_ MemMonitor__
#define _className_ memMonitor
#define _Class_ MemMonitor__
@implementation MemMonitor

@synthesize __owner_context=__owner_context;
@synthesize debugAutorelease=debugAutorelease;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
-(void)_startObjectOfClassMemMonitor {MSGSTART("MemMonitor:-(void)_startObjectOfClassMemMonitor")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i0*/}
-(constchar*)cdescription {MSGSTART("MemMonitor:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(constchar*)cobjectName {MSGSTART("MemMonitor:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)dealloc {MSGSTART("MemMonitor:-(void)dealloc")
  
  /*i-151*/[self die];
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("MemMonitor:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("MemMonitor:-(void)die")
  
  /*i900*/}
+(NSString*)memString {MSGSTART("MemMonitor:+(NSString*)memString")

          int mib[6];
          mib[0] = CTL_HW;
          mib[1] = HW_PAGESIZE;

          int pagesize;
          size_t length;
          length = sizeof (pagesize);
          if (sysctl (mib, 2, &pagesize, &length, NULL, 0) < 0)
          {
                fprintf (stderr, "getting page size");
            }

          mach_msg_type_number_t count = HOST_VM_INFO_COUNT;

          vm_statistics_data_t vmstat;
          if (host_statistics (mach_host_self (), HOST_VM_INFO, (host_info_t) &vmstat, &count) != KERN_SUCCESS)
          {
                fprintf (stderr, "Failed to get VM statistics.");
            }

          //double total = vmstat.wire_count + vmstat.active_count + vmstat.inactive_count + vmstat.free_count;
          //double wired = vmstat.wire_count / total;
          //double active = vmstat.active_count / total;
          //double inactive = vmstat.inactive_count / total;
          //double free = vmstat.free_count / total;

          task_basic_info_64_data_t info;
          unsigned size = sizeof (info);
          task_info (mach_task_self (), TASK_BASIC_INFO_64, (task_info_t) &info, &size);

          double unit = 1024 * 1024;
          return([NSString stringWithFormat: @"Free:% 3.1f MB. Free+inactive:% 3.1f MB. Resident:% 3.1f MB", vmstat.free_count * pagesize / unit, (vmstat.free_count + vmstat.inactive_count) * pagesize / unit, info.resident_size / unit]);
    }
-(NSMutableString*)objectName {MSGSTART("MemMonitor:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_


















// !!!: Implementations: r


















        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ RequestCaches
#define _WIClass_ RequestCaches__
#define _className_ requestCaches
#define _Class_ RequestCaches__
@implementation RequestCaches

@synthesize __owner_context=__owner_context;
@synthesize debugAutorelease=debugAutorelease;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
-(void)_startObjectOfClassRequestCaches {MSGSTART("RequestCaches:-(void)_startObjectOfClassRequestCaches")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i-950*/v_caches=[[EndpointD alloc] initWithOwner:self retains:YES acceptableSel:@selector(isAcceptableCache:) otherEndObjectToEndpoint:@selector(cacheToEndpoint:)];
      
  /*i0*/}
-(NSData*)asData {MSGSTART("RequestCaches:-(NSData*)asData")
  return([NSKeyedArchiver archivedDataWithRootObject:self.asDictionary]);}
-(NSDictionary*)asDictionary {MSGSTART("RequestCaches:-(NSDictionary*)asDictionary")
  
  /*i-999*/NSMutableDictionary *ret=[NSMutableDictionary dictionary];NSDictionary *imret=ret;
              
  /*i0*/for (kid key in self.caches) {
                    [ret setObject:[self cacheForKey:key].asDictionary forKey:key];
                }
        

              
  /*i999*/return(imret);
        }
-(NSObject<RequestCache>*)cacheForKey:(id<NSCopying>)key {MSGSTART("RequestCaches:-(NSObject<RequestCache>*)cacheForKey:(id<NSCopying>)key")
  return([v_caches objectForKey:key]);}
-(EndpointD*)caches {MSGSTART("RequestCaches:-(EndpointD*)caches")
  
  /*i-999*/EndpointD* ret=v_caches;
  /*i999*/return(ret);}
-(NSObject<LinkEndpoint>*)cacheToEndpoint:(id)acache {MSGSTART("RequestCaches:-(NSObject<LinkEndpoint>*)cacheToEndpoint:(id)acache")
  return([acache performSelector:@selector(caches_endpoint)]);}
-(constchar*)cdescription {MSGSTART("RequestCaches:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)clearCaches {MSGSTART("RequestCaches:-(void)clearCaches")

          for (kid key in self.caches) {
                [[self cacheForKey:key].cache clear];
            }
    }
-(constchar*)cobjectName {MSGSTART("RequestCaches:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(NSString*)codingFilename {MSGSTART("RequestCaches:-(NSString*)codingFilename")
  
  /*i-999*/NSString* ret=v_codingFilename;
  /*i999*/return(ret);}
-(void)dealloc {MSGSTART("RequestCaches:-(void)dealloc")
  
  /*i-151*/[self die];
/*i0*/v_codingFilename=nil;

    REMOVEOWNER(v_caches,self);v_caches=nil;

v_documentsCodingFilename=nil;
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(bool)deleteCodableFile {MSGSTART("RequestCaches:-(bool)deleteCodableFile")

          if (self.codingFilename) {
                NSFileManager *fileManager = [NSFileManager defaultManager];
                NSError *error=nil;
                return([fileManager removeItemAtPath:self.codingFilename error:&error]);
            }
          else return(NO);
    }
-(NSString*)description {MSGSTART("RequestCaches:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("RequestCaches:-(void)die")
  [v_caches removeAllObjects];
  
  /*i900*/}
-(NSString*)documentsCodingFilename {MSGSTART("RequestCaches:-(NSString*)documentsCodingFilename")
  return(v_documentsCodingFilename);}
+(RequestCaches*)get {MSGSTART("RequestCaches:+(RequestCaches*)get")
  return([[RequestCaches alloc] init]);}
-(Int)goForSeconds:(float)sec {MSGSTART("RequestCaches:-(Int)goForSeconds:(float)sec")

          Int ret=0;
          NSDate *start = [NSDate date];
          do {
                if (![self goNext]) break;
                ret++;
            } while (sec>-[start timeIntervalSinceNow]);
          return(ret);
    }
-(bool)goNext {MSGSTART("RequestCaches:-(bool)goNext")

          NSObject<Request> *req=self.worthiestRequest;
          if (req) {
                //[req.cache prntList];
                [req goRequest];
                NSObject<RequestCache> *cache=req.cache;
                [cache.cache setObject:([req.result conformsToProtocol:@protocol(LRUCacheItem)]?req.result:[[LRUCacheItem alloc] initWithObject:req.result size:req.resultSize]) forKey:req.definingKey];
                [cache removeRequestForKey:req.definingKey];
                //[req.cache prntList];
                return(YES);
            }
          else return(NO);
    }
-(RequestCaches*)init {MSGSTART("RequestCaches:-(RequestCaches*)init")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i11*/[self _startObjectOfClassRequestCaches];

/*i10001*/return(self);}
-(NSNumber*)isAcceptableCache:(id)acache {MSGSTART("RequestCaches:-(NSNumber*)isAcceptableCache:(id)acache")
  return([acache conformsToProtocol:@protocol(RequestCache)]?@YES:nil);}
-(void)loadCodable {MSGSTART("RequestCaches:-(void)loadCodable")

          [self loadCodableFromFilename:self.codingFilename];
    }
-(void)loadCodableFromFilename:(NSString*)fn {MSGSTART("RequestCaches:-(void)loadCodableFromFilename:(NSString*)fn")

          if (fn) {
                NSObject *o=[NSKeyedUnarchiver unarchiveObjectWithFile:fn];
                if ([o isKindOfClass:[NSDictionary class]]) {
                      self.asDictionary=(NSDictionary*)o;
                  }
            }
    }
-(NSMutableString*)objectName {MSGSTART("RequestCaches:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }
-(void)removeAllCaches {MSGSTART("RequestCaches:-(void)removeAllCaches")
  [v_caches removeAllObjects];}
-(void)removeCacheForKey:(id<NSCopying>)key {MSGSTART("RequestCaches:-(void)removeCacheForKey:(id<NSCopying>)key")
  [v_caches removeObjectForKey:key];}
-(void)retract {MSGSTART("RequestCaches:-(void)retract")
  [self.caches removeAllObjects];}
-(void)saveCodable {MSGSTART("RequestCaches:-(void)saveCodable")

          [self saveCodableToFilename:self.codingFilename];
    }
-(void)saveCodableToFilename:(NSString*)fn {MSGSTART("RequestCaches:-(void)saveCodableToFilename:(NSString*)fn")

          if (fn) {
                NSDictionary *d=self.asDictionary;
                [NSKeyedArchiver archiveRootObject:d toFile:fn];
            }
    }
-(void)saveCodableToServer {MSGSTART("RequestCaches:-(void)saveCodableToServer")

          [self.asData sendAsBodyOfPOSTRequestWithURL:[NSURL URLWithString:[g_singletons.homeURLPrefix stringByAppendingFormat:@"savecodable.php"]] returningResponse:nil error:nil];
    }
-(void)setAsData:(NSData*)v {MSGSTART("RequestCaches:-(void)setAsData:(NSData*)v")
  self.asDictionary=[NSKeyedUnarchiver unarchiveObjectWithData:v];}
-(void)setAsDictionary:(NSDictionary*)v {MSGSTART("RequestCaches:-(void)setAsDictionary:(NSDictionary*)v")

              for (kid key in v) {
                    NSObject<RequestCache> *cache=[self cacheForKey:key];
                    if (cache) cache.asDictionary=(NSDictionary*)[v objectForKey:key];
                }
        

        }
-(void)setCache:(id)v forKey:(id<NSCopying>)key {MSGSTART("RequestCaches:-(void)setCache:(id)v forKey:(id<NSCopying>)key")
  [v_caches setObject:v forKey:key];}
-(void)setCaches:(EndpointD*)v {MSGSTART("RequestCaches:-(void)setCaches:(EndpointD*)v")
  
  /*i-1999*/if (!authorized_thread(__private_access_thread_mask_in_RequestCaches)) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(caches=\"blah\") to set the property)");
  
  /*i-905*/if(v_caches==v)return;
  /*i-900*/{v_caches=(id)v;}
/*i-850*/REMOVEOWNER(v_caches,self);ADDOWNER(v,self);}
-(void)setCodingFilename:(NSString*)v {MSGSTART("RequestCaches:-(void)setCodingFilename:(NSString*)v")
  
  /*i-905*/if(v_codingFilename==v)return;
  /*i-900*/{v_codingFilename=(id)v;}}
-(void)setDocumentsCodingFilename:(NSString*)v {MSGSTART("RequestCaches:-(void)setDocumentsCodingFilename:(NSString*)v")

              v_documentsCodingFilename=v;
              NSArray *paths = NSSearchPathForDirectoriesInDomains( NSDocumentDirectory, NSUserDomainMask ,YES );
              NSString *documentsDirectory = [paths objectAtIndex:0];
              self.codingFilename=[documentsDirectory stringByAppendingPathComponent:v];
        }
-(void)setWithDictionary:(NSDictionary*)d {MSGSTART("RequestCaches:-(void)setWithDictionary:(NSDictionary*)d")
}
-(NSObject<Request>*)worthiestRequest {MSGSTART("RequestCaches:-(NSObject<Request>*)worthiestRequest")

          NSObject<Request> *bestReq=nil,*req;
          for (kid key in self.caches) {
                NSObject<RequestCache> *cache=[self.caches objectForKey:key];
                if (((req=cache.worthiestRequest))&&((!bestReq)||(req.worthAsRequest>bestReq.worthAsRequest))) {
                      bestReq=req;
                  }
            }
          return(bestReq);
    }

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_









        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ RequestProxy
#define _WIClass_ RequestProxy__
#define _className_ requestProxy
#define _Class_ RequestProxy__
@implementation RequestProxy

@synthesize __owner_context=__owner_context;
@synthesize debugAutorelease=debugAutorelease;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
-(void)_startObjectOfClassRequestProxy {MSGSTART("RequestProxy:-(void)_startObjectOfClassRequestProxy")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i-500*//*ivar*/v_listAsHead_endpoint=([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableListAsHead:) otherEndObjectToEndpoint:@selector(listAsHeadToEndpoint:)]);  ADDOWNER(v_listAsHead_endpoint,self);
   /*ivar*/v_listAsTail_endpoint=([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableListAsTail:) otherEndObjectToEndpoint:@selector(listAsTailToEndpoint:)]);  ADDOWNER(v_listAsTail_endpoint,self);
   /*ivar*/v_prev_endpoint=([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptablePrev:) otherEndObjectToEndpoint:@selector(prevToEndpoint:)]);  ADDOWNER(v_prev_endpoint,self);
   /*ivar*/v_next_endpoint=([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableNext:) otherEndObjectToEndpoint:@selector(nextToEndpoint:)]);  ADDOWNER(v_next_endpoint,self);
   /*ivar*/v_request_endpoint=([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableRequest:) otherEndObjectToEndpoint:@selector(requestToEndpoint:)]);  ADDOWNER(v_request_endpoint,self);
  
  /*i0*/}
-(void)append {MSGSTART("RequestProxy:-(void)append")
  [self linkBefore:nil];}
-(constchar*)cdescription {MSGSTART("RequestProxy:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(constchar*)cobjectName {MSGSTART("RequestProxy:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)dealloc {MSGSTART("RequestProxy:-(void)dealloc")
  
  /*i-500*/[self unlink];
    
/*i-151*/[self die];
/*i0*/REMOVEOWNER(v_listAsHead_endpoint,self);v_listAsHead_endpoint=nil;

    REMOVEOWNER(v_listAsTail_endpoint,self);v_listAsTail_endpoint=nil;

    REMOVEOWNER(v_prev_endpoint,self);v_prev_endpoint=nil;

    REMOVEOWNER(v_next_endpoint,self);v_next_endpoint=nil;

    REMOVEOWNER(v_request_endpoint,self);v_request_endpoint=nil;
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("RequestProxy:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("RequestProxy:-(void)die")
  self.request=nil;

  self.listAsHead=nil;
  self.listAsTail=nil;
  self.prev=nil;
  self.next=nil;
  /*i900*/}
-(RequestProxy*)initWithRequest:(NSObject<Request>*)request {MSGSTART("RequestProxy:-(RequestProxy*)initWithRequest:(NSObject<Request>*)request")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i0*/self.request=request;
      
  /*i11*/[self _startObjectOfClassRequestProxy];

/*i10001*/return(self);}
-(NSNumber*)isAcceptableListAsHead:(id)alistAsHead {MSGSTART("RequestProxy:-(NSNumber*)isAcceptableListAsHead:(id)alistAsHead")
  return([alistAsHead conformsToProtocol:@protocol(WeakList)]?@YES:nil);}
-(NSNumber*)isAcceptableListAsTail:(id)alistAsTail {MSGSTART("RequestProxy:-(NSNumber*)isAcceptableListAsTail:(id)alistAsTail")
  return([alistAsTail conformsToProtocol:@protocol(WeakList)]?@YES:nil);}
-(NSNumber*)isAcceptableNext:(id)anext {MSGSTART("RequestProxy:-(NSNumber*)isAcceptableNext:(id)anext")
  return([anext conformsToProtocol:@protocol(WeakListItem)]?@YES:nil);}
-(NSNumber*)isAcceptablePrev:(id)aprev {MSGSTART("RequestProxy:-(NSNumber*)isAcceptablePrev:(id)aprev")
  return([aprev conformsToProtocol:@protocol(WeakListItem)]?@YES:nil);}
-(NSNumber*)isAcceptableRequest:(id)arequest {MSGSTART("RequestProxy:-(NSNumber*)isAcceptableRequest:(id)arequest")
  return([arequest conformsToProtocol:@protocol(Request)]?@YES:nil);}
-(void)linkAfter:(NSObject<WeakListItem>*)prev {MSGSTART("RequestProxy:-(void)linkAfter:(NSObject<WeakListItem>*)prev")

          if (prev?prev==self.prev:(self.list==self.listAsHead)) return;
          [self unlink];
          if (!prev) {
                if (list.headItem) list.headItem.prev=self;
                else list.tailItem=self;
                list.headItem=self;
            }
          else {
                self.list=prev.list;
                self.next=prev.next;
                self.prev=prev;
                self.listAsTail=prev.listAsTail;
            }
          self.list._count++;
    }
-(void)linkBefore:(NSObject<WeakListItem>*)next {MSGSTART("RequestProxy:-(void)linkBefore:(NSObject<WeakListItem>*)next")

          if (next?next==self.next:(self.list==self.listAsTail)) return;
          [self unlink];
          if (!next) {
                if (list.tailItem) list.tailItem.next=self;
                else list.headItem=self;
                list.tailItem=self;
            }
          else {
                self.list=next.list;
                self.prev=next.prev;
                self.next=next;
                self.listAsHead=next.listAsHead;
            }
          self.list._count++;
    }
-(NSObject<WeakList>*)list {MSGSTART("RequestProxy:-(NSObject<WeakList>*)list")
  
  /*i-999*/NSObject<WeakList>* ret=list;
  /*i999*/return(ret);}
-(NSObject<WeakList>*)listAsHead {MSGSTART("RequestProxy:-(NSObject<WeakList>*)listAsHead")
  return((NSObject<WeakList>*)v_listAsHead_endpoint.value);}
-(Endpoint1*)listAsHead_endpoint {MSGSTART("RequestProxy:-(Endpoint1*)listAsHead_endpoint")
  
  /*i-999*/Endpoint1* ret=v_listAsHead_endpoint;
  /*i999*/return(ret);}
-(NSObject<LinkEndpoint>*)listAsHeadToEndpoint:(id)alistAsHead {MSGSTART("RequestProxy:-(NSObject<LinkEndpoint>*)listAsHeadToEndpoint:(id)alistAsHead")
  return([alistAsHead performSelector:@selector(headItem_endpoint)]);}
-(NSObject<WeakList>*)listAsTail {MSGSTART("RequestProxy:-(NSObject<WeakList>*)listAsTail")
  return((NSObject<WeakList>*)v_listAsTail_endpoint.value);}
-(Endpoint1*)listAsTail_endpoint {MSGSTART("RequestProxy:-(Endpoint1*)listAsTail_endpoint")
  
  /*i-999*/Endpoint1* ret=v_listAsTail_endpoint;
  /*i999*/return(ret);}
-(NSObject<LinkEndpoint>*)listAsTailToEndpoint:(id)alistAsTail {MSGSTART("RequestProxy:-(NSObject<LinkEndpoint>*)listAsTailToEndpoint:(id)alistAsTail")
  return([alistAsTail performSelector:@selector(tailItem_endpoint)]);}
-(NSObject<WeakListItem>*)next {MSGSTART("RequestProxy:-(NSObject<WeakListItem>*)next")
  return((NSObject<WeakListItem>*)v_next_endpoint.value);}
-(Endpoint1*)next_endpoint {MSGSTART("RequestProxy:-(Endpoint1*)next_endpoint")
  
  /*i-999*/Endpoint1* ret=v_next_endpoint;
  /*i999*/return(ret);}
-(NSObject<LinkEndpoint>*)nextToEndpoint:(id)anext {MSGSTART("RequestProxy:-(NSObject<LinkEndpoint>*)nextToEndpoint:(id)anext")
  return([anext performSelector:@selector(prev_endpoint)]);}
-(NSMutableString*)objectName {MSGSTART("RequestProxy:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }
-(void)prepend {MSGSTART("RequestProxy:-(void)prepend")
  [self linkAfter:nil];}
-(NSObject<WeakListItem>*)prev {MSGSTART("RequestProxy:-(NSObject<WeakListItem>*)prev")
  return((NSObject<WeakListItem>*)v_prev_endpoint.value);}
-(Endpoint1*)prev_endpoint {MSGSTART("RequestProxy:-(Endpoint1*)prev_endpoint")
  
  /*i-999*/Endpoint1* ret=v_prev_endpoint;
  /*i999*/return(ret);}
-(NSObject<LinkEndpoint>*)prevToEndpoint:(id)aprev {MSGSTART("RequestProxy:-(NSObject<LinkEndpoint>*)prevToEndpoint:(id)aprev")
  return([aprev performSelector:@selector(next_endpoint)]);}
-(NSObject<Request>*)request {MSGSTART("RequestProxy:-(NSObject<Request>*)request")
  return((NSObject<Request>*)v_request_endpoint.value);}
-(Endpoint1*)request_endpoint {MSGSTART("RequestProxy:-(Endpoint1*)request_endpoint")
  
  /*i-999*/Endpoint1* ret=v_request_endpoint;
  /*i999*/return(ret);}
-(NSObject<LinkEndpoint>*)requestToEndpoint:(id)arequest {MSGSTART("RequestProxy:-(NSObject<LinkEndpoint>*)requestToEndpoint:(id)arequest")
  return([arequest performSelector:@selector(proxys)]);}
-(void)retract {MSGSTART("RequestProxy:-(void)retract")
  self.request=nil;
  self.listAsHead=nil;
  self.listAsTail=nil;
  self.prev=nil;
  self.next=nil;}
-(void)setList:(NSObject<WeakList>*)v {MSGSTART("RequestProxy:-(void)setList:(NSObject<WeakList>*)v")
  
  /*i-905*/if(list==v)return;
  /*i-900*/{list=(id)v;}}
-(void)setListAsHead:(NSObject<WeakList>*)v {MSGSTART("RequestProxy:-(void)setListAsHead:(NSObject<WeakList>*)v")
  [v_listAsHead_endpoint setValue:v];}
-(void)setListAsHead_endpoint:(Endpoint1*)v {MSGSTART("RequestProxy:-(void)setListAsHead_endpoint:(Endpoint1*)v")
  
  /*i-1999*/if (!authorized_thread(__private_access_thread_mask_in_RequestProxy)) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(listAsHead_endpoint=\"blah\") to set the property)");
  
  /*i-905*/if(v_listAsHead_endpoint==v)return;
  /*i-900*/{v_listAsHead_endpoint=(id)v;}
/*i-850*/REMOVEOWNER(v_listAsHead_endpoint,self);ADDOWNER(v,self);}
-(void)setListAsTail:(NSObject<WeakList>*)v {MSGSTART("RequestProxy:-(void)setListAsTail:(NSObject<WeakList>*)v")
  [v_listAsTail_endpoint setValue:v];}
-(void)setListAsTail_endpoint:(Endpoint1*)v {MSGSTART("RequestProxy:-(void)setListAsTail_endpoint:(Endpoint1*)v")
  
  /*i-1999*/if (!authorized_thread(__private_access_thread_mask_in_RequestProxy)) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(listAsTail_endpoint=\"blah\") to set the property)");
  
  /*i-905*/if(v_listAsTail_endpoint==v)return;
  /*i-900*/{v_listAsTail_endpoint=(id)v;}
/*i-850*/REMOVEOWNER(v_listAsTail_endpoint,self);ADDOWNER(v,self);}
-(void)setNext:(NSObject<WeakListItem>*)v {MSGSTART("RequestProxy:-(void)setNext:(NSObject<WeakListItem>*)v")
  [v_next_endpoint setValue:v];}
-(void)setNext_endpoint:(Endpoint1*)v {MSGSTART("RequestProxy:-(void)setNext_endpoint:(Endpoint1*)v")
  
  /*i-1999*/if (!authorized_thread(__private_access_thread_mask_in_RequestProxy)) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(next_endpoint=\"blah\") to set the property)");
  
  /*i-905*/if(v_next_endpoint==v)return;
  /*i-900*/{v_next_endpoint=(id)v;}
/*i-850*/REMOVEOWNER(v_next_endpoint,self);ADDOWNER(v,self);}
-(void)setPrev:(NSObject<WeakListItem>*)v {MSGSTART("RequestProxy:-(void)setPrev:(NSObject<WeakListItem>*)v")
  [v_prev_endpoint setValue:v];}
-(void)setPrev_endpoint:(Endpoint1*)v {MSGSTART("RequestProxy:-(void)setPrev_endpoint:(Endpoint1*)v")
  
  /*i-1999*/if (!authorized_thread(__private_access_thread_mask_in_RequestProxy)) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(prev_endpoint=\"blah\") to set the property)");
  
  /*i-905*/if(v_prev_endpoint==v)return;
  /*i-900*/{v_prev_endpoint=(id)v;}
/*i-850*/REMOVEOWNER(v_prev_endpoint,self);ADDOWNER(v,self);}
-(void)setRequest:(NSObject<Request>*)v {MSGSTART("RequestProxy:-(void)setRequest:(NSObject<Request>*)v")
  [v_request_endpoint setValue:v];}
-(void)setRequest_endpoint:(Endpoint1*)v {MSGSTART("RequestProxy:-(void)setRequest_endpoint:(Endpoint1*)v")
  
  /*i-1999*/if (!authorized_thread(__private_access_thread_mask_in_RequestProxy)) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(request_endpoint=\"blah\") to set the property)");
  
  /*i-905*/if(v_request_endpoint==v)return;
  /*i-900*/{v_request_endpoint=(id)v;}
/*i-850*/REMOVEOWNER(v_request_endpoint,self);ADDOWNER(v,self);}
-(void)unlink {MSGSTART("RequestProxy:-(void)unlink")

          if (self.prev||(self.listAsHead==self.list)) self.list._count--;
          NSObject<WeakListItem> *n=self.next,*p=self.prev;
          if (n) n.prev=p;
          else if (p) p.next=n;        
          if (self.listAsHead) self.listAsHead.headItem=n;
          if (self.listAsTail) self.listAsTail.tailItem=p;
    }

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_


















// !!!: Implementations: u


















        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ ULLCarrier
#define _WIClass_ ULLCarrier__
#define _className_ uLLCarrier
#define _Class_ ULLCarrier__
@implementation ULLCarrier

@synthesize __owner_context=__owner_context;
@synthesize debugAutorelease=debugAutorelease;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
@synthesize ullValue=ullValue;
-(void)_startObjectOfClassULLCarrier {MSGSTART("ULLCarrier:-(void)_startObjectOfClassULLCarrier")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i0*/}
+(ULLCarrier*)carrierWithULL:(ULL)v {MSGSTART("ULLCarrier:+(ULLCarrier*)carrierWithULL:(ULL)v")

          return([[ULLCarrier alloc] initWithULL:v]);
    }
-(constchar*)cdescription {MSGSTART("ULLCarrier:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(constchar*)cobjectName {MSGSTART("ULLCarrier:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)dealloc {MSGSTART("ULLCarrier:-(void)dealloc")
  
  /*i-151*/[self die];
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("ULLCarrier:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i0*/return([NSString stringWithFormat:@"%qu",ullValue]);
  
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("ULLCarrier:-(void)die")
  
  /*i900*/}
-(ULLCarrier*)initWithULL:(ULL)v {MSGSTART("ULLCarrier:-(ULLCarrier*)initWithULL:(ULL)v")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i0*/ullValue=v;
      
  /*i11*/[self _startObjectOfClassULLCarrier];

/*i10001*/return(self);}
-(NSMutableString*)objectName {MSGSTART("ULLCarrier:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_









        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ URLHandlerRegistry
#define _WIClass_ URLHandlerRegistry__
#define _className_ uRLHandlerRegistry
#define _Class_ URLHandlerRegistry__
@implementation URLHandlerRegistry

@synthesize __owner_context=__owner_context;
@synthesize debugAutorelease=debugAutorelease;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
-(void)_startObjectOfClassURLHandlerRegistry {MSGSTART("URLHandlerRegistry:-(void)_startObjectOfClassURLHandlerRegistry")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i-500*//*ivar*/handlers=([[MutableArray alloc] init]);  ADDOWNER(handlers,self);
  
  /*i0*/}
-(bool)actOnURL:(NSURL*)url {MSGSTART("URLHandlerRegistry:-(bool)actOnURL:(NSURL*)url")

          NSObject *ret=[self makeResourceFromURL:url];
          if (!(ret&&[ret respondsToSelector:@selector(act)])) return(NO);
          else {
                [(NSObject<HasAction>*)ret act];
                return(YES);
            }
    }
-(void)addHandler:(id)handler {MSGSTART("URLHandlerRegistry:-(void)addHandler:(id)handler")

          [self.handlers addObject:handler];
    }
-(constchar*)cdescription {MSGSTART("URLHandlerRegistry:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(constchar*)cobjectName {MSGSTART("URLHandlerRegistry:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)dealloc {MSGSTART("URLHandlerRegistry:-(void)dealloc")
  
  /*i-151*/[self die];
/*i0*/REMOVEOWNER(handlers,self);handlers=nil;
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("URLHandlerRegistry:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("URLHandlerRegistry:-(void)die")
  
  /*i900*/}
+(URLHandlerRegistry*)getDefault {MSGSTART("URLHandlerRegistry:+(URLHandlerRegistry*)getDefault")

          if (!_URLHandlerRegistry_default) {
                ADDSINGLETON(_URLHandlerRegistry_default=[[URLHandlerRegistry alloc] init]);
            }
          return(_URLHandlerRegistry_default);
    }
-(MutableArray*)handlers {MSGSTART("URLHandlerRegistry:-(MutableArray*)handlers")
  
  /*i-999*/MutableArray* ret=handlers;
  /*i999*/return(ret);}
-(URLHandlerRegistry*)init {MSGSTART("URLHandlerRegistry:-(URLHandlerRegistry*)init")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i11*/[self _startObjectOfClassURLHandlerRegistry];

/*i10001*/return(self);}
-(NSObject*)makeResourceFromURL:(NSURL*)url {MSGSTART("URLHandlerRegistry:-(NSObject*)makeResourceFromURL:(NSURL*)url")

          for (NSObject<URLResourceHandler> *handler in handlers) {
                NSObject *ret=[handler makeResourceFromURL:url];
                if (ret) return(ret);
            }
          return(nil);
    }
-(NSMutableString*)objectName {MSGSTART("URLHandlerRegistry:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }
-(void)setHandlers:(MutableArray*)v {MSGSTART("URLHandlerRegistry:-(void)setHandlers:(MutableArray*)v")
  
  /*i-1999*/if (!authorized_thread(__private_access_thread_mask_in_URLHandlerRegistry)) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(handlers=\"blah\") to set the property)");
  
  /*i-905*/if(handlers==v)return;
  /*i-900*/{handlers=(id)v;}
/*i-850*/REMOVEOWNER(handlers,self);ADDOWNER(v,self);}

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_









        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ Util
#define _WIClass_ Util__
#define _className_ util
#define _Class_ Util__
@implementation Util

@synthesize __owner_context=__owner_context;
@synthesize debugAutorelease=debugAutorelease;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
-(void)_startObjectOfClassUtil {MSGSTART("Util:-(void)_startObjectOfClassUtil")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i0*/}
+(bool) getInsertsAndDeletesAsIndexSetWhenChanging:(NSArray*)from to:(NSArray*)to inss:(NSIndexSet*__strong*)pinss dels:(NSIndexSet*__strong*)pdels {MSGSTART("Util:+(bool) getInsertsAndDeletesAsIndexSetWhenChanging:(NSArray*)from to:(NSArray*)to inss:(NSIndexSet*__strong*)pinss dels:(NSIndexSet*__strong*)pdels")

          NSMutableArray *inss,*dels;
          if (![Util getInsertsAndDeletesWhenChanging:from to:to inss:&inss dels:&dels]) return(NO);
          NSMutableIndexSet *s=[[NSMutableIndexSet alloc] init];
          for (NSNumber *num in dels) [s addIndex:num.intValue];
          *pdels=s;
          s=[[NSMutableIndexSet alloc] init];
          for (NSNumber *num in inss) [s addIndex:num.intValue];
          *pinss=s;
          return(YES);
    }
+(bool) getInsertsAndDeletesForSetWhenChanging:(NSSet*)from to:(NSSet*)to inss:(NSSet*__strong*)pinss dels:(NSSet*__strong*)pdels {MSGSTART("Util:+(bool) getInsertsAndDeletesForSetWhenChanging:(NSSet*)from to:(NSSet*)to inss:(NSSet*__strong*)pinss dels:(NSSet*__strong*)pdels")

          if ([from isEqualToSet:to]) return(NO);
          if (!(pinss||pdels)) return(YES);
          if (pinss) [(NSMutableSet*)((*pinss=to.mutableCopy)) minusSet:from];
          if (pdels) [(NSMutableSet*)((*pdels=from.mutableCopy)) minusSet:to];
          return(YES);
    }
+(bool) getInsertsAndDeletesWhenChanging:(NSArray*)from to:(NSArray*)to inss:(NSArray*__strong*)pinss dels:(NSArray*__strong*)pdels {MSGSTART("Util:+(bool) getInsertsAndDeletesWhenChanging:(NSArray*)from to:(NSArray*)to inss:(NSArray*__strong*)pinss dels:(NSArray*__strong*)pdels")

          NSMutableArray *dels=[[MutableArray alloc] init];
          NSMutableArray *inss=[[MutableArray alloc] init];

          *pinss=inss;
          *pdels=dels;
        
          bool ret=NO;
          if (from==nil) {
                if (to) {
                      Int i=0;
                      while (i<to.count) [inss addObject:@(i++)];
                      ret=(i>0);
                  }
            }
          else if (to==nil) {
                Int i=0;
                while (i<from.count) [dels addObject:@(i++)];
                ret=(i>0);
            }
          else {
                Int toi=0,fromi=0;
                while ((toi<[to count])||(fromi<[from count])) {
                      char op=0;
                      if (fromi>=[from count]) op='i';
                      else if (toi>=[to count]) op='d';
                      else if ([Util objectOrString:[from objectAtIndex:fromi] equals:[to objectAtIndex:toi]]) op=0;
                      else for (Int j=1;;j++) {
                            if (toi+j>=[to count]) {op='d';break;}
                            else if (fromi+j>=[from count]) {op='i';break;}
                            else if ([Util objectOrString:[from objectAtIndex:fromi] equals:[to objectAtIndex:toi+j]]) {op='i';break;}
                            else if ([Util objectOrString:[from objectAtIndex:fromi+j] equals:[to objectAtIndex:toi]]) {op='d';break;}
                        }
                      if (op=='d') {
                            [dels insertObject:@(fromi) atIndex:0];
                            fromi++;
                        }
                      else if (op=='i') {
                            [inss addObject:@(toi)];
                            toi++;
                        }
                      else {fromi++;toi++;}
                  }
                ret=(inss.count||dels.count);
            }
          if (!ret) {
                *pinss=nil;
                *pdels=nil;
            }
          return(ret);
    }
+(bool) getInsertsDeletesAndChangesForDictionaryWhenChanging:(NSDictionary*)from to:(NSDictionary*)to insKeys:(NSSet*__strong*)pinss delKeys:(NSSet*__strong*)pdels changeKeys:(NSSet*__strong*)pchanges {MSGSTART("Util:+(bool) getInsertsDeletesAndChangesForDictionaryWhenChanging:(NSDictionary*)from to:(NSDictionary*)to insKeys:(NSSet*__strong*)pinss delKeys:(NSSet*__strong*)pdels changeKeys:(NSSet*__strong*)pchanges")

          NSSet *fromKeys=[[NSSet alloc] initWithArray:from.allKeys];
          NSSet *toKeys=[[NSSet alloc] initWithArray:to.allKeys];
          bool ret=[Util getInsertsAndDeletesForSetWhenChanging:fromKeys to:toKeys inss:pinss dels:pdels];
          id obj;
          NSMutableSet *changes=nil;
          if (from.count<to.count) {
                for (id<NSCopying> key in from) if ((obj=[to objectForKey:key])&&![obj isEqual:[from objectForKey:key]]) {
                      if (!changes) changes=[[MutableSet alloc] init];
                      [changes addObject:key];
                  }
            }
          else {
                for (id<NSCopying> key in to) if ((obj=[from objectForKey:key])&&![obj isEqual:[to objectForKey:key]]) {
                      if (!changes) changes=[[MutableSet alloc] init];
                      [changes addObject:key];
                  }
            }
          NSSet *imchanges=changes;
          if (imchanges) ret=YES;
          else if (ret) imchanges=[[NSSet alloc] init];
          if (pchanges) *pchanges=imchanges;
          if (ret) {
                if (pinss&&!*pinss) *pinss=[[NSSet alloc] init];
                if (pdels&&!*pdels) *pdels=[[NSSet alloc] init];
            }
          return(ret);
    }
-(constchar*)cdescription {MSGSTART("Util:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
+(const char*)cdescriptionFor:(id)object {MSGSTART("Util:+(const char*)cdescriptionFor:(id)object")
  return([Util descriptionFor:object].UTF8String);}
+(void)clearStaticData {MSGSTART("Util:+(void)clearStaticData")

          if (_Util_default) {_Util_default=nil;}
    }
+(const char*)cnameFor:(id)object {MSGSTART("Util:+(const char*)cnameFor:(id)object")
  return([Util nameFor:object].UTF8String);}
-(constchar*)cobjectName {MSGSTART("Util:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(void)dealloc {MSGSTART("Util:-(void)dealloc")
  
  /*i-151*/[self die];
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("Util:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i999*/return(ret);
    }
+(NSString*)descriptionFor:(id)object {MSGSTART("Util:+(NSString*)descriptionFor:(id)object")

          if (!object) return(@"nil");
          else if ([object respondsToSelector:@selector(description)]) {
                return([object description]);
            }
          else return(@"?");
    }
-(void)die {MSGSTART("Util:-(void)die")
  
  /*i900*/}
+(Util*)getDefault {MSGSTART("Util:+(Util*)getDefault")

          if (!_Util_default) _Util_default=[[Util alloc] init];
          return(_Util_default);
    }
+(void)logString:(NSString*)str object:(NSObject*)obj {MSGSTART("Util:+(void)logString:(NSString*)str object:(NSObject*)obj")

          if (!obj) printf("\n%s\n",str.UTF8String);
          else {
                printf("\n%s : obj %s\n",str.UTF8String,obj.description.UTF8String);
                if ([obj conformsToProtocol:@protocol(LogObjectProtocol)]) {
                      printf("    %s\n",[((NSObject<LogObjectProtocol>*)obj).logDescription stringByReplacingOccurrencesOfString:@"\n" withString:@"\n     "].UTF8String);
                  }
            }
    }
+(void)logStringRecurse:(NSString*)str object:(NSObject*)obj {MSGSTART("Util:+(void)logStringRecurse:(NSString*)str object:(NSObject*)obj")

          if (!obj) printf("\n%s\n",str.UTF8String);
          else {
                printf("\n%s : obj %s\n",str.UTF8String,obj.description.UTF8String);
                if ([obj conformsToProtocol:@protocol(LogObjectProtocol)]) {
                      printf("    %s\n",[[((NSObject<LogObjectProtocol>*)obj) logDescriptionRecurseWithStack:[MutableSet set]] stringByReplacingOccurrencesOfString:@"\n" withString:@"\n     "].UTF8String);
                  }
            }
    }
+(NSString*)nameFor:(id)object {MSGSTART("Util:+(NSString*)nameFor:(id)object")

          if (!object) return(@"[nil]");
          if ([object respondsToSelector:@selector(objectName)]) {
                return([object objectName]);
            }
          else return([Util descriptionFor:object]);
    }
-(NSMutableString*)objectName {MSGSTART("Util:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }
+(bool)objectOrString:(id)a equals:(id)b {MSGSTART("Util:+(bool)objectOrString:(id)a equals:(id)b")

          if ([a respondsToSelector:@selector(isEqualToString:)]&&[b respondsToSelector:@selector(isEqualToString:)]) return([((NSString*)a) isEqualToString:(NSString*)b]);
          else return(a==b);
    }

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_


















// !!!: Implementations: w


















        #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
        #endif
        #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

#define _ClassName_ WeakList
#define _WIClass_ WeakList__
#define _className_ weakList
#define _Class_ WeakList__
@implementation WeakList

@synthesize __owner_context=__owner_context;
@synthesize _count=_count;
@synthesize debugAutorelease=debugAutorelease;
@synthesize isZombie=isZombie;
@synthesize objectIDInClass=objectIDInClass;
@synthesize objectIDInTotal=objectIDInTotal;
-(void)_startObjectOfClassWeakList {MSGSTART("WeakList:-(void)_startObjectOfClassWeakList")
  
  /*i-996*/debugAutorelease=YES;
  /*i-995*/objInitFn(self,objectIDInTotal,objectIDInClass);
      
  /*i-500*//*ivar*/v_tailItem_endpoint=([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableTailItem:) otherEndObjectToEndpoint:@selector(tailItemToEndpoint:)]);  ADDOWNER(v_tailItem_endpoint,self);
   /*ivar*/v_headItem_endpoint=([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableHeadItem:) otherEndObjectToEndpoint:@selector(headItemToEndpoint:)]);  ADDOWNER(v_headItem_endpoint,self);
  
  /*i0*/}
-(void)append:(NSObject<WeakListItem>*)item {MSGSTART("WeakList:-(void)append:(NSObject<WeakListItem>*)item")
  [self link:item before:nil];}
-(constchar*)cdescription {MSGSTART("WeakList:-(constchar*)cdescription")
  return([self.description cStringUsingEncoding:NSASCIIStringEncoding]);}
-(constchar*)cobjectName {MSGSTART("WeakList:-(constchar*)cobjectName")
  return([self.objectName cStringUsingEncoding:NSASCIIStringEncoding]);}
-(Unsigned)count {MSGSTART("WeakList:-(Unsigned)count")
  return(_count);}
-(void)dealloc {MSGSTART("WeakList:-(void)dealloc")
  
  /*i-500*/self.headItem=self.tailItem=nil;
  /*i-151*/[self die];
/*i0*/REMOVEOWNER(v_tailItem_endpoint,self);v_tailItem_endpoint=nil;

    REMOVEOWNER(v_headItem_endpoint,self);v_headItem_endpoint=nil;
/*i998*/deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie=YES;
#if defined(LONGLIVEZOMBIES) || defined(LONGLIVEZOMBIES___WI_CLASS__)
        if (YES) return;
#endif
    
/*i999*/}
-(NSString*)description {MSGSTART("WeakList:-(NSString*)description")
  
  /*i-999*/NSMutableString *ret=self.objectName;
          
  /*i999*/return(ret);
    }
-(void)die {MSGSTART("WeakList:-(void)die")

  self.headItem=nil;
  self.tailItem=nil;
  /*i900*/}
+(WeakList*)get {MSGSTART("WeakList:+(WeakList*)get")
  return([[WeakList alloc] init]);}
-(NSObject<WeakListItem>*)headItem {MSGSTART("WeakList:-(NSObject<WeakListItem>*)headItem")
  return((NSObject<WeakListItem>*)v_headItem_endpoint.value);}
-(Endpoint1*)headItem_endpoint {MSGSTART("WeakList:-(Endpoint1*)headItem_endpoint")
  
  /*i-999*/Endpoint1* ret=v_headItem_endpoint;
  /*i999*/return(ret);}
-(NSObject<LinkEndpoint>*)headItemToEndpoint:(id)aheadItem {MSGSTART("WeakList:-(NSObject<LinkEndpoint>*)headItemToEndpoint:(id)aheadItem")
  return([aheadItem performSelector:@selector(listAsHead_endpoint)]);}
-(WeakList*)init {MSGSTART("WeakList:-(WeakList*)init")
  
  /*i-10001*/if (!(self=[super init])) return(nil);
  
  /*i11*/[self _startObjectOfClassWeakList];

/*i10001*/return(self);}
-(NSNumber*)isAcceptableHeadItem:(id)aheadItem {MSGSTART("WeakList:-(NSNumber*)isAcceptableHeadItem:(id)aheadItem")
  return([aheadItem conformsToProtocol:@protocol(WeakListItem)]?@YES:nil);}
-(NSNumber*)isAcceptableTailItem:(id)atailItem {MSGSTART("WeakList:-(NSNumber*)isAcceptableTailItem:(id)atailItem")
  return([atailItem conformsToProtocol:@protocol(WeakListItem)]?@YES:nil);}
-(void)link:(NSObject<WeakListItem>*)item after:(NSObject<WeakListItem>*)prev {MSGSTART("WeakList:-(void)link:(NSObject<WeakListItem>*)item after:(NSObject<WeakListItem>*)prev")

          [item unlink];
          item.list=self;
          [item linkAfter:prev];
    }
-(void)link:(NSObject<WeakListItem>*)item before:(NSObject<WeakListItem>*)next {MSGSTART("WeakList:-(void)link:(NSObject<WeakListItem>*)item before:(NSObject<WeakListItem>*)next")

          [item unlink];
          item.list=self;
          [item linkBefore:next];
    }
-(NSMutableString*)objectName {MSGSTART("WeakList:-(NSMutableString*)objectName")
  
  /*i-999*/NSMutableString *ret=nil;
          
  /*i-100*/ret=[NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];
          
  /*i999*/return(ret);
    }
-(void)prepend:(NSObject<WeakListItem>*)item {MSGSTART("WeakList:-(void)prepend:(NSObject<WeakListItem>*)item")
  [self link:item after:nil];}
-(void)retract {MSGSTART("WeakList:-(void)retract")
  self.headItem=nil;
  self.tailItem=nil;}
-(void)setHeadItem:(NSObject<WeakListItem>*)v {MSGSTART("WeakList:-(void)setHeadItem:(NSObject<WeakListItem>*)v")
  [v_headItem_endpoint setValue:v];}
-(void)setHeadItem_endpoint:(Endpoint1*)v {MSGSTART("WeakList:-(void)setHeadItem_endpoint:(Endpoint1*)v")
  
  /*i-1999*/if (!authorized_thread(__private_access_thread_mask_in_WeakList)) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(headItem_endpoint=\"blah\") to set the property)");
  
  /*i-905*/if(v_headItem_endpoint==v)return;
  /*i-900*/{v_headItem_endpoint=(id)v;}
/*i-850*/REMOVEOWNER(v_headItem_endpoint,self);ADDOWNER(v,self);}
-(void)setTailItem:(NSObject<WeakListItem>*)v {MSGSTART("WeakList:-(void)setTailItem:(NSObject<WeakListItem>*)v")
  [v_tailItem_endpoint setValue:v];}
-(void)setTailItem_endpoint:(Endpoint1*)v {MSGSTART("WeakList:-(void)setTailItem_endpoint:(Endpoint1*)v")
  
  /*i-1999*/if (!authorized_thread(__private_access_thread_mask_in_WeakList)) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(tailItem_endpoint=\"blah\") to set the property)");
  
  /*i-905*/if(v_tailItem_endpoint==v)return;
  /*i-900*/{v_tailItem_endpoint=(id)v;}
/*i-850*/REMOVEOWNER(v_tailItem_endpoint,self);ADDOWNER(v,self);}
-(void)setWithDictionary:(NSDictionary*)d {MSGSTART("WeakList:-(void)setWithDictionary:(NSDictionary*)d")
}
-(NSObject<WeakListItem>*)tailItem {MSGSTART("WeakList:-(NSObject<WeakListItem>*)tailItem")
  return((NSObject<WeakListItem>*)v_tailItem_endpoint.value);}
-(Endpoint1*)tailItem_endpoint {MSGSTART("WeakList:-(Endpoint1*)tailItem_endpoint")
  
  /*i-999*/Endpoint1* ret=v_tailItem_endpoint;
  /*i999*/return(ret);}
-(NSObject<LinkEndpoint>*)tailItemToEndpoint:(id)atailItem {MSGSTART("WeakList:-(NSObject<LinkEndpoint>*)tailItemToEndpoint:(id)atailItem")
  return([atailItem performSelector:@selector(listAsTail_endpoint)]);}

@end
#undef _ClassName_
#undef _WIClass_
#undef _className_
#undef _Class_


















#endif // INCLUDE_IFACE
