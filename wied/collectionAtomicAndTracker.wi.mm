// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 1 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D2





        @interface AtomiclyMutableArray : NSMutableArray<ClassObject, Commitable, ModelArray, Object, ObjectEquate> {
            NSArray *__array;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_AtomiclyMutableArray; @protected
            bool _doneStage;
            bool _isDirty;
            bool alwaysChangedIfSourceChanged;
            ULL commitFrame;
            bool debugAutorelease;
            Endpoint1 *v_dirtyInModel_endpoint;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            bool modelObjectHasChanged;
            Int modelRetaincount;
            bool noMOForNextRetain;
            LL objectIDInClass;
            LL objectIDInTotal;
            EndpointS *v_sinkCommitters;
            EndpointS *v_sourceCommitters;
            Int totalRetainCount;
            NSMutableArray<MinimalMutableArray> *trackerArray;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSArray *__array;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) bool _doneStage;
        @property (nonatomic,readwrite) bool _isDirty;
        @property (nonatomic,readwrite) bool alwaysChangedIfSourceChanged;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) ULL commitFrame;
        @property (nonatomic,readonly) CommitStage commitStage;
        @property (nonatomic,readonly) NSArray *copyAndClear;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) Model *dirtyInModel;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *dirtyInModel_endpoint;
        @property (nonatomic,readonly) bool doneStage;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isDirty;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) id lastObject;
        @property (nonatomic,readwrite) bool modelObjectHasChanged;
        @property (nonatomic,readonly) Int modelRetaincount;
        @property (nonatomic,readwrite) bool noMOForNextRetain;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) bool onlyOwnedByModels;
        @property (nonatomic,readonly) NSEnumerator *reverseObjectEnumerator;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *sinkCommitters;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *sourceCommitters;
        @property (nonatomic,readonly) Int totalRetainCount;
        @property (strong,nonatomic,readwrite) NSMutableArray<MinimalMutableArray> *trackerArray;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassAtomiclyMutableArray;
        - (NSArray *)__array;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addSinkCommitter:(NSObject<Commitable> *)v;
        - (void)addSourceCommitter:(NSObject<Commitable> *)v;
        + (AtomiclyMutableArray *)array;
        - (NSArray *)arrayByAddingObject:(id)object;
        - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array;
        + (AtomiclyMutableArray *)arrayWithArray:(NSArray *)array;
        + (AtomiclyMutableArray *)arrayWithContentsOfFile:(NSString *)file;
        + (AtomiclyMutableArray *)arrayWithContentsOfURL:(NSURL *)url;
        + (AtomiclyMutableArray *)arrayWithObject:(id)object;
        + (AtomiclyMutableArray *)arrayWithObjects:(id *)objects count:(Unsigned)count;
        - (Unsigned)bestTrackerInsertIndexForObject:(id)object index:(Unsigned)index;
        - (constchar *)cdescription;
        - (void)cleanupCommit;
        - (constchar *)cobjectName;
        - (void)commit;
        - (void)commitArray;
        - (Int)commitProperties:(Int)substageIndex;
        - (CommitStage)commitStage;
        - (NSString *)componentsJoinedByString:(NSString *)separator;
        - (BOOL)containsObject:(id)object;
        - (NSArray *)copyAndClear;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        - (void)didCommit;
        - (void)die;
        - (Model *)dirtyInModel;
        - (Endpoint1 *)dirtyInModel_endpoint;
        - (NSObject<LinkEndpoint> *)dirtyInModelToEndpoint:(id)adirtyInModel;
        - (bool)doneStage;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi;
        - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (void)finishCommit;
        - (id)firstObjectCommonWithArray:(NSArray *)array;
        - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange;
        - (Unsigned)hash;
        - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp;
        - (Unsigned)indexOfObject:(id)object;
        - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (AtomiclyMutableArray *)init;
        - (AtomiclyMutableArray *)initWithArray:(NSArray *)array;
        - (AtomiclyMutableArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy;
        - (AtomiclyMutableArray *)initWithCoder:(NSCoder *)coder;
        - (AtomiclyMutableArray *)initWithContentsOfFile:(NSString *)file;
        - (AtomiclyMutableArray *)initWithContentsOfURL:(NSURL *)url;
        - (AtomiclyMutableArray *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (void)insertObject:(id)object atIndex:(Unsigned)index;
        - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (NSNumber *)isAcceptableDirtyInModel:(id)adirtyInModel;
        - (NSNumber *)isAcceptableSinkCommitter:(id)asinkCommitter;
        - (NSNumber *)isAcceptableSourceCommitter:(id)asourceCommitter;
        - (bool)isDirty;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToArray:(NSArray *)array;
        - (id)lastObject;
        - (void)makeModel;
        - (void)makeNonModel;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (void)markDirty;
        - (void)modeladd;
        - (void)modelautorelease;
        - (void)modelrelease;
        - (id)modelretain;
        - (void)modelsub;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (id)objectAtIndex:(Unsigned)index;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSArray *)objects;
        - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes;
        - (bool)onlyOwnedByModels;
        - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;
        - (void)removeAllObjects;
        - (void)removeAllSinkCommitters;
        - (void)removeAllSourceCommitters;
        - (void)removeLastObject;
        - (void)removeObject:(id)object;
        - (void)removeObject:(id)object inRange:(NSRange)r;
        - (void)removeObjectAtIndex:(Unsigned)index;
        - (void)removeObjectIdenticalTo:(id)object;
        - (void)removeObjectIdenticalTo:(id)object inRange:(NSRange)r;
        - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (void)removeObjectsInArray:(NSArray *)array;
        - (void)removeObjectsInRange:(NSRange)r;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeSinkCommitter:(NSObject<Commitable> *)v;
        - (void)removeSourceCommitter:(NSObject<Commitable> *)v;
        - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (void)replaceObjectsAtIndexes:(NSIndexSet *)indexes withObjects:(NSArray *)array;
        - (void)replaceObjectsInRange:(NSRange)r withObjectsFromArray:(NSArray *)array;
        - (void)replaceObjectsInRange:(NSRange)r withObjectsFromArray:(NSArray *)array range:(NSRange)arrayRange;
        - (void)retract;
        - (NSEnumerator *)reverseObjectEnumerator;
        - (void)setArray:(NSArray *)array;
        - (void)setAtomicArray:(NSArray *)v;
        - (void)setDirtyInModel:(Model *)v;
        - (void)setDirtyInModel_endpoint:(Endpoint1 *)v;
        - (void)setSinkCommitters:(EndpointS *)v;
        - (void)setSourceCommitters:(EndpointS *)v;
        - (void)setTrackerArray:(NSMutableArray<MinimalMutableArray> *)v;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        - (EndpointS *)sinkCommitters;
        - (NSObject<LinkEndpoint> *)sinkCommitterToEndpoint:(id)asinkCommitter;
        - (NSData *)sortedArrayHint;
        - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint;
        - (NSArray *)sortedArrayUsingSelector:(SEL)selector;
        - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)sortUsingComparator:(NSComparator)cmptr;
        - (void)sortUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context;
        - (void)sortUsingSelector:(SEL)selector;
        - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (EndpointS *)sourceCommitters;
        - (NSObject<LinkEndpoint> *)sourceCommitterToEndpoint:(id)asourceCommitter;
        - (void)startCommit;
        - (NSArray *)subarrayWithRange:(NSRange)r;
        - (NSMutableArray<MinimalMutableArray> *)trackerArray;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willCommit;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface AtomiclyMutableDictionary : NSMutableDictionary<ClassObject, Commitable, ModelDictionary, Object, ObjectEquate> {
            NSDictionary *__dictionary;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_AtomiclyMutableDictionary; @protected
            bool _doneStage;
            bool _isDirty;
            bool alwaysChangedIfSourceChanged;
            ULL commitFrame;
            bool debugAutorelease;
            Endpoint1 *v_dirtyInModel_endpoint;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            bool modelObjectHasChanged;
            Int modelRetaincount;
            bool noMOForNextRetain;
            LL objectIDInClass;
            LL objectIDInTotal;
            EndpointS *v_sinkCommitters;
            EndpointS *v_sourceCommitters;
            Int totalRetainCount;
            NSMutableDictionary<MinimalMutableDictionary> *trackerDictionary;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSDictionary *__dictionary;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) bool _doneStage;
        @property (nonatomic,readwrite) bool _isDirty;
        @property (nonatomic,readonly) NSArray *allKeys;
        @property (nonatomic,readonly) NSArray *allValues;
        @property (nonatomic,readwrite) bool alwaysChangedIfSourceChanged;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) ULL commitFrame;
        @property (nonatomic,readonly) CommitStage commitStage;
        @property (nonatomic,readonly) NSDictionary *copyAndClear;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptionInStringsFileFormat;
        @property (nonatomic,readwrite) Model *dirtyInModel;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *dirtyInModel_endpoint;
        @property (nonatomic,readonly) bool doneStage;
        @property (nonatomic,readonly) NSDate *fileCreationDate;
        @property (nonatomic,readonly) BOOL fileExtensionHidden;
        @property (nonatomic,readonly) NSNumber *fileGroupOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileGroupOwnerAccountName;
        @property (nonatomic,readonly) OSType fileHFSCreatorCode;
        @property (nonatomic,readonly) OSType fileHFSTypeCode;
        @property (nonatomic,readonly) BOOL fileIsAppendOnly;
        @property (nonatomic,readonly) BOOL fileIsImmutable;
        @property (nonatomic,readonly) NSDate *fileModificationDate;
        @property (nonatomic,readonly) NSNumber *fileOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileOwnerAccountName;
        @property (nonatomic,readonly) Unsigned filePosixPermissions;
        @property (nonatomic,readonly) ULL fileSize;
        @property (nonatomic,readonly) Unsigned fileSystemFileNumber;
        @property (nonatomic,readonly) Int fileSystemNumber;
        @property (nonatomic,readonly) NSString *fileType;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isDirty;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *keyEnumerator;
        @property (nonatomic,readwrite) bool modelObjectHasChanged;
        @property (nonatomic,readonly) Int modelRetaincount;
        @property (nonatomic,readwrite) bool noMOForNextRetain;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) bool onlyOwnedByModels;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *sinkCommitters;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *sourceCommitters;
        @property (nonatomic,readonly) Int totalRetainCount;
        @property (strong,nonatomic,readwrite) NSMutableDictionary<MinimalMutableDictionary> *trackerDictionary;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassAtomiclyMutableDictionary;
        - (NSDictionary *)__dictionary;
        - (void)addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (void)addSinkCommitter:(NSObject<Commitable> *)v;
        - (void)addSourceCommitter:(NSObject<Commitable> *)v;
        - (NSArray *)allKeys;
        - (NSArray *)allKeysForObject:(id)object;
        - (NSArray *)allValues;
        - (constchar *)cdescription;
        - (void)cleanupCommit;
        - (constchar *)cobjectName;
        - (void)commit;
        - (void)commitDictionary;
        - (Int)commitProperties:(Int)substageIndex;
        - (CommitStage)commitStage;
        - (NSDictionary *)copyAndClear;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptionInStringsFileFormat;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        + (AtomiclyMutableDictionary *)dictionary;
        + (AtomiclyMutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file;
        + (AtomiclyMutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url;
        + (AtomiclyMutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary;
        + (AtomiclyMutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key;
        + (AtomiclyMutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
        - (void)didCommit;
        - (void)die;
        - (Model *)dirtyInModel;
        - (Endpoint1 *)dirtyInModel_endpoint;
        - (NSObject<LinkEndpoint> *)dirtyInModelToEndpoint:(id)adirtyInModel;
        - (bool)doneStage;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (NSDate *)fileCreationDate;
        - (BOOL)fileExtensionHidden;
        - (NSNumber *)fileGroupOwnerAccountID;
        - (NSString *)fileGroupOwnerAccountName;
        - (OSType)fileHFSCreatorCode;
        - (OSType)fileHFSTypeCode;
        - (BOOL)fileIsAppendOnly;
        - (BOOL)fileIsImmutable;
        - (NSDate *)fileModificationDate;
        - (NSNumber *)fileOwnerAccountID;
        - (NSString *)fileOwnerAccountName;
        - (Unsigned)filePosixPermissions;
        - (ULL)fileSize;
        - (Unsigned)fileSystemFileNumber;
        - (Int)fileSystemNumber;
        - (NSString *)fileType;
        - (void)finishCommit;
        - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
        - (Unsigned)hash;
        - (AtomiclyMutableDictionary *)init;
        - (AtomiclyMutableDictionary *)initWithCoder:(NSCoder *)coder;
        - (AtomiclyMutableDictionary *)initWithContentsOfFile:(NSString *)file;
        - (AtomiclyMutableDictionary *)initWithContentsOfURL:(NSURL *)url;
        - (AtomiclyMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary;
        - (AtomiclyMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy;
        - (AtomiclyMutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
        - (NSNumber *)isAcceptableDirtyInModel:(id)adirtyInModel;
        - (NSNumber *)isAcceptableSinkCommitter:(id)asinkCommitter;
        - (NSNumber *)isAcceptableSourceCommitter:(id)asourceCommitter;
        - (bool)isDirty;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary;
        - (NSEnumerator *)keyEnumerator;
        - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr;
        - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector;
        - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)makeModel;
        - (void)makeNonModel;
        - (void)markDirty;
        - (void)modeladd;
        - (void)modelautorelease;
        - (void)modelrelease;
        - (id)modelretain;
        - (void)modelsub;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (id)objectForKey:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
        - (bool)onlyOwnedByModels;
        - (void)removeAllObjects;
        - (void)removeAllSinkCommitters;
        - (void)removeAllSourceCommitters;
        - (void)removeObjectForKey:(id<NSCopying> )key;
        - (void)removeObjectsForKeys:(NSArray *)keys;
        - (void)removeSinkCommitter:(NSObject<Commitable> *)v;
        - (void)removeSourceCommitter:(NSObject<Commitable> *)v;
        - (void)retract;
        - (void)setAtomicDictionary:(NSDictionary *)v;
        - (void)setDictionary:(NSDictionary *)dictionary;
        - (void)setDirtyInModel:(Model *)v;
        - (void)setDirtyInModel_endpoint:(Endpoint1 *)v;
        - (void)setObject:(id)object forKey:(id<NSCopying> )key;
        - (void)setSinkCommitters:(EndpointS *)v;
        - (void)setSourceCommitters:(EndpointS *)v;
        - (void)setTrackerDictionary:(NSMutableDictionary<MinimalMutableDictionary> *)v;
        - (void)setValue:(id)object forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        - (EndpointS *)sinkCommitters;
        - (NSObject<LinkEndpoint> *)sinkCommitterToEndpoint:(id)asinkCommitter;
        - (EndpointS *)sourceCommitters;
        - (NSObject<LinkEndpoint> *)sourceCommitterToEndpoint:(id)asourceCommitter;
        - (void)startCommit;
        - (NSMutableDictionary<MinimalMutableDictionary> *)trackerDictionary;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willCommit;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface AtomiclyMutableSet : NSMutableSet<ClassObject, Commitable, ModelSet, Object, ObjectEquate> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_AtomiclyMutableSet; @protected
            NSSet *__set;
            bool _doneStage;
            bool _isDirty;
            bool alwaysChangedIfSourceChanged;
            ULL commitFrame;
            bool debugAutorelease;
            Endpoint1 *v_dirtyInModel_endpoint;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            bool modelObjectHasChanged;
            Int modelRetaincount;
            bool noMOForNextRetain;
            LL objectIDInClass;
            LL objectIDInTotal;
            bool retrievesWeakValues;
            EndpointS *v_sinkCommitters;
            EndpointS *v_sourceCommitters;
            Int totalRetainCount;
            NSMutableSet<MutableSet> *trackerSet;
            long version;
            Int weakObjectCount;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSSet *__set;
        @property (nonatomic,readwrite) bool _doneStage;
        @property (nonatomic,readwrite) bool _isDirty;
        @property (nonatomic,readonly) NSArray *allObjects;
        @property (nonatomic,readwrite) bool alwaysChangedIfSourceChanged;
        @property (nonatomic,readonly) id anyObject;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) ULL commitFrame;
        @property (nonatomic,readonly) CommitStage commitStage;
        @property (nonatomic,readonly) NSSet *copyAndClear;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) Model *dirtyInModel;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) Endpoint1 *dirtyInModel_endpoint;
        @property (nonatomic,readonly) bool doneStage;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isDirty;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) bool modelObjectHasChanged;
        @property (nonatomic,readonly) Int modelRetaincount;
        @property (nonatomic,readwrite) bool noMOForNextRetain;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) bool onlyOwnedByModels;
        @property (nonatomic,readwrite) bool retrievesWeakValues;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *sinkCommitters;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) EndpointS *sourceCommitters;
        @property (nonatomic,readonly) Int totalRetainCount;
        @property (strong,nonatomic,readwrite) NSMutableSet<MutableSet> *trackerSet;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassAtomiclyMutableSet;
        - (NSSet *)__set;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addSinkCommitter:(NSObject<Commitable> *)v;
        - (void)addSourceCommitter:(NSObject<Commitable> *)v;
        - (NSArray *)allObjects;
        - (id)anyObject;
        - (constchar *)cdescription;
        - (void)cleanupCommit;
        - (constchar *)cobjectName;
        - (void)commit;
        - (Int)commitProperties:(Int)substageIndex;
        - (void)commitSet;
        - (CommitStage)commitStage;
        - (BOOL)containsObject:(id)object;
        - (NSSet *)copyAndClear;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (void)didCommit;
        - (void)die;
        - (Model *)dirtyInModel;
        - (Endpoint1 *)dirtyInModel_endpoint;
        - (NSObject<LinkEndpoint> *)dirtyInModelToEndpoint:(id)adirtyInModel;
        - (bool)doneStage;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (void)finishCommit;
        - (Unsigned)hash;
        - (AtomiclyMutableSet *)init;
        - (AtomiclyMutableSet *)initWithArray:(NSArray *)array;
        - (AtomiclyMutableSet *)initWithCoder:(NSCoder *)coder;
        - (AtomiclyMutableSet *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (AtomiclyMutableSet *)initWithSet:(NSSet *)set;
        - (AtomiclyMutableSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy;
        - (void)intersectSet:(NSSet *)set;
        - (BOOL)intersectsSet:(NSSet *)set;
        - (NSNumber *)isAcceptableDirtyInModel:(id)adirtyInModel;
        - (NSNumber *)isAcceptableSinkCommitter:(id)asinkCommitter;
        - (NSNumber *)isAcceptableSourceCommitter:(id)asourceCommitter;
        - (bool)isDirty;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToSet:(NSSet *)set;
        - (BOOL)isSubsetOfSet:(NSSet *)set;
        - (void)makeModel;
        - (void)makeNonModel;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (void)markDirty;
        - (id)member:(id)object;
        - (void)minusSet:(NSSet *)set;
        - (void)modeladd;
        - (void)modelautorelease;
        - (void)modelrelease;
        - (id)modelretain;
        - (void)modelsub;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (bool)onlyOwnedByModels;
        - (void)removeAllObjects;
        - (void)removeAllSinkCommitters;
        - (void)removeAllSourceCommitters;
        - (void)removeObject:(id)object;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeSinkCommitter:(NSObject<Commitable> *)v;
        - (void)removeSourceCommitter:(NSObject<Commitable> *)v;
        - (void)retract;
        + (AtomiclyMutableSet *)set;
        - (void)setAtomicSet:(NSSet *)v;
        - (NSSet *)setByAddingObject:(id)object;
        - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array;
        - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set;
        - (void)setDirtyInModel:(Model *)v;
        - (void)setDirtyInModel_endpoint:(Endpoint1 *)v;
        - (void)setSet:(NSSet *)set;
        - (void)setSinkCommitters:(EndpointS *)v;
        - (void)setSourceCommitters:(EndpointS *)v;
        - (void)setTrackerSet:(NSMutableSet<MutableSet> *)v;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        + (AtomiclyMutableSet *)setWithArray:(NSArray *)array;
        + (AtomiclyMutableSet *)setWithObject:(id)object;
        + (AtomiclyMutableSet *)setWithSet:(NSSet *)set;
        - (EndpointS *)sinkCommitters;
        - (NSObject<LinkEndpoint> *)sinkCommitterToEndpoint:(id)asinkCommitter;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (EndpointS *)sourceCommitters;
        - (NSObject<LinkEndpoint> *)sourceCommitterToEndpoint:(id)asourceCommitter;
        - (void)startCommit;
        - (NSMutableSet<MutableSet> *)trackerSet;
        - (void)unionSet:(NSSet *)set;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willCommit;

        @end
    #endif // INCLUDE_IFACE_D2

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: a





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         AtomiclyMutableArray
    #define _WIClass_           AtomiclyMutableArray__
    #define _className_         atomiclyMutableArray
    #define _Class_             AtomiclyMutableArray__
    @implementation AtomiclyMutableArray

    @synthesize __owner_context = __owner_context;
    @synthesize _doneStage = _doneStage;
    @synthesize _isDirty = _isDirty;
    @synthesize alwaysChangedIfSourceChanged = alwaysChangedIfSourceChanged;
    @synthesize commitFrame = commitFrame;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize modelObjectHasChanged = modelObjectHasChanged;
    @synthesize modelRetaincount = modelRetaincount;
    @synthesize noMOForNextRetain = noMOForNextRetain;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize totalRetainCount = totalRetainCount;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassAtomiclyMutableArray {
        MSGSTART("AtomiclyMutableArray:-(void)_startObjectOfClassAtomiclyMutableArray")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*/ [self makeModel];  /*ivar*/ noMOForNextRetain = (NO);
        /*ivar*/ version = (1);
        /*ivar*/ v_sourceCommitters = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSourceCommitter:) otherEndObjectToEndpoint:@selector(sourceCommitterToEndpoint:)]);  ADDOWNER(v_sourceCommitters,self);
        /*ivar*/ v_sinkCommitters = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSinkCommitter:) otherEndObjectToEndpoint:@selector(sinkCommitterToEndpoint:)]);  ADDOWNER(v_sinkCommitters,self);
        /*ivar*/ totalRetainCount = (1);
        /*ivar*/ _isDirty = (NO);
        /*ivar*/ commitFrame = (1);
        /*ivar*/ v_dirtyInModel_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableDirtyInModel:) otherEndObjectToEndpoint:@selector(dirtyInModelToEndpoint:)]);  ADDOWNER(v_dirtyInModel_endpoint,self);
        /*ivar*/ _doneStage = (NO);

/*i0*/}
    - (NSArray *)__array {
        MSGSTART("AtomiclyMutableArray:-(NSArray*)__array")

        /*i-999*/ NSArray * ret = __array;
        /*i999*/ return ret;
    }
    - (void)addObject:(id)object {
        MSGSTART("AtomiclyMutableArray:-(void)addObject:(id)object")

        if (![trackerArray containsObject:object]) {
            [trackerArray addObject:object];
            if (trackerArray.version != version) [self markDirty];
        }
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:-(void)addObjectsFromArray:(NSArray*)array")

        for (NSObject *object in array) {
            [self addObject:object];
        }
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("AtomiclyMutableArray:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("AtomiclyMutableArray:-(void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer toObjectsAtIndexes : indexes forKeyPath : keyPath options : options context : context];
    }
    - (void)addSinkCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableArray:-(void)addSinkCommitter:(NSObject<Commitable>*)v")
        [v_sinkCommitters addObject : v];
    }
    - (void)addSourceCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableArray:-(void)addSourceCommitter:(NSObject<Commitable>*)v")
        [v_sourceCommitters addObject : v];
    }
    + (AtomiclyMutableArray *)array {
        MSGSTART("AtomiclyMutableArray:+(AtomiclyMutableArray*)array")
        return [[AtomiclyMutableArray alloc] init];
    }
    - (NSArray *)arrayByAddingObject:(id)object {
        MSGSTART("AtomiclyMutableArray:-(NSArray*)arrayByAddingObject:(id)object")

        return [self.objects arrayByAddingObject:object];
    }
    - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:-(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array")

        return [self.objects arrayByAddingObjectsFromArray:array];
    }
    + (AtomiclyMutableArray *)arrayWithArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:+(AtomiclyMutableArray*)arrayWithArray:(NSArray*)array")
        return [[AtomiclyMutableArray alloc] initWithArray:array];
    }
    + (AtomiclyMutableArray *)arrayWithContentsOfFile:(NSString *)file {
        MSGSTART("AtomiclyMutableArray:+(AtomiclyMutableArray*)arrayWithContentsOfFile:(NSString*)file")
        return [[AtomiclyMutableArray alloc] initWithContentsOfFile:file];
    }
    + (AtomiclyMutableArray *)arrayWithContentsOfURL:(NSURL *)url {
        MSGSTART("AtomiclyMutableArray:+(AtomiclyMutableArray*)arrayWithContentsOfURL:(NSURL*)url")
        return [[AtomiclyMutableArray alloc] initWithContentsOfURL:url];
    }
    + (AtomiclyMutableArray *)arrayWithObject:(id)object {
        MSGSTART("AtomiclyMutableArray:+(AtomiclyMutableArray*)arrayWithObject:(id)object")
        return [[AtomiclyMutableArray alloc] initWithObjects:&object count:1];
    }
    + (AtomiclyMutableArray *)arrayWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("AtomiclyMutableArray:+(AtomiclyMutableArray*)arrayWithObjects:(id*)objects count:(Unsigned)count")
        return [[AtomiclyMutableArray alloc] initWithObjects:objects count:count];
    }
    - (Unsigned)bestTrackerInsertIndexForObject:(id)object index:(Unsigned)index {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)bestTrackerInsertIndexForObject:(id)object index:(Unsigned)index")

        if ([trackerArray containsObject:object]) return NSNotFound;

        Int i;
        Unsigned ti = NSNotFound;
        for (i = index - 1; i >= 0; i--) {
            id was = [__array objectAtIndex:i];
            ti = [trackerArray indexOfObject:was];
            if (ti != NSNotFound) {
                ti++; break;
            }
        }
        if (i < 0) for (i = index; i < __array.count; i++) {
                id was = [__array objectAtIndex:i];
                ti = [trackerArray indexOfObject:was];
                if (ti != NSNotFound) break;
            }

        if (ti == NSNotFound)
            ti = (index > trackerArray.count ? trackerArray.count : index);
        return ti;
    }
    - (constchar *)cdescription {
        MSGSTART("AtomiclyMutableArray:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)cleanupCommit {
        MSGSTART("AtomiclyMutableArray:-(void)cleanupCommit")

        modelObjectHasChanged = NO;
    }
    - (constchar *)cobjectName {
        MSGSTART("AtomiclyMutableArray:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)commit {
        MSGSTART("AtomiclyMutableArray:-(void)commit")
    }
    - (void)commitArray {
        MSGSTART("AtomiclyMutableArray:-(void)commitArray")

        if (version != trackerArray.version) {
            [self makeNonModel];
            __array = [[NSArray alloc] initWithArray:trackerArray.__array];
            [self makeModel];
            version = trackerArray.version;
        }
    }
    - (Int)commitProperties:(Int)substageIndex {
        MSGSTART("AtomiclyMutableArray:-(Int)commitProperties:(Int)substageIndex")

        /*i-999*/ Int implementedStages = 1
            /*i-990*/;

        /*i-5*/ switch (substageIndex) {
            case 0:
                modelObjectHasChanged = alwaysChangedIfSourceChanged; {
                    /*i5*/}
                break;

            case 1: {
                /*i15*/}
                       break;

            case 2: {
                /*i25*/}
                       break;

            case 3: {
                /*i35*/}
                       break;

            case 4: {
                /*i45*/}
                       break;

            case 5: {
                /*i55*/}
                       break;

            case 6: {
                /*i65*/}
                       break;

            case 7: {
                /*i75*/}
                       break;

            case 8: {
                /*i85*/}
                       break;

            case 9: {
                /*i95*/}
                       break;

            case 10: {
                /*i105*/}

            default: break;
        }

        /*i900*/ Int ret; for (ret = substageIndex + 1; (ret <= 10) && !(implementedStages & shiftOne[ret]); ret++) {
        }
        if (ret > 10) {
            ret = -1;

            /*i910*/ if (modelObjectHasChanged) version++;

            /*i950*/}

        /*i999*/ return (ret < 0) || (ret > 10) ? -1 : ret;
    }
    - (CommitStage)commitStage {
        MSGSTART("AtomiclyMutableArray:-(CommitStage)commitStage")
        return [Model getDefault].commitStage;
    }
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        MSGSTART("AtomiclyMutableArray:-(NSString *)componentsJoinedByString:(NSString *)separator")

        return [__array componentsJoinedByString:separator];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("AtomiclyMutableArray:-(BOOL)containsObject:(id)object")
        return [__array containsObject:object];
    }
    - (NSArray *)copyAndClear {
        MSGSTART("AtomiclyMutableArray:-(NSArray*)copyAndClear")

        NSArray * ret = __array;
        [self makeNonModel];
        __array = [[NSArray alloc] init];
        return ret;
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("AtomiclyMutableArray:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (Unsigned)count {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)count")
        return [__array count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__array countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("AtomiclyMutableArray:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __array) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("AtomiclyMutableArray:-(void)dealloc")

        /*i-500*/[self makeNonModel];
/*i-151*/ [self die];
/*i0*/ if ( modelRetaincount && (totalRetainCount == modelRetaincount) )
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];



        REMOVEOWNER(v_sourceCommitters,self); v_sourceCommitters = nil;

        trackerArray = nil;

        REMOVEOWNER(v_sinkCommitters,self); v_sinkCommitters = nil;

        __array = nil;

        REMOVEOWNER(v_dirtyInModel_endpoint,self); v_dirtyInModel_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("AtomiclyMutableArray:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__array description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("AtomiclyMutableArray:-(NSString *)descriptionWithLocale:(id)locale")

        return [self.objects descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("AtomiclyMutableArray:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [self.objects descriptionWithLocale:locale indent:level];
    }
    - (void)didCommit {
        MSGSTART("AtomiclyMutableArray:-(void)didCommit")
    }
    - (void)die {
        MSGSTART("AtomiclyMutableArray:-(void)die")

        [v_sinkCommitters removeAllObjects];
        [v_sourceCommitters removeAllObjects];
        self.dirtyInModel = nil;
        /*i900*/}
    - (Model *)dirtyInModel {
        MSGSTART("AtomiclyMutableArray:-(Model*)dirtyInModel")
        return (Model *)v_dirtyInModel_endpoint.value;
    }
    - (Endpoint1 *)dirtyInModel_endpoint {
        MSGSTART("AtomiclyMutableArray:-(Endpoint1*)dirtyInModel_endpoint")

        /*i-999*/ Endpoint1 * ret = v_dirtyInModel_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)dirtyInModelToEndpoint:(id)adirtyInModel {
        MSGSTART("AtomiclyMutableArray:-(NSObject<LinkEndpoint>*)dirtyInModelToEndpoint:(id)adirtyInModel")
        return [adirtyInModel performSelector:@selector(dirtyObjects)];
    }
    - (bool)doneStage {
        MSGSTART("AtomiclyMutableArray:-(bool)doneStage")
        return _doneStage;
    }
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("AtomiclyMutableArray:-(void)encodeWithCoder:(NSCoder*)coder")

        [__array encodeWithCoder : coder];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("AtomiclyMutableArray:-(void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsAtIndexes : indexSet options : opts usingBlock : block];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("AtomiclyMutableArray:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("AtomiclyMutableArray:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi {
        MSGSTART("AtomiclyMutableArray:-(void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi")

        if (fromi != toi) {
            Unsigned fromai = [trackerArray indexOfObject:[__array objectAtIndex:fromi]];
            Unsigned toai = [trackerArray indexOfObject:[__array objectAtIndex:toi]];
            if ( (fromai != NSNotFound) && (toai != NSNotFound) ) {
                [trackerArray exchangeObjectAtIndex:fromai withObjectAtIndex:toai];
                if (trackerArray.version != version) [self markDirty];
            }
        }
    }
    - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("AtomiclyMutableArray:-(NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate")

        return [self.objects filteredArrayUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("AtomiclyMutableArray:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        NSMutableIndexSet * toRemove = nil;
        Unsigned index = 0;
        for (NSObject *object in __array) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableIndexSet alloc] init];
                [toRemove addIndex:index];
            }
            index++;
        }
        if (toRemove)
            [self removeObjectsAtIndexes:toRemove];
    }
    - (void)finishCommit {
        MSGSTART("AtomiclyMutableArray:-(void)finishCommit")
    }
    - (id)firstObjectCommonWithArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:-(id)firstObjectCommonWithArray:(NSArray*)array")

        return [__array firstObjectCommonWithArray:array];
    }
    - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange {
        MSGSTART("AtomiclyMutableArray:-(void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange")

        [__array getObjects : aBuffer range : aRange];
        if (weakObjectCount) for (Int i = aRange.length + aRange.location - 1; i >= aRange.location; i--) {
                aBuffer[i] = [aBuffer[i] strongSelf];
            }

    }
    - (Unsigned)hash {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableArray:-(NSIndexSet*)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableArray:-(NSIndexSet*)indexesOfObjectsPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsPassingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableArray:-(NSIndexSet*)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsWithOptions:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp")

        return [__array indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp];
    }
    - (Unsigned)indexOfObject:(id)object {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)indexOfObject:(id)object")

        return [__array indexOfObject:object];
    }
    - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)indexOfObject:(id)object inRange:(NSRange)range")

        return [__array indexOfObject:object inRange:range];
    }
    - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf]],[__array indexOfObjectIdenticalTo:[object weakSelf]]);
        else return [__array indexOfObjectIdenticalTo:object];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf] inRange:range],[__array indexOfObjectIdenticalTo:[object weakSelf] inRange:range]);
        else return [__array indexOfObjectIdenticalTo:object inRange:range];
    }
    - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)indexOfObjectPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectPassingTest:predicate];
    }
    - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableArray:-(Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectWithOptions:opts passingTest:predicate];
    }
    - (AtomiclyMutableArray *)init {
        MSGSTART("AtomiclyMutableArray:-(AtomiclyMutableArray*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] init];

        /*i11*/ [self _startObjectOfClassAtomiclyMutableArray];

/*i10001*/ return self;
    }
    - (AtomiclyMutableArray *)initWithArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:-(AtomiclyMutableArray*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = (insertsWeakObjectsByDefault ? array.weakCopy : [[NSArray alloc] initWithArray:array]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableArray];

/*i10001*/ return self;
    }
    - (AtomiclyMutableArray *)initWithArray:(NSArray *)array copyItems:(BOOL)copy {
        MSGSTART("AtomiclyMutableArray:-(AtomiclyMutableArray*)initWithArray:(NSArray*)array copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithArray:array copyItems:copy];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableArray];

/*i10001*/ return self;
    }
    - (AtomiclyMutableArray *)initWithCoder:(NSCoder *)coder {
        MSGSTART("AtomiclyMutableArray:-(AtomiclyMutableArray*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableArray];

/*i10001*/ return self;
    }
    - (AtomiclyMutableArray *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("AtomiclyMutableArray:-(AtomiclyMutableArray*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableArray];

/*i10001*/ return self;
    }
    - (AtomiclyMutableArray *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("AtomiclyMutableArray:-(AtomiclyMutableArray*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableArray];

/*i10001*/ return self;
    }
    - (AtomiclyMutableArray *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("AtomiclyMutableArray:-(AtomiclyMutableArray*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = [[NSArray alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __array = __array.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableArray];

/*i10001*/ return self;
    }
    - (void)insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("AtomiclyMutableArray:-(void)insertObject:(id)object atIndex:(Unsigned)index")

        Unsigned ti = [self bestTrackerInsertIndexForObject:object index:index];
        if (ti != NSNotFound) {
            [trackerArray insertObject:object atIndex:ti];
            if (trackerArray.version != version) [self markDirty];
        }
    }
    - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("AtomiclyMutableArray:-(void)insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        Unsigned index = [indexes firstIndex];
        for (NSObject *object in objects) {
            [self insertObject:object atIndex:index];
            index = [indexes indexGreaterThanIndex:index];
        }
    }
    - (NSNumber *)isAcceptableDirtyInModel:(id)adirtyInModel {
        MSGSTART("AtomiclyMutableArray:-(NSNumber*)isAcceptableDirtyInModel:(id)adirtyInModel")
        return [adirtyInModel isKindOfClass:[Model class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSinkCommitter:(id)asinkCommitter {
        MSGSTART("AtomiclyMutableArray:-(NSNumber*)isAcceptableSinkCommitter:(id)asinkCommitter")
        return [asinkCommitter conformsToProtocol:@protocol(Commitable)] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSourceCommitter:(id)asourceCommitter {
        MSGSTART("AtomiclyMutableArray:-(NSNumber*)isAcceptableSourceCommitter:(id)asourceCommitter")
        return [asourceCommitter conformsToProtocol:@protocol(Commitable)] ? @YES : nil;
    }
    - (bool)isDirty {
        MSGSTART("AtomiclyMutableArray:-(bool)isDirty")
        return _isDirty;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("AtomiclyMutableArray:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:-(BOOL)isEqualToArray:(NSArray*)array")

        return [__array isEqualToArray:array];
    }
    - (id)lastObject {
        MSGSTART("AtomiclyMutableArray:-(id)lastObject")
        return weakObjectCount ? [__array.lastObject strongSelf] : __array.lastObject;
    }
    - (void)makeModel {
        MSGSTART("AtomiclyMutableArray:-(void)makeModel")

        for (NSObject *object in __array) {
            if ([object conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) object modeladd];
        }
    }
    - (void)makeNonModel {
        MSGSTART("AtomiclyMutableArray:-(void)makeNonModel")

        for (NSObject *object in __array) {
            if ([object conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) object modelsub];
        }
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("AtomiclyMutableArray:-(void)makeObjectsPerformSelector:(SEL)selector")

        [__array makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("AtomiclyMutableArray:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")

        [__array makeObjectsPerformSelector : selector withObject : object];
    }
    - (void)markDirty {
        MSGSTART("AtomiclyMutableArray:-(void)markDirty")

        /*i-900*/ if (_isDirty)
            // prnt("%s already dirty\n",[Util cnameFor:self]);
            return;

        self.dirtyInModel = [Model getDefault];
        _isDirty = YES;
        // prnt("%s marked dirty with %d sinks\n",[Util cnameFor:self],self.sinkCommitters.count);

        /*i-1*/ for (NSObject<Commitable> *c in self.sinkCommitters) {
            [c markDirty];
        }
    }
    - (void)modeladd {
        MSGSTART("AtomiclyMutableArray:-(void)modeladd")

        if ( (++modelRetaincount) && (totalRetainCount == modelRetaincount) ) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels addObject:self];
            modelRetaincount = c;
        }
    }
    - (void)modelautorelease {
        MSGSTART("AtomiclyMutableArray:-(void)modelautorelease")

        modelRetaincount--;
        if (!modelRetaincount) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];
            modelRetaincount = c;
        }
        else if (totalRetainCount == modelRetaincount) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels addObject:self];
            modelRetaincount = c;
        }
        // self;
    }
    - (void)modelrelease {
        MSGSTART("AtomiclyMutableArray:-(void)modelrelease")

        modelRetaincount--;
    }
    - (id)modelretain {
        MSGSTART("AtomiclyMutableArray:-(id)modelretain")

        modelRetaincount++;
        return self;
    }
    - (void)modelsub {
        MSGSTART("AtomiclyMutableArray:-(void)modelsub")

        if ( modelRetaincount && (totalRetainCount == modelRetaincount) ) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];
            modelRetaincount = c;
        }
        modelRetaincount--;
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("AtomiclyMutableArray:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (id)objectAtIndex:(Unsigned)index {
        MSGSTART("AtomiclyMutableArray:-(id)objectAtIndex:(Unsigned)index")

        if (index >= __array.count) ERR( "Index %d is out of bounds [0,%d)",int(index),int(__array.count) );
        return weakObjectCount ? [__array[index] strongSelf] : __array[index];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("AtomiclyMutableArray:-(NSEnumerator*)objectEnumerator")
        return [__array objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("AtomiclyMutableArray:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objects {
        MSGSTART("AtomiclyMutableArray:-(NSArray*)objects")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            Int i = 0;
            for (NSObject *o in __array) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : __array;
        }
        else {
            return __array;
        }
    }
    - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("AtomiclyMutableArray:-(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            NSArray *ret = [__array objectsAtIndexes:indexes];
            Int i = 0;
            for (NSObject *o in ret) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : ret;
        }
        else {
            return [__array objectsAtIndexes:indexes];
        }
    }
    - (bool)onlyOwnedByModels {
        MSGSTART("AtomiclyMutableArray:-(bool)onlyOwnedByModels")
        return totalRetainCount == modelRetaincount;
    }
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        MSGSTART("AtomiclyMutableArray:-(NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes")

        return [self.objects pathsMatchingExtensions:filterTypes];
    }
    - (void)removeAllObjects {
        MSGSTART("AtomiclyMutableArray:-(void)removeAllObjects")

        for (NSObject *object in __array) {
            [self removeObject:object];
        }
    }
    - (void)removeAllSinkCommitters {
        MSGSTART("AtomiclyMutableArray:-(void)removeAllSinkCommitters")
        [v_sinkCommitters removeAllObjects];
    }
    - (void)removeAllSourceCommitters {
        MSGSTART("AtomiclyMutableArray:-(void)removeAllSourceCommitters")
        [v_sourceCommitters removeAllObjects];
    }
    - (void)removeLastObject {
        MSGSTART("AtomiclyMutableArray:-(void)removeLastObject")

        if (self.count) [self removeObjectAtIndex:self.count - 1];
    }
    - (void)removeObject:(id)object {
        MSGSTART("AtomiclyMutableArray:-(void)removeObject:(id)object")

        Unsigned ti = [trackerArray indexOfObject:object];
        if (ti != NSNotFound) {
            [trackerArray removeObjectAtIndex:ti];
            if (trackerArray.version != version) [self markDirty];
        }
    }
    - (void)removeObject:(id)object inRange:(NSRange)r {
        MSGSTART("AtomiclyMutableArray:-(void)removeObject:(id)object inRange:(NSRange)r")

        for (Unsigned index = [self indexOfObject:object inRange:r]; index != NSNotFound; index = [self indexOfObject:object inRange:NSMakeRange( index + 1,(r.location + r.length) - (index + 1) )]) {
            [self removeObjectAtIndex:index];
        }
    }
    - (void)removeObjectAtIndex:(Unsigned)index {
        MSGSTART("AtomiclyMutableArray:-(void)removeObjectAtIndex:(Unsigned)index")

        [self removeObject :[__array objectAtIndex:index]];
    }
    - (void)removeObjectIdenticalTo:(id)object {
        MSGSTART("AtomiclyMutableArray:-(void)removeObjectIdenticalTo:(id)object")

        for (Unsigned index = [self indexOfObjectIdenticalTo:object]; index != NSNotFound; index = [self indexOfObjectIdenticalTo:object inRange:NSMakeRange( index + 1,self.count - (index + 1) )]) {
            [self removeObjectAtIndex:index];
        }
    }
    - (void)removeObjectIdenticalTo:(id)object inRange:(NSRange)r {
        MSGSTART("AtomiclyMutableArray:-(void)removeObjectIdenticalTo:(id)object inRange:(NSRange)r")

        for (Unsigned index = [self indexOfObjectIdenticalTo:object inRange:r]; index != NSNotFound; index = [self indexOfObjectIdenticalTo:object inRange:NSMakeRange( index + 1,(r.location + r.length) - (index + 1) )]) {
            [self removeObjectAtIndex:index];
        }
    }
    - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("AtomiclyMutableArray:-(void)removeObjectsAtIndexes:(NSIndexSet*)indexes")

        for (Unsigned index = [indexes firstIndex]; index != NSNotFound; index = [indexes indexGreaterThanIndex:index]) {
            [self removeObjectAtIndex:index];
        }
    }
    - (void)removeObjectsInArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:-(void)removeObjectsInArray:(NSArray*)array")

        for (NSObject *object in array) {
            [self removeObject:object];
        }
    }
    - (void)removeObjectsInRange:(NSRange)r {
        MSGSTART("AtomiclyMutableArray:-(void)removeObjectsInRange:(NSRange)r")

        for (Unsigned i = r.location; i < r.location + r.length; i++) {
            [self removeObjectAtIndex:i];
        }
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("AtomiclyMutableArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("AtomiclyMutableArray:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer forKeyPath : keyPath context : context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath {
        MSGSTART("AtomiclyMutableArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("AtomiclyMutableArray:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath context : context];
    }
    - (void)removeSinkCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableArray:-(void)removeSinkCommitter:(NSObject<Commitable>*)v")
        [v_sinkCommitters removeObject : v];
    }
    - (void)removeSourceCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableArray:-(void)removeSourceCommitter:(NSObject<Commitable>*)v")
        [v_sourceCommitters removeObject : v];
    }
    - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("AtomiclyMutableArray:-(void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if (![trackerArray containsObject:object]) {
            NSObject *object2 = [__array objectAtIndex:index];
            if ([object2 isEqual:object]) return;

            Unsigned ti = [trackerArray indexOfObject:object2];
            if (ti != NSNotFound) {
                [trackerArray replaceObjectAtIndex:ti withObject:object];
                if (trackerArray.version != version) [self markDirty];
            }
        }
    }
    - (void)replaceObjectsAtIndexes:(NSIndexSet *)indexes withObjects:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:-(void)replaceObjectsAtIndexes:(NSIndexSet*)indexes withObjects:(NSArray*)array")

        Unsigned index = [indexes firstIndex];
        for (NSObject *object in array) {
            [self replaceObjectAtIndex:index withObject:object];
            index = [indexes indexGreaterThanIndex:index];
        }
    }
    - (void)replaceObjectsInRange:(NSRange)r withObjectsFromArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:-(void)replaceObjectsInRange:(NSRange)r withObjectsFromArray:(NSArray*)array")

        [self replaceObjectsInRange : r withObjectsFromArray : array range : NSMakeRange(0,array.count)];
    }
    - (void)replaceObjectsInRange:(NSRange)r withObjectsFromArray:(NSArray *)array range:(NSRange)arrayRange {
        MSGSTART("AtomiclyMutableArray:-(void)replaceObjectsInRange:(NSRange)r withObjectsFromArray:(NSArray*)array range:(NSRange)arrayRange")

        for (Int i = 0; i < MIN(r.length,arrayRange.length); i++) {
            [self replaceObjectAtIndex:i + r.location withObject:[array objectAtIndex:i + arrayRange.location]];
        }
        for (Unsigned i = arrayRange.length; i < r.length; i++) {
            [self removeObjectAtIndex:i + r.location];
        }
        for (Unsigned i = arrayRange.length - 1; i >= r.length; i--) {
            [self insertObject:[array objectAtIndex:i] atIndex:r.location + r.length + 1];
        }
    }
    - (void)retract {
        MSGSTART("AtomiclyMutableArray:-(void)retract")
        [self.sinkCommitters removeAllObjects];
        [self.sourceCommitters removeAllObjects];
        self.dirtyInModel = nil;

        noMOForNextRetain = NO;
    }
    - (NSEnumerator *)reverseObjectEnumerator {
        MSGSTART("AtomiclyMutableArray:-(NSEnumerator*)reverseObjectEnumerator")
        return [__array reverseObjectEnumerator];
    }
    - (void)setArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableArray:-(void)setArray:(NSArray*)array")

        [trackerArray setArray : array];
        if (trackerArray.version != version) [self markDirty];
    }
    - (void)setAtomicArray:(NSArray *)v {
        MSGSTART("AtomiclyMutableArray:-(void)setAtomicArray:(NSArray*)v")

        version = 0;
        [self makeNonModel];
        __array = [[NSArray alloc] initWithArray:v];
        [self makeModel];
    }
    - (void)setDirtyInModel:(Model *)v {
        MSGSTART("AtomiclyMutableArray:-(void)setDirtyInModel:(Model*)v")
        [v_dirtyInModel_endpoint setValue : v];
    }
    - (void)setDirtyInModel_endpoint:(Endpoint1 *)v {
        MSGSTART("AtomiclyMutableArray:-(void)setDirtyInModel_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_AtomiclyMutableArray) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(dirtyInModel_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_dirtyInModel_endpoint == v) return;

        /*i-900*/ {
            v_dirtyInModel_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_dirtyInModel_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setSinkCommitters:(EndpointS *)v {
        MSGSTART("AtomiclyMutableArray:-(void)setSinkCommitters:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_AtomiclyMutableArray) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(sinkCommitters=\"blah\") to set the property)");

        /*i-905*/ if (v_sinkCommitters == v) return;

        /*i-900*/ {
            v_sinkCommitters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_sinkCommitters,self); ADDOWNER(v,self);
    }
    - (void)setSourceCommitters:(EndpointS *)v {
        MSGSTART("AtomiclyMutableArray:-(void)setSourceCommitters:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_AtomiclyMutableArray) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(sourceCommitters=\"blah\") to set the property)");

        /*i-905*/ if (v_sourceCommitters == v) return;

        /*i-900*/ {
            v_sourceCommitters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_sourceCommitters,self); ADDOWNER(v,self);
    }
    - (void)setTrackerArray:(NSMutableArray<MinimalMutableArray> *)v {
        MSGSTART("AtomiclyMutableArray:-(void)setTrackerArray:(NSMutableArray<MinimalMutableArray>*)v")

        trackerArray = v;
        version = v.version;
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("AtomiclyMutableArray:-(void)setValue:(id)value forKey:(NSString *)key")

        [__array setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("AtomiclyMutableArray:-(void)setWeakness:(CollectionWeakness)v")
    }
    - (EndpointS *)sinkCommitters {
        MSGSTART("AtomiclyMutableArray:-(EndpointS*)sinkCommitters")

        /*i-999*/ EndpointS * ret = v_sinkCommitters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)sinkCommitterToEndpoint:(id)asinkCommitter {
        MSGSTART("AtomiclyMutableArray:-(NSObject<LinkEndpoint>*)sinkCommitterToEndpoint:(id)asinkCommitter")
        return [asinkCommitter performSelector:@selector(sourceCommitters)];
    }
    - (NSData *)sortedArrayHint {
        MSGSTART("AtomiclyMutableArray:-(NSData*)sortedArrayHint")

        return [__array sortedArrayHint];
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        MSGSTART("AtomiclyMutableArray:-(NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayUsingComparator:cmptr];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("AtomiclyMutableArray:-(NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors")

        return [self.objects sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context {
        MSGSTART("AtomiclyMutableArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context")

        return [self.objects sortedArrayUsingFunction:comparator context:context];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint {
        MSGSTART("AtomiclyMutableArray:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint")

        return [self.objects sortedArrayUsingFunction:comparator context:context hint:hint];
    }
    - (NSArray *)sortedArrayUsingSelector:(SEL)selector {
        MSGSTART("AtomiclyMutableArray:-(NSArray*)sortedArrayUsingSelector:(SEL)selector")

        return [self.objects sortedArrayUsingSelector:selector];
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("AtomiclyMutableArray:-(NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayWithOptions:opts usingComparator:cmptr];
    }
    - (void)sortUsingComparator:(NSComparator)cmptr {
        MSGSTART("AtomiclyMutableArray:-(void)sortUsingComparator:(NSComparator)cmptr")

        [trackerArray sortUsingComparator : cmptr];
        if (trackerArray.version != version) [self markDirty];
    }
    - (void)sortUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("AtomiclyMutableArray:-(void)sortUsingDescriptors:(NSArray*)sortDescriptors")

        [trackerArray sortUsingDescriptors : sortDescriptors];
        if (trackerArray.version != version) [self markDirty];
    }
    - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context {
        MSGSTART("AtomiclyMutableArray:-(void)sortUsingFunction:(Int (*)(id, id, void *))compare context:(void *)context")

        [trackerArray sortUsingFunction : compare context : context];
        if (trackerArray.version != version) [self markDirty];
    }
    - (void)sortUsingSelector:(SEL)selector {
        MSGSTART("AtomiclyMutableArray:-(void)sortUsingSelector:(SEL)selector")

        [trackerArray sortUsingSelector : selector];
        if (trackerArray.version != version) [self markDirty];
    }
    - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("AtomiclyMutableArray:-(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        [trackerArray sortWithOptions : opts usingComparator : cmptr];
        if (trackerArray.version != version) [self markDirty];
    }
    - (EndpointS *)sourceCommitters {
        MSGSTART("AtomiclyMutableArray:-(EndpointS*)sourceCommitters")

        /*i-999*/ EndpointS * ret = v_sourceCommitters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)sourceCommitterToEndpoint:(id)asourceCommitter {
        MSGSTART("AtomiclyMutableArray:-(NSObject<LinkEndpoint>*)sourceCommitterToEndpoint:(id)asourceCommitter")
        return [asourceCommitter performSelector:@selector(sinkCommitters)];
    }
    - (void)startCommit {
        MSGSTART("AtomiclyMutableArray:-(void)startCommit")
    }
    - (NSArray *)subarrayWithRange:(NSRange)r {
        MSGSTART("AtomiclyMutableArray:-(NSArray*)subarrayWithRange:(NSRange)r")

        return [self.objects subarrayWithRange:r];
    }
    - (NSMutableArray<MinimalMutableArray> *)trackerArray {
        MSGSTART("AtomiclyMutableArray:-(NSMutableArray<MinimalMutableArray>*)trackerArray")
        return trackerArray;
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("AtomiclyMutableArray:-(id)valueForKey:(NSString*)key")

        return [__array valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("AtomiclyMutableArray:-(CollectionWeakness)weakness")
        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willCommit {
        MSGSTART("AtomiclyMutableArray:-(void)willCommit")
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("AtomiclyMutableArray:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [self.objects writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("AtomiclyMutableArray:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [self.objects writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         AtomiclyMutableDictionary
    #define _WIClass_           AtomiclyMutableDictionary__
    #define _className_         atomiclyMutableDictionary
    #define _Class_             AtomiclyMutableDictionary__
    @implementation AtomiclyMutableDictionary

    @synthesize __owner_context = __owner_context;
    @synthesize _doneStage = _doneStage;
    @synthesize _isDirty = _isDirty;
    @synthesize alwaysChangedIfSourceChanged = alwaysChangedIfSourceChanged;
    @synthesize commitFrame = commitFrame;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize modelObjectHasChanged = modelObjectHasChanged;
    @synthesize modelRetaincount = modelRetaincount;
    @synthesize noMOForNextRetain = noMOForNextRetain;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize totalRetainCount = totalRetainCount;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassAtomiclyMutableDictionary {
        MSGSTART("AtomiclyMutableDictionary:-(void)_startObjectOfClassAtomiclyMutableDictionary")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*/ [self makeModel];  /*ivar*/ _isDirty = (NO);
        /*ivar*/ noMOForNextRetain = (NO);
        /*ivar*/ commitFrame = (1);
        /*ivar*/ _doneStage = (NO);
        /*ivar*/ v_sinkCommitters = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSinkCommitter:) otherEndObjectToEndpoint:@selector(sinkCommitterToEndpoint:)]);  ADDOWNER(v_sinkCommitters,self);
        /*ivar*/ v_dirtyInModel_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableDirtyInModel:) otherEndObjectToEndpoint:@selector(dirtyInModelToEndpoint:)]);  ADDOWNER(v_dirtyInModel_endpoint,self);
        /*ivar*/ version = (1);
        /*ivar*/ totalRetainCount = (1);
        /*ivar*/ v_sourceCommitters = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSourceCommitter:) otherEndObjectToEndpoint:@selector(sourceCommitterToEndpoint:)]);  ADDOWNER(v_sourceCommitters,self);

/*i0*/}
    - (NSDictionary *)__dictionary {
        MSGSTART("AtomiclyMutableDictionary:-(NSDictionary*)__dictionary")

        /*i-999*/ NSDictionary * ret = __dictionary;
        /*i999*/ return ret;
    }
    - (void)addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("AtomiclyMutableDictionary:-(void)addEntriesFromDictionary:(NSDictionary*)dictionary")

        [trackerDictionary addEntriesFromDictionary : dictionary];
        if (trackerDictionary.version != version) [self markDirty];
    }
    - (void)addSinkCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)addSinkCommitter:(NSObject<Commitable>*)v")
        [v_sinkCommitters addObject : v];
    }
    - (void)addSourceCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)addSourceCommitter:(NSObject<Commitable>*)v")
        [v_sourceCommitters addObject : v];
    }
    - (NSArray *)allKeys {
        MSGSTART("AtomiclyMutableDictionary:-(NSArray*)allKeys")
        return [__dictionary allKeys];
    }
    - (NSArray *)allKeysForObject:(id)object {
        MSGSTART("AtomiclyMutableDictionary:-(NSArray*)allKeysForObject:(id)object")
        return [__dictionary allKeysForObject:object];
    }
    - (NSArray *)allValues {
        MSGSTART("AtomiclyMutableDictionary:-(NSArray*)allValues")
        return [__dictionary allValues];
    }
    - (constchar *)cdescription {
        MSGSTART("AtomiclyMutableDictionary:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)cleanupCommit {
        MSGSTART("AtomiclyMutableDictionary:-(void)cleanupCommit")

        modelObjectHasChanged = NO;
    }
    - (constchar *)cobjectName {
        MSGSTART("AtomiclyMutableDictionary:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)commit {
        MSGSTART("AtomiclyMutableDictionary:-(void)commit")
    }
    - (void)commitDictionary {
        MSGSTART("AtomiclyMutableDictionary:-(void)commitDictionary")

        if (version != trackerDictionary.version) {
            [self makeNonModel];
            __dictionary = [[NSDictionary alloc] initWithDictionary:trackerDictionary.__dictionary];
            [self makeModel];
            version = trackerDictionary.version;
        }
    }
    - (Int)commitProperties:(Int)substageIndex {
        MSGSTART("AtomiclyMutableDictionary:-(Int)commitProperties:(Int)substageIndex")

        /*i-999*/ Int implementedStages = 1
            /*i-990*/;

        /*i-5*/ switch (substageIndex) {
            case 0:
                modelObjectHasChanged = alwaysChangedIfSourceChanged; {
                    /*i5*/}
                break;

            case 1: {
                /*i15*/}
                       break;

            case 2: {
                /*i25*/}
                       break;

            case 3: {
                /*i35*/}
                       break;

            case 4: {
                /*i45*/}
                       break;

            case 5: {
                /*i55*/}
                       break;

            case 6: {
                /*i65*/}
                       break;

            case 7: {
                /*i75*/}
                       break;

            case 8: {
                /*i85*/}
                       break;

            case 9: {
                /*i95*/}
                       break;

            case 10: {
                /*i105*/}

            default: break;
        }

        /*i900*/ Int ret; for (ret = substageIndex + 1; (ret <= 10) && !(implementedStages & shiftOne[ret]); ret++) {
        }
        if (ret > 10) {
            ret = -1;

            /*i910*/ if (modelObjectHasChanged) version++;

            /*i950*/}

        /*i999*/ return (ret < 0) || (ret > 10) ? -1 : ret;
    }
    - (CommitStage)commitStage {
        MSGSTART("AtomiclyMutableDictionary:-(CommitStage)commitStage")
        return [Model getDefault].commitStage;
    }
    - (NSDictionary *)copyAndClear {
        MSGSTART("AtomiclyMutableDictionary:-(NSDictionary*)copyAndClear")

        NSDictionary * ret = __dictionary;
        [self makeNonModel];
        __dictionary = [[NSDictionary alloc] init];
        return ret;
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("AtomiclyMutableDictionary:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (Unsigned)count {
        MSGSTART("AtomiclyMutableDictionary:-(Unsigned)count")
        return [__dictionary count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("AtomiclyMutableDictionary:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        Unsigned ret = [__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
        return ret;
    }
    - (void)countWeakObjects {
        MSGSTART("AtomiclyMutableDictionary:-(void)countWeakObjects")

        Int c = 0;
        for (kid o in __dictionary) {
            if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("AtomiclyMutableDictionary:-(void)dealloc")

        /*i-500*/[self makeNonModel];
/*i-151*/ [self die];
/*i0*/ if ( modelRetaincount && (totalRetainCount == modelRetaincount) )
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];



        trackerDictionary = nil;

        __dictionary = nil;

        REMOVEOWNER(v_sinkCommitters,self); v_sinkCommitters = nil;

        REMOVEOWNER(v_dirtyInModel_endpoint,self); v_dirtyInModel_endpoint = nil;

        REMOVEOWNER(v_sourceCommitters,self); v_sourceCommitters = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("AtomiclyMutableDictionary:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__dictionary description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionInStringsFileFormat {
        MSGSTART("AtomiclyMutableDictionary:-(NSString*)descriptionInStringsFileFormat")
        return [__dictionary descriptionInStringsFileFormat];
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("AtomiclyMutableDictionary:-(NSString *)descriptionWithLocale:(id)locale")

        return [__dictionary descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("AtomiclyMutableDictionary:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [__dictionary descriptionWithLocale:locale indent:level];
    }
    + (AtomiclyMutableDictionary *)dictionary {
        MSGSTART("AtomiclyMutableDictionary:+(AtomiclyMutableDictionary*)dictionary")
        return [[AtomiclyMutableDictionary alloc] init];
    }
    + (AtomiclyMutableDictionary *)dictionaryWithContentsOfFile:(NSString *)file {
        MSGSTART("AtomiclyMutableDictionary:+(AtomiclyMutableDictionary*)dictionaryWithContentsOfFile:(NSString*)file")
        return [[AtomiclyMutableDictionary alloc] initWithContentsOfFile:file];
    }
    + (AtomiclyMutableDictionary *)dictionaryWithContentsOfURL:(NSURL *)url {
        MSGSTART("AtomiclyMutableDictionary:+(AtomiclyMutableDictionary*)dictionaryWithContentsOfURL:(NSURL*)url")
        return [[AtomiclyMutableDictionary alloc] initWithContentsOfURL:url];
    }
    + (AtomiclyMutableDictionary *)dictionaryWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("AtomiclyMutableDictionary:+(AtomiclyMutableDictionary*)dictionaryWithDictionary:(NSDictionary*)dictionary")
        return [[AtomiclyMutableDictionary alloc] initWithDictionary:dictionary];
    }
    + (AtomiclyMutableDictionary *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("AtomiclyMutableDictionary:+(AtomiclyMutableDictionary*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
        return [[AtomiclyMutableDictionary alloc] initWithObjects:&object forKeys:&key count:1];
    }
    + (AtomiclyMutableDictionary *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("AtomiclyMutableDictionary:+(AtomiclyMutableDictionary*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
        return [[AtomiclyMutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
    }
    - (void)didCommit {
        MSGSTART("AtomiclyMutableDictionary:-(void)didCommit")
    }
    - (void)die {
        MSGSTART("AtomiclyMutableDictionary:-(void)die")

        [v_sinkCommitters removeAllObjects];
        [v_sourceCommitters removeAllObjects];
        self.dirtyInModel = nil;
        /*i900*/}
    - (Model *)dirtyInModel {
        MSGSTART("AtomiclyMutableDictionary:-(Model*)dirtyInModel")
        return (Model *)v_dirtyInModel_endpoint.value;
    }
    - (Endpoint1 *)dirtyInModel_endpoint {
        MSGSTART("AtomiclyMutableDictionary:-(Endpoint1*)dirtyInModel_endpoint")

        /*i-999*/ Endpoint1 * ret = v_dirtyInModel_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)dirtyInModelToEndpoint:(id)adirtyInModel {
        MSGSTART("AtomiclyMutableDictionary:-(NSObject<LinkEndpoint>*)dirtyInModelToEndpoint:(id)adirtyInModel")
        return [adirtyInModel performSelector:@selector(dirtyObjects)];
    }
    - (bool)doneStage {
        MSGSTART("AtomiclyMutableDictionary:-(bool)doneStage")
        return _doneStage;
    }
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("AtomiclyMutableDictionary:-(void)encodeWithCoder:(NSCoder*)coder")

        [__dictionary encodeWithCoder : coder];
    }
    - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("AtomiclyMutableDictionary:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsUsingBlock : block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("AtomiclyMutableDictionary:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsWithOptions : opts usingBlock : block];
    }
    - (NSDate *)fileCreationDate {
        MSGSTART("AtomiclyMutableDictionary:-(NSDate*)fileCreationDate")
        return [__dictionary fileCreationDate];
    }
    - (BOOL)fileExtensionHidden {
        MSGSTART("AtomiclyMutableDictionary:-(BOOL)fileExtensionHidden")
        return [__dictionary fileExtensionHidden];
    }
    - (NSNumber *)fileGroupOwnerAccountID {
        MSGSTART("AtomiclyMutableDictionary:-(NSNumber*)fileGroupOwnerAccountID")
        return [__dictionary fileGroupOwnerAccountID];
    }
    - (NSString *)fileGroupOwnerAccountName {
        MSGSTART("AtomiclyMutableDictionary:-(NSString*)fileGroupOwnerAccountName")
        return [__dictionary fileGroupOwnerAccountName];
    }
    - (OSType)fileHFSCreatorCode {
        MSGSTART("AtomiclyMutableDictionary:-(OSType)fileHFSCreatorCode")
        return [__dictionary fileHFSCreatorCode];
    }
    - (OSType)fileHFSTypeCode {
        MSGSTART("AtomiclyMutableDictionary:-(OSType)fileHFSTypeCode")
        return [__dictionary fileHFSTypeCode];
    }
    - (BOOL)fileIsAppendOnly {
        MSGSTART("AtomiclyMutableDictionary:-(BOOL)fileIsAppendOnly")
        return [__dictionary fileIsAppendOnly];
    }
    - (BOOL)fileIsImmutable {
        MSGSTART("AtomiclyMutableDictionary:-(BOOL)fileIsImmutable")
        return [__dictionary fileIsImmutable];
    }
    - (NSDate *)fileModificationDate {
        MSGSTART("AtomiclyMutableDictionary:-(NSDate*)fileModificationDate")
        return [__dictionary fileModificationDate];
    }
    - (NSNumber *)fileOwnerAccountID {
        MSGSTART("AtomiclyMutableDictionary:-(NSNumber*)fileOwnerAccountID")
        return [__dictionary fileOwnerAccountID];
    }
    - (NSString *)fileOwnerAccountName {
        MSGSTART("AtomiclyMutableDictionary:-(NSString*)fileOwnerAccountName")
        return [__dictionary fileOwnerAccountName];
    }
    - (Unsigned)filePosixPermissions {
        MSGSTART("AtomiclyMutableDictionary:-(Unsigned)filePosixPermissions")
        return [__dictionary filePosixPermissions];
    }
    - (ULL)fileSize {
        MSGSTART("AtomiclyMutableDictionary:-(ULL)fileSize")
        return [__dictionary fileSize];
    }
    - (Unsigned)fileSystemFileNumber {
        MSGSTART("AtomiclyMutableDictionary:-(Unsigned)fileSystemFileNumber")
        return [__dictionary fileSystemFileNumber];
    }
    - (Int)fileSystemNumber {
        MSGSTART("AtomiclyMutableDictionary:-(Int)fileSystemNumber")
        return [__dictionary fileSystemNumber];
    }
    - (NSString *)fileType {
        MSGSTART("AtomiclyMutableDictionary:-(NSString*)fileType")
        return [__dictionary fileType];
    }
    - (void)finishCommit {
        MSGSTART("AtomiclyMutableDictionary:-(void)finishCommit")
    }
    - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        MSGSTART("AtomiclyMutableDictionary:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

        [__dictionary getObjects : objects andKeys : keys];
    }
    - (Unsigned)hash {
        MSGSTART("AtomiclyMutableDictionary:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (AtomiclyMutableDictionary *)init {
        MSGSTART("AtomiclyMutableDictionary:-(AtomiclyMutableDictionary*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassAtomiclyMutableDictionary];

/*i10001*/ return self;
    }
    - (AtomiclyMutableDictionary *)initWithCoder:(NSCoder *)coder {
        MSGSTART("AtomiclyMutableDictionary:-(AtomiclyMutableDictionary*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableDictionary];

/*i10001*/ return self;
    }
    - (AtomiclyMutableDictionary *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("AtomiclyMutableDictionary:-(AtomiclyMutableDictionary*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableDictionary];

/*i10001*/ return self;
    }
    - (AtomiclyMutableDictionary *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("AtomiclyMutableDictionary:-(AtomiclyMutableDictionary*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableDictionary];

/*i10001*/ return self;
    }
    - (AtomiclyMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("AtomiclyMutableDictionary:-(AtomiclyMutableDictionary*)initWithDictionary:(NSDictionary*)dictionary")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = (insertsWeakObjectsByDefault ? dictionary.weakCopy : [[NSDictionary alloc] initWithDictionary:dictionary]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableDictionary];

/*i10001*/ return self;
    }
    - (AtomiclyMutableDictionary *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy {
        MSGSTART("AtomiclyMutableDictionary:-(AtomiclyMutableDictionary*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableDictionary];

/*i10001*/ return self;
    }
    - (AtomiclyMutableDictionary *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("AtomiclyMutableDictionary:-(AtomiclyMutableDictionary*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = [[NSDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
        if (insertsWeakObjectsByDefault) __dictionary = __dictionary.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableDictionary];

/*i10001*/ return self;
    }
    - (NSNumber *)isAcceptableDirtyInModel:(id)adirtyInModel {
        MSGSTART("AtomiclyMutableDictionary:-(NSNumber*)isAcceptableDirtyInModel:(id)adirtyInModel")
        return [adirtyInModel isKindOfClass:[Model class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSinkCommitter:(id)asinkCommitter {
        MSGSTART("AtomiclyMutableDictionary:-(NSNumber*)isAcceptableSinkCommitter:(id)asinkCommitter")
        return [asinkCommitter conformsToProtocol:@protocol(Commitable)] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSourceCommitter:(id)asourceCommitter {
        MSGSTART("AtomiclyMutableDictionary:-(NSNumber*)isAcceptableSourceCommitter:(id)asourceCommitter")
        return [asourceCommitter conformsToProtocol:@protocol(Commitable)] ? @YES : nil;
    }
    - (bool)isDirty {
        MSGSTART("AtomiclyMutableDictionary:-(bool)isDirty")
        return _isDirty;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("AtomiclyMutableDictionary:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary {
        MSGSTART("AtomiclyMutableDictionary:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
        return [__dictionary isEqualToDictionary:dictionary];
    }
    - (NSEnumerator *)keyEnumerator {
        MSGSTART("AtomiclyMutableDictionary:-(NSEnumerator*)keyEnumerator")
        return [__dictionary keyEnumerator];
    }
    - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableDictionary:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesPassingTest:predicate];
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableDictionary:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesWithOptions:opts passingTest:predicate];
    }
    - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        MSGSTART("AtomiclyMutableDictionary:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueUsingComparator:cmptr];
    }
    - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector {
        MSGSTART("AtomiclyMutableDictionary:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

        return [__dictionary keysSortedByValueUsingSelector:selector];
    }
    - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("AtomiclyMutableDictionary:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr];
    }
    - (void)makeModel {
        MSGSTART("AtomiclyMutableDictionary:-(void)makeModel")

        for (id<NSCopying> key in __dictionary) {
            id o = [__dictionary objectForKey:key];
            if ([o conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) o modeladd];
        }
    }
    - (void)makeNonModel {
        MSGSTART("AtomiclyMutableDictionary:-(void)makeNonModel")

        for (id<NSCopying> key in __dictionary) {
            id o = [__dictionary objectForKey:key];
            if ([o conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) o modelsub];
        }
    }
    - (void)markDirty {
        MSGSTART("AtomiclyMutableDictionary:-(void)markDirty")

        /*i-900*/ if (_isDirty)
            // prnt("%s already dirty\n",[Util cnameFor:self]);
            return;

        self.dirtyInModel = [Model getDefault];
        _isDirty = YES;
        // prnt("%s marked dirty with %d sinks\n",[Util cnameFor:self],self.sinkCommitters.count);

        /*i-1*/ for (NSObject<Commitable> *c in self.sinkCommitters) {
            [c markDirty];
        }
    }
    - (void)modeladd {
        MSGSTART("AtomiclyMutableDictionary:-(void)modeladd")

        if ( (++modelRetaincount) && (totalRetainCount == modelRetaincount) ) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels addObject:self];
            modelRetaincount = c;
        }
    }
    - (void)modelautorelease {
        MSGSTART("AtomiclyMutableDictionary:-(void)modelautorelease")

        modelRetaincount--;
        if (!modelRetaincount) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];
            modelRetaincount = c;
        }
        else if (totalRetainCount == modelRetaincount) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels addObject:self];
            modelRetaincount = c;
        }
        // self;
    }
    - (void)modelrelease {
        MSGSTART("AtomiclyMutableDictionary:-(void)modelrelease")

        modelRetaincount--;
    }
    - (id)modelretain {
        MSGSTART("AtomiclyMutableDictionary:-(id)modelretain")

        modelRetaincount++;
        return self;
    }
    - (void)modelsub {
        MSGSTART("AtomiclyMutableDictionary:-(void)modelsub")

        if ( modelRetaincount && (totalRetainCount == modelRetaincount) ) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];
            modelRetaincount = c;
        }
        modelRetaincount--;
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("AtomiclyMutableDictionary:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("AtomiclyMutableDictionary:-(NSEnumerator*)objectEnumerator")
        return [__dictionary objectEnumerator];
    }
    - (id)objectForKey:(id<NSCopying> )key {
        MSGSTART("AtomiclyMutableDictionary:-(id)objectForKey:(id<NSCopying>)key")

        /*i-10*/ id ret = [__dictionary objectForKey:key];

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("AtomiclyMutableDictionary:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        MSGSTART("AtomiclyMutableDictionary:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

        return [__dictionary objectsForKeys:keys notFoundMarker:anObject];
    }
    - (bool)onlyOwnedByModels {
        MSGSTART("AtomiclyMutableDictionary:-(bool)onlyOwnedByModels")
        return totalRetainCount == modelRetaincount;
    }
    - (void)removeAllObjects {
        MSGSTART("AtomiclyMutableDictionary:-(void)removeAllObjects")

        [trackerDictionary removeAllObjects];
        if (trackerDictionary.version != version) [self markDirty];
    }
    - (void)removeAllSinkCommitters {
        MSGSTART("AtomiclyMutableDictionary:-(void)removeAllSinkCommitters")
        [v_sinkCommitters removeAllObjects];
    }
    - (void)removeAllSourceCommitters {
        MSGSTART("AtomiclyMutableDictionary:-(void)removeAllSourceCommitters")
        [v_sourceCommitters removeAllObjects];
    }
    - (void)removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("AtomiclyMutableDictionary:-(void)removeObjectForKey:(id<NSCopying>)key")

        if ([self objectForKey:key]) {
            [trackerDictionary removeObjectForKey:key];
            if (trackerDictionary.version != version) [self markDirty];
        }
    }
    - (void)removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("AtomiclyMutableDictionary:-(void)removeObjectsForKeys:(NSArray*)keys")

        [trackerDictionary removeObjectsForKeys : keys];
        if (trackerDictionary.version != version) [self markDirty];
    }
    - (void)removeSinkCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)removeSinkCommitter:(NSObject<Commitable>*)v")
        [v_sinkCommitters removeObject : v];
    }
    - (void)removeSourceCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)removeSourceCommitter:(NSObject<Commitable>*)v")
        [v_sourceCommitters removeObject : v];
    }
    - (void)retract {
        MSGSTART("AtomiclyMutableDictionary:-(void)retract")
        [self.sinkCommitters removeAllObjects];
        [self.sourceCommitters removeAllObjects];
        self.dirtyInModel = nil;

        noMOForNextRetain = NO;
    }
    - (void)setAtomicDictionary:(NSDictionary *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)setAtomicDictionary:(NSDictionary*)v")

        version = 0;
        [self makeNonModel];
        __dictionary = [[NSDictionary alloc] initWithDictionary:v];
        [self makeModel];
    }
    - (void)setDictionary:(NSDictionary *)dictionary {
        MSGSTART("AtomiclyMutableDictionary:-(void)setDictionary:(NSDictionary*)dictionary")

        [trackerDictionary setDictionary : dictionary];
        if (trackerDictionary.version != version) [self markDirty];
    }
    - (void)setDirtyInModel:(Model *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)setDirtyInModel:(Model*)v")
        [v_dirtyInModel_endpoint setValue : v];
    }
    - (void)setDirtyInModel_endpoint:(Endpoint1 *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)setDirtyInModel_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_AtomiclyMutableDictionary) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(dirtyInModel_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_dirtyInModel_endpoint == v) return;

        /*i-900*/ {
            v_dirtyInModel_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_dirtyInModel_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("AtomiclyMutableDictionary:-(void)setObject:(id)object forKey:(id<NSCopying>)key")

        [trackerDictionary setObject : object forKey : key];
        if (trackerDictionary.version != version) [self markDirty];
    }
    - (void)setSinkCommitters:(EndpointS *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)setSinkCommitters:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_AtomiclyMutableDictionary) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(sinkCommitters=\"blah\") to set the property)");

        /*i-905*/ if (v_sinkCommitters == v) return;

        /*i-900*/ {
            v_sinkCommitters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_sinkCommitters,self); ADDOWNER(v,self);
    }
    - (void)setSourceCommitters:(EndpointS *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)setSourceCommitters:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_AtomiclyMutableDictionary) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(sourceCommitters=\"blah\") to set the property)");

        /*i-905*/ if (v_sourceCommitters == v) return;

        /*i-900*/ {
            v_sourceCommitters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_sourceCommitters,self); ADDOWNER(v,self);
    }
    - (void)setTrackerDictionary:(NSMutableDictionary<MinimalMutableDictionary> *)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)setTrackerDictionary:(NSMutableDictionary<MinimalMutableDictionary>*)v")

        trackerDictionary = v;
        version = v.version;
    }
    - (void)setValue:(id)object forKey:(NSString *)key {
        MSGSTART("AtomiclyMutableDictionary:-(void)setValue:(id)object forKey:(NSString*)key")

        [trackerDictionary setValue : object forKey : key];
        if (trackerDictionary.version != version) [self markDirty];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("AtomiclyMutableDictionary:-(void)setWeakness:(CollectionWeakness)v")
    }
    - (EndpointS *)sinkCommitters {
        MSGSTART("AtomiclyMutableDictionary:-(EndpointS*)sinkCommitters")

        /*i-999*/ EndpointS * ret = v_sinkCommitters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)sinkCommitterToEndpoint:(id)asinkCommitter {
        MSGSTART("AtomiclyMutableDictionary:-(NSObject<LinkEndpoint>*)sinkCommitterToEndpoint:(id)asinkCommitter")
        return [asinkCommitter performSelector:@selector(sourceCommitters)];
    }
    - (EndpointS *)sourceCommitters {
        MSGSTART("AtomiclyMutableDictionary:-(EndpointS*)sourceCommitters")

        /*i-999*/ EndpointS * ret = v_sourceCommitters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)sourceCommitterToEndpoint:(id)asourceCommitter {
        MSGSTART("AtomiclyMutableDictionary:-(NSObject<LinkEndpoint>*)sourceCommitterToEndpoint:(id)asourceCommitter")
        return [asourceCommitter performSelector:@selector(sinkCommitters)];
    }
    - (void)startCommit {
        MSGSTART("AtomiclyMutableDictionary:-(void)startCommit")
    }
    - (NSMutableDictionary<MinimalMutableDictionary> *)trackerDictionary {
        MSGSTART("AtomiclyMutableDictionary:-(NSMutableDictionary<MinimalMutableDictionary>*)trackerDictionary")
        return trackerDictionary;
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("AtomiclyMutableDictionary:-(id)valueForKey:(NSString*)key")
        return [__dictionary valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("AtomiclyMutableDictionary:-(CollectionWeakness)weakness")
        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willCommit {
        MSGSTART("AtomiclyMutableDictionary:-(void)willCommit")
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("AtomiclyMutableDictionary:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [__dictionary writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("AtomiclyMutableDictionary:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [__dictionary writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         AtomiclyMutableSet
    #define _WIClass_           AtomiclyMutableSet__
    #define _className_         atomiclyMutableSet
    #define _Class_             AtomiclyMutableSet__
    @implementation AtomiclyMutableSet

    @synthesize __owner_context = __owner_context;
    @synthesize _doneStage = _doneStage;
    @synthesize _isDirty = _isDirty;
    @synthesize alwaysChangedIfSourceChanged = alwaysChangedIfSourceChanged;
    @synthesize commitFrame = commitFrame;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize modelObjectHasChanged = modelObjectHasChanged;
    @synthesize modelRetaincount = modelRetaincount;
    @synthesize noMOForNextRetain = noMOForNextRetain;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize retrievesWeakValues = retrievesWeakValues;
    @synthesize totalRetainCount = totalRetainCount;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassAtomiclyMutableSet {
        MSGSTART("AtomiclyMutableSet:-(void)_startObjectOfClassAtomiclyMutableSet")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*/ [self makeModel];  /*ivar*/ noMOForNextRetain = (NO);
        /*ivar*/ version = (1);
        /*ivar*/ v_sourceCommitters = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSourceCommitter:) otherEndObjectToEndpoint:@selector(sourceCommitterToEndpoint:)]);  ADDOWNER(v_sourceCommitters,self);
        /*ivar*/ v_sinkCommitters = ([[EndpointS alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableSinkCommitter:) otherEndObjectToEndpoint:@selector(sinkCommitterToEndpoint:)]);  ADDOWNER(v_sinkCommitters,self);
        /*ivar*/ totalRetainCount = (1);
        /*ivar*/ _isDirty = (NO);
        /*ivar*/ commitFrame = (1);
        /*ivar*/ v_dirtyInModel_endpoint = ([[Endpoint1 alloc] initWithOwner:self retains:NO acceptableSel:@selector(isAcceptableDirtyInModel:) otherEndObjectToEndpoint:@selector(dirtyInModelToEndpoint:)]);  ADDOWNER(v_dirtyInModel_endpoint,self);
        /*ivar*/ _doneStage = (NO);

/*i0*/}
    - (NSSet *)__set {
        MSGSTART("AtomiclyMutableSet:-(NSSet*)__set")

        /*i-999*/ NSSet * ret = __set;
        /*i999*/ return ret;
    }
    - (void)addObject:(id)object {
        MSGSTART("AtomiclyMutableSet:-(void)addObject:(id)object")

        [trackerSet addObject : object];
        if (trackerSet.version != version) [self markDirty];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableSet:-(void)addObjectsFromArray:(NSArray*)array")

        [trackerSet addObjectsFromArray : array];
        if (trackerSet.version != version) [self markDirty];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("AtomiclyMutableSet:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__set addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (void)addSinkCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableSet:-(void)addSinkCommitter:(NSObject<Commitable>*)v")
        [v_sinkCommitters addObject : v];
    }
    - (void)addSourceCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableSet:-(void)addSourceCommitter:(NSObject<Commitable>*)v")
        [v_sourceCommitters addObject : v];
    }
    - (NSArray *)allObjects {
        MSGSTART("AtomiclyMutableSet:-(NSArray*)allObjects")
        return [__set allObjects];
    }
    - (id)anyObject {
        MSGSTART("AtomiclyMutableSet:-(id)anyObject")
        return [[__set anyObject] selfWithWeakness:retrievesWeakValues];
    }
    - (constchar *)cdescription {
        MSGSTART("AtomiclyMutableSet:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)cleanupCommit {
        MSGSTART("AtomiclyMutableSet:-(void)cleanupCommit")

        modelObjectHasChanged = NO;
    }
    - (constchar *)cobjectName {
        MSGSTART("AtomiclyMutableSet:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)commit {
        MSGSTART("AtomiclyMutableSet:-(void)commit")
    }
    - (Int)commitProperties:(Int)substageIndex {
        MSGSTART("AtomiclyMutableSet:-(Int)commitProperties:(Int)substageIndex")

        /*i-999*/ Int implementedStages = 1
            /*i-990*/;

        /*i-5*/ switch (substageIndex) {
            case 0:
                modelObjectHasChanged = alwaysChangedIfSourceChanged; {
                    /*i5*/}
                break;

            case 1: {
                /*i15*/}
                       break;

            case 2: {
                /*i25*/}
                       break;

            case 3: {
                /*i35*/}
                       break;

            case 4: {
                /*i45*/}
                       break;

            case 5: {
                /*i55*/}
                       break;

            case 6: {
                /*i65*/}
                       break;

            case 7: {
                /*i75*/}
                       break;

            case 8: {
                /*i85*/}
                       break;

            case 9: {
                /*i95*/}
                       break;

            case 10: {
                /*i105*/}

            default: break;
        }

        /*i900*/ Int ret; for (ret = substageIndex + 1; (ret <= 10) && !(implementedStages & shiftOne[ret]); ret++) {
        }
        if (ret > 10) {
            ret = -1;

            /*i910*/ if (modelObjectHasChanged) version++;

            /*i950*/}

        /*i999*/ return (ret < 0) || (ret > 10) ? -1 : ret;
    }
    - (void)commitSet {
        MSGSTART("AtomiclyMutableSet:-(void)commitSet")

        if (version != trackerSet.version) {
            [self makeNonModel];
            __set = [[NSSet alloc] initWithSet:trackerSet.__set];
            [self makeModel];
            version = trackerSet.version;
        }
    }
    - (CommitStage)commitStage {
        MSGSTART("AtomiclyMutableSet:-(CommitStage)commitStage")
        return [Model getDefault].commitStage;
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("AtomiclyMutableSet:-(BOOL)containsObject:(id)object")
        return [__set containsObject:object];
    }
    - (NSSet *)copyAndClear {
        MSGSTART("AtomiclyMutableSet:-(NSSet*)copyAndClear")

        NSSet * ret = __set;
        [self makeNonModel];
        __set = [[NSSet alloc] init];
        return ret;
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("AtomiclyMutableSet:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (Unsigned)count {
        MSGSTART("AtomiclyMutableSet:-(Unsigned)count")
        return [__set count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("AtomiclyMutableSet:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__set countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("AtomiclyMutableSet:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __set) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("AtomiclyMutableSet:-(void)dealloc")

        /*i-500*/[self makeNonModel];
/*i-151*/ [self die];
/*i0*/ if ( modelRetaincount && (totalRetainCount == modelRetaincount) )
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];



        trackerSet = nil;

        REMOVEOWNER(v_sourceCommitters,self); v_sourceCommitters = nil;

        REMOVEOWNER(v_sinkCommitters,self); v_sinkCommitters = nil;

        __set = nil;

        REMOVEOWNER(v_dirtyInModel_endpoint,self); v_dirtyInModel_endpoint = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("AtomiclyMutableSet:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__set description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("AtomiclyMutableSet:-(NSString*)descriptionWithLocale:(id)locale")
        return [__set descriptionWithLocale:locale];
    }
    - (void)didCommit {
        MSGSTART("AtomiclyMutableSet:-(void)didCommit")
    }
    - (void)die {
        MSGSTART("AtomiclyMutableSet:-(void)die")

        [v_sinkCommitters removeAllObjects];
        [v_sourceCommitters removeAllObjects];
        self.dirtyInModel = nil;
        /*i900*/}
    - (Model *)dirtyInModel {
        MSGSTART("AtomiclyMutableSet:-(Model*)dirtyInModel")
        return (Model *)v_dirtyInModel_endpoint.value;
    }
    - (Endpoint1 *)dirtyInModel_endpoint {
        MSGSTART("AtomiclyMutableSet:-(Endpoint1*)dirtyInModel_endpoint")

        /*i-999*/ Endpoint1 * ret = v_dirtyInModel_endpoint;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)dirtyInModelToEndpoint:(id)adirtyInModel {
        MSGSTART("AtomiclyMutableSet:-(NSObject<LinkEndpoint>*)dirtyInModelToEndpoint:(id)adirtyInModel")
        return [adirtyInModel performSelector:@selector(dirtyObjects)];
    }
    - (bool)doneStage {
        MSGSTART("AtomiclyMutableSet:-(bool)doneStage")
        return _doneStage;
    }
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("AtomiclyMutableSet:-(void)encodeWithCoder:(NSCoder*)coder")

        [__set encodeWithCoder : coder];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("AtomiclyMutableSet:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("AtomiclyMutableSet:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("AtomiclyMutableSet:-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate")
        return [__set filteredSetUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("AtomiclyMutableSet:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        [trackerSet filterUsingPredicate : predicate];
        if (trackerSet.version != version) [self markDirty];
    }
    - (void)finishCommit {
        MSGSTART("AtomiclyMutableSet:-(void)finishCommit")
    }
    - (Unsigned)hash {
        MSGSTART("AtomiclyMutableSet:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (AtomiclyMutableSet *)init {
        MSGSTART("AtomiclyMutableSet:-(AtomiclyMutableSet*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] init];

        /*i11*/ [self _startObjectOfClassAtomiclyMutableSet];

/*i10001*/ return self;
    }
    - (AtomiclyMutableSet *)initWithArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableSet:-(AtomiclyMutableSet*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithArray:array];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableSet];

/*i10001*/ return self;
    }
    - (AtomiclyMutableSet *)initWithCoder:(NSCoder *)coder {
        MSGSTART("AtomiclyMutableSet:-(AtomiclyMutableSet*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableSet];

/*i10001*/ return self;
    }
    - (AtomiclyMutableSet *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("AtomiclyMutableSet:-(AtomiclyMutableSet*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableSet];

/*i10001*/ return self;
    }
    - (AtomiclyMutableSet *)initWithSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:-(AtomiclyMutableSet*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = (insertsWeakObjectsByDefault ? set.weakCopy : [[NSSet alloc] initWithSet:set]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableSet];

/*i10001*/ return self;
    }
    - (AtomiclyMutableSet *)initWithSet:(NSSet *)set copyItems:(BOOL)copy {
        MSGSTART("AtomiclyMutableSet:-(AtomiclyMutableSet*)initWithSet:(NSSet*)set copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = [[NSSet alloc] initWithSet:set copyItems:copy];
        if (insertsWeakObjectsByDefault) __set = __set.weakCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassAtomiclyMutableSet];

/*i10001*/ return self;
    }
    - (void)intersectSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:-(void)intersectSet:(NSSet*)set")

        [trackerSet intersectSet : set];
        if (trackerSet.version != version) [self markDirty];
    }
    - (BOOL)intersectsSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:-(BOOL)intersectsSet:(NSSet*)set")
        return [__set intersectsSet:set];
    }
    - (NSNumber *)isAcceptableDirtyInModel:(id)adirtyInModel {
        MSGSTART("AtomiclyMutableSet:-(NSNumber*)isAcceptableDirtyInModel:(id)adirtyInModel")
        return [adirtyInModel isKindOfClass:[Model class]] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSinkCommitter:(id)asinkCommitter {
        MSGSTART("AtomiclyMutableSet:-(NSNumber*)isAcceptableSinkCommitter:(id)asinkCommitter")
        return [asinkCommitter conformsToProtocol:@protocol(Commitable)] ? @YES : nil;
    }
    - (NSNumber *)isAcceptableSourceCommitter:(id)asourceCommitter {
        MSGSTART("AtomiclyMutableSet:-(NSNumber*)isAcceptableSourceCommitter:(id)asourceCommitter")
        return [asourceCommitter conformsToProtocol:@protocol(Commitable)] ? @YES : nil;
    }
    - (bool)isDirty {
        MSGSTART("AtomiclyMutableSet:-(bool)isDirty")
        return _isDirty;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("AtomiclyMutableSet:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:-(BOOL)isEqualToSet:(NSSet*)set")
        return [__set isEqualToSet:set];
    }
    - (BOOL)isSubsetOfSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:-(BOOL)isSubsetOfSet:(NSSet*)set")
        return [__set isSubsetOfSet:set];
    }
    - (void)makeModel {
        MSGSTART("AtomiclyMutableSet:-(void)makeModel")

        for (NSObject *object in __set) {
            if ([object conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) object modeladd];
        }
    }
    - (void)makeNonModel {
        MSGSTART("AtomiclyMutableSet:-(void)makeNonModel")

        for (NSObject *object in __set) {
            if ([object conformsToProtocol:@protocol(RefCountedObject)])
                [(NSObject < RefCountedObject > *) object modelsub];
        }
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("AtomiclyMutableSet:-(void)makeObjectsPerformSelector:(SEL)selector")
        [__set makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("AtomiclyMutableSet:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")
        [__set makeObjectsPerformSelector : selector withObject : object];
    }
    - (void)markDirty {
        MSGSTART("AtomiclyMutableSet:-(void)markDirty")

        /*i-900*/ if (_isDirty)
            // prnt("%s already dirty\n",[Util cnameFor:self]);
            return;

        self.dirtyInModel = [Model getDefault];
        _isDirty = YES;
        // prnt("%s marked dirty with %d sinks\n",[Util cnameFor:self],self.sinkCommitters.count);

        /*i-1*/ for (NSObject<Commitable> *c in self.sinkCommitters) {
            [c markDirty];
        }
    }
    - (id)member:(id)object {
        MSGSTART("AtomiclyMutableSet:-(id)member:(id)object")
        return [__set member:object];
    }
    - (void)minusSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:-(void)minusSet:(NSSet*)set")

        [trackerSet minusSet : set];
        if (trackerSet.version != version) [self markDirty];
    }
    - (void)modeladd {
        MSGSTART("AtomiclyMutableSet:-(void)modeladd")

        if ( (++modelRetaincount) && (totalRetainCount == modelRetaincount) ) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels addObject:self];
            modelRetaincount = c;
        }
    }
    - (void)modelautorelease {
        MSGSTART("AtomiclyMutableSet:-(void)modelautorelease")

        modelRetaincount--;
        if (!modelRetaincount) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];
            modelRetaincount = c;
        }
        else if (totalRetainCount == modelRetaincount) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels addObject:self];
            modelRetaincount = c;
        }
        // self;
    }
    - (void)modelrelease {
        MSGSTART("AtomiclyMutableSet:-(void)modelrelease")

        modelRetaincount--;
    }
    - (id)modelretain {
        MSGSTART("AtomiclyMutableSet:-(id)modelretain")

        modelRetaincount++;
        return self;
    }
    - (void)modelsub {
        MSGSTART("AtomiclyMutableSet:-(void)modelsub")

        if ( modelRetaincount && (totalRetainCount == modelRetaincount) ) {
            Int c = modelRetaincount; modelRetaincount = 0;
            [[Model getDefault].objectsOwnedOnlyByModels removeObject:self];
            modelRetaincount = c;
        }
        modelRetaincount--;
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("AtomiclyMutableSet:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("AtomiclyMutableSet:-(NSEnumerator*)objectEnumerator")
        return [__set objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("AtomiclyMutableSet:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableSet:-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsPassingTest:predicate];
    }
    - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("AtomiclyMutableSet:-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsWithOptions:opts passingTest:predicate];
    }
    - (bool)onlyOwnedByModels {
        MSGSTART("AtomiclyMutableSet:-(bool)onlyOwnedByModels")
        return totalRetainCount == modelRetaincount;
    }
    - (void)removeAllObjects {
        MSGSTART("AtomiclyMutableSet:-(void)removeAllObjects")

        [trackerSet removeAllObjects];
        if (trackerSet.version != version) [self markDirty];
    }
    - (void)removeAllSinkCommitters {
        MSGSTART("AtomiclyMutableSet:-(void)removeAllSinkCommitters")
        [v_sinkCommitters removeAllObjects];
    }
    - (void)removeAllSourceCommitters {
        MSGSTART("AtomiclyMutableSet:-(void)removeAllSourceCommitters")
        [v_sourceCommitters removeAllObjects];
    }
    - (void)removeObject:(id)object {
        MSGSTART("AtomiclyMutableSet:-(void)removeObject:(id)object")

        [trackerSet removeObject : object];
        if (trackerSet.version != version) [self markDirty];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("AtomiclyMutableSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__set removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("AtomiclyMutableSet:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__set removeObserver : observer forKeyPath : keyPath context : context];
    }
    - (void)removeSinkCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableSet:-(void)removeSinkCommitter:(NSObject<Commitable>*)v")
        [v_sinkCommitters removeObject : v];
    }
    - (void)removeSourceCommitter:(NSObject<Commitable> *)v {
        MSGSTART("AtomiclyMutableSet:-(void)removeSourceCommitter:(NSObject<Commitable>*)v")
        [v_sourceCommitters removeObject : v];
    }
    - (void)retract {
        MSGSTART("AtomiclyMutableSet:-(void)retract")
        [self.sinkCommitters removeAllObjects];
        [self.sourceCommitters removeAllObjects];
        self.dirtyInModel = nil;

        noMOForNextRetain = NO;
    }
    + (AtomiclyMutableSet *)set {
        MSGSTART("AtomiclyMutableSet:+(AtomiclyMutableSet*)set")
        return [[AtomiclyMutableSet alloc] init];
    }
    - (void)setAtomicSet:(NSSet *)v {
        MSGSTART("AtomiclyMutableSet:-(void)setAtomicSet:(NSSet*)v")

        version = 0;
        [self makeNonModel];
        __set = [[NSSet alloc] initWithSet:v];
        [self makeModel];
    }
    - (NSSet *)setByAddingObject:(id)object {
        MSGSTART("AtomiclyMutableSet:-(NSSet*)setByAddingObject:(id)object")
        return [__set setByAddingObject:object];
    }
    - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableSet:-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array")
        return [__set setByAddingObjectsFromArray:array];
    }
    - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set")
        return [__set setByAddingObjectsFromSet:set];
    }
    - (void)setDirtyInModel:(Model *)v {
        MSGSTART("AtomiclyMutableSet:-(void)setDirtyInModel:(Model*)v")
        [v_dirtyInModel_endpoint setValue : v];
    }
    - (void)setDirtyInModel_endpoint:(Endpoint1 *)v {
        MSGSTART("AtomiclyMutableSet:-(void)setDirtyInModel_endpoint:(Endpoint1*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_AtomiclyMutableSet) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(dirtyInModel_endpoint=\"blah\") to set the property)");

        /*i-905*/ if (v_dirtyInModel_endpoint == v) return;

        /*i-900*/ {
            v_dirtyInModel_endpoint = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_dirtyInModel_endpoint,self); ADDOWNER(v,self);
    }
    - (void)setSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:-(void)setSet:(NSSet*)set")

        [trackerSet setSet : set];
        if (trackerSet.version != version) [self markDirty];
    }
    - (void)setSinkCommitters:(EndpointS *)v {
        MSGSTART("AtomiclyMutableSet:-(void)setSinkCommitters:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_AtomiclyMutableSet) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(sinkCommitters=\"blah\") to set the property)");

        /*i-905*/ if (v_sinkCommitters == v) return;

        /*i-900*/ {
            v_sinkCommitters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_sinkCommitters,self); ADDOWNER(v,self);
    }
    - (void)setSourceCommitters:(EndpointS *)v {
        MSGSTART("AtomiclyMutableSet:-(void)setSourceCommitters:(EndpointS*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_AtomiclyMutableSet) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(sourceCommitters=\"blah\") to set the property)");

        /*i-905*/ if (v_sourceCommitters == v) return;

        /*i-900*/ {
            v_sourceCommitters = (id)v;
        }
/*i-850*/ REMOVEOWNER(v_sourceCommitters,self); ADDOWNER(v,self);
    }
    - (void)setTrackerSet:(NSMutableSet<MutableSet> *)v {
        MSGSTART("AtomiclyMutableSet:-(void)setTrackerSet:(NSMutableSet<MutableSet>*)v")

        trackerSet = v;
        version = v.version;
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("AtomiclyMutableSet:-(void)setValue:(id)value forKey:(NSString *)key")
        [__set setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("AtomiclyMutableSet:-(void)setWeakness:(CollectionWeakness)v")
    }
    + (AtomiclyMutableSet *)setWithArray:(NSArray *)array {
        MSGSTART("AtomiclyMutableSet:+(AtomiclyMutableSet*)setWithArray:(NSArray*)array")
        return [[AtomiclyMutableSet alloc] initWithArray:array];
    }
    + (AtomiclyMutableSet *)setWithObject:(id)object {
        MSGSTART("AtomiclyMutableSet:+(AtomiclyMutableSet*)setWithObject:(id)object")
        return [[AtomiclyMutableSet alloc] initWithObjects:&object count:1];
    }
    + (AtomiclyMutableSet *)setWithSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:+(AtomiclyMutableSet*)setWithSet:(NSSet*)set")
        return [[AtomiclyMutableSet alloc] initWithSet:set];
    }
    - (EndpointS *)sinkCommitters {
        MSGSTART("AtomiclyMutableSet:-(EndpointS*)sinkCommitters")

        /*i-999*/ EndpointS * ret = v_sinkCommitters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)sinkCommitterToEndpoint:(id)asinkCommitter {
        MSGSTART("AtomiclyMutableSet:-(NSObject<LinkEndpoint>*)sinkCommitterToEndpoint:(id)asinkCommitter")
        return [asinkCommitter performSelector:@selector(sourceCommitters)];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("AtomiclyMutableSet:-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors")
        return [__set sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (EndpointS *)sourceCommitters {
        MSGSTART("AtomiclyMutableSet:-(EndpointS*)sourceCommitters")

        /*i-999*/ EndpointS * ret = v_sourceCommitters;
        /*i999*/ return ret;
    }
    - (NSObject<LinkEndpoint> *)sourceCommitterToEndpoint:(id)asourceCommitter {
        MSGSTART("AtomiclyMutableSet:-(NSObject<LinkEndpoint>*)sourceCommitterToEndpoint:(id)asourceCommitter")
        return [asourceCommitter performSelector:@selector(sinkCommitters)];
    }
    - (void)startCommit {
        MSGSTART("AtomiclyMutableSet:-(void)startCommit")
    }
    - (NSMutableSet<MutableSet> *)trackerSet {
        MSGSTART("AtomiclyMutableSet:-(NSMutableSet<MutableSet>*)trackerSet")
        return trackerSet;
    }
    - (void)unionSet:(NSSet *)set {
        MSGSTART("AtomiclyMutableSet:-(void)unionSet:(NSSet*)set")

        [trackerSet unionSet : set];
        if (trackerSet.version != version) [self markDirty];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("AtomiclyMutableSet:-(id)valueForKey:(NSString*)key")
        return [__set valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("AtomiclyMutableSet:-(CollectionWeakness)weakness")
        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willCommit {
        MSGSTART("AtomiclyMutableSet:-(void)willCommit")
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
