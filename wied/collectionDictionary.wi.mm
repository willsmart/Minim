// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 2 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D1





        @interface MutableDictionaryFollowerDelegate : NSObject<BaseObject, ClassObject, MutableDictionaryDelegate, Object> {
            NSMutableDictionary *mapk;
            NSMutableDictionary *mapv;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableDictionaryFollowerDelegate; @protected
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            NSObject<MutableDictionary> *followerDictionary;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
        }

        @property (strong,nonatomic,readonly) NSMutableDictionary *__mapk;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__mapv;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (strong,nonatomic,readwrite) NSObject<MutableDictionary> *followerDictionary;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        - (void)_startObjectOfClassMutableDictionaryFollowerDelegate;
        - (NSMutableDictionary *)__mapk;
        - (NSMutableDictionary *)__mapv;
        - (void)_refreshFollowerDictionary;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (NSObject<MutableDictionary> *)followerDictionary;
        - (void)followerWillAddObject:(id)object forKey:(id<NSCopying> )key;
        + (MutableDictionaryFollowerDelegate *)get;
        - (MutableDictionaryFollowerDelegate *)init;
        - (id<NSCopying> )keyForObject:(id)object key:(id<NSCopying> )key;
        - (id)objectForObject:(id)object key:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (void)refreshFollowerDictionary;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setFollowerDictionary:(NSObject<MutableDictionary> *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;

        @end





        @interface MutableDictionaryUnionDelegate : NSObject<BaseObject, ClassObject, MutableArrayDelegate, Object> {
            NSMutableArray *mapdicts;
            NSMutableDictionary *ocounts;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableDictionaryUnionDelegate; @protected
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<MutableDictionary> *unionDictionary;
        }

        @property (strong,nonatomic,readonly) NSMutableArray *__mapdicts;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__ocounts;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite) NSObject<MutableDictionary> *unionDictionary;
        - (void)_startObjectOfClassMutableDictionaryUnionDelegate;
        - (NSMutableArray *)__mapdicts;
        - (NSMutableDictionary *)__ocounts;
        - (void)_refreshUnionDictionary;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)allObjectsMoved;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (NSObject<MutableDictionary> *)dictionaryForObject:(id)object;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        + (MutableDictionaryUnionDelegate *)get;
        - (MutableDictionaryUnionDelegate *)init;
        - (NSMutableString *)objectName;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (void)refreshUnionDictionary;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)setDelegateForArray:(NSArray *)v;
        - (void)setUnionDictionary:(NSObject<MutableDictionary> *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (NSObject<MutableDictionary> *)unionDictionary;
        - (void)unionWillAddObject:(id)object withIndex:(Unsigned)index;
        - (void)unionWillReplaceObject1:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key depth:(Unsigned)index;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;

        @end





        @interface MutableDictionaryUnionDelegate1 : NSObject<ClassObject, MutableDictionaryDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableDictionaryUnionDelegate1; @protected
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            Unsigned depth;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            MutableDictionaryUnionDelegate *owner;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readwrite) Unsigned depth;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) MutableDictionaryUnionDelegate *owner;
        - (void)_startObjectOfClassMutableDictionaryUnionDelegate1;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (MutableDictionaryUnionDelegate1 *)initWithOwner:(MutableDictionaryUnionDelegate *)aowner depth:(Unsigned)adepth;
        - (NSMutableString *)objectName;
        - (MutableDictionaryUnionDelegate *)owner;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setOwner:(MutableDictionaryUnionDelegate *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif  // __SWIFT__
        - (void)stateOK;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;

        @end
    #endif      // INCLUDE_IFACE_D1

    #ifdef INCLUDE_IFACE_D2





        @interface MutableDictionaryPrefixedKeyDelegate : MutableDictionaryFollowerDelegate<DerivedObject, ClassObject> {
            @private ULL __private_access_thread_mask_in_MutableDictionaryPrefixedKeyDelegate; @protected
            NSString *filterKeyPrefix;
            Int keepKeyPrefixSuffixLength;
            NSString *keyPrefix;
        }

        @property (strong,nonatomic,readwrite) NSString *filterKeyPrefix;
        @property (nonatomic,readwrite) Int keepKeyPrefixSuffixLength;
        @property (strong,nonatomic,readwrite) NSString *keyPrefix;
        - (void)_startObjectOfClassMutableDictionaryPrefixedKeyDelegate;
        - (void)dealloc;
        - (void)die;
        - (NSString *)filterKeyPrefix;
        - (Int)keepKeyPrefixSuffixLength;
        - (id<NSCopying> )keyForObject:(id)object key:(id<NSCopying> )key;
        - (NSString *)keyPrefix;
        - (void)setFilterKeyPrefix:(NSString *)v;
        - (void)setKeepKeyPrefixSuffixLength:(Int)v;
        - (void)setKeyPrefix:(NSString *)v;

        @end
    #endif // INCLUDE_IFACE_D2

    #ifdef INCLUDE_IFACE_D3





        @interface Basic_ProxyDictionaryDelegate : NSObject<Basic_ProxyDictionaryDelegate, ClassObject, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_Basic_ProxyDictionaryDelegate; @protected
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<Basic_ProxiedDictionaryDelegate> *owner;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (weak,nonatomic,readwrite) NSObject<Basic_ProxiedDictionaryDelegate> *owner;
        - (void)_startObjectOfClassBasic_ProxyDictionaryDelegate;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (Basic_ProxyDictionaryDelegate *)initWithOwner:(NSObject<Basic_ProxiedDictionaryDelegate> *)aowner;
        - (NSMutableString *)objectName;
        - (NSObject<Basic_ProxiedDictionaryDelegate> *)owner;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setOwner:(NSObject<Basic_ProxiedDictionaryDelegate> *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;

        @end





        @interface Basic_SourcedProxyDictionaryDelegate : NSObject<Basic_SourcedProxyDictionaryDelegate, ClassObject, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_Basic_SourcedProxyDictionaryDelegate; @protected
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<Basic_SourcedProxiedDictionaryDelegate> *owner;
            NSObject<NSCopying> *source;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (weak,nonatomic,readwrite) NSObject<Basic_SourcedProxiedDictionaryDelegate> *owner;
        @property (strong,nonatomic,readonly) NSObject<NSCopying> *source;
        - (void)_startObjectOfClassBasic_SourcedProxyDictionaryDelegate;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (Basic_SourcedProxyDictionaryDelegate *)initWithOwner:(NSObject<Basic_SourcedProxiedDictionaryDelegate> *)aowner source:(NSObject<NSCopying> *)asource;
        - (NSMutableString *)objectName;
        - (NSObject<Basic_SourcedProxiedDictionaryDelegate> *)owner;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setOwner:(NSObject<Basic_SourcedProxiedDictionaryDelegate> *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif  // __SWIFT__
        - (NSObject<NSCopying> *)source;
        - (void)stateOK;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;

        @end
    #endif      // INCLUDE_IFACE_D3

    #ifdef INCLUDE_IFACE_D4





        @interface MutableDictionaryMirrorTesterImpl : NSMutableDictionary<ClassObject, MutableDictionaryMirrorTester, Object> {
            Int __addingToMirrorDictionary;
            NSDictionary *__dictionary;
            NSMutableDictionary *__dictionaryObjectKeys;
            NSMutableDictionary *__mutableDictionary;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableDictionaryMirrorTesterImpl; @protected
            Int __removingFromMirrorDictionary;
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            Unsigned dictionary_count;
            keyval100 dictionary_objects;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            NSMutableString *v_errs;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            long version;
            Int weakObjectCount;
        }

        @property (nonatomic,readwrite) Int __addingToMirrorDictionary;
        @property (strong,nonatomic,readonly) NSDictionary *__dictionary;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *__dictionaryObjectKeys;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__mutableDictionary;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Int __removingFromMirrorDictionary;
        @property (nonatomic,readonly) NSArray *allKeys;
        @property (nonatomic,readonly) NSArray *allValues;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptionInStringsFileFormat;
        @property (nonatomic,readwrite) Unsigned dictionary_count;
        @property (nonatomic,readwrite) keyval100 dictionary_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readonly) NSDate *fileCreationDate;
        @property (nonatomic,readonly) BOOL fileExtensionHidden;
        @property (nonatomic,readonly) NSNumber *fileGroupOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileGroupOwnerAccountName;
        @property (nonatomic,readonly) OSType fileHFSCreatorCode;
        @property (nonatomic,readonly) OSType fileHFSTypeCode;
        @property (nonatomic,readonly) BOOL fileIsAppendOnly;
        @property (nonatomic,readonly) BOOL fileIsImmutable;
        @property (nonatomic,readonly) NSDate *fileModificationDate;
        @property (nonatomic,readonly) NSNumber *fileOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileOwnerAccountName;
        @property (nonatomic,readonly) Unsigned filePosixPermissions;
        @property (nonatomic,readonly) ULL fileSize;
        @property (nonatomic,readonly) Unsigned fileSystemFileNumber;
        @property (nonatomic,readonly) Int fileSystemNumber;
        @property (nonatomic,readonly) NSString *fileType;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *keyEnumerator;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassMutableDictionaryMirrorTesterImpl;
        - (NSDictionary *)__dictionary;
        - (NSMutableDictionary *)__dictionaryObjectKeys;
        - (NSMutableDictionary *)__mutableDictionary;
        - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectForKey:(id<NSCopying> )key;
        - (bool)_removeObjectsForKeys:(NSArray *)keys;
        - (bool)_setDictionary:(NSDictionary *)dictionary;
        - (bool)_setObject:(id)object forKey:(id<NSCopying> )key;
        - (bool)_setValue:(id)object forKey:(NSString *)key;
        - (void)add:(Int)c toWillAddCountForObject:(id)object;
        - (void)add:(Int)c toWillRemoveCountForObject:(id)object;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (NSArray *)allKeys;
        - (NSArray *)allKeysForObject:(id)object;
        - (NSArray *)allValues;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSString *)descriptionInStringsFileFormat;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        + (MutableDictionaryMirrorTesterImpl *)dictionary;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        + (id)dictionaryWithCapacity:(Unsigned)numItems;
        + (MutableDictionaryMirrorTesterImpl *)dictionaryWithContentsOfFile:(NSString *)file;
        + (MutableDictionaryMirrorTesterImpl *)dictionaryWithContentsOfURL:(NSURL *)url;
        + (MutableDictionaryMirrorTesterImpl *)dictionaryWithDictionary:(NSDictionary *)dictionary;
        + (MutableDictionaryMirrorTesterImpl *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key;
        + (MutableDictionaryMirrorTesterImpl *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (NSMutableString *)errs;
        - (NSDate *)fileCreationDate;
        - (BOOL)fileExtensionHidden;
        - (NSNumber *)fileGroupOwnerAccountID;
        - (NSString *)fileGroupOwnerAccountName;
        - (OSType)fileHFSCreatorCode;
        - (OSType)fileHFSTypeCode;
        - (BOOL)fileIsAppendOnly;
        - (BOOL)fileIsImmutable;
        - (NSDate *)fileModificationDate;
        - (NSNumber *)fileOwnerAccountID;
        - (NSString *)fileOwnerAccountName;
        - (Unsigned)filePosixPermissions;
        - (ULL)fileSize;
        - (Unsigned)fileSystemFileNumber;
        - (Int)fileSystemNumber;
        - (NSString *)fileType;
        - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
        - (Unsigned)hash;
        - (MutableDictionaryMirrorTesterImpl *)init;
        - (MutableDictionaryMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems;
        - (MutableDictionaryMirrorTesterImpl *)initWithCoder:(NSCoder *)coder;
        - (MutableDictionaryMirrorTesterImpl *)initWithContentsOfFile:(NSString *)file;
        - (MutableDictionaryMirrorTesterImpl *)initWithContentsOfURL:(NSURL *)url;
        - (MutableDictionaryMirrorTesterImpl *)initWithDictionary:(NSDictionary *)dictionary;
        - (MutableDictionaryMirrorTesterImpl *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy;
        - (MutableDictionaryMirrorTesterImpl *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary;
        - (NSEnumerator *)keyEnumerator;
        - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr;
        - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector;
        - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (id)objectForKey:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)removeObjectForKey:(id<NSCopying> )key;
        - (void)removeObjectsForKeys:(NSArray *)keys;
        - (void)set__dictionaryObjectKeys:(NSMutableDictionary *)v;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setDictionary:(NSDictionary *)dictionary;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setObject:(id)object forKey:(id<NSCopying> )key;
        - (void)setValue:(id)object forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (id)valueForKey:(NSString *)key;
        - (void)verifyMirrorDictionary;
        - (CollectionWeakness)weakness;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface WeakMutableDictionaryMirrorTesterImpl : NSMutableDictionary<ClassObject, MutableDictionary, MutableDictionaryMirrorTester, Object, WeakCollection> {
            Int __addingToMirrorDictionary;
            NSDictionary *__dictionary;
            NSMutableDictionary *__dictionaryObjectKeys;
            NSMutableDictionary *__mutableDictionary;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WeakMutableDictionaryMirrorTesterImpl; @protected
            Int __removingFromMirrorDictionary;
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            Unsigned dictionary_count;
            keyval100 dictionary_objects;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            NSMutableString *v_errs;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            long version;
            Int weakObjectCount;
        }

        @property (nonatomic,readwrite) Int __addingToMirrorDictionary;
        @property (strong,nonatomic,readonly) NSDictionary *__dictionary;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *__dictionaryObjectKeys;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__mutableDictionary;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Int __removingFromMirrorDictionary;
        @property (nonatomic,readonly) NSArray *allKeys;
        @property (nonatomic,readonly) NSArray *allValues;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptionInStringsFileFormat;
        @property (nonatomic,readwrite) Unsigned dictionary_count;
        @property (nonatomic,readwrite) keyval100 dictionary_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readonly) NSDate *fileCreationDate;
        @property (nonatomic,readonly) BOOL fileExtensionHidden;
        @property (nonatomic,readonly) NSNumber *fileGroupOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileGroupOwnerAccountName;
        @property (nonatomic,readonly) OSType fileHFSCreatorCode;
        @property (nonatomic,readonly) OSType fileHFSTypeCode;
        @property (nonatomic,readonly) BOOL fileIsAppendOnly;
        @property (nonatomic,readonly) BOOL fileIsImmutable;
        @property (nonatomic,readonly) NSDate *fileModificationDate;
        @property (nonatomic,readonly) NSNumber *fileOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileOwnerAccountName;
        @property (nonatomic,readonly) Unsigned filePosixPermissions;
        @property (nonatomic,readonly) ULL fileSize;
        @property (nonatomic,readonly) Unsigned fileSystemFileNumber;
        @property (nonatomic,readonly) Int fileSystemNumber;
        @property (nonatomic,readonly) NSString *fileType;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *keyEnumerator;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassWeakMutableDictionaryMirrorTesterImpl;
        - (NSDictionary *)__dictionary;
        - (NSMutableDictionary *)__dictionaryObjectKeys;
        - (NSMutableDictionary *)__mutableDictionary;
        - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectForKey:(id<NSCopying> )key;
        - (bool)_removeObjectsForKeys:(NSArray *)keys;
        - (bool)_setDictionary:(NSDictionary *)dictionary;
        - (bool)_setObject:(id)object forKey:(id<NSCopying> )key;
        - (bool)_setValue:(id)object forKey:(NSString *)key;
        - (void)add:(Int)c toWillAddCountForObject:(id)object;
        - (void)add:(Int)c toWillRemoveCountForObject:(id)object;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (NSArray *)allKeys;
        - (NSArray *)allKeysForObject:(id)object;
        - (NSArray *)allValues;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSString *)descriptionInStringsFileFormat;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        + (WeakMutableDictionaryMirrorTesterImpl *)dictionary;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        + (id)dictionaryWithCapacity:(Unsigned)numItems;
        + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithContentsOfFile:(NSString *)file;
        + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithContentsOfURL:(NSURL *)url;
        + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithDictionary:(NSDictionary *)dictionary;
        + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key;
        + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (NSMutableString *)errs;
        - (NSDate *)fileCreationDate;
        - (BOOL)fileExtensionHidden;
        - (NSNumber *)fileGroupOwnerAccountID;
        - (NSString *)fileGroupOwnerAccountName;
        - (OSType)fileHFSCreatorCode;
        - (OSType)fileHFSTypeCode;
        - (BOOL)fileIsAppendOnly;
        - (BOOL)fileIsImmutable;
        - (NSDate *)fileModificationDate;
        - (NSNumber *)fileOwnerAccountID;
        - (NSString *)fileOwnerAccountName;
        - (Unsigned)filePosixPermissions;
        - (ULL)fileSize;
        - (Unsigned)fileSystemFileNumber;
        - (Int)fileSystemNumber;
        - (NSString *)fileType;
        - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
        - (Unsigned)hash;
        - (WeakMutableDictionaryMirrorTesterImpl *)init;
        - (WeakMutableDictionaryMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems;
        - (WeakMutableDictionaryMirrorTesterImpl *)initWithCoder:(NSCoder *)coder;
        - (WeakMutableDictionaryMirrorTesterImpl *)initWithContentsOfFile:(NSString *)file;
        - (WeakMutableDictionaryMirrorTesterImpl *)initWithContentsOfURL:(NSURL *)url;
        - (WeakMutableDictionaryMirrorTesterImpl *)initWithDictionary:(NSDictionary *)dictionary;
        - (WeakMutableDictionaryMirrorTesterImpl *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy;
        - (WeakMutableDictionaryMirrorTesterImpl *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary;
        - (NSEnumerator *)keyEnumerator;
        - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr;
        - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector;
        - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (id)objectForKey:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)removeObjectForKey:(id<NSCopying> )key;
        - (void)removeObjectsForKeys:(NSArray *)keys;
        - (void)set__dictionaryObjectKeys:(NSMutableDictionary *)v;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setDictionary:(NSDictionary *)dictionary;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setObject:(id)object forKey:(id<NSCopying> )key;
        - (void)setValue:(id)object forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (id)valueForKey:(NSString *)key;
        - (void)verifyMirrorDictionary;
        - (CollectionWeakness)weakness;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end
    #endif // INCLUDE_IFACE_D4

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: b





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         Basic_ProxyDictionaryDelegate
    #define _WIClass_           Basic_ProxyDictionaryDelegate__
    #define _className_         basic_ProxyDictionaryDelegate
    #define _Class_             Basic_ProxyDictionaryDelegate__
    @implementation Basic_ProxyDictionaryDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassBasic_ProxyDictionaryDelegate {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)_startObjectOfClassBasic_ProxyDictionaryDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ dictionaryDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)delegateForDictionaryChanged")

        [owner basic_delegateForDictionaryChanged];
    }
    - (NSString *)description {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        [owner basic_didReplaceObject : fromObject withObject : toObject forKey : key];



        /*i100*/ [dictionaryDelegate didReplaceObject:fromObject withObject:toObject forKey:key];
    }
    - (void)die {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)die")

        /*i900*/}
    - (Basic_ProxyDictionaryDelegate *)initWithOwner:(NSObject<Basic_ProxiedDictionaryDelegate> *)aowner {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(Basic_ProxyDictionaryDelegate*)initWithOwner:(NSObject<Basic_ProxiedDictionaryDelegate>*)aowner")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ owner = aowner;

        /*i11*/ [self _startObjectOfClassBasic_ProxyDictionaryDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSObject<Basic_ProxiedDictionaryDelegate> *)owner {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(NSObject<Basic_ProxiedDictionaryDelegate>*)owner")

        /*i-999*/ NSObject<Basic_ProxiedDictionaryDelegate> *ret = owner;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setOwner:(NSObject<Basic_ProxiedDictionaryDelegate> *)v {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)setOwner:(NSObject<Basic_ProxiedDictionaryDelegate>*)v")

        /*i-905*/ if (owner == v) return;

        /*i-900*/ {
            owner = (id)v;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("Basic_ProxyDictionaryDelegate:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)stateOK")

        [owner basic_stateOK];



        /*i100*/ [dictionaryDelegate stateOK];
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("Basic_ProxyDictionaryDelegate:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        [owner basic_willReplaceObject : fromObject withObject : toObject forKey : key];



        /*i100*/ [dictionaryDelegate willReplaceObject:fromObject withObject:toObject forKey:key];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         Basic_SourcedProxyDictionaryDelegate
    #define _WIClass_           Basic_SourcedProxyDictionaryDelegate__
    #define _className_         basic_SourcedProxyDictionaryDelegate
    #define _Class_             Basic_SourcedProxyDictionaryDelegate__
    @implementation Basic_SourcedProxyDictionaryDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassBasic_SourcedProxyDictionaryDelegate {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)_startObjectOfClassBasic_SourcedProxyDictionaryDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ dictionaryDelegate = nil;

        source = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)delegateForDictionaryChanged")

        [owner basic_delegateForDictionaryChangedForSource : source];
    }
    - (NSString *)description {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        [owner basic_didReplaceObject : fromObject withObject : toObject forKey : key source : source];



        /*i100*/ [dictionaryDelegate didReplaceObject:fromObject withObject:toObject forKey:key];
    }
    - (void)die {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)die")

        /*i900*/}
    - (Basic_SourcedProxyDictionaryDelegate *)initWithOwner:(NSObject<Basic_SourcedProxiedDictionaryDelegate> *)aowner source:(NSObject<NSCopying> *)asource {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(Basic_SourcedProxyDictionaryDelegate*)initWithOwner:(NSObject<Basic_SourcedProxiedDictionaryDelegate>*)aowner source:(NSObject<NSCopying>*)asource")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ owner = aowner;
        source = asource;

        /*i11*/ [self _startObjectOfClassBasic_SourcedProxyDictionaryDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSObject<Basic_SourcedProxiedDictionaryDelegate> *)owner {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(NSObject<Basic_SourcedProxiedDictionaryDelegate>*)owner")

        /*i-999*/ NSObject<Basic_SourcedProxiedDictionaryDelegate> *ret = owner;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setOwner:(NSObject<Basic_SourcedProxiedDictionaryDelegate> *)v {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)setOwner:(NSObject<Basic_SourcedProxiedDictionaryDelegate>*)v")

        /*i-905*/ if (owner == v) return;

        /*i-900*/ {
            owner = (id)v;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSObject<NSCopying> *)source {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(NSObject<NSCopying>*)source")

        /*i-999*/ NSObject<NSCopying> *ret = source;
        /*i999*/ return ret;
    }
    - (void)stateOK {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)stateOK")

        [owner basic_stateOKForSource : source];



        /*i100*/ [dictionaryDelegate stateOK];
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("Basic_SourcedProxyDictionaryDelegate:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        [owner basic_willReplaceObject : fromObject withObject : toObject forKey : key source : source];



        /*i100*/ [dictionaryDelegate willReplaceObject:fromObject withObject:toObject forKey:key];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: m





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableDictionaryFollowerDelegate
    #define _WIClass_           MutableDictionaryFollowerDelegate__
    #define _className_         mutableDictionaryFollowerDelegate
    #define _Class_             MutableDictionaryFollowerDelegate__
    @implementation MutableDictionaryFollowerDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableDictionaryFollowerDelegate {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)_startObjectOfClassMutableDictionaryFollowerDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ mapk = ([[NSMutableDictionary alloc] init]);
        /*ivar*/ mapv = ([[NSMutableDictionary alloc] init]);

        /*i0*/}
    - (NSMutableDictionary *)__mapk {
        MSGSTART("MutableDictionaryFollowerDelegate:-(NSMutableDictionary*)__mapk")

        /*i-999*/ NSMutableDictionary * ret = mapk;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__mapv {
        MSGSTART("MutableDictionaryFollowerDelegate:-(NSMutableDictionary*)__mapv")

        /*i-999*/ NSMutableDictionary * ret = mapv;
        /*i999*/ return ret;
    }
    - (void)_refreshFollowerDictionary {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)_refreshFollowerDictionary")

        [mapk removeAllObjects];
        [mapv removeAllObjects];

        [followerDictionary _removeAllObjects];

        if (self.delegateForDictionary)
            for (kid key in self.delegateForDictionary) {
                [self followerWillAddObject:[self.delegateForDictionary objectForKey:key] forKey:key];
            }
    }
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("MutableDictionaryFollowerDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableDictionaryFollowerDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ followerDictionary = nil;

        dictionaryDelegate = nil;

        mapk = nil;

        mapv = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("MutableDictionaryFollowerDelegate:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)delegateForDictionaryChanged")

        [self refreshFollowerDictionary];
    }
    - (NSString *)description {
        MSGSTART("MutableDictionaryFollowerDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("MutableDictionaryFollowerDelegate:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")


        /*i100*/[dictionaryDelegate didReplaceObject : fromObject withObject : toObject forKey : key];
    }
    - (void)die {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)die")

        /*i900*/}
    - (NSObject<MutableDictionary> *)followerDictionary {
        MSGSTART("MutableDictionaryFollowerDelegate:-(NSObject<MutableDictionary>*)followerDictionary")
        return followerDictionary;
    }
    - (void)followerWillAddObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)followerWillAddObject:(id)object forKey:(id<NSCopying>)key")

        if ([mapk objectForKey:key] || [mapv objectForKey:key]) {
            ERR("Shouldn't have key");
            return;
        }
        id k = [self keyForObject:object key:key];
        id o = [self objectForObject:object key:key];
        if (o && k) {
            [mapk setObject:k forKey:key];
            [mapv setObject:o forKey:key];
            [followerDictionary _setObject:o forKey:k];
        }
    }
    + (MutableDictionaryFollowerDelegate *)get {
        MSGSTART("MutableDictionaryFollowerDelegate:+(MutableDictionaryFollowerDelegate*)get")
        return [[MutableDictionaryFollowerDelegate alloc] init];
    }
    - (MutableDictionaryFollowerDelegate *)init {
        MSGSTART("MutableDictionaryFollowerDelegate:-(MutableDictionaryFollowerDelegate*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassMutableDictionaryFollowerDelegate];

/*i10001*/ return self;
    }
    - (id<NSCopying> )keyForObject:(id)object key:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryFollowerDelegate:-(id<NSCopying>)keyForObject:(id)object key:(id<NSCopying>)key")
        return key;
    }
    - (id)objectForObject:(id)object key:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryFollowerDelegate:-(id)objectForObject:(id)object key:(id<NSCopying>)key")
        return object;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableDictionaryFollowerDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)refreshFollowerDictionary {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)refreshFollowerDictionary")

        [self _refreshFollowerDictionary];
        [followerDictionary stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setFollowerDictionary:(NSObject<MutableDictionary> *)v {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)setFollowerDictionary:(NSObject<MutableDictionary>*)v")
        followerDictionary = v; [self refreshFollowerDictionary];
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)setWithDictionary:(NSDictionary*)d")
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("MutableDictionaryFollowerDelegate:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)stateOK")



        /*i100*/[followerDictionary stateOK];
        [dictionaryDelegate stateOK];
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryFollowerDelegate:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")



        /*i100*/[dictionaryDelegate willReplaceObject : fromObject withObject : toObject forKey : key];

/*i500*/ if (fromObject) {
            id k = [mapk objectForKey:key];
            id o = [mapv objectForKey:key];
            if (o && k) {
                [followerDictionary _removeObjectForKey:k];
                [mapk removeObjectForKey:key];
                [mapv removeObjectForKey:key];
            }
        }
        if (toObject)
            [self followerWillAddObject:toObject forKey:key];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableDictionaryMirrorTesterImpl
    #define _WIClass_           MutableDictionaryMirrorTesterImpl__
    #define _className_         mutableDictionaryMirrorTesterImpl
    #define _Class_             MutableDictionaryMirrorTesterImpl__
    @implementation MutableDictionaryMirrorTesterImpl

    @synthesize __addingToMirrorDictionary = __addingToMirrorDictionary;
    @synthesize __owner_context = __owner_context;
    @synthesize __removingFromMirrorDictionary = __removingFromMirrorDictionary;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize dictionary_count = dictionary_count;
    @synthesize dictionary_objects = dictionary_objects;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassMutableDictionaryMirrorTesterImpl {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)_startObjectOfClassMutableDictionaryMirrorTesterImpl")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ version = (1);
        /*ivar*/ __dictionaryObjectKeys = ([NSMutableDictionary dictionary]);
        /*ivar*/ v_errs = ([NSMutableString string]);

        /*i0*/ self.delegateForDictionary = self;
    }
    - (NSDictionary *)__dictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSDictionary*)__dictionary")

        /*i-999*/ NSDictionary * ret = __dictionary;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__dictionaryObjectKeys {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSMutableDictionary*)__dictionaryObjectKeys")

        /*i-999*/ NSMutableDictionary * ret = __dictionaryObjectKeys;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__mutableDictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSMutableDictionary*)__mutableDictionary")

        /*i-999*/ NSMutableDictionary * ret = __mutableDictionary;
        /*i999*/ return ret;
    }
    - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(bool)_addEntriesFromDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        for (id<NSCopying> key in dictionary) {
            if ([self _setObject:[dictionary objectForKey:key] forKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(bool)_removeAllObjects")

        if (!__dictionary.count) return NO;

        NSDictionary *was = __dictionary.copy;
        for (id<NSCopying> key in was) {
            [self willReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        weakObjectCount = 0;
        [__mutableDictionary removeAllObjects];
        for (id<NSCopying> key in was) {
            [self didReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        return YES;
    }
    - (bool)_removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(bool)_removeObjectForKey:(id<NSCopying>)key")

        NSObject * object = [__dictionary objectForKey:key];
        if (!object) return NO;

        [self willReplaceObject:object withObject:nil forKey:key];
        if ([object isWeakSelf]) --weakObjectCount;
        [__mutableDictionary removeObjectForKey:key];
        [self didReplaceObject:object withObject:nil forKey:key];
        return YES;
    }
    - (bool)_removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(bool)_removeObjectsForKeys:(NSArray*)keys")

        bool ret = NO;
        for (id<NSCopying> key in keys) {
            if ([self _removeObjectForKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_setDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(bool)_setDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        NSMutableArray *toRemove = nil;
        for (id<NSCopying> key in __dictionary) {
            if (![dictionary objectForKey:key]) {
                if (!toRemove) toRemove = [[MutableArray alloc] initWithCapacity:dictionary.count];
                [toRemove addObject:key];
            }
        }
        if (toRemove) {
            ret = YES;
            for (id<NSCopying> key in toRemove) {
                [self _removeObjectForKey:key];
            }
        }
        if ([self _addEntriesFromDictionary:dictionary]) ret = YES;
        return ret;
    }
    - (bool)_setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(bool)_setObject:(id)object forKey:(id<NSCopying>)key")

        if (!object) return [self _removeObjectForKey:key];

        id was = [__dictionary objectForKey:key];
        if (was == object) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (bool)_setValue:(id)object forKey:(NSString *)key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(bool)_setValue:(id)object forKey:(NSString*)key")

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        id was = [__dictionary valueForKey:key];
        if (was == object) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (void)add:(Int)c toWillAddCountForObject:(id)object {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)add:(Int)c toWillAddCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didAdd];
            else if (c == 1) [o willAdd];
        }
    }
    - (void)add:(Int)c toWillRemoveCountForObject:(id)object {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)add:(Int)c toWillRemoveCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didRemove];
            else if (c == 1) [o willRemove];
        }
    }
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (void)addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)addEntriesFromDictionary:(NSDictionary*)dictionary")

        if ([self _addEntriesFromDictionary:dictionary]) [self stateOK];
    }
    - (NSArray *)allKeys {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSArray*)allKeys")
        return [__dictionary allKeys];
    }
    - (NSArray *)allKeysForObject:(id)object {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSArray*)allKeysForObject:(id)object")
        return [__dictionary allKeysForObject:object];
    }
    - (NSArray *)allValues {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSArray*)allValues")
        return [__dictionary allValues];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (Unsigned)count {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(Unsigned)count")
        return [__dictionary count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        Unsigned ret = [__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
        return ret;
    }
    - (void)countWeakObjects {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)countWeakObjects")

        Int c = 0;
        for (kid o in __dictionary) {
            if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ __mutableDictionary = nil;

        __dictionaryObjectKeys = nil;

        v_errs = nil;

        dictionaryDelegate = nil;

        __dictionary = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)delegateForDictionaryChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__dictionary description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionInStringsFileFormat {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSString*)descriptionInStringsFileFormat")
        return [__dictionary descriptionInStringsFileFormat];
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSString *)descriptionWithLocale:(id)locale")

        return [__dictionary descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [__dictionary descriptionWithLocale:locale indent:level];
    }
    + (MutableDictionaryMirrorTesterImpl *)dictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:+(MutableDictionaryMirrorTesterImpl*)dictionary")
        return [[MutableDictionaryMirrorTesterImpl alloc] init];
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    + (id)dictionaryWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableDictionaryMirrorTesterImpl:+(id)dictionaryWithCapacity:(Unsigned)numItems")

        return [[MutableDictionaryMirrorTesterImpl alloc] initWithCapacity:numItems];
    }
    + (MutableDictionaryMirrorTesterImpl *)dictionaryWithContentsOfFile:(NSString *)file {
        MSGSTART("MutableDictionaryMirrorTesterImpl:+(MutableDictionaryMirrorTesterImpl*)dictionaryWithContentsOfFile:(NSString*)file")
        return [[MutableDictionaryMirrorTesterImpl alloc] initWithContentsOfFile:file];
    }
    + (MutableDictionaryMirrorTesterImpl *)dictionaryWithContentsOfURL:(NSURL *)url {
        MSGSTART("MutableDictionaryMirrorTesterImpl:+(MutableDictionaryMirrorTesterImpl*)dictionaryWithContentsOfURL:(NSURL*)url")
        return [[MutableDictionaryMirrorTesterImpl alloc] initWithContentsOfURL:url];
    }
    + (MutableDictionaryMirrorTesterImpl *)dictionaryWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:+(MutableDictionaryMirrorTesterImpl*)dictionaryWithDictionary:(NSDictionary*)dictionary")
        return [[MutableDictionaryMirrorTesterImpl alloc] initWithDictionary:dictionary];
    }
    + (MutableDictionaryMirrorTesterImpl *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:+(MutableDictionaryMirrorTesterImpl*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
        return [[MutableDictionaryMirrorTesterImpl alloc] initWithObjects:&object forKeys:&key count:1];
    }
    + (MutableDictionaryMirrorTesterImpl *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("MutableDictionaryMirrorTesterImpl:+(MutableDictionaryMirrorTesterImpl*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
        return [[MutableDictionaryMirrorTesterImpl alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        /*i-950*/ if (toObject) {
            NSMutableSet *keys = [__dictionaryObjectKeys objectForKey:(id < NSCopying >)toObject];
            if (!keys) [__dictionaryObjectKeys setObject:keys = [MutableSet set] forWeakKey:toObject];
            else if ([keys containsObject:key]) [self passFail:NO format:@"!!!dk Key exists\n"];
            [keys addObject:key];
        }

        /*i100*/ if (toObject) {
            if (!__addingToMirrorDictionary) [self passFail:NO format:@"!!!dkt did add while not adding\n"];
            [self add:-1 toWillAddCountForObject:toObject];
            __addingToMirrorDictionary--;
        }
        if (fromObject) {
            if (!__removingFromMirrorDictionary) [self passFail:NO format:@"!!!dkt did remove while not removing\n"];
            [self add:-1 toWillRemoveCountForObject:fromObject];
            __removingFromMirrorDictionary--;
        }
        [dictionaryDelegate didReplaceObject:fromObject withObject:toObject forKey:key];
    }
    - (void)die {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)encodeWithCoder:(NSCoder*)coder")

        [__dictionary encodeWithCoder : coder];
    }
    - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsUsingBlock : block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsWithOptions : opts usingBlock : block];
    }
    - (NSMutableString *)errs {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (NSDate *)fileCreationDate {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSDate*)fileCreationDate")
        return [__dictionary fileCreationDate];
    }
    - (BOOL)fileExtensionHidden {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(BOOL)fileExtensionHidden")
        return [__dictionary fileExtensionHidden];
    }
    - (NSNumber *)fileGroupOwnerAccountID {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSNumber*)fileGroupOwnerAccountID")
        return [__dictionary fileGroupOwnerAccountID];
    }
    - (NSString *)fileGroupOwnerAccountName {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSString*)fileGroupOwnerAccountName")
        return [__dictionary fileGroupOwnerAccountName];
    }
    - (OSType)fileHFSCreatorCode {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(OSType)fileHFSCreatorCode")
        return [__dictionary fileHFSCreatorCode];
    }
    - (OSType)fileHFSTypeCode {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(OSType)fileHFSTypeCode")
        return [__dictionary fileHFSTypeCode];
    }
    - (BOOL)fileIsAppendOnly {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(BOOL)fileIsAppendOnly")
        return [__dictionary fileIsAppendOnly];
    }
    - (BOOL)fileIsImmutable {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(BOOL)fileIsImmutable")
        return [__dictionary fileIsImmutable];
    }
    - (NSDate *)fileModificationDate {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSDate*)fileModificationDate")
        return [__dictionary fileModificationDate];
    }
    - (NSNumber *)fileOwnerAccountID {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSNumber*)fileOwnerAccountID")
        return [__dictionary fileOwnerAccountID];
    }
    - (NSString *)fileOwnerAccountName {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSString*)fileOwnerAccountName")
        return [__dictionary fileOwnerAccountName];
    }
    - (Unsigned)filePosixPermissions {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(Unsigned)filePosixPermissions")
        return [__dictionary filePosixPermissions];
    }
    - (ULL)fileSize {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(ULL)fileSize")
        return [__dictionary fileSize];
    }
    - (Unsigned)fileSystemFileNumber {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(Unsigned)fileSystemFileNumber")
        return [__dictionary fileSystemFileNumber];
    }
    - (Int)fileSystemNumber {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(Int)fileSystemNumber")
        return [__dictionary fileSystemNumber];
    }
    - (NSString *)fileType {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSString*)fileType")
        return [__dictionary fileType];
    }
    - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

        [__dictionary getObjects : objects andKeys : keys];
    }
    - (Unsigned)hash {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (MutableDictionaryMirrorTesterImpl *)init {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(MutableDictionaryMirrorTesterImpl*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableDictionaryMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(MutableDictionaryMirrorTesterImpl*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableDictionaryMirrorTesterImpl *)initWithCoder:(NSCoder *)coder {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(MutableDictionaryMirrorTesterImpl*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableDictionaryMirrorTesterImpl *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(MutableDictionaryMirrorTesterImpl*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableDictionaryMirrorTesterImpl *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(MutableDictionaryMirrorTesterImpl*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableDictionaryMirrorTesterImpl *)initWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(MutableDictionaryMirrorTesterImpl*)initWithDictionary:(NSDictionary*)dictionary")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableDictionaryMirrorTesterImpl *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(MutableDictionaryMirrorTesterImpl*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableDictionaryMirrorTesterImpl *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(MutableDictionaryMirrorTesterImpl*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
        return [__dictionary isEqualToDictionary:dictionary];
    }
    - (NSEnumerator *)keyEnumerator {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSEnumerator*)keyEnumerator")
        return [__dictionary keyEnumerator];
    }
    - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesPassingTest:predicate];
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesWithOptions:opts passingTest:predicate];
    }
    - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueUsingComparator:cmptr];
    }
    - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

        return [__dictionary keysSortedByValueUsingSelector:selector];
    }
    - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSEnumerator*)objectEnumerator")
        return [__dictionary objectEnumerator];
    }
    - (id)objectForKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(id)objectForKey:(id<NSCopying>)key")

        /*i-10*/ id ret = [__dictionary objectForKey:key];

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

        return [__dictionary objectsForKeys:keys notFoundMarker:anObject];
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (void)removeAllObjects {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)removeObjectForKey:(id<NSCopying>)key")

        if ([self _removeObjectForKey:key]) [self stateOK];
    }
    - (void)removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)removeObjectsForKeys:(NSArray*)keys")

        if ([self _removeObjectsForKeys:keys]) [self stateOK];
    }
    - (void)set__dictionaryObjectKeys:(NSMutableDictionary *)v {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)set__dictionaryObjectKeys:(NSMutableDictionary*)v")

        /*i-905*/ if (__dictionaryObjectKeys == v) return;

        /*i-900*/ {
            __dictionaryObjectKeys = (id)v;
        }
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setDictionary:(NSDictionary *)dictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)setDictionary:(NSDictionary*)dictionary")

        if ([self _setDictionary:dictionary]) [self stateOK];
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)setObject:(id)object forKey:(id<NSCopying>)key")

        if ([self _setObject:object forKey:key]) [self stateOK];
    }
    - (void)setValue:(id)object forKey:(NSString *)key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)setValue:(id)object forKey:(NSString*)key")

        if ([self _setValue:object forKey:key]) [self stateOK];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setDictionary:__dictionary.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setDictionary:__dictionary.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("MutableDictionaryMirrorTesterImpl:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ if (__addingToMirrorDictionary) [self passFail:NO format:@"!!!dkt adding when state ok\n"];
        if (__removingFromMirrorDictionary) [self passFail:NO format:@"!!!dkt removing when state ok\n"];
        [self verifyMirrorDictionary];



        dictionary_count = 0;
        for (id k in __dictionary) {
            dictionary_objects.keyvals[dictionary_count].key = (__bridge void *)k;
            dictionary_objects.keyvals[dictionary_count++].value = (__bridge void *)[__dictionary objectForKey:k];
            if (dictionary_count == 100) break;
        }
        memset( dictionary_objects.keyvals + dictionary_count,0,sizeof(dictionary_objects.keyvals[0]) * (100 - dictionary_count) );
        dictionary_count = __dictionary.count;



        /*i100*/ [dictionaryDelegate stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(id)valueForKey:(NSString*)key")
        return [__dictionary valueForKey:key];
    }
    - (void)verifyMirrorDictionary {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)verifyMirrorDictionary")

        Int c = 0;
        for (id<NSCopying> key in __dictionaryObjectKeys) {
            c += ( (NSSet *)[__dictionaryObjectKeys objectForKey:key] ).count;
        }
        if (c != __dictionary.count) [self passFail:NO format:@"!!!dkt count mismatch\n"];
        else
            for (id<NSCopying> key in __dictionary) {
                NSObject *object = [__dictionary objectForKey:key];
                NSSet *keys = [__dictionaryObjectKeys objectForKey:(id < NSCopying >)object];
                if (!keys) [self passFail:NO format:@"!!!dkt Object not known\n"];
                if (![keys containsObject:key]) [self passFail:NO format:@"!!!dkt Key doesn't exist\n"];
            }
    }
    - (CollectionWeakness)weakness {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")




        /*i100*/ if (fromObject) {
            [self add:1 toWillRemoveCountForObject:fromObject];
            __removingFromMirrorDictionary++;
        }

        if (toObject) {
            __addingToMirrorDictionary++;
            [self add:1 toWillAddCountForObject:toObject];
        }
        [dictionaryDelegate willReplaceObject:fromObject withObject:toObject forKey:key];

        /*i950*/ if (fromObject) {
            NSMutableSet *keys = [__dictionaryObjectKeys objectForKey:(id < NSCopying >)fromObject];
            if (!keys)
                [self passFail:NO format:@"!!!dk Object not known\n"];
            if (![keys containsObject:key])
                [self passFail:NO format:@"!!!dk Key doesn't exist\n"];
            if (keys.count == 1) [__dictionaryObjectKeys removeObjectForKey:(id < NSCopying >)fromObject];
            else [keys removeObject:key];
        }
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [__dictionary writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("MutableDictionaryMirrorTesterImpl:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [__dictionary writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableDictionaryPrefixedKeyDelegate
    #define _WIClass_           MutableDictionaryPrefixedKeyDelegate__
    #define _className_         mutableDictionaryPrefixedKeyDelegate
    #define _Class_             MutableDictionaryPrefixedKeyDelegate__
    @implementation MutableDictionaryPrefixedKeyDelegate

    - (void)_startObjectOfClassMutableDictionaryPrefixedKeyDelegate {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(void)_startObjectOfClassMutableDictionaryPrefixedKeyDelegate")
    }
    - (void)dealloc {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ keyPrefix = nil;

        filterKeyPrefix = nil;
/*i999*/}
    - (void)die {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(void)die")

        /*i900*/[super die];
    }
    - (NSString *)filterKeyPrefix {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(NSString*)filterKeyPrefix")
        return filterKeyPrefix;
    }
    - (Int)keepKeyPrefixSuffixLength {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(Int)keepKeyPrefixSuffixLength")
        return keepKeyPrefixSuffixLength;
    }
    - (id<NSCopying> )keyForObject:(id)object key:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(id<NSCopying>)keyForObject:(id)object key:(id<NSCopying>)key")

        if (![(NSObject *)key isKindOfClass :[NSString class]]) return nil;

        NSString *skey = (NSString *)key;
        if (filterKeyPrefix) {
            if (![skey hasPrefix:filterKeyPrefix]) return skey;

            skey = [skey substringFromIndex:filterKeyPrefix.length];
            if ([skey hasPrefix:filterKeyPrefix]) return skey;

            if (!keyPrefix) return skey;

            if ([skey hasPrefix:keyPrefix]) return [skey substringFromIndex:(keyPrefix.length > keepKeyPrefixSuffixLength ? keyPrefix.length - keepKeyPrefixSuffixLength : 0)];

            return nil;
        }
        if (!keyPrefix) return skey;

        if ([skey hasPrefix:keyPrefix]) return [skey substringFromIndex:(keyPrefix.length > keepKeyPrefixSuffixLength ? keyPrefix.length - keepKeyPrefixSuffixLength : 0)];

        return nil;
    }
    - (NSString *)keyPrefix {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(NSString*)keyPrefix")
        return keyPrefix;
    }
    - (void)setFilterKeyPrefix:(NSString *)v {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(void)setFilterKeyPrefix:(NSString*)v")

        filterKeyPrefix = v;
        [self refreshFollowerDictionary];
    }
    - (void)setKeepKeyPrefixSuffixLength:(Int)v {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(void)setKeepKeyPrefixSuffixLength:(Int)v")

        keepKeyPrefixSuffixLength = v;
        [self refreshFollowerDictionary];
    }
    - (void)setKeyPrefix:(NSString *)v {
        MSGSTART("MutableDictionaryPrefixedKeyDelegate:-(void)setKeyPrefix:(NSString*)v")

        keyPrefix = v;
        [self refreshFollowerDictionary];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableDictionaryUnionDelegate
    #define _WIClass_           MutableDictionaryUnionDelegate__
    #define _className_         mutableDictionaryUnionDelegate
    #define _Class_             MutableDictionaryUnionDelegate__
    @implementation MutableDictionaryUnionDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableDictionaryUnionDelegate {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)_startObjectOfClassMutableDictionaryUnionDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ mapdicts = ([[NSMutableArray alloc] init]);
        /*ivar*/ ocounts = ([[NSMutableDictionary alloc] init]);

        /*i0*/}
    - (NSMutableArray *)__mapdicts {
        MSGSTART("MutableDictionaryUnionDelegate:-(NSMutableArray*)__mapdicts")

        /*i-999*/ NSMutableArray * ret = mapdicts;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__ocounts {
        MSGSTART("MutableDictionaryUnionDelegate:-(NSMutableDictionary*)__ocounts")

        /*i-999*/ NSMutableDictionary * ret = ocounts;
        /*i999*/ return ret;
    }
    - (void)_refreshUnionDictionary {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)_refreshUnionDictionary")

        for (MutableDictionary *d in mapdicts) {
            for (NSObject<MutableDictionaryDelegate> *del = d.dictionaryDelegate; del; del = del.dictionaryDelegate) {
                if ( [del isKindOfClass:[MutableDictionaryUnionDelegate1 class]] && ( ( (MutableDictionaryUnionDelegate1 *)del ).owner == self ) ) {
                    [d removeDelegate:del];
                    break;
                }
            }
        }
        [mapdicts removeAllObjects];

        [unionDictionary _removeAllObjects];
        Unsigned index = 0;
        for (NSObject *object in self.delegateForArray) {
            [self unionWillAddObject:object withIndex:index++];
        }
    }
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)allObjectsMoved {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)allObjectsMoved")

        [self _refreshUnionDictionary];



        /*i100*/ [arrayDelegate allObjectsMoved];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("MutableDictionaryUnionDelegate:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    - (constchar *)cdescription {
        MSGSTART("MutableDictionaryUnionDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableDictionaryUnionDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ unionDictionary = nil;

        mapdicts = nil;

        ocounts = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("MutableDictionaryUnionDelegate:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableDictionaryUnionDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSObject<MutableDictionary> *)dictionaryForObject:(id)object {
        MSGSTART("MutableDictionaryUnionDelegate:-(NSObject<MutableDictionary>*)dictionaryForObject:(id)object")

        /*i-999*/ NSObject<MutableDictionary> *ret = ([object conformsToProtocol:@protocol(MutableDictionary)] ? (NSObject<MutableDictionary> *)object : nil);

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)didAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate didAddObject : object withIndex : index];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)didRemoveObject:(id)object")


        /*i100*/[arrayDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)die")

        /*i900*/}
    + (MutableDictionaryUnionDelegate *)get {
        MSGSTART("MutableDictionaryUnionDelegate:+(MutableDictionaryUnionDelegate*)get")
        return [[MutableDictionaryUnionDelegate alloc] init];
    }
    - (MutableDictionaryUnionDelegate *)init {
        MSGSTART("MutableDictionaryUnionDelegate:-(MutableDictionaryUnionDelegate*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassMutableDictionaryUnionDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableDictionaryUnionDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")




        /*i100*/[arrayDelegate objectsMovedFromRange : fromRange toLocation : toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")

        if (fromIndex != toIndex) {
            MutableDictionary *fromd = [mapdicts objectAtIndex:fromIndex];
            MutableDictionary *tod = [mapdicts objectAtIndex:toIndex];
            for (kid key in fromd) {
                [self unionWillReplaceObject1:[fromd objectForKey:key] withObject:nil forKey:key depth:fromIndex];
            }
            [mapdicts removeObjectAtIndex:fromIndex];
            if (toIndex > fromIndex) toIndex--;
            for (kid key in tod) {
                [self unionWillReplaceObject1:[tod objectForKey:key] withObject:nil forKey:key depth:toIndex - (toIndex > fromIndex ? 1 : 0)];
            }
            [mapdicts replaceObjectAtIndex:toIndex - (toIndex > fromIndex ? 1 : 0) withObject:fromd];
            for (kid key in fromd) {
                [self unionWillReplaceObject1:nil withObject:[fromd objectForKey:key] forKey:key depth:toIndex - (toIndex > fromIndex ? 1 : 0)];
            }
            [mapdicts insertObject:tod atIndex:fromIndex];
            for (kid key in tod) {
                [self unionWillReplaceObject1:nil withObject:[tod objectForKey:key] forKey:key depth:fromIndex];
            }
        }



        /*i100*/ [arrayDelegate objectsSwappedWithIndex:fromIndex andIndex:toIndex];
    }
    - (void)refreshUnionDictionary {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)refreshUnionDictionary")

        [self _refreshUnionDictionary];
        [unionDictionary stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    - (void)setUnionDictionary:(NSObject<MutableDictionary> *)v {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)setUnionDictionary:(NSObject<MutableDictionary>*)v")
        unionDictionary = v; [self refreshUnionDictionary];
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)setWithDictionary:(NSDictionary*)d")
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableDictionaryUnionDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)stateOK")



        /*i100*/[unionDictionary stateOK];
        [arrayDelegate stateOK];
    }
    - (NSObject<MutableDictionary> *)unionDictionary {
        MSGSTART("MutableDictionaryUnionDelegate:-(NSObject<MutableDictionary>*)unionDictionary")
        return unionDictionary;
    }
    - (void)unionWillAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)unionWillAddObject:(id)object withIndex:(Unsigned)index")

        NSObject<MutableDictionary> *d = [self dictionaryForObject:object];
        if (d) {
            [d addDelegate:[[MutableDictionaryUnionDelegate1 alloc] initWithOwner:self depth:index]];
            [mapdicts insertObject:d atIndex:index];
            for (kid key in d) {
                [self unionWillReplaceObject1:nil withObject:[d objectForKey:key] forKey:key depth:index];
            }
        }
    }
    - (void)unionWillReplaceObject1:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key depth:(Unsigned)index {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)unionWillReplaceObject1:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key depth:(Unsigned)index")

        if (fromObject) {
            Unsigned i = 0;
            id newo = nil;
            for (MutableDictionary *d in mapdicts) {
                if ( (i < index) && [d objectForKey:key] ) {
                    fromObject = nil; break;
                }
                else if ( (i++ > index) && ( (newo = [d objectForKey:key]) ) ) {
                    break;
                }
            }
            if (fromObject) {
                if (newo) [unionDictionary _setObject:newo forKey:key];
                else [unionDictionary _removeObjectForKey:key];
            }
        }
        if (toObject) {
            Unsigned i = 0;
            for (MutableDictionary *d in mapdicts) {
                if (i++ == index) {
                    [unionDictionary _setObject:toObject forKey:key];
                    break;
                }
                else if ([d objectForKey:key]) {
                    break;
                }
            }
        }
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)willAddObject:(id)object withIndex:(Unsigned)index")



        /*i100*/[arrayDelegate willAddObject : object withIndex : index];

/*i500*/ if (object)
            [self unionWillAddObject:object withIndex:index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")



        /*i100*/[arrayDelegate willRemoveObject : object fromIndex : index];

/*i500*/ if (object) {
            MutableDictionary *d = [mapdicts objectAtIndex:index];
            if (d) {
                for (kid key in d) {
                    [self unionWillReplaceObject1:[d objectForKey:key] withObject:nil forKey:key depth:index];
                }
                for (NSObject<MutableDictionaryDelegate> *del = d.dictionaryDelegate; del; del = del.dictionaryDelegate) {
                    if ( [del isKindOfClass:[MutableDictionaryUnionDelegate1 class]] && ( ( (MutableDictionaryUnionDelegate1 *)del ).owner == self ) ) {
                        [d removeDelegate:del];
                        break;
                    }
                }
                [mapdicts removeObjectAtIndex:index];
            }
        }
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("MutableDictionaryUnionDelegate:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableDictionaryUnionDelegate1
    #define _WIClass_           MutableDictionaryUnionDelegate1__
    #define _className_         mutableDictionaryUnionDelegate1
    #define _Class_             MutableDictionaryUnionDelegate1__
    @implementation MutableDictionaryUnionDelegate1

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize depth = depth;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableDictionaryUnionDelegate1 {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)_startObjectOfClassMutableDictionaryUnionDelegate1")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("MutableDictionaryUnionDelegate1:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableDictionaryUnionDelegate1:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(owner,self); owner = nil;

        dictionaryDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("MutableDictionaryUnionDelegate1:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)delegateForDictionaryChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableDictionaryUnionDelegate1:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("MutableDictionaryUnionDelegate1:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")


        /*i100*/[dictionaryDelegate didReplaceObject : fromObject withObject : toObject forKey : key];
    }
    - (void)die {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)die")

        /*i900*/}
    - (MutableDictionaryUnionDelegate1 *)initWithOwner:(MutableDictionaryUnionDelegate *)aowner depth:(Unsigned)adepth {
        MSGSTART("MutableDictionaryUnionDelegate1:-(MutableDictionaryUnionDelegate1*)initWithOwner:(MutableDictionaryUnionDelegate*)aowner depth:(Unsigned)adepth")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ owner = aowner; depth = adepth;

        /*i11*/ [self _startObjectOfClassMutableDictionaryUnionDelegate1];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableDictionaryUnionDelegate1:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (MutableDictionaryUnionDelegate *)owner {
        MSGSTART("MutableDictionaryUnionDelegate1:-(MutableDictionaryUnionDelegate*)owner")

        /*i-999*/ MutableDictionaryUnionDelegate * ret = owner;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setOwner:(MutableDictionaryUnionDelegate *)v {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)setOwner:(MutableDictionaryUnionDelegate*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_MutableDictionaryUnionDelegate1) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(owner=\"blah\") to set the property)");

        /*i-905*/ if (owner == v) return;

        /*i-900*/ {
            owner = (id)v;
        }
/*i-850*/ REMOVEOWNER(owner,self); ADDOWNER(v,self);
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("MutableDictionaryUnionDelegate1:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)stateOK")

        [self.owner stateOK];



        /*i100*/ [dictionaryDelegate stateOK];
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("MutableDictionaryUnionDelegate1:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")



        /*i100*/[dictionaryDelegate willReplaceObject : fromObject withObject : toObject forKey : key];

/*i500*/ [self.owner unionWillReplaceObject1:fromObject withObject:toObject forKey:key depth:depth];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: w





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WeakMutableDictionaryMirrorTesterImpl
    #define _WIClass_           WeakMutableDictionaryMirrorTesterImpl__
    #define _className_         weakMutableDictionaryMirrorTesterImpl
    #define _Class_             WeakMutableDictionaryMirrorTesterImpl__
    @implementation WeakMutableDictionaryMirrorTesterImpl

    @synthesize __addingToMirrorDictionary = __addingToMirrorDictionary;
    @synthesize __owner_context = __owner_context;
    @synthesize __removingFromMirrorDictionary = __removingFromMirrorDictionary;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize dictionary_count = dictionary_count;
    @synthesize dictionary_objects = dictionary_objects;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassWeakMutableDictionaryMirrorTesterImpl {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)_startObjectOfClassWeakMutableDictionaryMirrorTesterImpl")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ version = (1);
        /*ivar*/ __dictionaryObjectKeys = ([NSMutableDictionary dictionary]);
        /*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ insertsWeakObjectsByDefault = (YES);

        /*i0*/ self.delegateForDictionary = self;
    }
    - (NSDictionary *)__dictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSDictionary*)__dictionary")

        /*i-999*/ NSDictionary * ret = __dictionary;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__dictionaryObjectKeys {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSMutableDictionary*)__dictionaryObjectKeys")

        /*i-999*/ NSMutableDictionary * ret = __dictionaryObjectKeys;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__mutableDictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSMutableDictionary*)__mutableDictionary")

        /*i-999*/ NSMutableDictionary * ret = __mutableDictionary;
        /*i999*/ return ret;
    }
    - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(bool)_addEntriesFromDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        for (id<NSCopying> key in dictionary) {
            if ([self _setObject:[dictionary objectForKey:key] forKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(bool)_removeAllObjects")

        if (!__dictionary.count) return NO;

        NSDictionary *was = __dictionary.copy;
        for (id<NSCopying> key in was) {
            [self willReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        weakObjectCount = 0;
        [__mutableDictionary removeAllObjects];
        for (id<NSCopying> key in was) {
            [self didReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        return YES;
    }
    - (bool)_removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(bool)_removeObjectForKey:(id<NSCopying>)key")

        NSObject * object = [__dictionary objectForKey:key];
        if (!object) return NO;

        [self willReplaceObject:object withObject:nil forKey:key];
        if ([object isWeakSelf]) --weakObjectCount;
        [__mutableDictionary removeObjectForKey:key];
        [self didReplaceObject:object withObject:nil forKey:key];
        return YES;
    }
    - (bool)_removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(bool)_removeObjectsForKeys:(NSArray*)keys")

        bool ret = NO;
        for (id<NSCopying> key in keys) {
            if ([self _removeObjectForKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_setDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(bool)_setDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        NSMutableArray *toRemove = nil;
        for (id<NSCopying> key in __dictionary) {
            if (![dictionary objectForKey:key]) {
                if (!toRemove) toRemove = [[MutableArray alloc] initWithCapacity:dictionary.count];
                [toRemove addObject:key];
            }
        }
        if (toRemove) {
            ret = YES;
            for (id<NSCopying> key in toRemove) {
                [self _removeObjectForKey:key];
            }
        }
        if ([self _addEntriesFromDictionary:dictionary]) ret = YES;
        return ret;
    }
    - (bool)_setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(bool)_setObject:(id)object forKey:(id<NSCopying>)key")

        if (!object) return [self _removeObjectForKey:key];

        id was = [__dictionary objectForKey:key];
        if (was == object) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (bool)_setValue:(id)object forKey:(NSString *)key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(bool)_setValue:(id)object forKey:(NSString*)key")

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        id was = [__dictionary valueForKey:key];
        if (was == object) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (void)add:(Int)c toWillAddCountForObject:(id)object {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)add:(Int)c toWillAddCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didAdd];
            else if (c == 1) [o willAdd];
        }
    }
    - (void)add:(Int)c toWillRemoveCountForObject:(id)object {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)add:(Int)c toWillRemoveCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didRemove];
            else if (c == 1) [o willRemove];
        }
    }
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (void)addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)addEntriesFromDictionary:(NSDictionary*)dictionary")

        if ([self _addEntriesFromDictionary:dictionary]) [self stateOK];
    }
    - (NSArray *)allKeys {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSArray*)allKeys")
        return [__dictionary allKeys];
    }
    - (NSArray *)allKeysForObject:(id)object {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSArray*)allKeysForObject:(id)object")
        return [__dictionary allKeysForObject:object];
    }
    - (NSArray *)allValues {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSArray*)allValues")
        return [__dictionary allValues];
    }
    - (constchar *)cdescription {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (Unsigned)count {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(Unsigned)count")
        return [__dictionary count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        Unsigned ret = [__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
        return ret;
    }
    - (void)countWeakObjects {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)countWeakObjects")

        Int c = 0;
        for (kid o in __dictionary) {
            if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ __mutableDictionary = nil;

        __dictionaryObjectKeys = nil;

        v_errs = nil;

        dictionaryDelegate = nil;

        __dictionary = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)delegateForDictionaryChanged")
    }
    - (NSString *)description {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__dictionary description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionInStringsFileFormat {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSString*)descriptionInStringsFileFormat")
        return [__dictionary descriptionInStringsFileFormat];
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSString *)descriptionWithLocale:(id)locale")

        return [__dictionary descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [__dictionary descriptionWithLocale:locale indent:level];
    }
    + (WeakMutableDictionaryMirrorTesterImpl *)dictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:+(WeakMutableDictionaryMirrorTesterImpl*)dictionary")
        return [[WeakMutableDictionaryMirrorTesterImpl alloc] init];
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    + (id)dictionaryWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:+(id)dictionaryWithCapacity:(Unsigned)numItems")

        return [[WeakMutableDictionaryMirrorTesterImpl alloc] initWithCapacity:numItems];
    }
    + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithContentsOfFile:(NSString *)file {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:+(WeakMutableDictionaryMirrorTesterImpl*)dictionaryWithContentsOfFile:(NSString*)file")
        return [[WeakMutableDictionaryMirrorTesterImpl alloc] initWithContentsOfFile:file];
    }
    + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithContentsOfURL:(NSURL *)url {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:+(WeakMutableDictionaryMirrorTesterImpl*)dictionaryWithContentsOfURL:(NSURL*)url")
        return [[WeakMutableDictionaryMirrorTesterImpl alloc] initWithContentsOfURL:url];
    }
    + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:+(WeakMutableDictionaryMirrorTesterImpl*)dictionaryWithDictionary:(NSDictionary*)dictionary")
        return [[WeakMutableDictionaryMirrorTesterImpl alloc] initWithDictionary:dictionary];
    }
    + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:+(WeakMutableDictionaryMirrorTesterImpl*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
        return [[WeakMutableDictionaryMirrorTesterImpl alloc] initWithObjects:&object forKeys:&key count:1];
    }
    + (WeakMutableDictionaryMirrorTesterImpl *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:+(WeakMutableDictionaryMirrorTesterImpl*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
        return [[WeakMutableDictionaryMirrorTesterImpl alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        /*i-950*/ if (toObject) {
            NSMutableSet *keys = [__dictionaryObjectKeys objectForKey:(id < NSCopying >)toObject];
            if (!keys) [__dictionaryObjectKeys setObject:keys = [MutableSet set] forWeakKey:toObject];
            else if ([keys containsObject:key]) [self passFail:NO format:@"!!!dk Key exists\n"];
            [keys addObject:key];
        }

        /*i100*/ [dictionaryDelegate didReplaceObject:fromObject withObject:toObject forKey:key];

        if (toObject) {
            if (!__addingToMirrorDictionary) [self passFail:NO format:@"!!!dkt did add while not adding\n"];
            [self add:-1 toWillAddCountForObject:toObject];
            __addingToMirrorDictionary--;
        }
        if (fromObject) {
            if (!__removingFromMirrorDictionary) [self passFail:NO format:@"!!!dkt did remove while not removing\n"];
            [self add:-1 toWillRemoveCountForObject:fromObject];
            __removingFromMirrorDictionary--;
        }
    }
    - (void)die {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)encodeWithCoder:(NSCoder*)coder")

        [__dictionary encodeWithCoder : coder];
    }
    - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsUsingBlock : block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsWithOptions : opts usingBlock : block];
    }
    - (NSMutableString *)errs {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (NSDate *)fileCreationDate {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSDate*)fileCreationDate")
        return [__dictionary fileCreationDate];
    }
    - (BOOL)fileExtensionHidden {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(BOOL)fileExtensionHidden")
        return [__dictionary fileExtensionHidden];
    }
    - (NSNumber *)fileGroupOwnerAccountID {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSNumber*)fileGroupOwnerAccountID")
        return [__dictionary fileGroupOwnerAccountID];
    }
    - (NSString *)fileGroupOwnerAccountName {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSString*)fileGroupOwnerAccountName")
        return [__dictionary fileGroupOwnerAccountName];
    }
    - (OSType)fileHFSCreatorCode {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(OSType)fileHFSCreatorCode")
        return [__dictionary fileHFSCreatorCode];
    }
    - (OSType)fileHFSTypeCode {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(OSType)fileHFSTypeCode")
        return [__dictionary fileHFSTypeCode];
    }
    - (BOOL)fileIsAppendOnly {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(BOOL)fileIsAppendOnly")
        return [__dictionary fileIsAppendOnly];
    }
    - (BOOL)fileIsImmutable {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(BOOL)fileIsImmutable")
        return [__dictionary fileIsImmutable];
    }
    - (NSDate *)fileModificationDate {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSDate*)fileModificationDate")
        return [__dictionary fileModificationDate];
    }
    - (NSNumber *)fileOwnerAccountID {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSNumber*)fileOwnerAccountID")
        return [__dictionary fileOwnerAccountID];
    }
    - (NSString *)fileOwnerAccountName {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSString*)fileOwnerAccountName")
        return [__dictionary fileOwnerAccountName];
    }
    - (Unsigned)filePosixPermissions {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(Unsigned)filePosixPermissions")
        return [__dictionary filePosixPermissions];
    }
    - (ULL)fileSize {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(ULL)fileSize")
        return [__dictionary fileSize];
    }
    - (Unsigned)fileSystemFileNumber {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(Unsigned)fileSystemFileNumber")
        return [__dictionary fileSystemFileNumber];
    }
    - (Int)fileSystemNumber {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(Int)fileSystemNumber")
        return [__dictionary fileSystemNumber];
    }
    - (NSString *)fileType {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSString*)fileType")
        return [__dictionary fileType];
    }
    - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

        [__dictionary getObjects : objects andKeys : keys];
    }
    - (Unsigned)hash {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (WeakMutableDictionaryMirrorTesterImpl *)init {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(WeakMutableDictionaryMirrorTesterImpl*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassWeakMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableDictionaryMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(WeakMutableDictionaryMirrorTesterImpl*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassWeakMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableDictionaryMirrorTesterImpl *)initWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(WeakMutableDictionaryMirrorTesterImpl*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableDictionaryMirrorTesterImpl *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(WeakMutableDictionaryMirrorTesterImpl*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableDictionaryMirrorTesterImpl *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(WeakMutableDictionaryMirrorTesterImpl*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableDictionaryMirrorTesterImpl *)initWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(WeakMutableDictionaryMirrorTesterImpl*)initWithDictionary:(NSDictionary*)dictionary")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableDictionaryMirrorTesterImpl *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(WeakMutableDictionaryMirrorTesterImpl*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableDictionaryMirrorTesterImpl *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(WeakMutableDictionaryMirrorTesterImpl*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableDictionaryMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
        return [__dictionary isEqualToDictionary:dictionary];
    }
    - (NSEnumerator *)keyEnumerator {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSEnumerator*)keyEnumerator")
        return [__dictionary keyEnumerator];
    }
    - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesPassingTest:predicate];
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesWithOptions:opts passingTest:predicate];
    }
    - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueUsingComparator:cmptr];
    }
    - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

        return [__dictionary keysSortedByValueUsingSelector:selector];
    }
    - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSEnumerator*)objectEnumerator")
        return [__dictionary objectEnumerator];
    }
    - (id)objectForKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(id)objectForKey:(id<NSCopying>)key")

        /*i-10*/ id ret = [__dictionary objectForKey:key];

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

        return [__dictionary objectsForKeys:keys notFoundMarker:anObject];
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (void)removeAllObjects {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)removeObjectForKey:(id<NSCopying>)key")

        if ([self _removeObjectForKey:key]) [self stateOK];
    }
    - (void)removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)removeObjectsForKeys:(NSArray*)keys")

        if ([self _removeObjectsForKeys:keys]) [self stateOK];
    }
    - (void)set__dictionaryObjectKeys:(NSMutableDictionary *)v {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)set__dictionaryObjectKeys:(NSMutableDictionary*)v")

        /*i-905*/ if (__dictionaryObjectKeys == v) return;

        /*i-900*/ {
            __dictionaryObjectKeys = (id)v;
        }
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setDictionary:(NSDictionary *)dictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)setDictionary:(NSDictionary*)dictionary")

        if ([self _setDictionary:dictionary]) [self stateOK];
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)setObject:(id)object forKey:(id<NSCopying>)key")

        if ([self _setObject:object forKey:key]) [self stateOK];
    }
    - (void)setValue:(id)object forKey:(NSString *)key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)setValue:(id)object forKey:(NSString*)key")

        if ([self _setValue:object forKey:key]) [self stateOK];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setDictionary:__dictionary.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setDictionary:__dictionary.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ dictionary_count = 0;
        for (id k in __dictionary) {
            dictionary_objects.keyvals[dictionary_count].key = (__bridge void *)k;
            dictionary_objects.keyvals[dictionary_count++].value = (__bridge void *)[__dictionary objectForKey:k];
            if (dictionary_count == 100) break;
        }
        memset( dictionary_objects.keyvals + dictionary_count,0,sizeof(dictionary_objects.keyvals[0]) * (100 - dictionary_count) );
        dictionary_count = __dictionary.count;




        if (__addingToMirrorDictionary) [self passFail:NO format:@"!!!dkt adding when state ok\n"];
        if (__removingFromMirrorDictionary) [self passFail:NO format:@"!!!dkt removing when state ok\n"];
        [self verifyMirrorDictionary];

        /*i100*/ [dictionaryDelegate stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(id)valueForKey:(NSString*)key")
        return [__dictionary valueForKey:key];
    }
    - (void)verifyMirrorDictionary {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)verifyMirrorDictionary")

        Int c = 0;
        for (id<NSCopying> key in __dictionaryObjectKeys) {
            c += ( (NSSet *)[__dictionaryObjectKeys objectForKey:key] ).count;
        }
        if (c != __dictionary.count) [self passFail:NO format:@"!!!dkt count mismatch\n"];
        else
            for (id<NSCopying> key in __dictionary) {
                NSObject *object = [__dictionary objectForKey:key];
                NSSet *keys = [__dictionaryObjectKeys objectForKey:(id < NSCopying >)object];
                if (!keys) [self passFail:NO format:@"!!!dkt Object not known\n"];
                if (![keys containsObject:key]) [self passFail:NO format:@"!!!dkt Key doesn't exist\n"];
            }
    }
    - (CollectionWeakness)weakness {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")




        /*i100*/[dictionaryDelegate willReplaceObject : fromObject withObject : toObject forKey : key];

        if (fromObject) {
            [self add:1 toWillRemoveCountForObject:fromObject];
            __removingFromMirrorDictionary++;
        }

        if (toObject) {
            __addingToMirrorDictionary++;
            [self add:1 toWillAddCountForObject:toObject];
        }

/*i950*/ if (fromObject) {
            NSMutableSet *keys = [__dictionaryObjectKeys objectForKey:(id < NSCopying >)fromObject];
            if (!keys)
                [self passFail:NO format:@"!!!dk Object not known\n"];
            if (![keys containsObject:key])
                [self passFail:NO format:@"!!!dk Key doesn't exist\n"];
            if (keys.count == 1) [__dictionaryObjectKeys removeObjectForKey:(id < NSCopying >)fromObject];
            else [keys removeObject:key];
        }
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [__dictionary writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("WeakMutableDictionaryMirrorTesterImpl:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [__dictionary writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
