// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 2 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D2





        @interface Endpoint1 : NSObject<ClassObject, LinkEndpoint, Object, ValueLinkEndpoint> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_Endpoint1; @protected
            SEL acceptableSel;
            bool debugAutorelease;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            SEL otherEndObjectToEndpoint;
            id owner;
            NSObject<MutableValueDelegate> *parentValueDelegate;
            bool retains;
            bool retainsAsValueDelegate;
            id v_value;
            id v_value_strong;
            NSObject<MutableValueDelegate> *valueDelegate;
            NSObject<MutableValueDelegate> *valueDelegate_strong;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) SEL acceptableSel;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) SEL otherEndObjectToEndpoint;
        @property (strong,nonatomic,readonly) id owner;
        @property (weak,nonatomic,readwrite) NSObject<MutableValueDelegate> *parentValueDelegate;
        @property (nonatomic,readonly) bool retains;
        @property (nonatomic,readwrite) bool retainsAsValueDelegate;
        @property (weak,nonatomic,readwrite) id value;
        @property (strong,nonatomic,readwrite,strong) id value_strong;
        @property (weak,nonatomic,readwrite) NSObject<MutableValueDelegate> *valueDelegate;
        @property (strong,nonatomic,readwrite,strong) NSObject<MutableValueDelegate> *valueDelegate_strong;
        - (void)_startObjectOfClassEndpoint1;
        - (bool)_addReferrer:(NSObject<LinkEndpoint> *)ep;
        - (void)_removeReferrer:(NSObject<LinkEndpoint> *)ep;
        - (void)addDelegate:(NSObject<MutableValueDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)didSetValueTo:(id)object;
        - (void)die;
        - (NSObject<LinkEndpoint> *)endpointForObject:(id)obj;
        + (Endpoint1 *)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
        - (Endpoint1 *)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
        - (NSMutableString *)objectName;
        - (id)owner;
        - (NSObject<MutableValueDelegate> *)parentValueDelegate;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableValueDelegate> *)v;
        - (void)setParentValueDelegate:(NSObject<MutableValueDelegate> *)v;
        - (void)setValue:(id)v;
        - (void)setValue_strong:(id)v;
        - (void)setValueDelegate:(NSObject<MutableValueDelegate> *)v;
        - (void)setValueDelegate_strong:(NSObject<MutableValueDelegate> *)v;
        - (bool)unacceptable:(id)obj;
        - (void)unlinkValueDelegate;
        - (id)value;
        - (id)value_strong;
        - (NSObject<MutableValueDelegate> *)valueDelegate;
        - (NSObject<MutableValueDelegate> *)valueDelegate_strong;
        - (void)willChangeValueFrom:(id)fromObject to:(id)toObject;

        @end
    #endif // INCLUDE_IFACE_D2

    #ifdef INCLUDE_IFACE_D3





        @interface EndpointA : NSMutableArray<ArrayLinkEndpoint, ClassObject, LinkEndpoint, MutableArray, Object> {
            NSArray *__array;
            NSMutableDictionary *__arrayObjectIndexes;
            NSMutableArray *__mutableArray;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_EndpointA; @protected
            bool __restrictRef;
            SEL acceptableSel;
            Unsigned array_count;
            id100 array_objects;
            NSObject<MutableArrayDelegate> *arrayDelegate;
            bool debugAutorelease;
            NSArray *delegateForArray;
            NSMutableString *v_errs;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            SEL otherEndObjectToEndpoint;
            id owner;
            bool retains;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSArray *__array;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *__arrayObjectIndexes;
        @property (strong,nonatomic,readonly) NSMutableArray *__mutableArray;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) bool __restrictRef;
        @property (nonatomic,readonly) SEL acceptableSel;
        @property (nonatomic,readwrite) Unsigned array_count;
        @property (nonatomic,readwrite) id100 array_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableArrayDelegate> *arrayDelegate;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSArray *delegateForArray;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) id lastObject;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) SEL otherEndObjectToEndpoint;
        @property (strong,nonatomic,readonly) id owner;
        @property (nonatomic,readonly) bool retains;
        @property (nonatomic,readonly) NSEnumerator *reverseObjectEnumerator;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassEndpointA;
        - (NSArray *)__array;
        - (NSMutableDictionary *)__arrayObjectIndexes;
        - (NSMutableArray *)__mutableArray;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_addReferrer:(NSObject<LinkEndpoint> *)ep;
        - (bool)_insertObject:(id)object atIndex:(Unsigned)index;
        - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectAtIndex:(Unsigned)index;
        - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (void)_removeReferrer:(NSObject<LinkEndpoint> *)ep;
        - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (void)allObjectsMoved;
        + (EndpointA *)array;
        - (NSArray *)arrayByAddingObject:(id)object;
        - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array;
        - (NSObject<MutableArrayDelegate> *)arrayDelegate;
        + (EndpointA *)arrayWithArray:(NSArray *)array;
        + (id)arrayWithCapacity:(Unsigned)numItems;
        + (EndpointA *)arrayWithContentsOfFile:(NSString *)file;
        + (EndpointA *)arrayWithContentsOfURL:(NSURL *)url;
        + (EndpointA *)arrayWithObject:(id)object;
        + (EndpointA *)arrayWithObjects:(id *)objects count:(Unsigned)count;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (NSString *)componentsJoinedByString:(NSString *)separator;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSArray *)delegateForArray;
        - (void)delegateForArrayChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        - (void)didAddObject:(id)object withIndex:(Unsigned)index;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)doAddIndex:(Unsigned)index forObject:(id)object;
        - (void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object;
        - (void)doRemoveIndex:(Unsigned)index forObject:(id)object;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (NSObject<LinkEndpoint> *)endpointForObject:(id)obj;
        + (EndpointA *)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
        - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block;
        - (NSMutableString *)errs;
        - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi;
        - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (id)firstObjectCommonWithArray:(NSArray *)array;
        - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange;
        - (Unsigned)hash;
        - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp;
        - (Unsigned)indexOfObject:(id)object;
        - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object;
        - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range;
        - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate;
        - (EndpointA *)init;
        - (EndpointA *)initWithArray:(NSArray *)array;
        - (EndpointA *)initWithArray:(NSArray *)array copyItems:(BOOL)copy;
        - (EndpointA *)initWithCapacity:(Unsigned)numItems;
        - (EndpointA *)initWithCoder:(NSCoder *)coder;
        - (EndpointA *)initWithContentsOfFile:(NSString *)file;
        - (EndpointA *)initWithContentsOfURL:(NSURL *)url;
        - (EndpointA *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (EndpointA *)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
        - (void)insertObject:(id)object atIndex:(Unsigned)index;
        - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToArray:(NSArray *)array;
        - (id)lastObject;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (id)objectAtIndex:(Unsigned)index;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSArray *)objects;
        - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes;
        - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation;
        - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex;
        - (id)owner;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v;
        - (void)removeLastObject;
        - (void)removeObjectAtIndex:(Unsigned)index;
        - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context;
        - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object;
        - (NSEnumerator *)reverseObjectEnumerator;
        - (void)set__arrayObjectIndexes:(NSMutableDictionary *)v;
        - (void)setArray:(NSArray *)array;
        - (void)setDelegateForArray:(NSArray *)v;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSData *)sortedArrayHint;
        - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr;
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context;
        - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint;
        - (NSArray *)sortedArrayUsingSelector:(SEL)selector;
        - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)sortUsingComparator:(NSComparator)cmptr;
        - (void)sortUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context;
        - (void)sortUsingSelector:(SEL)selector;
        - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (void)stateOK;
        - (NSArray *)subarrayWithRange:(NSRange)r;
        - (bool)unacceptable:(id)obj;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object withIndex:(Unsigned)index;
        - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index;
        - (void)willRemoveObjectsWithCount:(Unsigned)count;
        - (void)willTryToAddObjectsWithCount:(Unsigned)count;
        - (void)wontAddObject:(id)object withIndex:(Unsigned)index;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface EndpointD : NSMutableDictionary<ClassObject, DictionaryLinkEndpoint, LinkEndpoint, MutableDictionary, Object> {
            NSDictionary *__dictionary;
            NSMutableDictionary *__dictionaryObjectKeys;
            NSMutableDictionary *__mutableDictionary;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_EndpointD; @protected
            bool __restrictRef;
            SEL acceptableSel;
            bool debugAutorelease;
            NSDictionary *delegateForDictionary;
            Unsigned dictionary_count;
            keyval100 dictionary_objects;
            NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
            NSMutableString *v_errs;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            SEL otherEndObjectToEndpoint;
            id owner;
            bool retains;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSDictionary *__dictionary;
        @property (strong,nonatomic,readwrite) NSMutableDictionary *__dictionaryObjectKeys;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__mutableDictionary;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) bool __restrictRef;
        @property (nonatomic,readonly) SEL acceptableSel;
        @property (nonatomic,readonly) NSArray *allKeys;
        @property (nonatomic,readonly) NSArray *allValues;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSDictionary *delegateForDictionary;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) NSString *descriptionInStringsFileFormat;
        @property (nonatomic,readwrite) Unsigned dictionary_count;
        @property (nonatomic,readwrite) keyval100 dictionary_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableDictionaryDelegate> *dictionaryDelegate;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readonly) NSDate *fileCreationDate;
        @property (nonatomic,readonly) BOOL fileExtensionHidden;
        @property (nonatomic,readonly) NSNumber *fileGroupOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileGroupOwnerAccountName;
        @property (nonatomic,readonly) OSType fileHFSCreatorCode;
        @property (nonatomic,readonly) OSType fileHFSTypeCode;
        @property (nonatomic,readonly) BOOL fileIsAppendOnly;
        @property (nonatomic,readonly) BOOL fileIsImmutable;
        @property (nonatomic,readonly) NSDate *fileModificationDate;
        @property (nonatomic,readonly) NSNumber *fileOwnerAccountID;
        @property (nonatomic,readonly) NSString *fileOwnerAccountName;
        @property (nonatomic,readonly) Unsigned filePosixPermissions;
        @property (nonatomic,readonly) ULL fileSize;
        @property (nonatomic,readonly) Unsigned fileSystemFileNumber;
        @property (nonatomic,readonly) Int fileSystemNumber;
        @property (nonatomic,readonly) NSString *fileType;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *keyEnumerator;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) SEL otherEndObjectToEndpoint;
        @property (strong,nonatomic,readonly) id owner;
        @property (nonatomic,readonly) bool retains;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassEndpointD;
        - (NSDictionary *)__dictionary;
        - (NSMutableDictionary *)__dictionaryObjectKeys;
        - (NSMutableDictionary *)__mutableDictionary;
        - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (bool)_addReferrer:(NSObject<LinkEndpoint> *)ep;
        - (bool)_removeAllObjects;
        - (bool)_removeObjectForKey:(id<NSCopying> )key;
        - (bool)_removeObjectsForKeys:(NSArray *)keys;
        - (void)_removeReferrer:(NSObject<LinkEndpoint> *)ep;
        - (bool)_setDictionary:(NSDictionary *)dictionary;
        - (bool)_setObject:(id)object forKey:(id<NSCopying> )key;
        - (bool)_setValue:(id)object forKey:(NSString *)key;
        - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)addEntriesFromDictionary:(NSDictionary *)dictionary;
        - (NSArray *)allKeys;
        - (NSArray *)allKeysForObject:(id)object;
        - (NSArray *)allValues;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSDictionary *)delegateForDictionary;
        - (void)delegateForDictionaryChanged;
        - (NSString *)description;
        - (NSString *)descriptionInStringsFileFormat;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level;
        + (EndpointD *)dictionary;
        - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate;
        + (id)dictionaryWithCapacity:(Unsigned)numItems;
        + (EndpointD *)dictionaryWithContentsOfFile:(NSString *)file;
        + (EndpointD *)dictionaryWithContentsOfURL:(NSURL *)url;
        + (EndpointD *)dictionaryWithDictionary:(NSDictionary *)dictionary;
        + (EndpointD *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key;
        + (EndpointD *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count;
        - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (NSObject<LinkEndpoint> *)endpointForObject:(id)obj;
        + (EndpointD *)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
        - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block;
        - (NSMutableString *)errs;
        - (NSDate *)fileCreationDate;
        - (BOOL)fileExtensionHidden;
        - (NSNumber *)fileGroupOwnerAccountID;
        - (NSString *)fileGroupOwnerAccountName;
        - (OSType)fileHFSCreatorCode;
        - (OSType)fileHFSTypeCode;
        - (BOOL)fileIsAppendOnly;
        - (BOOL)fileIsImmutable;
        - (NSDate *)fileModificationDate;
        - (NSNumber *)fileOwnerAccountID;
        - (NSString *)fileOwnerAccountName;
        - (Unsigned)filePosixPermissions;
        - (ULL)fileSize;
        - (Unsigned)fileSystemFileNumber;
        - (Int)fileSystemNumber;
        - (NSString *)fileType;
        - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys;
        - (Unsigned)hash;
        - (EndpointD *)init;
        - (EndpointD *)initWithCapacity:(Unsigned)numItems;
        - (EndpointD *)initWithCoder:(NSCoder *)coder;
        - (EndpointD *)initWithContentsOfFile:(NSString *)file;
        - (EndpointD *)initWithContentsOfURL:(NSURL *)url;
        - (EndpointD *)initWithDictionary:(NSDictionary *)dictionary;
        - (EndpointD *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy;
        - (EndpointD *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count;
        - (EndpointD *)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary;
        - (NSEnumerator *)keyEnumerator;
        - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate;
        - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr;
        - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector;
        - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (id)objectForKey:(id<NSCopying> )key;
        - (NSMutableString *)objectName;
        - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject;
        - (id)owner;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v;
        - (void)removeObjectForKey:(id<NSCopying> )key;
        - (void)removeObjectsForKeys:(NSArray *)keys;
        - (void)set__dictionaryObjectKeys:(NSMutableDictionary *)v;
        - (void)setDelegateForDictionary:(NSDictionary *)v;
        - (void)setDictionary:(NSDictionary *)dictionary;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setObject:(id)object forKey:(id<NSCopying> )key;
        - (void)setValue:(id)object forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (bool)unacceptable:(id)obj;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key;
        - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag;
        - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag;

        @end





        @interface EndpointS : NSMutableSet<ClassObject, LinkEndpoint, MutableSet, Object, SetLinkEndpoint> {
            NSMutableSet *__mutableSet;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_EndpointS; @protected
            bool __restrictRef;
            NSSet *__set;
            SEL acceptableSel;
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            SEL otherEndObjectToEndpoint;
            id owner;
            bool retains;
            bool retrievesWeakValues;
            Unsigned set_count;
            id100 set_objects;
            NSObject<MutableSetDelegate> *setDelegate;
            long version;
            Int weakObjectCount;
        }

        @property (strong,nonatomic,readonly) NSMutableSet *__mutableSet;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) bool __restrictRef;
        @property (strong,nonatomic,readonly) NSSet *__set;
        @property (nonatomic,readonly) SEL acceptableSel;
        @property (nonatomic,readonly) NSArray *allObjects;
        @property (nonatomic,readonly) id anyObject;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) SEL otherEndObjectToEndpoint;
        @property (strong,nonatomic,readonly) id owner;
        @property (nonatomic,readonly) bool retains;
        @property (nonatomic,readwrite) bool retrievesWeakValues;
        @property (nonatomic,readwrite) Unsigned set_count;
        @property (nonatomic,readwrite) id100 set_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassEndpointS;
        - (NSMutableSet *)__mutableSet;
        - (NSSet *)__set;
        - (bool)_addObject:(id)object;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_addReferrer:(NSObject<LinkEndpoint> *)ep;
        - (bool)_filterUsingPredicate:(NSPredicate *)predicate;
        - (bool)_intersectSet:(NSSet *)set;
        - (bool)_minusSet:(NSSet *)set;
        - (bool)_removeAllObjects;
        - (bool)_removeObject:(id)object;
        - (void)_removeReferrer:(NSObject<LinkEndpoint> *)ep;
        - (bool)_setSet:(NSSet *)set;
        - (bool)_unionSet:(NSSet *)set;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (NSArray *)allObjects;
        - (id)anyObject;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (NSObject<LinkEndpoint> *)endpointForObject:(id)obj;
        + (EndpointS *)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (NSMutableSet *)getAndClear;
        - (Unsigned)hash;
        - (EndpointS *)init;
        - (EndpointS *)initWithArray:(NSArray *)array;
        - (EndpointS *)initWithCapacity:(Unsigned)numItems;
        - (EndpointS *)initWithCoder:(NSCoder *)coder;
        - (EndpointS *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (EndpointS *)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint;
        - (EndpointS *)initWithSet:(NSSet *)set;
        - (EndpointS *)initWithSet:(NSSet *)set copyItems:(BOOL)copy;
        - (void)intersectSet:(NSSet *)set;
        - (BOOL)intersectsSet:(NSSet *)set;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToSet:(NSSet *)set;
        - (BOOL)isSubsetOfSet:(NSSet *)set;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)member:(id)object;
        - (void)minusSet:(NSSet *)set;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (id)owner;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)removeObject:(id)object;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        + (EndpointS *)set;
        - (NSSet *)setByAddingObject:(id)object;
        - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array;
        - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setSet:(NSSet *)set;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        + (EndpointS *)setWithArray:(NSArray *)array;
        + (id)setWithCapacity:(Unsigned)numItems;
        + (EndpointS *)setWithObject:(id)object;
        + (EndpointS *)setWithSet:(NSSet *)set;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)stateOK;
        - (bool)unacceptable:(id)obj;
        - (void)unionSet:(NSSet *)set;
        - (id)valueForKey:(NSString *)key;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end
    #endif // INCLUDE_IFACE_D3

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: e





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         Endpoint1
    #define _WIClass_           Endpoint1__
    #define _className_         endpoint1
    #define _Class_             Endpoint1__
    @implementation Endpoint1

    @synthesize __owner_context = __owner_context;
    @synthesize acceptableSel = acceptableSel;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize otherEndObjectToEndpoint = otherEndObjectToEndpoint;
    @synthesize retains = retains;
    @synthesize retainsAsValueDelegate = retainsAsValueDelegate;
    - (void)_startObjectOfClassEndpoint1 {
        MSGSTART("Endpoint1:-(void)_startObjectOfClassEndpoint1")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ retainsAsValueDelegate = (YES);

        /*i0*/}
    - (bool)_addReferrer:(NSObject<LinkEndpoint> *)ep {
        MSGSTART("Endpoint1:-(bool)_addReferrer:(NSObject<LinkEndpoint>*)ep")

        id v = ep.owner;
        if (!v) return NO;

        if (v_value == v) return YES;

        [self willChangeValueFrom:v_value to:v];
        if (v_value)
            [[self endpointForObject:v_value] _removeReferrer:self];
        v_value = v;
        v_value_strong = (retains ? v_value : nil);
        [self didSetValueTo:v];
        return YES;
    }
    - (void)_removeReferrer:(NSObject<LinkEndpoint> *)ep {
        MSGSTART("Endpoint1:-(void)_removeReferrer:(NSObject<LinkEndpoint>*)ep")

        id v = ep.owner;
        if ( v && (v == v_value) ) {
            [self willChangeValueFrom:v_value to:nil];
            v_value_strong = v_value = nil;
            [self didSetValueTo:nil];
        }
    }
    - (void)addDelegate:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("Endpoint1:-(void)addDelegate:(NSObject<MutableValueDelegate>*)v")

        if (v.valueDelegate) return;

        if (v == self) return;

        if (valueDelegate) {
            [valueDelegate addDelegate:v];
        }
        else {
            valueDelegate = v;
            if (v.retainsAsValueDelegate) valueDelegate_strong = v;
            valueDelegate.parentValueDelegate = self;
        }
    }
    - (constchar *)cdescription {
        MSGSTART("Endpoint1:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("Endpoint1:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("Endpoint1:-(void)dealloc")

        /*i-500*/[self unlinkValueDelegate];
/*i-151*/ [self die];
/*i0*/ valueDelegate_strong = nil;

        owner = nil;

        v_value_strong = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("Endpoint1:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didSetValueTo:(id)object {
        MSGSTART("Endpoint1:-(void)didSetValueTo:(id)object")


        /*i100*/[valueDelegate didSetValueTo : object];
    }
    - (void)die {
        MSGSTART("Endpoint1:-(void)die")

        /*i900*/}
    - (NSObject<LinkEndpoint> *)endpointForObject:(id)obj {
        MSGSTART("Endpoint1:-(NSObject<LinkEndpoint>*)endpointForObject:(id)obj")

        if (obj) return (NSObject<LinkEndpoint> *)[self.owner performUnknownSelector : otherEndObjectToEndpoint withObject : obj];
        else return nil;
    }
    + (Endpoint1 *)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint {
        MSGSTART("Endpoint1:+(Endpoint1*)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint")

        return (Endpoint1 *)[[Endpoint1 alloc] initWithOwner:aowner retains:aretains acceptableSel:aacceptableSel otherEndObjectToEndpoint:aotherEndObjectToEndpoint];
    }
    - (Endpoint1 *)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint {
        MSGSTART("Endpoint1:-(Endpoint1*)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-900*/ owner = aowner;
        retains = aretains;
        acceptableSel = aacceptableSel;
        otherEndObjectToEndpoint = aotherEndObjectToEndpoint;

        /*i11*/ [self _startObjectOfClassEndpoint1];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("Endpoint1:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (id)owner {
        MSGSTART("Endpoint1:-(id)owner")

        /*i-999*/ id ret = owner;
        /*i999*/ return ret;
    }
    - (NSObject<MutableValueDelegate> *)parentValueDelegate {
        MSGSTART("Endpoint1:-(NSObject<MutableValueDelegate>*)parentValueDelegate")

        /*i-999*/ NSObject<MutableValueDelegate> *ret = parentValueDelegate;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("Endpoint1:-(void)removedDelegate")
    }
    - (void)removeDelegate:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("Endpoint1:-(void)removeDelegate:(NSObject<MutableValueDelegate>*)v")

        if (valueDelegate) {
            if (valueDelegate == v) {
                v.parentValueDelegate = nil;

                if (v.valueDelegate) {
                    valueDelegate = v.valueDelegate;
                    v.valueDelegate = nil;
                    valueDelegate.parentValueDelegate = self;
                }
                else {
                    valueDelegate = nil;
                }
                v.parentValueDelegate = nil;

                [v removedDelegate];

                valueDelegate_strong = nil;
            }
            else {
                [valueDelegate removeDelegate:v];
            }
        }
    }
    - (void)setParentValueDelegate:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("Endpoint1:-(void)setParentValueDelegate:(NSObject<MutableValueDelegate>*)v")

        /*i-905*/ if (parentValueDelegate == v) return;

        /*i-900*/ {
            parentValueDelegate = (id)v;
        }
    }
    - (void)setValue:(id)v {
        MSGSTART("Endpoint1:-(void)setValue:(id)v")

        if ( (v_value == v) || (v && [self unacceptable:v]) ) return;

        [self willChangeValueFrom:v_value to:v];
        if (v_value)
            [[self endpointForObject:v_value] _removeReferrer:self];
        if ( (v_value = v) )
            if (![[self endpointForObject:v] _addReferrer:self])
                v_value = nil;
        v_value_strong = (retains ? v_value : nil);
        [self didSetValueTo:v];
    }
    - (void)setValue_strong:(id)v {
        MSGSTART("Endpoint1:-(void)setValue_strong:(id)v")

        if ( (v_value == v) || (v && [self unacceptable:v]) ) return;

        [self willChangeValueFrom:v_value to:v];
        if (v_value)
            [[self endpointForObject:v_value] _removeReferrer:self];
        if ( (v_value = v) )
            if (![[self endpointForObject:v] _addReferrer:self])
                v_value = nil;
        v_value_strong = (retains ? v_value : nil);
        [self didSetValueTo:v];
    }
    - (void)setValueDelegate:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("Endpoint1:-(void)setValueDelegate:(NSObject<MutableValueDelegate>*)v")

        /*i-905*/ if (valueDelegate == v) return;

        /*i-900*/ {
            valueDelegate = (id)v;
        }
    }
    - (void)setValueDelegate_strong:(NSObject<MutableValueDelegate> *)v {
        MSGSTART("Endpoint1:-(void)setValueDelegate_strong:(NSObject<MutableValueDelegate>*)v")

        /*i-905*/ if (valueDelegate_strong == v) return;

        /*i-900*/ {
            valueDelegate_strong = (id)v;
        }
    }
    - (bool)unacceptable:(id)obj {
        MSGSTART("Endpoint1:-(bool)unacceptable:(id)obj")
        return !(acceptableSel && [self.owner performUnknownSelector:acceptableSel withObject:obj]);
    }
    - (void)unlinkValueDelegate {
        MSGSTART("Endpoint1:-(void)unlinkValueDelegate")

        [parentValueDelegate removeDelegate : self];
        if (valueDelegate) {
            valueDelegate.parentValueDelegate = nil;
            valueDelegate_strong = valueDelegate = nil;
        }
        if (parentValueDelegate) ERR("Bad");
        parentValueDelegate = nil;
    }
    - (id)value {
        MSGSTART("Endpoint1:-(id)value")
        return v_value;
    }
    - (id)value_strong {
        MSGSTART("Endpoint1:-(id)value_strong")
        return v_value;
    }
    - (NSObject<MutableValueDelegate> *)valueDelegate {
        MSGSTART("Endpoint1:-(NSObject<MutableValueDelegate>*)valueDelegate")

        /*i-999*/ NSObject<MutableValueDelegate> *ret = valueDelegate;
        /*i999*/ return ret;
    }
    - (NSObject<MutableValueDelegate> *)valueDelegate_strong {
        MSGSTART("Endpoint1:-(NSObject<MutableValueDelegate>*)valueDelegate_strong")

        /*i-999*/ NSObject<MutableValueDelegate> *ret = valueDelegate_strong;
        /*i999*/ return ret;
    }
    - (void)willChangeValueFrom:(id)fromObject to:(id)toObject {
        MSGSTART("Endpoint1:-(void)willChangeValueFrom:(id)fromObject to:(id)toObject")


        /*i100*/[valueDelegate willChangeValueFrom : fromObject to : toObject];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         EndpointA
    #define _WIClass_           EndpointA__
    #define _className_         endpointA
    #define _Class_             EndpointA__
    @implementation EndpointA

    @synthesize __owner_context = __owner_context;
    @synthesize __restrictRef = __restrictRef;
    @synthesize acceptableSel = acceptableSel;
    @synthesize array_count = array_count;
    @synthesize array_objects = array_objects;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize otherEndObjectToEndpoint = otherEndObjectToEndpoint;
    @synthesize retains = retains;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassEndpointA {
        MSGSTART("EndpointA:-(void)_startObjectOfClassEndpointA")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ version = (1);
        /*ivar*/ __arrayObjectIndexes = ([NSMutableDictionary dictionary]);
        /*ivar*/ __restrictRef = (NO);

        /*i0*/ self.delegateForArray = self;
    }
    - (NSArray *)__array {
        MSGSTART("EndpointA:-(NSArray*)__array")

        /*i-999*/ NSArray * ret = __array;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__arrayObjectIndexes {
        MSGSTART("EndpointA:-(NSMutableDictionary*)__arrayObjectIndexes")

        /*i-999*/ NSMutableDictionary * ret = __arrayObjectIndexes;
        /*i999*/ return ret;
    }
    - (NSMutableArray *)__mutableArray {
        MSGSTART("EndpointA:-(NSMutableArray*)__mutableArray")

        /*i-999*/ NSMutableArray * ret = __mutableArray;
        /*i999*/ return ret;
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("EndpointA:-(bool)_addObjectsFromArray:(NSArray*)array")

        if (array.count) {
            Unsigned cwas = __array.count,added = 0;
            [self willTryToAddObjectsWithCount:array.count];
            for (NSObject *object in array) {
                bool weak = insertsWeakObjectsByDefault;
                if (![self shouldAddObject:object makeWeak:weak]) {
                    [self wontAddObject:object withIndex:cwas + added];
                }
                else {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) continue;

                    [self willAddObject:object withIndex:cwas + added];

                    [__mutableArray addObject:useObject];
                    if (weak) weakObjectCount++;

                    [self didAddObject:object withIndex:cwas + added];
                    added++;
                }
            }
            return added > 0;
        }
        else {
            return NO;
        }
    }
    - (bool)_addReferrer:(NSObject<LinkEndpoint> *)ep {
        MSGSTART("EndpointA:-(bool)_addReferrer:(NSObject<LinkEndpoint>*)ep")

        id v = ep.owner;
        if (!v) return NO;

        bool r = __restrictRef;
        __restrictRef = YES;
        [self addObject:v];
        __restrictRef = r;
        return YES;
    }
    - (bool)_insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("EndpointA:-(bool)_insertObject:(id)object atIndex:(Unsigned)index")

        if (index == NSNotFound) return NO;

        if (index > __array.count) {
            ERR( "%d outside bounds [0,%d]\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            if (index != __array.count) [self objectsMovedFromRange:NSMakeRange( index,__array.count - (index + 1) ) toLocation:index + 1];
            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (bool)_insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("EndpointA:-(bool)_insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        bool ret = NO;
        if (objects.count != indexes.count) {
            ERR("Bad count");
            return NO;
        }
        Unsigned skipped = 0,move = 0,index = [indexes firstIndex],prvIndex;

        NSMutableIndexSet *addedInds = [[NSMutableIndexSet alloc] init];

        [self willTryToAddObjectsWithCount:objects.count];
        for (NSObject *object in objects) {
            bool weak = insertsWeakObjectsByDefault;
            if (![self shouldAddObject:object makeWeak:weak]) {
                [self wontAddObject:object withIndex:index];
                skipped++;
            }
            else {
                do {
                    id useObject;
                    if (weak) useObject = [object weakSelf];
                    else if ( !(useObject = [object strongSelf]) ) break;

                    [addedInds addIndex:index];
                    [self willAddObject:object withIndex:index - skipped];

                    [__mutableArray insertObject:useObject atIndex:index - skipped];
                    if (weak) weakObjectCount++;
                    move++;
                } while (NO);
            }
            index = [indexes indexGreaterThanIndex:index];
        }
        if (move) {
            for (prvIndex = __mutableArray.count + indexes.count - skipped,index = indexes.lastIndex; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
                if ([addedInds containsIndex:index]) {
                    [self objectsMovedFromRange:NSMakeRange( index - skipped,prvIndex - (index - skipped) ) toLocation:(index - skipped) + move];
                    prvIndex = index - skipped;
                    move--;
                }
                else {
                    skipped--;
                }
            }

            index = indexes.firstIndex;
            for (NSObject *object in objects) {
                if ([addedInds containsIndex:index])
                    [self didAddObject:object withIndex:index - skipped];
                else skipped++;
            }
            ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("EndpointA:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSArray *was = [__array copy];
        [self willRemoveObjectsWithCount:was.count];
        for (Int i = int(was.count) - 1; i >= 0; i--) {
            [self willRemoveObject:[was objectAtIndex:i] fromIndex:i];
        }
        [__mutableArray removeAllObjects];
        weakObjectCount = 0;

        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObjectAtIndex:(Unsigned)index {
        MSGSTART("EndpointA:-(bool)_removeObjectAtIndex:(Unsigned)index")

        if (index != NSNotFound) {
            if (index >= __array.count) {
                ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
                return NO;
            }
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object fromIndex:index];

            if (object.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self objectsMovedFromRange:NSMakeRange(index + 1,__array.count - index) toLocation:index];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("EndpointA:-(bool)_removeObjectsAtIndexes:(NSIndexSet*)indexes")

        [self willRemoveObjectsWithCount : indexes.count];
        for (Unsigned index = [indexes lastIndex]; index != NSNotFound; index = [indexes indexLessThanIndex:index]) {
            NSObject *object = [__array objectAtIndex:index];
            [self willRemoveObject:object fromIndex:index];

            [__mutableArray removeObjectAtIndex:index];
            if (object.isWeakSelf) --weakObjectCount;

            [self didRemoveObject:object];
        }
        for (Unsigned index = [indexes firstIndex],i = 0; index != NSNotFound; index = [indexes indexGreaterThanIndex:index],i++) {
            Unsigned nxtIndex = [indexes indexGreaterThanIndex:index];
            if (nxtIndex == NSNotFound) nxtIndex = __mutableArray.count + indexes.count;
            if (nxtIndex > index + 1) [self objectsMovedFromRange:NSMakeRange( index + 1,nxtIndex - (index + 1) ) toLocation:index - i];
        }
        return indexes.count > 0;
    }
    - (void)_removeReferrer:(NSObject<LinkEndpoint> *)ep {
        MSGSTART("EndpointA:-(void)_removeReferrer:(NSObject<LinkEndpoint>*)ep")

        id v = ep.owner;
        if (v) {
            bool r = __restrictRef;
            __restrictRef = YES;
            [self removeObject:v];
            __restrictRef = r;
        }
    }
    - (bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("EndpointA:-(bool)_replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if (index == NSNotFound) return NO;

        if (index >= __array.count) {
            ERR( "%d outside bounds [0,%d)\n",int(index),int(__array.count) );
            return NO;
        }
        [self willTryToAddObjectsWithCount:1];
        NSObject *object2 = [__array objectAtIndex:index];
        if (object == object2) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object makeWeak:weak]) {
            [self wontAddObject:object withIndex:index];
        }
        else {
            id useObject;
            if (weak) useObject = [object weakSelf];
            else if ( !(useObject = [object strongSelf]) ) return NO;


            [self willRemoveObjectsWithCount:1];
            [self willRemoveObject:object2 fromIndex:index];

            if (object2.isWeakSelf) --weakObjectCount;
            [__mutableArray removeObjectAtIndex:index];

            [self didRemoveObject:object2];

            [self willAddObject:object withIndex:index];

            [__mutableArray insertObject:useObject atIndex:index];
            if (weak) weakObjectCount++;

            [self didAddObject:object withIndex:index];
            return YES;
        }
        return NO;
    }
    - (void)addDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("EndpointA:-(void)addDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (v.arrayDelegate) return;

        if (v == self) return;

        if (arrayDelegate) {
            [arrayDelegate addDelegate:v];
        }
        else {
            arrayDelegate = v;
            v.delegateForArray = self.delegateForArray;
            [v delegateForArrayChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("EndpointA:-(void)addObject:(id)object")

        [self insertObject : object atIndex : __mutableArray.count];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("EndpointA:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("EndpointA:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("EndpointA:-(void)addObserver:(NSObject *)observer toObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__array addObserver : observer toObjectsAtIndexes : indexes forKeyPath : keyPath options : options context : context];
    }
    - (void)allObjectsMoved {
        MSGSTART("EndpointA:-(void)allObjectsMoved")

        [__arrayObjectIndexes removeAllObjects];
        Unsigned index = 0;
        for (NSObject *object in __array) {
            [self doAddIndex:index++ forObject:object];
        }



        /*i100*/ [arrayDelegate allObjectsMoved];
    }
    + (EndpointA *)array {
        MSGSTART("EndpointA:+(EndpointA*)array")
        return [[EndpointA alloc] init];
    }
    - (NSArray *)arrayByAddingObject:(id)object {
        MSGSTART("EndpointA:-(NSArray*)arrayByAddingObject:(id)object")

        return [self.objects arrayByAddingObject:object];
    }
    - (NSArray *)arrayByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("EndpointA:-(NSArray*)arrayByAddingObjectsFromArray:(NSArray*)array")

        return [self.objects arrayByAddingObjectsFromArray:array];
    }
    - (NSObject<MutableArrayDelegate> *)arrayDelegate {
        MSGSTART("EndpointA:-(NSObject<MutableArrayDelegate>*)arrayDelegate")

        /*i-999*/ NSObject<MutableArrayDelegate> *ret = arrayDelegate;
        /*i999*/ return ret;
    }
    + (EndpointA *)arrayWithArray:(NSArray *)array {
        MSGSTART("EndpointA:+(EndpointA*)arrayWithArray:(NSArray*)array")
        return [[EndpointA alloc] initWithArray:array];
    }
    + (id)arrayWithCapacity:(Unsigned)numItems {
        MSGSTART("EndpointA:+(id)arrayWithCapacity:(Unsigned)numItems")

        return [[EndpointA alloc] initWithCapacity:numItems];
    }
    + (EndpointA *)arrayWithContentsOfFile:(NSString *)file {
        MSGSTART("EndpointA:+(EndpointA*)arrayWithContentsOfFile:(NSString*)file")
        return [[EndpointA alloc] initWithContentsOfFile:file];
    }
    + (EndpointA *)arrayWithContentsOfURL:(NSURL *)url {
        MSGSTART("EndpointA:+(EndpointA*)arrayWithContentsOfURL:(NSURL*)url")
        return [[EndpointA alloc] initWithContentsOfURL:url];
    }
    + (EndpointA *)arrayWithObject:(id)object {
        MSGSTART("EndpointA:+(EndpointA*)arrayWithObject:(id)object")
        return [[EndpointA alloc] initWithObjects:&object count:1];
    }
    + (EndpointA *)arrayWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("EndpointA:+(EndpointA*)arrayWithObjects:(id*)objects count:(Unsigned)count")
        return [[EndpointA alloc] initWithObjects:objects count:count];
    }
    - (constchar *)cdescription {
        MSGSTART("EndpointA:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("EndpointA:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (NSString *)componentsJoinedByString:(NSString *)separator {
        MSGSTART("EndpointA:-(NSString *)componentsJoinedByString:(NSString *)separator")

        return [__array componentsJoinedByString:separator];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("EndpointA:-(BOOL)containsObject:(id)object")
        return [__array containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("EndpointA:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (Unsigned)count {
        MSGSTART("EndpointA:-(Unsigned)count")
        return [__array count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("EndpointA:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__array countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("EndpointA:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __array) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("EndpointA:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ v_errs = nil;

        owner = nil;

        __arrayObjectIndexes = nil;

        __mutableArray = nil;

        __array = nil;

        arrayDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSArray *)delegateForArray {
        MSGSTART("EndpointA:-(NSArray*)delegateForArray")

        /*i-999*/ NSArray * ret = delegateForArray;
        /*i999*/ return ret;
    }
    - (void)delegateForArrayChanged {
        MSGSTART("EndpointA:-(void)delegateForArrayChanged")
    }
    - (NSString *)description {
        MSGSTART("EndpointA:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__array description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("EndpointA:-(NSString *)descriptionWithLocale:(id)locale")

        return [self.objects descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("EndpointA:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [self.objects descriptionWithLocale:locale indent:level];
    }
    - (void)didAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("EndpointA:-(void)didAddObject:(id)object withIndex:(Unsigned)index")

        /*i-950*/ // [self objectsMovedFromRange:NSMakeRange(index,__array.count-1-index) toLocation:index+1];
        [self doAddIndex : index forObject : object];

        /*i100*/ [arrayDelegate didAddObject:object withIndex:index];

/*i900*/ if (!__restrictRef)
            [[self endpointForObject:object] _addReferrer:self];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("EndpointA:-(void)didRemoveObject:(id)object")


        /*i100*/[arrayDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("EndpointA:-(void)die")

        /*i900*/}
    - (void)doAddIndex:(Unsigned)index forObject:(id)object {
        MSGSTART("EndpointA:-(void)doAddIndex:(Unsigned)index forObject:(id)object")

        NSMutableIndexSet * indexes = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
        if (!indexes) {
            [__arrayObjectIndexes setObject:indexes = [NSMutableIndexSet indexSet] forWeakKey:object];
        }
        else if ([indexes containsIndex:index]) {
            [self passFail:NO format:@"!!!ai Index exists\n"]; ERR("a");
        }
        [indexes addIndex:index];
    }
    - (void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object {
        MSGSTART("EndpointA:-(void)doChangeIndex:(Unsigned)fromIndex toIndex:(Unsigned)toIndex forObject:(id)object")

        NSMutableIndexSet * indexes = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
        if (!indexes) {
            [self passFail:NO format:@"!!!ai Object not known (2)\n"]; ERR("a");
        }
        if (![indexes containsIndex:fromIndex]) {
            [self passFail:NO format:@"!!!ai Index doesn't exist (2)\n"]; ERR("a");
        }
        [indexes removeIndex:fromIndex];
        if ([indexes containsIndex:toIndex]) {
            [self passFail:NO format:@"!!!ai Index exists (2)\n"]; ERR("a");
        }
        [indexes addIndex:toIndex];
    }
    - (void)doRemoveIndex:(Unsigned)index forObject:(id)object {
        MSGSTART("EndpointA:-(void)doRemoveIndex:(Unsigned)index forObject:(id)object")

        NSMutableIndexSet * indexes = [__arrayObjectIndexes objectForKey:(id < NSCopying >)object];
        if (!indexes) {
            [self passFail:NO format:@"!!!ai Object not known\n"]; ERR("a");
        }
        if (![indexes containsIndex:index]) {
            [self passFail:NO format:@"!!!ai Index doesn't exist\n"]; ERR("a");
        }
        if (indexes.count == 1) [__arrayObjectIndexes removeObjectForKey:(id < NSCopying >)object];
        else [indexes removeIndex:index];
    }
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("EndpointA:-(void)encodeWithCoder:(NSCoder*)coder")

        [__array encodeWithCoder : coder];
    }
    - (NSObject<LinkEndpoint> *)endpointForObject:(id)obj {
        MSGSTART("EndpointA:-(NSObject<LinkEndpoint>*)endpointForObject:(id)obj")

        if (obj) return (NSObject<LinkEndpoint> *)[self.owner performUnknownSelector : otherEndObjectToEndpoint withObject : obj];
        else return nil;
    }
    + (EndpointA *)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint {
        MSGSTART("EndpointA:+(EndpointA*)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint")

        return (EndpointA *)[[EndpointA alloc] initWithOwner:aowner retains:aretains acceptableSel:aacceptableSel otherEndObjectToEndpoint:aotherEndObjectToEndpoint];
    }
    - (void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("EndpointA:-(void)enumerateObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsAtIndexes : indexSet options : opts usingBlock : block];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("EndpointA:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, Unsigned idx, BOOL *stop) )block {
        MSGSTART("EndpointA:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, Unsigned idx, BOOL *stop))block")

        [__array enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSMutableString *)errs {
        MSGSTART("EndpointA:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi {
        MSGSTART("EndpointA:-(void)exchangeObjectAtIndex:(Unsigned)fromi withObjectAtIndex:(Unsigned)toi")

        if (fromi != toi) {
            [__mutableArray exchangeObjectAtIndex:fromi withObjectAtIndex:toi];
            [self objectsSwappedWithIndex:fromi andIndex:toi];
            [self stateOK];
        }
    }
    - (NSArray *)filteredArrayUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("EndpointA:-(NSArray*)filteredArrayUsingPredicate:(NSPredicate *)predicate")

        return [self.objects filteredArrayUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("EndpointA:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        NSMutableIndexSet * toRemove = nil;
        Unsigned index = 0;
        for (NSObject *object in __array) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableIndexSet alloc] init];
                [toRemove addIndex:index];
            }
            index++;
        }
        if (toRemove) {
            [self _removeObjectsAtIndexes:toRemove];
            [self stateOK];
        }
    }
    - (id)firstObjectCommonWithArray:(NSArray *)array {
        MSGSTART("EndpointA:-(id)firstObjectCommonWithArray:(NSArray*)array")

        return [__array firstObjectCommonWithArray:array];
    }
    - (void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange {
        MSGSTART("EndpointA:-(void)getObjects:(__unsafe_unretained id[])aBuffer range:(NSRange)aRange")

        [__array getObjects : aBuffer range : aRange];
        if (weakObjectCount) for (Int i = aRange.length + aRange.location - 1; i >= aRange.location; i--) {
                aBuffer[i] = [aBuffer[i] strongSelf];
            }

    }
    - (Unsigned)hash {
        MSGSTART("EndpointA:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (NSIndexSet *)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("EndpointA:-(NSIndexSet*)indexesOfObjectsAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("EndpointA:-(NSIndexSet*)indexesOfObjectsPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsPassingTest:predicate];
    }
    - (NSIndexSet *)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("EndpointA:-(NSIndexSet*)indexesOfObjectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexesOfObjectsWithOptions:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp {
        MSGSTART("EndpointA:-(Unsigned)indexOfObject:(id)obj inSortedRange:(NSRange)r options:(NSBinarySearchingOptions)opts usingComparator:(NSComparator)cmp")

        return [__array indexOfObject:obj inSortedRange:r options:opts usingComparator:cmp];
    }
    - (Unsigned)indexOfObject:(id)object {
        MSGSTART("EndpointA:-(Unsigned)indexOfObject:(id)object")

        return [__array indexOfObject:object];
    }
    - (Unsigned)indexOfObject:(id)object inRange:(NSRange)range {
        MSGSTART("EndpointA:-(Unsigned)indexOfObject:(id)object inRange:(NSRange)range")

        return [__array indexOfObject:object inRange:range];
    }
    - (Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("EndpointA:-(Unsigned)indexOfObjectAtIndexes:(NSIndexSet *)indexSet options:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectAtIndexes:indexSet options:opts passingTest:predicate];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object {
        MSGSTART("EndpointA:-(Unsigned)indexOfObjectIdenticalTo:(id)object")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf]],[__array indexOfObjectIdenticalTo:[object weakSelf]]);
        else return [__array indexOfObjectIdenticalTo:object];
    }
    - (Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range {
        MSGSTART("EndpointA:-(Unsigned)indexOfObjectIdenticalTo:(id)object inRange:(NSRange)range")

        if (weakObjectCount)
            return MIN([__array indexOfObjectIdenticalTo:[object strongSelf] inRange:range],[__array indexOfObjectIdenticalTo:[object weakSelf] inRange:range]);
        else return [__array indexOfObjectIdenticalTo:object inRange:range];
    }
    - (Unsigned)indexOfObjectPassingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("EndpointA:-(Unsigned)indexOfObjectPassingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectPassingTest:predicate];
    }
    - (Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, Unsigned idx, BOOL *stop) )predicate {
        MSGSTART("EndpointA:-(Unsigned)indexOfObjectWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, Unsigned idx, BOOL *stop))predicate")

        return [__array indexOfObjectWithOptions:opts passingTest:predicate];
    }
    - (EndpointA *)init {
        MSGSTART("EndpointA:-(EndpointA*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] init];

        /*i11*/ [self _startObjectOfClassEndpointA];

/*i10001*/ return self;
    }
    - (EndpointA *)initWithArray:(NSArray *)array {
        MSGSTART("EndpointA:-(EndpointA*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = (insertsWeakObjectsByDefault ? array.weakMutableCopy : [[NSMutableArray alloc] initWithArray:array]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointA];

/*i10001*/ return self;
    }
    - (EndpointA *)initWithArray:(NSArray *)array copyItems:(BOOL)copy {
        MSGSTART("EndpointA:-(EndpointA*)initWithArray:(NSArray*)array copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithArray:array copyItems:copy];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointA];

/*i10001*/ return self;
    }
    - (EndpointA *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("EndpointA:-(EndpointA*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassEndpointA];

/*i10001*/ return self;
    }
    - (EndpointA *)initWithCoder:(NSCoder *)coder {
        MSGSTART("EndpointA:-(EndpointA*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointA];

/*i10001*/ return self;
    }
    - (EndpointA *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("EndpointA:-(EndpointA*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointA];

/*i10001*/ return self;
    }
    - (EndpointA *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("EndpointA:-(EndpointA*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointA];

/*i10001*/ return self;
    }
    - (EndpointA *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("EndpointA:-(EndpointA*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __array = __mutableArray = [[NSMutableArray alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __array = __mutableArray = __array.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointA];

/*i10001*/ return self;
    }
    - (EndpointA *)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint {
        MSGSTART("EndpointA:-(EndpointA*)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-900*/ __array = __mutableArray = [[MutableArray alloc] init];

        owner = aowner;
        retains = aretains;
        acceptableSel = aacceptableSel;
        otherEndObjectToEndpoint = aotherEndObjectToEndpoint;

        /*i11*/ [self _startObjectOfClassEndpointA];

/*i10001*/ return self;
    }
    - (void)insertObject:(id)object atIndex:(Unsigned)index {
        MSGSTART("EndpointA:-(void)insertObject:(id)object atIndex:(Unsigned)index")

        if ([self _insertObject:object atIndex:index]) [self stateOK];
    }
    - (void)insertObjects:(NSArray *)objects atIndexes:(NSIndexSet *)indexes {
        MSGSTART("EndpointA:-(void)insertObjects:(NSArray*)objects atIndexes:(NSIndexSet*)indexes")

        if ([self _insertObjects:objects atIndexes:indexes]) [self stateOK];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("EndpointA:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToArray:(NSArray *)array {
        MSGSTART("EndpointA:-(BOOL)isEqualToArray:(NSArray*)array")

        return [__array isEqualToArray:array];
    }
    - (id)lastObject {
        MSGSTART("EndpointA:-(id)lastObject")
        return weakObjectCount ? [__array.lastObject strongSelf] : __array.lastObject;
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("EndpointA:-(void)makeObjectsPerformSelector:(SEL)selector")

        [__array makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("EndpointA:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")

        [__array makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("EndpointA:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableArray allocWithZone:zone] initWithArray:__array];
    }
    - (id)objectAtIndex:(Unsigned)index {
        MSGSTART("EndpointA:-(id)objectAtIndex:(Unsigned)index")

        if (index >= __array.count) ERR( "Index %d is out of bounds [0,%d)",int(index),int(__array.count) );
        return weakObjectCount ? [__array[index] strongSelf] : __array[index];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("EndpointA:-(NSEnumerator*)objectEnumerator")
        return [__array objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("EndpointA:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objects {
        MSGSTART("EndpointA:-(NSArray*)objects")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            Int i = 0;
            for (NSObject *o in __array) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : __array;
        }
        else {
            return __array;
        }
    }
    - (NSArray *)objectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("EndpointA:-(NSArray*)objectsAtIndexes:(NSIndexSet*)indexes")

        if (weakObjectCount) {
            NSMutableArray *mret = nil;
            NSArray *ret = [__array objectsAtIndexes:indexes];
            Int i = 0;
            for (NSObject *o in ret) {
                if (o.isWeakSelf) {
                    if (!mret) mret = __array.mutableCopy;
                    [mret replaceObjectAtIndex:i withObject:[o strongSelf]];
                }
                i++;
            }
            return mret ? mret.copy : ret;
        }
        else {
            return [__array objectsAtIndexes:indexes];
        }
    }
    - (void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation {
        MSGSTART("EndpointA:-(void)objectsMovedFromRange:(NSRange)fromRange toLocation:(Unsigned)toLocation")

        for (Unsigned i = 0; i < fromRange.length; i++) {
            Unsigned j = (toLocation > fromRange.location ? fromRange.length - 1 - i : i);
            NSObject *object = [__array objectAtIndex:toLocation + j];
            [self doChangeIndex:fromRange.location + j toIndex:toLocation + j forObject:object];
        }



        /*i100*/ [arrayDelegate objectsMovedFromRange:fromRange toLocation:toLocation];
    }
    - (void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex {
        MSGSTART("EndpointA:-(void)objectsSwappedWithIndex:(Unsigned)fromIndex andIndex:(Unsigned)toIndex")

        NSObject * object1 = [__array objectAtIndex:toIndex];
        NSObject *object2 = [__array objectAtIndex:fromIndex];
        if (object1 != object2) {
            [self doChangeIndex:fromIndex toIndex:toIndex forObject:object1];
            [self doChangeIndex:toIndex toIndex:fromIndex forObject:object2];
        }



        /*i100*/ [arrayDelegate objectsSwappedWithIndex:fromIndex andIndex:toIndex];
    }
    - (id)owner {
        MSGSTART("EndpointA:-(id)owner")

        /*i-999*/ id ret = owner;
        /*i999*/ return ret;
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("EndpointA:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes {
        MSGSTART("EndpointA:-(NSArray *)pathsMatchingExtensions:(NSArray *)filterTypes")

        return [self.objects pathsMatchingExtensions:filterTypes];
    }
    - (void)removeAllObjects {
        MSGSTART("EndpointA:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("EndpointA:-(void)removedDelegate")

        /*i-100*/ arrayDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableArrayDelegate> *)v {
        MSGSTART("EndpointA:-(void)removeDelegate:(NSObject<MutableArrayDelegate>*)v")

        if (arrayDelegate) {
            if (arrayDelegate == v) {
                v.delegateForArray = nil;
                arrayDelegate = v.arrayDelegate;
                [v removedDelegate];
                [v delegateForArrayChanged];
            }
            else {
                [arrayDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeLastObject {
        MSGSTART("EndpointA:-(void)removeLastObject")

        if (__array.count) [self removeObjectAtIndex:__array.count - 1];
    }
    - (void)removeObjectAtIndex:(Unsigned)index {
        MSGSTART("EndpointA:-(void)removeObjectAtIndex:(Unsigned)index")

        if ([self _removeObjectAtIndex:index]) [self stateOK];
    }
    - (void)removeObjectsAtIndexes:(NSIndexSet *)indexes {
        MSGSTART("EndpointA:-(void)removeObjectsAtIndexes:(NSIndexSet*)indexes")

        if ([self _removeObjectsAtIndexes:indexes]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("EndpointA:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("EndpointA:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer forKeyPath : keyPath context : context];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath {
        MSGSTART("EndpointA:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet *)indexes forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("EndpointA:-(void)removeObserver:(NSObject *)observer fromObjectsAtIndexes:(NSIndexSet*)indexes forKeyPath:(NSString *)keyPath context:(void *)context")

        [__array removeObserver : observer fromObjectsAtIndexes : indexes forKeyPath : keyPath context : context];
    }
    - (void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object {
        MSGSTART("EndpointA:-(void)replaceObjectAtIndex:(Unsigned)index withObject:(id)object")

        if ([self _replaceObjectAtIndex:index withObject:object]) [self stateOK];
    }
    - (NSEnumerator *)reverseObjectEnumerator {
        MSGSTART("EndpointA:-(NSEnumerator*)reverseObjectEnumerator")
        return [__array reverseObjectEnumerator];
    }
    - (void)set__arrayObjectIndexes:(NSMutableDictionary *)v {
        MSGSTART("EndpointA:-(void)set__arrayObjectIndexes:(NSMutableDictionary*)v")

        /*i-905*/ if (__arrayObjectIndexes == v) return;

        /*i-900*/ {
            __arrayObjectIndexes = (id)v;
        }
    }
    - (void)setArray:(NSArray *)array {
        MSGSTART("EndpointA:-(void)setArray:(NSArray*)array")

        NSIndexSet * inss,*dels;
        if (![Util getInsertsAndDeletesAsIndexSetWhenChanging:__array to:array inss:&inss dels:&dels]) return;

        [self _removeObjectsAtIndexes:dels];
        NSArray *objs = [array objectsAtIndexes:inss];
        [self _insertObjects:objs atIndexes:inss];
        [self stateOK];
    }
    - (void)setDelegateForArray:(NSArray *)v {
        MSGSTART("EndpointA:-(void)setDelegateForArray:(NSArray*)v")

        /*i-905*/ if (delegateForArray == v) return;

        /*i-900*/ {
            delegateForArray = (id)v;
        }
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("EndpointA:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("EndpointA:-(void)setValue:(id)value forKey:(NSString *)key")

        [__array setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("EndpointA:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setArray:__array.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setArray:__array.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("EndpointA:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i0*/ if ( (!__restrictRef) && [self unacceptable:object] ) ret = NO;


            /*i100*/ if (ret && arrayDelegate) ret = [arrayDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSData *)sortedArrayHint {
        MSGSTART("EndpointA:-(NSData*)sortedArrayHint")

        return [__array sortedArrayHint];
    }
    - (NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr {
        MSGSTART("EndpointA:-(NSArray *)sortedArrayUsingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayUsingComparator:cmptr];
    }
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("EndpointA:-(NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors")

        return [self.objects sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context {
        MSGSTART("EndpointA:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context")

        return [self.objects sortedArrayUsingFunction:comparator context:context];
    }
    - (NSArray *)sortedArrayUsingFunction:( Int (*)(id, id, void *) )comparator context:(void *)context hint:(NSData *)hint {
        MSGSTART("EndpointA:-(NSArray *)sortedArrayUsingFunction:(Int (*)(id, id, void *))comparator context:(void *)context hint:(NSData *)hint")

        return [self.objects sortedArrayUsingFunction:comparator context:context hint:hint];
    }
    - (NSArray *)sortedArrayUsingSelector:(SEL)selector {
        MSGSTART("EndpointA:-(NSArray*)sortedArrayUsingSelector:(SEL)selector")

        return [self.objects sortedArrayUsingSelector:selector];
    }
    - (NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("EndpointA:-(NSArray *)sortedArrayWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [self.objects sortedArrayWithOptions:opts usingComparator:cmptr];
    }
    - (void)sortUsingComparator:(NSComparator)cmptr {
        MSGSTART("EndpointA:-(void)sortUsingComparator:(NSComparator)cmptr")

        [__mutableArray sortUsingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("EndpointA:-(void)sortUsingDescriptors:(NSArray*)sortDescriptors")

        [__mutableArray sortUsingDescriptors : sortDescriptors];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingFunction:( Int (*)(id, id, void *) )compare context:(void *)context {
        MSGSTART("EndpointA:-(void)sortUsingFunction:(Int (*)(id, id, void *))compare context:(void *)context")

        [__mutableArray sortUsingFunction : compare context : context];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortUsingSelector:(SEL)selector {
        MSGSTART("EndpointA:-(void)sortUsingSelector:(SEL)selector")

        [__mutableArray sortUsingSelector : selector];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("EndpointA:-(void)sortWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        [__mutableArray sortWithOptions : opts usingComparator : cmptr];
        [self allObjectsMoved];
        [self stateOK];
    }
    - (void)stateOK {
        MSGSTART("EndpointA:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ array_count = 0;
        for (id o in __array) {
            array_objects.ids[array_count++] = (__bridge void *)o;
            if (array_count == 100) break;
        }
        memset( array_objects.ids + array_count,0,sizeof(array_objects.ids[0]) * (100 - array_count) );
        array_count = __array.count;

        /*i100*/ [arrayDelegate stateOK];
    }
    - (NSArray *)subarrayWithRange:(NSRange)r {
        MSGSTART("EndpointA:-(NSArray*)subarrayWithRange:(NSRange)r")

        return [self.objects subarrayWithRange:r];
    }
    - (bool)unacceptable:(id)obj {
        MSGSTART("EndpointA:-(bool)unacceptable:(id)obj")
        return !(acceptableSel && [self.owner performUnknownSelector:acceptableSel withObject:obj]);
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("EndpointA:-(id)valueForKey:(NSString*)key")

        return [__array valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("EndpointA:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("EndpointA:-(void)willAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate willAddObject : object withIndex : index];
    }
    - (void)willRemoveObject:(id)object fromIndex:(Unsigned)index {
        MSGSTART("EndpointA:-(void)willRemoveObject:(id)object fromIndex:(Unsigned)index")

        /*i-900*/ if (!__restrictRef)
            [[self endpointForObject:object] _removeReferrer:self];

        /*i100*/ [arrayDelegate willRemoveObject:object fromIndex:index];

/*i950*/ [self doRemoveIndex:index forObject:object];
        // [self objectsMovedFromRange:NSMakeRange(index+1,__array.count-1-index) toLocation:index];
    }
    - (void)willRemoveObjectsWithCount:(Unsigned)count {
        MSGSTART("EndpointA:-(void)willRemoveObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willRemoveObjectsWithCount : count];
    }
    - (void)willTryToAddObjectsWithCount:(Unsigned)count {
        MSGSTART("EndpointA:-(void)willTryToAddObjectsWithCount:(Unsigned)count")


        /*i100*/[arrayDelegate willTryToAddObjectsWithCount : count];
    }
    - (void)wontAddObject:(id)object withIndex:(Unsigned)index {
        MSGSTART("EndpointA:-(void)wontAddObject:(id)object withIndex:(Unsigned)index")


        /*i100*/[arrayDelegate wontAddObject : object withIndex : index];
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("EndpointA:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [self.objects writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("EndpointA:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [self.objects writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         EndpointD
    #define _WIClass_           EndpointD__
    #define _className_         endpointD
    #define _Class_             EndpointD__
    @implementation EndpointD

    @synthesize __owner_context = __owner_context;
    @synthesize __restrictRef = __restrictRef;
    @synthesize acceptableSel = acceptableSel;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize dictionary_count = dictionary_count;
    @synthesize dictionary_objects = dictionary_objects;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize otherEndObjectToEndpoint = otherEndObjectToEndpoint;
    @synthesize retains = retains;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassEndpointD {
        MSGSTART("EndpointD:-(void)_startObjectOfClassEndpointD")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ version = (1);
        /*ivar*/ __dictionaryObjectKeys = ([NSMutableDictionary dictionary]);
        /*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ __restrictRef = (NO);

        /*i0*/ self.delegateForDictionary = self;
    }
    - (NSDictionary *)__dictionary {
        MSGSTART("EndpointD:-(NSDictionary*)__dictionary")

        /*i-999*/ NSDictionary * ret = __dictionary;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__dictionaryObjectKeys {
        MSGSTART("EndpointD:-(NSMutableDictionary*)__dictionaryObjectKeys")

        /*i-999*/ NSMutableDictionary * ret = __dictionaryObjectKeys;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__mutableDictionary {
        MSGSTART("EndpointD:-(NSMutableDictionary*)__mutableDictionary")

        /*i-999*/ NSMutableDictionary * ret = __mutableDictionary;
        /*i999*/ return ret;
    }
    - (bool)_addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("EndpointD:-(bool)_addEntriesFromDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        for (id<NSCopying> key in dictionary) {
            if ([self _setObject:[dictionary objectForKey:key] forKey:key]) ret = YES;
        }
        return ret;
    }
    - (bool)_addReferrer:(NSObject<LinkEndpoint> *)ep {
        MSGSTART("EndpointD:-(bool)_addReferrer:(NSObject<LinkEndpoint>*)ep")



        id v = ep.owner;
        if (!v) return NO;

        bool r = __restrictRef;
        __restrictRef = YES;
        [self setObject:v forWeakKey:v];
        __restrictRef = r;
        return YES;
    }
    - (bool)_removeAllObjects {
        MSGSTART("EndpointD:-(bool)_removeAllObjects")

        if (!__dictionary.count) return NO;

        NSDictionary *was = __dictionary.copy;
        for (id<NSCopying> key in was) {
            [self willReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        weakObjectCount = 0;
        [__mutableDictionary removeAllObjects];
        for (id<NSCopying> key in was) {
            [self didReplaceObject:[was objectForKey:key] withObject:nil forKey:key];
        }
        return YES;
    }
    - (bool)_removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("EndpointD:-(bool)_removeObjectForKey:(id<NSCopying>)key")

        NSObject * object = [__dictionary objectForKey:key];
        if (!object) return NO;

        [self willReplaceObject:object withObject:nil forKey:key];
        if ([object isWeakSelf]) --weakObjectCount;
        [__mutableDictionary removeObjectForKey:key];
        [self didReplaceObject:object withObject:nil forKey:key];
        return YES;
    }
    - (bool)_removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("EndpointD:-(bool)_removeObjectsForKeys:(NSArray*)keys")

        bool ret = NO;
        for (id<NSCopying> key in keys) {
            if ([self _removeObjectForKey:key]) ret = YES;
        }
        return ret;
    }
    - (void)_removeReferrer:(NSObject<LinkEndpoint> *)ep {
        MSGSTART("EndpointD:-(void)_removeReferrer:(NSObject<LinkEndpoint>*)ep")



        id v = ep.owner;
        if (v) {
            bool r = __restrictRef;
            __restrictRef = YES;
            NSSet *keys = [self.__dictionaryObjectKeys objectForKey:v];
            if (keys) [self removeObjectsForKeys:keys.allObjects];
            __restrictRef = r;
        }
    }
    - (bool)_setDictionary:(NSDictionary *)dictionary {
        MSGSTART("EndpointD:-(bool)_setDictionary:(NSDictionary*)dictionary")

        bool ret = NO;
        NSMutableArray *toRemove = nil;
        for (id<NSCopying> key in __dictionary) {
            if (![dictionary objectForKey:key]) {
                if (!toRemove) toRemove = [[MutableArray alloc] initWithCapacity:dictionary.count];
                [toRemove addObject:key];
            }
        }
        if (toRemove) {
            ret = YES;
            for (id<NSCopying> key in toRemove) {
                [self _removeObjectForKey:key];
            }
        }
        if ([self _addEntriesFromDictionary:dictionary]) ret = YES;
        return ret;
    }
    - (bool)_setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("EndpointD:-(bool)_setObject:(id)object forKey:(id<NSCopying>)key")

        if (!object) return [self _removeObjectForKey:key];

        id was = [__dictionary objectForKey:key];
        if (was == object) return NO;

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setObject:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (bool)_setValue:(id)object forKey:(NSString *)key {
        MSGSTART("EndpointD:-(bool)_setValue:(id)object forKey:(NSString*)key")

        bool weak = insertsWeakObjectsByDefault;
        if (![self shouldAddObject:object forKey:key makeWeak:weak]) return NO;

        id was = [__dictionary valueForKey:key];
        if (was == object) return NO;

        if (was) {
            [self willReplaceObject:was withObject:object forKey:key];
            if ([was isWeakSelf]) --weakObjectCount;
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:was withObject:object forKey:key];
        }
        else {
            [self willReplaceObject:nil withObject:object forKey:key];
            [__mutableDictionary setValue:(weak ? [object weakSelf] : [object strongSelf]) forKey:key];
            if (weak) weakObjectCount++;
            [self didReplaceObject:nil withObject:object forKey:key];
        }
        return YES;
    }
    - (void)addDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("EndpointD:-(void)addDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (v.dictionaryDelegate) return;

        if (v == self) return;

        if (dictionaryDelegate) {
            [dictionaryDelegate addDelegate:v];
        }
        else {
            dictionaryDelegate = v;
            v.delegateForDictionary = self.delegateForDictionary;
            [v delegateForDictionaryChanged];
        }
    }
    - (void)addEntriesFromDictionary:(NSDictionary *)dictionary {
        MSGSTART("EndpointD:-(void)addEntriesFromDictionary:(NSDictionary*)dictionary")

        if ([self _addEntriesFromDictionary:dictionary]) [self stateOK];
    }
    - (NSArray *)allKeys {
        MSGSTART("EndpointD:-(NSArray*)allKeys")
        return [__dictionary allKeys];
    }
    - (NSArray *)allKeysForObject:(id)object {
        MSGSTART("EndpointD:-(NSArray*)allKeysForObject:(id)object")
        return [__dictionary allKeysForObject:object];
    }
    - (NSArray *)allValues {
        MSGSTART("EndpointD:-(NSArray*)allValues")
        return [__dictionary allValues];
    }
    - (constchar *)cdescription {
        MSGSTART("EndpointD:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("EndpointD:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("EndpointD:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (Unsigned)count {
        MSGSTART("EndpointD:-(Unsigned)count")
        return [__dictionary count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("EndpointD:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        Unsigned ret = [__dictionary countByEnumeratingWithState:state objects:stackbuf count:len];
        return ret;
    }
    - (void)countWeakObjects {
        MSGSTART("EndpointD:-(void)countWeakObjects")

        Int c = 0;
        for (kid o in __dictionary) {
            if ([[__dictionary objectForKey:o] isWeakSelf]) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("EndpointD:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ __mutableDictionary = nil;

        __dictionaryObjectKeys = nil;

        v_errs = nil;

        dictionaryDelegate = nil;

        __dictionary = nil;

        owner = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSDictionary *)delegateForDictionary {
        MSGSTART("EndpointD:-(NSDictionary*)delegateForDictionary")

        /*i-999*/ NSDictionary * ret = delegateForDictionary;
        /*i999*/ return ret;
    }
    - (void)delegateForDictionaryChanged {
        MSGSTART("EndpointD:-(void)delegateForDictionaryChanged")
    }
    - (NSString *)description {
        MSGSTART("EndpointD:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__dictionary description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionInStringsFileFormat {
        MSGSTART("EndpointD:-(NSString*)descriptionInStringsFileFormat")
        return [__dictionary descriptionInStringsFileFormat];
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("EndpointD:-(NSString *)descriptionWithLocale:(id)locale")

        return [__dictionary descriptionWithLocale:locale];
    }
    - (NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level {
        MSGSTART("EndpointD:-(NSString *)descriptionWithLocale:(id)locale indent:(Unsigned)level")

        return [__dictionary descriptionWithLocale:locale indent:level];
    }
    + (EndpointD *)dictionary {
        MSGSTART("EndpointD:+(EndpointD*)dictionary")
        return [[EndpointD alloc] init];
    }
    - (NSObject<MutableDictionaryDelegate> *)dictionaryDelegate {
        MSGSTART("EndpointD:-(NSObject<MutableDictionaryDelegate>*)dictionaryDelegate")

        /*i-999*/ NSObject<MutableDictionaryDelegate> *ret = dictionaryDelegate;
        /*i999*/ return ret;
    }
    + (id)dictionaryWithCapacity:(Unsigned)numItems {
        MSGSTART("EndpointD:+(id)dictionaryWithCapacity:(Unsigned)numItems")

        return [[EndpointD alloc] initWithCapacity:numItems];
    }
    + (EndpointD *)dictionaryWithContentsOfFile:(NSString *)file {
        MSGSTART("EndpointD:+(EndpointD*)dictionaryWithContentsOfFile:(NSString*)file")
        return [[EndpointD alloc] initWithContentsOfFile:file];
    }
    + (EndpointD *)dictionaryWithContentsOfURL:(NSURL *)url {
        MSGSTART("EndpointD:+(EndpointD*)dictionaryWithContentsOfURL:(NSURL*)url")
        return [[EndpointD alloc] initWithContentsOfURL:url];
    }
    + (EndpointD *)dictionaryWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("EndpointD:+(EndpointD*)dictionaryWithDictionary:(NSDictionary*)dictionary")
        return [[EndpointD alloc] initWithDictionary:dictionary];
    }
    + (EndpointD *)dictionaryWithObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("EndpointD:+(EndpointD*)dictionaryWithObject:(id)object forKey:(id<NSCopying>)key")
        return [[EndpointD alloc] initWithObjects:&object forKeys:&key count:1];
    }
    + (EndpointD *)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("EndpointD:+(EndpointD*)dictionaryWithObjects:(__unsafe_unretained id[])objects forKeys:(__strong id<NSCopying>[])keys count:(Unsigned)count")
        return [[EndpointD alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
    }
    - (void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("EndpointD:-(void)didReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        /*i-950*/ if (toObject) {
            NSMutableSet *keys = [__dictionaryObjectKeys objectForKey:(id < NSCopying >)toObject];
            if (!keys) [__dictionaryObjectKeys setObject:keys = [MutableSet set] forWeakKey:toObject];
            else if ([keys containsObject:key]) [self passFail:NO format:@"!!!dk Key exists\n"];
            [keys addObject:key];
        }

        /*i100*/ [dictionaryDelegate didReplaceObject:fromObject withObject:toObject forKey:key];

/*i900*/ if (toObject)
            if (!__restrictRef) [[self endpointForObject:toObject] _addReferrer:self];
    }
    - (void)die {
        MSGSTART("EndpointD:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("EndpointD:-(void)encodeWithCoder:(NSCoder*)coder")

        [__dictionary encodeWithCoder : coder];
    }
    - (NSObject<LinkEndpoint> *)endpointForObject:(id)obj {
        MSGSTART("EndpointD:-(NSObject<LinkEndpoint>*)endpointForObject:(id)obj")

        if (obj) return (NSObject<LinkEndpoint> *)[self.owner performUnknownSelector : otherEndObjectToEndpoint withObject : obj];
        else return nil;
    }
    + (EndpointD *)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint {
        MSGSTART("EndpointD:+(EndpointD*)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint")

        return (EndpointD *)[[EndpointD alloc] initWithOwner:aowner retains:aretains acceptableSel:aacceptableSel otherEndObjectToEndpoint:aotherEndObjectToEndpoint];
    }
    - (void)enumerateKeysAndObjectsUsingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("EndpointD:-(void)enumerateKeysAndObjectsUsingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsUsingBlock : block];
    }
    - (void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id key, id obj, BOOL *stop) )block {
        MSGSTART("EndpointD:-(void)enumerateKeysAndObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id key, id obj, BOOL *stop))block")

        [__dictionary enumerateKeysAndObjectsWithOptions : opts usingBlock : block];
    }
    - (NSMutableString *)errs {
        MSGSTART("EndpointD:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (NSDate *)fileCreationDate {
        MSGSTART("EndpointD:-(NSDate*)fileCreationDate")
        return [__dictionary fileCreationDate];
    }
    - (BOOL)fileExtensionHidden {
        MSGSTART("EndpointD:-(BOOL)fileExtensionHidden")
        return [__dictionary fileExtensionHidden];
    }
    - (NSNumber *)fileGroupOwnerAccountID {
        MSGSTART("EndpointD:-(NSNumber*)fileGroupOwnerAccountID")
        return [__dictionary fileGroupOwnerAccountID];
    }
    - (NSString *)fileGroupOwnerAccountName {
        MSGSTART("EndpointD:-(NSString*)fileGroupOwnerAccountName")
        return [__dictionary fileGroupOwnerAccountName];
    }
    - (OSType)fileHFSCreatorCode {
        MSGSTART("EndpointD:-(OSType)fileHFSCreatorCode")
        return [__dictionary fileHFSCreatorCode];
    }
    - (OSType)fileHFSTypeCode {
        MSGSTART("EndpointD:-(OSType)fileHFSTypeCode")
        return [__dictionary fileHFSTypeCode];
    }
    - (BOOL)fileIsAppendOnly {
        MSGSTART("EndpointD:-(BOOL)fileIsAppendOnly")
        return [__dictionary fileIsAppendOnly];
    }
    - (BOOL)fileIsImmutable {
        MSGSTART("EndpointD:-(BOOL)fileIsImmutable")
        return [__dictionary fileIsImmutable];
    }
    - (NSDate *)fileModificationDate {
        MSGSTART("EndpointD:-(NSDate*)fileModificationDate")
        return [__dictionary fileModificationDate];
    }
    - (NSNumber *)fileOwnerAccountID {
        MSGSTART("EndpointD:-(NSNumber*)fileOwnerAccountID")
        return [__dictionary fileOwnerAccountID];
    }
    - (NSString *)fileOwnerAccountName {
        MSGSTART("EndpointD:-(NSString*)fileOwnerAccountName")
        return [__dictionary fileOwnerAccountName];
    }
    - (Unsigned)filePosixPermissions {
        MSGSTART("EndpointD:-(Unsigned)filePosixPermissions")
        return [__dictionary filePosixPermissions];
    }
    - (ULL)fileSize {
        MSGSTART("EndpointD:-(ULL)fileSize")
        return [__dictionary fileSize];
    }
    - (Unsigned)fileSystemFileNumber {
        MSGSTART("EndpointD:-(Unsigned)fileSystemFileNumber")
        return [__dictionary fileSystemFileNumber];
    }
    - (Int)fileSystemNumber {
        MSGSTART("EndpointD:-(Int)fileSystemNumber")
        return [__dictionary fileSystemNumber];
    }
    - (NSString *)fileType {
        MSGSTART("EndpointD:-(NSString*)fileType")
        return [__dictionary fileType];
    }
    - (void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys {
        MSGSTART("EndpointD:-(void)getObjects:(id __unsafe_unretained [])objects andKeys:(id __unsafe_unretained [])keys")

        [__dictionary getObjects : objects andKeys : keys];
    }
    - (Unsigned)hash {
        MSGSTART("EndpointD:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (EndpointD *)init {
        MSGSTART("EndpointD:-(EndpointD*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassEndpointD];

/*i10001*/ return self;
    }
    - (EndpointD *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("EndpointD:-(EndpointD*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassEndpointD];

/*i10001*/ return self;
    }
    - (EndpointD *)initWithCoder:(NSCoder *)coder {
        MSGSTART("EndpointD:-(EndpointD*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointD];

/*i10001*/ return self;
    }
    - (EndpointD *)initWithContentsOfFile:(NSString *)file {
        MSGSTART("EndpointD:-(EndpointD*)initWithContentsOfFile:(NSString*)file")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfFile:file];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointD];

/*i10001*/ return self;
    }
    - (EndpointD *)initWithContentsOfURL:(NSURL *)url {
        MSGSTART("EndpointD:-(EndpointD*)initWithContentsOfURL:(NSURL*)url")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithContentsOfURL:url];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointD];

/*i10001*/ return self;
    }
    - (EndpointD *)initWithDictionary:(NSDictionary *)dictionary {
        MSGSTART("EndpointD:-(EndpointD*)initWithDictionary:(NSDictionary*)dictionary")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointD];

/*i10001*/ return self;
    }
    - (EndpointD *)initWithDictionary:(NSDictionary *)dictionary copyItems:(BOOL)copy {
        MSGSTART("EndpointD:-(EndpointD*)initWithDictionary:(NSDictionary*)dictionary copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithDictionary:dictionary copyItems:copy];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointD];

/*i10001*/ return self;
    }
    - (EndpointD *)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count {
        MSGSTART("EndpointD:-(EndpointD*)initWithObjects:(const id[])objects forKeys:(const id<NSCopying>[])keys count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __dictionary = __mutableDictionary = [[NSMutableDictionary alloc] initWithObjects:objects forKeys:keys count:  /*ivar*/ count];
        if (insertsWeakObjectsByDefault) __dictionary = __mutableDictionary = __dictionary.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointD];

/*i10001*/ return self;
    }
    - (EndpointD *)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint {
        MSGSTART("EndpointD:-(EndpointD*)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-900*/ owner = aowner;
        retains = aretains;
        acceptableSel = aacceptableSel;
        otherEndObjectToEndpoint = aotherEndObjectToEndpoint;

        __dictionary = __mutableDictionary = [[MutableDictionary alloc] init];

        /*i11*/ [self _startObjectOfClassEndpointD];

/*i10001*/ return self;
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("EndpointD:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToDictionary:(NSDictionary *)dictionary {
        MSGSTART("EndpointD:-(BOOL)isEqualToDictionary:(NSDictionary*)dictionary")
        return [__dictionary isEqualToDictionary:dictionary];
    }
    - (NSEnumerator *)keyEnumerator {
        MSGSTART("EndpointD:-(NSEnumerator*)keyEnumerator")
        return [__dictionary keyEnumerator];
    }
    - (NSSet *)keysOfEntriesPassingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("EndpointD:-(NSSet *)keysOfEntriesPassingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesPassingTest:predicate];
    }
    - (NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id key, id obj, BOOL *stop) )predicate {
        MSGSTART("EndpointD:-(NSSet *)keysOfEntriesWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id key, id obj, BOOL *stop))predicate")

        return [__dictionary keysOfEntriesWithOptions:opts passingTest:predicate];
    }
    - (NSArray *)keysSortedByValueUsingComparator:(NSComparator)cmptr {
        MSGSTART("EndpointD:-(NSArray*)keysSortedByValueUsingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueUsingComparator:cmptr];
    }
    - (NSArray *)keysSortedByValueUsingSelector:(SEL)selector {
        MSGSTART("EndpointD:-(NSArray*)keysSortedByValueUsingSelector:(SEL)selector")

        return [__dictionary keysSortedByValueUsingSelector:selector];
    }
    - (NSArray *)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr {
        MSGSTART("EndpointD:-(NSArray*)keysSortedByValueWithOptions:(NSSortOptions)opts usingComparator:(NSComparator)cmptr")

        return [__dictionary keysSortedByValueWithOptions:opts usingComparator:cmptr];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("EndpointD:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableDictionary allocWithZone:zone] initWithDictionary:__dictionary];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("EndpointD:-(NSEnumerator*)objectEnumerator")
        return [__dictionary objectEnumerator];
    }
    - (id)objectForKey:(id<NSCopying> )key {
        MSGSTART("EndpointD:-(id)objectForKey:(id<NSCopying>)key")

        /*i-10*/ id ret = [__dictionary objectForKey:key];

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("EndpointD:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSArray *)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject {
        MSGSTART("EndpointD:-(NSArray*)objectsForKeys:(NSArray *)keys notFoundMarker:(id)anObject")

        return [__dictionary objectsForKeys:keys notFoundMarker:anObject];
    }
    - (id)owner {
        MSGSTART("EndpointD:-(id)owner")

        /*i-999*/ id ret = owner;
        /*i999*/ return ret;
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("EndpointD:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (void)removeAllObjects {
        MSGSTART("EndpointD:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("EndpointD:-(void)removedDelegate")

        /*i-100*/ dictionaryDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableDictionaryDelegate> *)v {
        MSGSTART("EndpointD:-(void)removeDelegate:(NSObject<MutableDictionaryDelegate>*)v")

        if (dictionaryDelegate) {
            if (dictionaryDelegate == v) {
                v.delegateForDictionary = nil;
                dictionaryDelegate = v.dictionaryDelegate;
                [v removedDelegate];
                [v delegateForDictionaryChanged];
            }
            else {
                [dictionaryDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObjectForKey:(id<NSCopying> )key {
        MSGSTART("EndpointD:-(void)removeObjectForKey:(id<NSCopying>)key")

        if ([self _removeObjectForKey:key]) [self stateOK];
    }
    - (void)removeObjectsForKeys:(NSArray *)keys {
        MSGSTART("EndpointD:-(void)removeObjectsForKeys:(NSArray*)keys")

        if ([self _removeObjectsForKeys:keys]) [self stateOK];
    }
    - (void)set__dictionaryObjectKeys:(NSMutableDictionary *)v {
        MSGSTART("EndpointD:-(void)set__dictionaryObjectKeys:(NSMutableDictionary*)v")

        /*i-905*/ if (__dictionaryObjectKeys == v) return;

        /*i-900*/ {
            __dictionaryObjectKeys = (id)v;
        }
    }
    - (void)setDelegateForDictionary:(NSDictionary *)v {
        MSGSTART("EndpointD:-(void)setDelegateForDictionary:(NSDictionary*)v")

        /*i-905*/ if (delegateForDictionary == v) return;

        /*i-900*/ {
            delegateForDictionary = (id)v;
        }
    }
    - (void)setDictionary:(NSDictionary *)dictionary {
        MSGSTART("EndpointD:-(void)setDictionary:(NSDictionary*)dictionary")

        if ([self _setDictionary:dictionary]) [self stateOK];
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("EndpointD:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setObject:(id)object forKey:(id<NSCopying> )key {
        MSGSTART("EndpointD:-(void)setObject:(id)object forKey:(id<NSCopying>)key")

        if ([self _setObject:object forKey:key]) [self stateOK];
    }
    - (void)setValue:(id)object forKey:(NSString *)key {
        MSGSTART("EndpointD:-(void)setValue:(id)object forKey:(NSString*)key")

        if ([self _setValue:object forKey:key]) [self stateOK];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("EndpointD:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setDictionary:__dictionary.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setDictionary:__dictionary.asStrong];
                break;
        }
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object forKey:(id<NSCopying> )key makeWeak:(bool &)weak {
            MSGSTART("EndpointD:-(bool)shouldAddObject:(id)object forKey:(id<NSCopying>)key makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i0*/ if ( (!__restrictRef) && [self unacceptable:object] ) ret = NO;

            /*i100*/ if (ret && dictionaryDelegate) ret = [dictionaryDelegate shouldAddObject:object forKey:key makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("EndpointD:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ dictionary_count = 0;
        for (id k in __dictionary) {
            dictionary_objects.keyvals[dictionary_count].key = (__bridge void *)k;
            dictionary_objects.keyvals[dictionary_count++].value = (__bridge void *)[__dictionary objectForKey:k];
            if (dictionary_count == 100) break;
        }
        memset( dictionary_objects.keyvals + dictionary_count,0,sizeof(dictionary_objects.keyvals[0]) * (100 - dictionary_count) );
        dictionary_count = __dictionary.count;

        /*i100*/ [dictionaryDelegate stateOK];
    }
    - (bool)unacceptable:(id)obj {
        MSGSTART("EndpointD:-(bool)unacceptable:(id)obj")
        return !(acceptableSel && [self.owner performUnknownSelector:acceptableSel withObject:obj]);
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("EndpointD:-(id)valueForKey:(NSString*)key")
        return [__dictionary valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("EndpointD:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying> )key {
        MSGSTART("EndpointD:-(void)willReplaceObject:(id)fromObject withObject:(id)toObject forKey:(id<NSCopying>)key")

        /*i-900*/ if (fromObject)
            if (!__restrictRef) [[self endpointForObject:fromObject] _removeReferrer:self];

        /*i100*/ [dictionaryDelegate willReplaceObject:fromObject withObject:toObject forKey:key];

/*i950*/ if (fromObject) {
            NSMutableSet *keys = [__dictionaryObjectKeys objectForKey:(id < NSCopying >)fromObject];
            if (!keys)
                [self passFail:NO format:@"!!!dk Object not known\n"];
            if (![keys containsObject:key])
                [self passFail:NO format:@"!!!dk Key doesn't exist\n"];
            if (keys.count == 1) [__dictionaryObjectKeys removeObjectForKey:(id < NSCopying >)fromObject];
            else [keys removeObject:key];
        }
    }
    - (BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag {
        MSGSTART("EndpointD:-(BOOL)writeToFile:(NSString *)path atomically:(BOOL)flag")

        return [__dictionary writeToFile:path atomically:flag];
    }
    - (BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag {
        MSGSTART("EndpointD:-(BOOL)writeToURL:(NSURL *)url atomically:(BOOL)flag")

        return [__dictionary writeToURL:url atomically:flag];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         EndpointS
    #define _WIClass_           EndpointS__
    #define _className_         endpointS
    #define _Class_             EndpointS__
    @implementation EndpointS

    @synthesize __owner_context = __owner_context;
    @synthesize __restrictRef = __restrictRef;
    @synthesize acceptableSel = acceptableSel;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize otherEndObjectToEndpoint = otherEndObjectToEndpoint;
    @synthesize retains = retains;
    @synthesize retrievesWeakValues = retrievesWeakValues;
    @synthesize set_count = set_count;
    @synthesize set_objects = set_objects;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassEndpointS {
        MSGSTART("EndpointS:-(void)_startObjectOfClassEndpointS")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ version = (1);
        /*ivar*/ __restrictRef = (NO);

        /*i0*/ self.delegateForSet = self;
    }
    - (NSMutableSet *)__mutableSet {
        MSGSTART("EndpointS:-(NSMutableSet*)__mutableSet")

        /*i-999*/ NSMutableSet * ret = __mutableSet;
        /*i999*/ return ret;
    }
    - (NSSet *)__set {
        MSGSTART("EndpointS:-(NSSet*)__set")

        /*i-999*/ NSSet * ret = __set;
        /*i999*/ return ret;
    }
    - (bool)_addObject:(id)object {
        MSGSTART("EndpointS:-(bool)_addObject:(id)object")

        bool weak = insertsWeakObjectsByDefault;
        if ( (![__set containsObject:object]) && [self shouldAddObject:object makeWeak:weak] ) {
            [self willAddObject:object];
            [__mutableSet addObject:(weak ? [object weakSelf] : [object strongSelf])];
            if (weak) weakObjectCount++;
            [self didAddObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("EndpointS:-(bool)_addObjectsFromArray:(NSArray*)array")

        bool ret = NO;
        for (NSObject *object in array) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_addReferrer:(NSObject<LinkEndpoint> *)ep {
        MSGSTART("EndpointS:-(bool)_addReferrer:(NSObject<LinkEndpoint>*)ep")

        id v = ep.owner;
        if (!v) return NO;

        bool r = __restrictRef;
        __restrictRef = YES;
        [self addObject:v];
        __restrictRef = r;
        return YES;
    }
    - (bool)_filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("EndpointS:-(bool)_filterUsingPredicate:(NSPredicate *)predicate")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_intersectSet:(NSSet *)set {
        MSGSTART("EndpointS:-(bool)_intersectSet:(NSSet*)set")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![set containsObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_minusSet:(NSSet *)set {
        MSGSTART("EndpointS:-(bool)_minusSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _removeObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("EndpointS:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSSet *was = [__set copy];
        for (NSObject *object in was) {
            [self willRemoveObject:object];
        }
        weakObjectCount = 0;
        [__mutableSet removeAllObjects];
        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObject:(id)object {
        MSGSTART("EndpointS:-(bool)_removeObject:(id)object")

        if ([__set containsObject:object]) {
            [self willRemoveObject:object];
            if ([object isWeakSelf]) --weakObjectCount;
            [__mutableSet removeObject:object];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (void)_removeReferrer:(NSObject<LinkEndpoint> *)ep {
        MSGSTART("EndpointS:-(void)_removeReferrer:(NSObject<LinkEndpoint>*)ep")

        id v = ep.owner;
        if (v) {
            bool r = __restrictRef;
            __restrictRef = YES;
            [self removeObject:v];
            __restrictRef = r;
        }
    }
    - (bool)_setSet:(NSSet *)set {
        MSGSTART("EndpointS:-(bool)_setSet:(NSSet*)set")

        bool ret = [self _intersectSet:set];
        if ([self _unionSet:set]) ret = YES;
        return ret;
    }
    - (bool)_unionSet:(NSSet *)set {
        MSGSTART("EndpointS:-(bool)_unionSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("EndpointS:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("EndpointS:-(void)addObject:(id)object")

        if ([self _addObject:object]) [self stateOK];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("EndpointS:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("EndpointS:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__set addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (NSArray *)allObjects {
        MSGSTART("EndpointS:-(NSArray*)allObjects")
        return [__set allObjects];
    }
    - (id)anyObject {
        MSGSTART("EndpointS:-(id)anyObject")
        return [[__set anyObject] selfWithWeakness:retrievesWeakValues];
    }
    - (constchar *)cdescription {
        MSGSTART("EndpointS:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("EndpointS:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("EndpointS:-(BOOL)containsObject:(id)object")
        return [__set containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("EndpointS:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (Unsigned)count {
        MSGSTART("EndpointS:-(Unsigned)count")
        return [__set count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("EndpointS:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__set countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("EndpointS:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __set) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("EndpointS:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ setDelegate = nil;

        __mutableSet = nil;

        owner = nil;

        __set = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("EndpointS:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("EndpointS:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("EndpointS:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__set description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("EndpointS:-(NSString*)descriptionWithLocale:(id)locale")
        return [__set descriptionWithLocale:locale];
    }
    - (void)didAddObject:(id)object {
        MSGSTART("EndpointS:-(void)didAddObject:(id)object")



        /*i100*/[setDelegate didAddObject : object];

/*i900*/ if (!__restrictRef) [[self endpointForObject:object] _addReferrer:self];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("EndpointS:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("EndpointS:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("EndpointS:-(void)encodeWithCoder:(NSCoder*)coder")

        [__set encodeWithCoder : coder];
    }
    - (NSObject<LinkEndpoint> *)endpointForObject:(id)obj {
        MSGSTART("EndpointS:-(NSObject<LinkEndpoint>*)endpointForObject:(id)obj")

        if (obj) return (NSObject<LinkEndpoint> *)[self.owner performUnknownSelector : otherEndObjectToEndpoint withObject : obj];
        else return nil;
    }
    + (EndpointS *)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint {
        MSGSTART("EndpointS:+(EndpointS*)endpointWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint")

        return (EndpointS *)[[EndpointS alloc] initWithOwner:aowner retains:aretains acceptableSel:aacceptableSel otherEndObjectToEndpoint:aotherEndObjectToEndpoint];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("EndpointS:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("EndpointS:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("EndpointS:-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate")
        return [__set filteredSetUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("EndpointS:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        if ([self _filterUsingPredicate:predicate]) [self stateOK];
    }
    - (NSMutableSet *)getAndClear {
        MSGSTART("EndpointS:-(NSMutableSet*)getAndClear")

        NSMutableSet * ret = __mutableSet;
        for (id o in ret) {
            [self willRemoveObject:o];
        }
        __set = __mutableSet = [[NSMutableSet alloc] init];
        for (id o in ret) {
            [self didRemoveObject:o];
        }
        return ret;
    }
    - (Unsigned)hash {
        MSGSTART("EndpointS:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (EndpointS *)init {
        MSGSTART("EndpointS:-(EndpointS*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] init];

        /*i11*/ [self _startObjectOfClassEndpointS];

/*i10001*/ return self;
    }
    - (EndpointS *)initWithArray:(NSArray *)array {
        MSGSTART("EndpointS:-(EndpointS*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithArray:array];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointS];

/*i10001*/ return self;
    }
    - (EndpointS *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("EndpointS:-(EndpointS*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassEndpointS];

/*i10001*/ return self;
    }
    - (EndpointS *)initWithCoder:(NSCoder *)coder {
        MSGSTART("EndpointS:-(EndpointS*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointS];

/*i10001*/ return self;
    }
    - (EndpointS *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("EndpointS:-(EndpointS*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointS];

/*i10001*/ return self;
    }
    - (EndpointS *)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint {
        MSGSTART("EndpointS:-(EndpointS*)initWithOwner:(id)aowner retains:(bool)aretains acceptableSel:(SEL)aacceptableSel otherEndObjectToEndpoint:(SEL)aotherEndObjectToEndpoint")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-900*/ __set = __mutableSet = [[MutableSet alloc] init];

        owner = aowner;
        retains = aretains;
        acceptableSel = aacceptableSel;
        otherEndObjectToEndpoint = aotherEndObjectToEndpoint;

        /*i11*/ [self _startObjectOfClassEndpointS];

/*i10001*/ return self;
    }
    - (EndpointS *)initWithSet:(NSSet *)set {
        MSGSTART("EndpointS:-(EndpointS*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = (insertsWeakObjectsByDefault ? set.weakMutableCopy : [[NSMutableSet alloc] initWithSet:set]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointS];

/*i10001*/ return self;
    }
    - (EndpointS *)initWithSet:(NSSet *)set copyItems:(BOOL)copy {
        MSGSTART("EndpointS:-(EndpointS*)initWithSet:(NSSet*)set copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithSet:set copyItems:copy];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassEndpointS];

/*i10001*/ return self;
    }
    - (void)intersectSet:(NSSet *)set {
        MSGSTART("EndpointS:-(void)intersectSet:(NSSet*)set")

        if ([self _intersectSet:set]) [self stateOK];
    }
    - (BOOL)intersectsSet:(NSSet *)set {
        MSGSTART("EndpointS:-(BOOL)intersectsSet:(NSSet*)set")
        return [__set intersectsSet:set];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("EndpointS:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToSet:(NSSet *)set {
        MSGSTART("EndpointS:-(BOOL)isEqualToSet:(NSSet*)set")
        return [__set isEqualToSet:set];
    }
    - (BOOL)isSubsetOfSet:(NSSet *)set {
        MSGSTART("EndpointS:-(BOOL)isSubsetOfSet:(NSSet*)set")
        return [__set isSubsetOfSet:set];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("EndpointS:-(void)makeObjectsPerformSelector:(SEL)selector")
        [__set makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("EndpointS:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")
        [__set makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)member:(id)object {
        MSGSTART("EndpointS:-(id)member:(id)object")
        return [__set member:object];
    }
    - (void)minusSet:(NSSet *)set {
        MSGSTART("EndpointS:-(void)minusSet:(NSSet*)set")

        if ([self _minusSet:set]) [self stateOK];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("EndpointS:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("EndpointS:-(NSEnumerator*)objectEnumerator")
        return [__set objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("EndpointS:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("EndpointS:-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsPassingTest:predicate];
    }
    - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("EndpointS:-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsWithOptions:opts passingTest:predicate];
    }
    - (id)owner {
        MSGSTART("EndpointS:-(id)owner")

        /*i-999*/ id ret = owner;
        /*i999*/ return ret;
    }
    - (void)removeAllObjects {
        MSGSTART("EndpointS:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("EndpointS:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("EndpointS:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObject:(id)object {
        MSGSTART("EndpointS:-(void)removeObject:(id)object")

        if ([self _removeObject:object]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("EndpointS:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__set removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("EndpointS:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__set removeObserver : observer forKeyPath : keyPath context : context];
    }
    + (EndpointS *)set {
        MSGSTART("EndpointS:+(EndpointS*)set")
        return [[EndpointS alloc] init];
    }
    - (NSSet *)setByAddingObject:(id)object {
        MSGSTART("EndpointS:-(NSSet*)setByAddingObject:(id)object")
        return [__set setByAddingObject:object];
    }
    - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("EndpointS:-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array")
        return [__set setByAddingObjectsFromArray:array];
    }
    - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set {
        MSGSTART("EndpointS:-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set")
        return [__set setByAddingObjectsFromSet:set];
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("EndpointS:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("EndpointS:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setSet:(NSSet *)set {
        MSGSTART("EndpointS:-(void)setSet:(NSSet*)set")

        if ([self _setSet:set]) [self stateOK];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("EndpointS:-(void)setValue:(id)value forKey:(NSString *)key")
        [__set setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("EndpointS:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setSet:__set.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setSet:__set.asStrong];
                break;
        }
    }
    + (EndpointS *)setWithArray:(NSArray *)array {
        MSGSTART("EndpointS:+(EndpointS*)setWithArray:(NSArray*)array")
        return [[EndpointS alloc] initWithArray:array];
    }
    + (id)setWithCapacity:(Unsigned)numItems {
        MSGSTART("EndpointS:+(id)setWithCapacity:(Unsigned)numItems")

        return [[EndpointS alloc] initWithCapacity:numItems];
    }
    + (EndpointS *)setWithObject:(id)object {
        MSGSTART("EndpointS:+(EndpointS*)setWithObject:(id)object")
        return [[EndpointS alloc] initWithObjects:&object count:1];
    }
    + (EndpointS *)setWithSet:(NSSet *)set {
        MSGSTART("EndpointS:+(EndpointS*)setWithSet:(NSSet*)set")
        return [[EndpointS alloc] initWithSet:set];
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("EndpointS:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i0*/ if ( (!__restrictRef) && ([self containsObject:object] || [self unacceptable:object]) ) ret = NO;


            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("EndpointS:-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors")
        return [__set sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (void)stateOK {
        MSGSTART("EndpointS:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ set_count = 0;
        for (id o in __set) {
            set_objects.ids[set_count++] = (__bridge void *)o;
            if (set_count == 100) break;
        }
        memset( set_objects.ids + set_count,0,sizeof(set_objects.ids[0]) * (100 - set_count) );
        set_count = __set.count;
    }
    - (bool)unacceptable:(id)obj {
        MSGSTART("EndpointS:-(bool)unacceptable:(id)obj")
        return !(acceptableSel && [self.owner performUnknownSelector:acceptableSel withObject:obj]);
    }
    - (void)unionSet:(NSSet *)set {
        MSGSTART("EndpointS:-(void)unionSet:(NSSet*)set")

        if ([self _unionSet:set]) [self stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("EndpointS:-(id)valueForKey:(NSString*)key")
        return [__set valueForKey:key];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("EndpointS:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object {
        MSGSTART("EndpointS:-(void)willAddObject:(id)object")


        /*i100*/[setDelegate willAddObject : object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("EndpointS:-(void)willRemoveObject:(id)object")

        /*i-900*/ if (!__restrictRef) [[self endpointForObject:object] _removeReferrer:self];

        /*i100*/ [setDelegate willRemoveObject:object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
