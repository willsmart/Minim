// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 1 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D1





        @interface ObjectGraph : NSObject<BaseObject, ClassObject, Object, Ticker> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_ObjectGraph; @protected
            bool debugAutorelease;
            bool inTick;
            bool isZombie;
            NSMutableString *newEdits;
            NSMutableString *newEdits2;
            bool not_first;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSTimer *v_tim;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool inTick;
        @property (nonatomic,readonly) bool isZombie;
        @property (strong,nonatomic,readonly) NSMutableString *newEdits;
        @property (strong,nonatomic,readonly) NSMutableString *newEdits2;
        @property (nonatomic,readwrite) bool not_first;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) bool savingGraph;
        @property (strong,nonatomic,readwrite) NSTimer *tim;
        - (void)_startObjectOfClassObjectGraph;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        + (ObjectGraph *)get;
        - (ObjectGraph *)init;
        - (NSMutableString *)newEdits;
        - (NSMutableString *)newEdits2;
        - (void)object:(LL)owner ownsObject:(LL)object count:(Int)count;
        - (NSMutableString *)objectName;
        - (bool)savingGraph;
        - (void)setTim:(NSTimer *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        - (void)start;
        - (void)startWithInterval:(float)interval;
        - (void)stop;
        - (void)tick;
        - (NSTimer *)tim;

        @end





        @interface Trace : NSObject<BaseObject, ClassObject, Object, Ticker> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_Trace; @protected
            bool debugAutorelease;
            bool inTick;
            bool isZombie;
            bool not_first;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSTimer *v_tim;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool inTick;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readwrite) bool not_first;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readonly) bool savingTrace;
        @property (strong,nonatomic,readwrite) NSTimer *tim;
        - (void)_startObjectOfClassTrace;
        + (NSString *)callStackStringFromDepth:(Int)fromDepth toDepth:(Int)toDepth;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSString *)description;
        - (void)die;
        + (Trace *)get;
        - (Trace *)init;
        - (NSMutableString *)objectName;
        - (bool)savingTrace;
        - (void)setTim:(NSTimer *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        - (void)start;
        - (void)startWithInterval:(float)interval;
        - (void)stop;
        - (void)tick;
        - (NSTimer *)tim;

        @end
    #endif // INCLUDE_IFACE_D1

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: o





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         ObjectGraph
    #define _WIClass_           ObjectGraph__
    #define _className_         objectGraph
    #define _Class_             ObjectGraph__
    @implementation ObjectGraph

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize inTick = inTick;
    @synthesize isZombie = isZombie;
    @synthesize not_first = not_first;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassObjectGraph {
        MSGSTART("ObjectGraph:-(void)_startObjectOfClassObjectGraph")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ newEdits = ([[NSMutableString alloc] init]);
        /*ivar*/ newEdits2 = ([[NSMutableString alloc] init]);

        /*i0*/}
    - (constchar *)cdescription {
        MSGSTART("ObjectGraph:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("ObjectGraph:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("ObjectGraph:-(void)dealloc")

        /*i-500*/[self stop];

/*i-151*/ [self die];
/*i0*/ v_tim = nil;

        newEdits = nil;

        newEdits2 = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        MSGSTART("ObjectGraph:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        MSGSTART("ObjectGraph:-(void)die")

        /*i900*/}
    + (ObjectGraph *)get {
        MSGSTART("ObjectGraph:+(ObjectGraph*)get")
        return [[ObjectGraph alloc] init];
    }
    - (ObjectGraph *)init {
        MSGSTART("ObjectGraph:-(ObjectGraph*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassObjectGraph];

/*i10001*/ return self;
    }
    - (NSMutableString *)newEdits {
        MSGSTART("ObjectGraph:-(NSMutableString*)newEdits")

        /*i-999*/ NSMutableString * ret = newEdits;
        /*i999*/ return ret;
    }
    - (NSMutableString *)newEdits2 {
        MSGSTART("ObjectGraph:-(NSMutableString*)newEdits2")

        /*i-999*/ NSMutableString * ret = newEdits2;
        /*i999*/ return ret;
    }
    - (void)object:(LL)owner ownsObject:(LL)object count:(Int)count {
        MSGSTART("ObjectGraph:-(void)object:(LL)owner ownsObject:(LL)object count:(Int)count")

        [newEdits appendFormat : @"[%qu,%f,%qu,%qu,%d],\n",g_sequence++,CACurrentMediaTime(),owner,object,(int)count];
    }
    - (NSMutableString *)objectName {
        MSGSTART("ObjectGraph:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (bool)savingGraph {
        MSGSTART("ObjectGraph:-(bool)savingGraph")
        return v_tim != nil;
    }
    - (void)setTim:(NSTimer *)v {
        MSGSTART("ObjectGraph:-(void)setTim:(NSTimer*)v")

        /*i-905*/ if (v_tim == v) return;

        /*i-900*/ {
            v_tim = (id)v;
        }
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("ObjectGraph:-(void)setWithDictionary:(NSDictionary*)d")
    }
    - (void)start {
        MSGSTART("ObjectGraph:-(void)start")
        g_objectGraph = self; [self startWithInterval:0.5];
    }
    - (void)startWithInterval:(float)interval {
        MSGSTART("ObjectGraph:-(void)startWithInterval:(float)interval")

        [self.tim invalidate];
        self.tim = [NSTimer scheduledTimerWithTimeInterval:interval target:self selector:@selector(tick) userInfo:nil repeats:YES];
    }
    - (void)stop {
        MSGSTART("ObjectGraph:-(void)stop")


        [self.tim invalidate];
        self.tim = nil;

        /*i100*/ g_objectGraph = nil;
    }
    - (void)tick {
        MSGSTART("ObjectGraph:-(void)tick")

        /*i-100*/ @synchronized(self) {
            if (inTick) return;

            inTick = YES;
        }

        /*i0*/ g_objectGraph = self;

        [newEdits2 setString:@""];
        NSMutableString *tmp = newEdits; newEdits = newEdits2; newEdits2 = tmp;

        if (newEdits2.length) {
            NSURL *url = [NSURL URLWithString:[g_singletons.homeURLPrefix stringByAppendingFormat:@"saveobjectgraph.php?fn=%@&fst=%d",g_singletons.styleName,not_first ? 0:1]];
            [[newEdits2 dataUsingEncoding:NSUTF8StringEncoding] sendAsBodyOfPOSTRequestWithURL:url returningResponse:nil error:nil];
            not_first = 1;
        }

        [newEdits2 setString:newEdits];
        newEdits2 = newEdits; newEdits = tmp;


        /*i100*/ @synchronized(self) {
            inTick = NO;
        }
    }
    - (NSTimer *)tim {
        MSGSTART("ObjectGraph:-(NSTimer*)tim")

        /*i-999*/ NSTimer * ret = v_tim;
        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: t





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         Trace
    #define _WIClass_           Trace__
    #define _className_         trace
    #define _Class_             Trace__
    @implementation Trace

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize inTick = inTick;
    @synthesize isZombie = isZombie;
    @synthesize not_first = not_first;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassTrace {
        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    + (NSString *)callStackStringFromDepth:(Int)fromDepth toDepth:(Int)toDepth {
        NSMutableString *ret = [NSMutableString string];
        NSArray *__a = [NSThread callStackSymbols];

        // NSLog(__a.description);
        for (Int d = 1,dd = 0; (d < __a.count) && (dd <= toDepth); d++) {
            NSString *s = [__a objectAtIndex:d];
            Unsigned st = [s rangeOfString:@"["].location;
            Unsigned en = [s rangeOfString:@"]" options:NSBackwardsSearch].location;
            if ( (st != NSNotFound) && (en != NSNotFound) && (en > st) ) {
                s = [s substringWithRange:NSMakeRange( st - 1,en + 1 - (st - 1) )];
                if ([s isEqualToString:@"-[EndpointS didAddObject:]"]) {
                    [ret appendFormat:@" ES+ "];
                }
                else if ([s isEqualToString:@"-[EndpointS addObject:]"] || [s isEqualToString:@"-[EndpointS _addObject:]"]) {
                }
                else if ([s isEqualToString:@"-[MutableSet didAddObject:]"]) {
                    [ret appendFormat:@" MS+ "];
                }
                else if ([s isEqualToString:@"-[MutableSet addObject:]"] || [s isEqualToString:@"-[MutableSet _addObject:]"]) {
                }
                else if ([s isEqualToString:@"-[EndpointS willRemoveObject:]"]) {
                    [ret appendFormat:@" ES- "];
                }
                else if ([s isEqualToString:@"-[EndpointS removeObject:]"] || [s isEqualToString:@"-[EndpointS _removeObject:]"]) {
                }
                else if ([s isEqualToString:@"-[MutableSet willRemoveObject:]"]) {
                    [ret appendFormat:@" MS- "];
                }
                else if ([s isEqualToString:@"-[MutableSet removeObject:]"] || [s isEqualToString:@"-[MutableSet _removeObject:]"]) {
                }
                else if ([s isEqualToString:@"-[EndpointA didInsertObject:withIndex:]"]) {
                    [ret appendFormat:@" EA+ "];
                }
                else if ([s isEqualToString:@"-[EndpointA insertObject:atIndex:]"] || [s isEqualToString:@"-[EndpointA _insertObject:withIndex:]"]) {
                }
                else if ([s isEqualToString:@"-[MutableArray didInsertObject:withIndex:]"]) {
                    [ret appendFormat:@" MA+ "];
                }
                else if ([s isEqualToString:@"-[MutableArray insertObject:withIndex:]"] || [s isEqualToString:@"-[MutableArray _insertObject:withIndex:]"]) {
                }
                else if ([s isEqualToString:@"-[EndpointA willRemoveObject:atIndex:]"]) {
                    [ret appendFormat:@" EA- "];
                }
                else if ([s isEqualToString:@"-[EndpointA removeObject:atIndex:]"] || [s isEqualToString:@"-[EndpointA _removeObject:atIndex:]"]) {
                }
                else if ([s isEqualToString:@"-[MutableArray willRemoveObject:atIndex:]"]) {
                    [ret appendFormat:@" MA- "];
                }
                else if ([s isEqualToString:@"-[MutableArray removeObject:atIndex:]"] || [s isEqualToString:@"-[MutableArray _removeObject:atIndex:]"]) {
                }
                else {
                    if (dd >= fromDepth)
                        [ret appendFormat:@" -- %@",s];
                    dd++;
                }
            }
        }
        return ret;
    }
    - (constchar *)cdescription {
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        /*i-500*/ [self stop];

/*i-151*/ [self die];
/*i0*/ v_tim = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSString *)description {
        /*i-999*/ NSMutableString *ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)die {
        /*i900*/}
    + (Trace *)get {
        return [[Trace alloc] init];
    }
    - (Trace *)init {
        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassTrace];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        /*i-999*/ NSMutableString *ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (bool)savingTrace {
        return v_tim != nil;
    }
    - (void)setTim:(NSTimer *)v {
        /*i-905*/ if (v_tim == v) return;

        /*i-900*/ {
            v_tim = (id)v;
        }
    }
    - (void)setWithDictionary:(NSDictionary *)d {
    }
    - (void)start {
        __getCurrentTraceString(); g_trace = self; [self startWithInterval:0.5];
    }
    - (void)startWithInterval:(float)interval {
        [self.tim invalidate];
        self.tim = [NSTimer scheduledTimerWithTimeInterval:interval target:self selector:@selector(tick) userInfo:nil repeats:YES];
    }
    - (void)stop {
        [self.tim invalidate];
        self.tim = nil;

        /*i100*/ g_trace = nil;
    }
    - (void)tick {
        /*i-100*/ @synchronized(self) {
            if (inTick) return;

            inTick = YES;
        }

        /*i0*/ g_trace = self;

        NSString *s = __getCurrentTraceString();

        if (s.length) {
            NSURL *url = [NSURL URLWithString:[g_singletons.homeURLPrefix stringByAppendingFormat:@"savetrace.php?fn=%@&fst=%d",g_singletons.styleName,not_first ? 0:1]];
            [[s dataUsingEncoding:NSUTF8StringEncoding] sendAsBodyOfPOSTRequestWithURL:url returningResponse:nil error:nil];
            not_first = 1;
        }


        /*i100*/ @synchronized(self) {
            inTick = NO;
        }
    }
    - (NSTimer *)tim {
        /*i-999*/ NSTimer *ret = v_tim;

        /*i999*/ return ret;
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
