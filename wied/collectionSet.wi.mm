// WInterface autogenerated this file. HaND

// Tasks:
// Embedded 1 notes (look for "MARK:WI:" in the code)




#pragma mark -
#pragma mark Interfaces:
#ifdef INCLUDE_IFACE

    #ifdef INCLUDE_IFACE_D1





        @interface MutableSetFollowerDelegate : NSObject<BaseObject, ClassObject, MutableSetDelegate, Object> {
            NSMutableDictionary *map1;
            NSMutableDictionary *mapsets;
            NSMutableDictionary *ocounts;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableSetFollowerDelegate; @protected
            bool debugAutorelease;
            NSSet *delegateForSet;
            MutableSet *followerSet;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<MutableSetDelegate> *setDelegate;
        }

        @property (strong,nonatomic,readonly) NSMutableDictionary *__map1;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__mapsets;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__ocounts;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite) MutableSet *followerSet;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        - (void)_startObjectOfClassMutableSetFollowerDelegate;
        - (NSMutableDictionary *)__map1;
        - (NSMutableDictionary *)__mapsets;
        - (NSMutableDictionary *)__ocounts;
        - (void)_refreshFollowerSet;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (MutableSet *)followerSet;
        - (void)followerWillAddObject:(id)object;
        + (MutableSetFollowerDelegate *)get;
        - (MutableSetFollowerDelegate *)init;
        - (id)objectForObject:(id)object;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsForObject:(id)object;
        - (void)refreshFollowerSet;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setFollowerSet:(MutableSet *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end





        @interface MutableSetUnionDelegate : NSObject<BaseObject, ClassObject, MutableSetDelegate, Object> {
            NSMutableDictionary *mapsets;
            NSMutableDictionary *ocounts;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableSetUnionDelegate; @protected
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            NSObject<MutableSetDelegate> *setDelegate;
            MutableSet *unionSet;
        }

        @property (strong,nonatomic,readonly) NSMutableDictionary *__mapsets;
        @property (strong,nonatomic,readonly) NSMutableDictionary *__ocounts;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        @property (strong,nonatomic,readwrite) MutableSet *unionSet;
        - (void)_startObjectOfClassMutableSetUnionDelegate;
        - (NSMutableDictionary *)__mapsets;
        - (NSMutableDictionary *)__ocounts;
        - (void)_refreshUnionSet;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        + (MutableSetUnionDelegate *)get;
        - (MutableSetUnionDelegate *)init;
        - (NSMutableString *)objectName;
        - (void)refreshUnionSet;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (NSObject<MutableSet> *)setForObject:(id)object;
        - (void)setUnionSet:(MutableSet *)v;
        - (void)setWithDictionary:(NSDictionary *)d;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (void)stateOK;
        - (MutableSet *)unionSet;
        - (void)unionWillAddObject1:(id)o;
        - (void)unionWillAddObject:(id)object;
        - (void)unionWillRemoveObject1:(id)o;
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end





        @interface MutableSetUnionDelegate1 : NSObject<ClassObject, MutableSetDelegate, Object> {
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableSetUnionDelegate1; @protected
            bool debugAutorelease;
            NSSet *delegateForSet;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            MutableSetUnionDelegate *owner;
            NSObject<MutableSetDelegate> *setDelegate;
        }

        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (strong,nonatomic,readwrite  /*(public readonly)*/) MutableSetUnionDelegate *owner;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        - (void)_startObjectOfClassMutableSetUnionDelegate1;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (MutableSetUnionDelegate1 *)initWithOwner:(MutableSetUnionDelegate *)aowner;
        - (NSMutableString *)objectName;
        - (MutableSetUnionDelegate *)owner;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setOwner:(MutableSetUnionDelegate *)v;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif  // __SWIFT__
        - (void)stateOK;
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end
    #endif      // INCLUDE_IFACE_D1

    #ifdef INCLUDE_IFACE_D3





        @interface MutableSetMirrorTesterImpl : NSMutableSet<ClassObject, MutableSetMirrorTester, Object> {
            Int __addingToMirrorSet;
            NSMutableSet *__mirrorSet;
            NSMutableSet *__mutableSet;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_MutableSetMirrorTesterImpl; @protected
            Int __removingFromMirrorSet;
            NSSet *__set;
            bool debugAutorelease;
            NSSet *delegateForSet;
            NSMutableString *v_errs;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            bool retrievesWeakValues;
            Unsigned set_count;
            id100 set_objects;
            NSObject<MutableSetDelegate> *setDelegate;
            long version;
            Int weakObjectCount;
        }

        @property (nonatomic,readwrite) Int __addingToMirrorSet;
        @property (strong,nonatomic,readwrite) NSMutableSet *__mirrorSet;
        @property (strong,nonatomic,readonly) NSMutableSet *__mutableSet;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Int __removingFromMirrorSet;
        @property (strong,nonatomic,readonly) NSSet *__set;
        @property (nonatomic,readonly) NSArray *allObjects;
        @property (nonatomic,readonly) id anyObject;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) bool retrievesWeakValues;
        @property (nonatomic,readwrite) Unsigned set_count;
        @property (nonatomic,readwrite) id100 set_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassMutableSetMirrorTesterImpl;
        - (NSMutableSet *)__mirrorSet;
        - (NSMutableSet *)__mutableSet;
        - (NSSet *)__set;
        - (bool)_addObject:(id)object;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_filterUsingPredicate:(NSPredicate *)predicate;
        - (bool)_intersectSet:(NSSet *)set;
        - (bool)_minusSet:(NSSet *)set;
        - (bool)_removeAllObjects;
        - (bool)_removeObject:(id)object;
        - (bool)_setSet:(NSSet *)set;
        - (bool)_unionSet:(NSSet *)set;
        - (void)add:(Int)c toWillAddCountForObject:(id)object;
        - (void)add:(Int)c toWillRemoveCountForObject:(id)object;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (NSArray *)allObjects;
        - (id)anyObject;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (NSMutableString *)errs;
        - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (NSMutableSet *)getAndClear;
        - (Unsigned)hash;
        - (MutableSetMirrorTesterImpl *)init;
        - (MutableSetMirrorTesterImpl *)initWithArray:(NSArray *)array;
        - (MutableSetMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems;
        - (MutableSetMirrorTesterImpl *)initWithCoder:(NSCoder *)coder;
        - (MutableSetMirrorTesterImpl *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (MutableSetMirrorTesterImpl *)initWithSet:(NSSet *)set;
        - (MutableSetMirrorTesterImpl *)initWithSet:(NSSet *)set copyItems:(BOOL)copy;
        - (void)intersectSet:(NSSet *)set;
        - (BOOL)intersectsSet:(NSSet *)set;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToSet:(NSSet *)set;
        - (BOOL)isSubsetOfSet:(NSSet *)set;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)member:(id)object;
        - (void)minusSet:(NSSet *)set;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)removeObject:(id)object;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        + (MutableSetMirrorTesterImpl *)set;
        - (void)set__mirrorSet:(NSMutableSet *)v;
        - (NSSet *)setByAddingObject:(id)object;
        - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array;
        - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setSet:(NSSet *)set;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        + (MutableSetMirrorTesterImpl *)setWithArray:(NSArray *)array;
        + (id)setWithCapacity:(Unsigned)numItems;
        + (MutableSetMirrorTesterImpl *)setWithObject:(id)object;
        + (MutableSetMirrorTesterImpl *)setWithSet:(NSSet *)set;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)stateOK;
        - (void)unionSet:(NSSet *)set;
        - (id)valueForKey:(NSString *)key;
        - (void)verifyMirrorSet;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end





        @interface WeakMutableSetMirrorTesterImpl : NSMutableSet<ClassObject, MutableSet, MutableSetMirrorTester, Object, WeakCollection> {
            Int __addingToMirrorSet;
            NSMutableSet *__mirrorSet;
            NSMutableSet *__mutableSet;
            LL __owner_context;
            @private ULL __private_access_thread_mask_in_WeakMutableSetMirrorTesterImpl; @protected
            Int __removingFromMirrorSet;
            NSSet *__set;
            bool debugAutorelease;
            NSSet *delegateForSet;
            NSMutableString *v_errs;
            bool insertsWeakObjectsByDefault;
            bool isZombie;
            LL objectIDInClass;
            LL objectIDInTotal;
            bool retrievesWeakValues;
            Unsigned set_count;
            id100 set_objects;
            NSObject<MutableSetDelegate> *setDelegate;
            long version;
            Int weakObjectCount;
        }

        @property (nonatomic,readwrite) Int __addingToMirrorSet;
        @property (strong,nonatomic,readwrite) NSMutableSet *__mirrorSet;
        @property (strong,nonatomic,readonly) NSMutableSet *__mutableSet;
        @property (nonatomic,readwrite) LL __owner_context;
        @property (nonatomic,readwrite) Int __removingFromMirrorSet;
        @property (strong,nonatomic,readonly) NSSet *__set;
        @property (nonatomic,readonly) NSArray *allObjects;
        @property (nonatomic,readonly) id anyObject;
        @property (nonatomic,readonly) constchar *cdescription;
        @property (nonatomic,readonly) constchar *cobjectName;
        @property (atomic,readonly) Unsigned count;
        @property (nonatomic,readwrite) bool debugAutorelease;
        @property (weak,nonatomic,readwrite) NSSet *delegateForSet;
        @property (nonatomic,readonly) NSString *description;
        @property (strong,nonatomic,readwrite) NSMutableString *errs;
        @property (nonatomic,readwrite) bool insertsWeakObjectsByDefault;
        @property (nonatomic,readonly) bool isZombie;
        @property (nonatomic,readonly) NSEnumerator *objectEnumerator;
        @property (nonatomic,readonly) LL objectIDInClass;
        @property (nonatomic,readonly) LL objectIDInTotal;
        @property (nonatomic,readonly) NSMutableString *objectName;
        @property (nonatomic,readwrite) bool retrievesWeakValues;
        @property (nonatomic,readwrite) Unsigned set_count;
        @property (nonatomic,readwrite) id100 set_objects;
        @property (strong,nonatomic,readonly) NSObject<MutableSetDelegate> *setDelegate;
        @property (nonatomic,readwrite) long version;
        @property (nonatomic,readwrite) CollectionWeakness weakness;
        @property (nonatomic,readonly) Int weakObjectCount;
        - (void)_startObjectOfClassWeakMutableSetMirrorTesterImpl;
        - (NSMutableSet *)__mirrorSet;
        - (NSMutableSet *)__mutableSet;
        - (NSSet *)__set;
        - (bool)_addObject:(id)object;
        - (bool)_addObjectsFromArray:(NSArray *)array;
        - (bool)_filterUsingPredicate:(NSPredicate *)predicate;
        - (bool)_intersectSet:(NSSet *)set;
        - (bool)_minusSet:(NSSet *)set;
        - (bool)_removeAllObjects;
        - (bool)_removeObject:(id)object;
        - (bool)_setSet:(NSSet *)set;
        - (bool)_unionSet:(NSSet *)set;
        - (void)add:(Int)c toWillAddCountForObject:(id)object;
        - (void)add:(Int)c toWillRemoveCountForObject:(id)object;
        - (void)addDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)addObject:(id)object;
        - (void)addObjectsFromArray:(NSArray *)array;
        - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context;
        - (NSArray *)allObjects;
        - (id)anyObject;
        - (constchar *)cdescription;
        - (constchar *)cobjectName;
        - (BOOL)containsObject:(id)object;
        - (id)copyWithZone:(NSZone *)zone;
        - (Unsigned)count;
        - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len;
        - (void)countWeakObjects;
        - (void)dealloc;
        - (NSSet *)delegateForSet;
        - (void)delegateForSetChanged;
        - (NSString *)description;
        - (NSString *)descriptionWithLocale:(id)locale;
        - (void)didAddObject:(id)object;
        - (void)didRemoveObject:(id)object;
        - (void)die;
        - (void)encodeWithCoder:(NSCoder *)coder;
        - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block;
        - (NSMutableString *)errs;
        - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate;
        - (void)filterUsingPredicate:(NSPredicate *)predicate;
        - (NSMutableSet *)getAndClear;
        - (Unsigned)hash;
        - (WeakMutableSetMirrorTesterImpl *)init;
        - (WeakMutableSetMirrorTesterImpl *)initWithArray:(NSArray *)array;
        - (WeakMutableSetMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems;
        - (WeakMutableSetMirrorTesterImpl *)initWithCoder:(NSCoder *)coder;
        - (WeakMutableSetMirrorTesterImpl *)initWithObjects:(id *)objects count:(Unsigned)count;
        - (WeakMutableSetMirrorTesterImpl *)initWithSet:(NSSet *)set;
        - (WeakMutableSetMirrorTesterImpl *)initWithSet:(NSSet *)set copyItems:(BOOL)copy;
        - (void)intersectSet:(NSSet *)set;
        - (BOOL)intersectsSet:(NSSet *)set;
        - (BOOL)isEqual:(id)obj;
        - (BOOL)isEqualToSet:(NSSet *)set;
        - (BOOL)isSubsetOfSet:(NSSet *)set;
        - (void)makeObjectsPerformSelector:(SEL)selector;
        - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object;
        - (id)member:(id)object;
        - (void)minusSet:(NSSet *)set;
        - (id)mutableCopyWithZone:(NSZone *)zone;
        - (NSEnumerator *)objectEnumerator;
        - (NSMutableString *)objectName;
        - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate;
        - (bool)passFail:(bool)pass format:(NSString *)format,...;
        - (void)removeAllObjects;
        - (void)removedDelegate;
        - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v;
        - (void)removeObject:(id)object;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath;
        - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context;
        + (WeakMutableSetMirrorTesterImpl *)set;
        - (void)set__mirrorSet:(NSMutableSet *)v;
        - (NSSet *)setByAddingObject:(id)object;
        - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array;
        - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set;
        - (NSObject<MutableSetDelegate> *)setDelegate;
        - (void)setDelegateForSet:(NSSet *)v;
        - (void)setErrs:(NSMutableString *)v;
        - (void)setSet:(NSSet *)set;
        - (void)setValue:(id)value forKey:(NSString *)key;
        - (void)setWeakness:(CollectionWeakness)v;
        + (WeakMutableSetMirrorTesterImpl *)setWithArray:(NSArray *)array;
        + (id)setWithCapacity:(Unsigned)numItems;
        + (WeakMutableSetMirrorTesterImpl *)setWithObject:(id)object;
        + (WeakMutableSetMirrorTesterImpl *)setWithSet:(NSSet *)set;
        #ifndef __SWIFT__
            - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak;
        #endif // __SWIFT__
        - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors;
        - (void)stateOK;
        - (void)unionSet:(NSSet *)set;
        - (id)valueForKey:(NSString *)key;
        - (void)verifyMirrorSet;
        - (CollectionWeakness)weakness;
        - (void)willAddObject:(id)object;
        - (void)willRemoveObject:(id)object;

        @end
    #endif // INCLUDE_IFACE_D3

#else  // INCLUDE_IFACE





    #pragma mark -
    #pragma mark Implementations:





// !!!: Implementations: m





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableSetFollowerDelegate
    #define _WIClass_           MutableSetFollowerDelegate__
    #define _className_         mutableSetFollowerDelegate
    #define _Class_             MutableSetFollowerDelegate__
    @implementation MutableSetFollowerDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableSetFollowerDelegate {
        MSGSTART("MutableSetFollowerDelegate:-(void)_startObjectOfClassMutableSetFollowerDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ mapsets = ([[NSMutableDictionary alloc] init]);
        /*ivar*/ ocounts = ([[NSMutableDictionary alloc] init]);
        /*ivar*/ map1 = ([[NSMutableDictionary alloc] init]);

        /*i0*/}
    - (NSMutableDictionary *)__map1 {
        MSGSTART("MutableSetFollowerDelegate:-(NSMutableDictionary*)__map1")

        /*i-999*/ NSMutableDictionary * ret = map1;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__mapsets {
        MSGSTART("MutableSetFollowerDelegate:-(NSMutableDictionary*)__mapsets")

        /*i-999*/ NSMutableDictionary * ret = mapsets;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__ocounts {
        MSGSTART("MutableSetFollowerDelegate:-(NSMutableDictionary*)__ocounts")

        /*i-999*/ NSMutableDictionary * ret = ocounts;
        /*i999*/ return ret;
    }
    - (void)_refreshFollowerSet {
        MSGSTART("MutableSetFollowerDelegate:-(void)_refreshFollowerSet")

        [ocounts removeAllObjects];
        [map1 removeAllObjects];
        [mapsets removeAllObjects];

        [followerSet _removeAllObjects];
        for (NSObject *object in self.delegateForSet) {
            [self followerWillAddObject:object];
        }
    }
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetFollowerDelegate:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("MutableSetFollowerDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableSetFollowerDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableSetFollowerDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(followerSet,self); followerSet = nil;

        mapsets = nil;

        setDelegate = nil;

        ocounts = nil;

        map1 = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("MutableSetFollowerDelegate:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("MutableSetFollowerDelegate:-(void)delegateForSetChanged")

        if (followerSet) [self refreshFollowerSet];
    }
    - (NSString *)description {
        MSGSTART("MutableSetFollowerDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object {
        MSGSTART("MutableSetFollowerDelegate:-(void)didAddObject:(id)object")


        /*i100*/[setDelegate didAddObject : object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableSetFollowerDelegate:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("MutableSetFollowerDelegate:-(void)die")

        /*i900*/}
    - (MutableSet *)followerSet {
        MSGSTART("MutableSetFollowerDelegate:-(MutableSet*)followerSet")
        return followerSet;
    }
    - (void)followerWillAddObject:(id)object {
        MSGSTART("MutableSetFollowerDelegate:-(void)followerWillAddObject:(id)object")

        if ([mapsets objectForKey:object] || [map1 objectForKey:object]) {
            ERR("Shouldn't have object");
            return;
        }
        id o = [self objectForObject:object];
        if (o) {
            [map1 setObject:o forKey:[PointerKey keyWithObject:object]];

            IntCarrier *c = [ocounts objectForKey:o];
            if (c) {
                c.intValue++;
            }
            else {
                [ocounts setObject:[IntCarrier carrierWithInt:1] forKey:[PointerKey keyWithObject:o]];
                [followerSet _addObject:o];
            }
        }
        else {
            NSSet *s = [self objectsForObject:object];
            if (s) {
                [mapsets setObject:s forKey:[PointerKey keyWithObject:object]];
                for (id o in s) {
                    IntCarrier *c = [ocounts objectForKey:o];
                    if (c) {
                        c.intValue++;
                    }
                    else {
                        [ocounts setObject:[IntCarrier carrierWithInt:1] forKey:[PointerKey keyWithObject:o]];
                        [followerSet _addObject:o];
                    }
                }
            }
        }
    }
    + (MutableSetFollowerDelegate *)get {
        MSGSTART("MutableSetFollowerDelegate:+(MutableSetFollowerDelegate*)get")
        return [[MutableSetFollowerDelegate alloc] init];
    }
    - (MutableSetFollowerDelegate *)init {
        MSGSTART("MutableSetFollowerDelegate:-(MutableSetFollowerDelegate*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassMutableSetFollowerDelegate];

/*i10001*/ return self;
    }
    - (id)objectForObject:(id)object {
        MSGSTART("MutableSetFollowerDelegate:-(id)objectForObject:(id)object")

        /*i-999*/ id ret = nil;

        /*i999*/ return ret;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableSetFollowerDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsForObject:(id)object {
        MSGSTART("MutableSetFollowerDelegate:-(NSSet*)objectsForObject:(id)object")

        /*i-999*/ NSMutableSet * s = [NSMutableSet set]; NSSet *ret = s;

        /*i999*/ return ret;
    }
    - (void)refreshFollowerSet {
        MSGSTART("MutableSetFollowerDelegate:-(void)refreshFollowerSet")

        [self _refreshFollowerSet];
        [followerSet stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableSetFollowerDelegate:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetFollowerDelegate:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("MutableSetFollowerDelegate:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("MutableSetFollowerDelegate:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setFollowerSet:(MutableSet *)v {
        MSGSTART("MutableSetFollowerDelegate:-(void)setFollowerSet:(MutableSet*)v")

        /*i-850*/ REMOVEOWNER(followerSet,self); ADDOWNER(v,self);
        /*i0*/ followerSet = v; [self refreshFollowerSet];
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("MutableSetFollowerDelegate:-(void)setWithDictionary:(NSDictionary*)d")
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableSetFollowerDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableSetFollowerDelegate:-(void)stateOK")

        /*i100*/[followerSet stateOK];
    }
    - (void)willAddObject:(id)object {
        MSGSTART("MutableSetFollowerDelegate:-(void)willAddObject:(id)object")



        /*i100*/[setDelegate willAddObject : object];

/*i500*/ [self followerWillAddObject:object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("MutableSetFollowerDelegate:-(void)willRemoveObject:(id)object")



        /*i100*/[setDelegate willRemoveObject : object];

/*i500*/ id o = [map1 objectForKey:object];
        if (o) {
            IntCarrier *c = [ocounts objectForKey:o];
            if (!--c.intValue) {
                [ocounts removeObjectForKey:o];
                [followerSet _removeObject:o];
            }

            [map1 removeObjectForKey:object];
        }
        else {
            NSSet *s = [mapsets objectForKey:object];
            if (s) {
                for (id o in s) {
                    IntCarrier *c = [ocounts objectForKey:o];
                    if (!--c.intValue) {
                        [ocounts removeObjectForKey:o];
                        [followerSet _removeObject:o];
                    }
                }
                [mapsets removeObjectForKey:object];
            }
            else {
                ERR("Should have object");
            }
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableSetMirrorTesterImpl
    #define _WIClass_           MutableSetMirrorTesterImpl__
    #define _className_         mutableSetMirrorTesterImpl
    #define _Class_             MutableSetMirrorTesterImpl__
    @implementation MutableSetMirrorTesterImpl

    @synthesize __addingToMirrorSet = __addingToMirrorSet;
    @synthesize __owner_context = __owner_context;
    @synthesize __removingFromMirrorSet = __removingFromMirrorSet;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize retrievesWeakValues = retrievesWeakValues;
    @synthesize set_count = set_count;
    @synthesize set_objects = set_objects;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassMutableSetMirrorTesterImpl {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)_startObjectOfClassMutableSetMirrorTesterImpl")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ version = (1);
        /*ivar*/ __mirrorSet = ([MutableSet set]);

        /*i0*/ self.delegateForSet = self;
    }
    - (NSMutableSet *)__mirrorSet {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSMutableSet*)__mirrorSet")

        /*i-999*/ NSMutableSet * ret = __mirrorSet;
        /*i999*/ return ret;
    }
    - (NSMutableSet *)__mutableSet {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSMutableSet*)__mutableSet")

        /*i-999*/ NSMutableSet * ret = __mutableSet;
        /*i999*/ return ret;
    }
    - (NSSet *)__set {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSSet*)__set")

        /*i-999*/ NSSet * ret = __set;
        /*i999*/ return ret;
    }
    - (bool)_addObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)_addObject:(id)object")

        bool weak = insertsWeakObjectsByDefault;
        if ( (![__set containsObject:object]) && [self shouldAddObject:object makeWeak:weak] ) {
            [self willAddObject:object];
            [__mutableSet addObject:(weak ? [object weakSelf] : [object strongSelf])];
            if (weak) weakObjectCount++;
            [self didAddObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)_addObjectsFromArray:(NSArray*)array")

        bool ret = NO;
        for (NSObject *object in array) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)_filterUsingPredicate:(NSPredicate *)predicate")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_intersectSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)_intersectSet:(NSSet*)set")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![set containsObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_minusSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)_minusSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _removeObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSSet *was = [__set copy];
        for (NSObject *object in was) {
            [self willRemoveObject:object];
        }
        weakObjectCount = 0;
        [__mutableSet removeAllObjects];
        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)_removeObject:(id)object")

        if ([__set containsObject:object]) {
            [self willRemoveObject:object];
            if ([object isWeakSelf]) --weakObjectCount;
            [__mutableSet removeObject:object];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_setSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)_setSet:(NSSet*)set")

        bool ret = [self _intersectSet:set];
        if ([self _unionSet:set]) ret = YES;
        return ret;
    }
    - (bool)_unionSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)_unionSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (void)add:(Int)c toWillAddCountForObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)add:(Int)c toWillAddCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didAdd];
            else if (c == 1) [o willAdd];
        }
    }
    - (void)add:(Int)c toWillRemoveCountForObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)add:(Int)c toWillRemoveCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didRemove];
            else if (c == 1) [o willRemove];
        }
    }
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)addObject:(id)object")

        if ([self _addObject:object]) [self stateOK];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__set addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (NSArray *)allObjects {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSArray*)allObjects")
        return [__set allObjects];
    }
    - (id)anyObject {
        MSGSTART("MutableSetMirrorTesterImpl:-(id)anyObject")
        return [[__set anyObject] selfWithWeakness:retrievesWeakValues];
    }
    - (constchar *)cdescription {
        MSGSTART("MutableSetMirrorTesterImpl:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableSetMirrorTesterImpl:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(BOOL)containsObject:(id)object")
        return [__set containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("MutableSetMirrorTesterImpl:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (Unsigned)count {
        MSGSTART("MutableSetMirrorTesterImpl:-(Unsigned)count")
        return [__set count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("MutableSetMirrorTesterImpl:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__set countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __set) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ setDelegate = nil;

        v_errs = nil;

        __mutableSet = nil;

        __set = nil;

        __mirrorSet = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__set description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSString*)descriptionWithLocale:(id)locale")
        return [__set descriptionWithLocale:locale];
    }
    - (void)didAddObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)didAddObject:(id)object")



        /*i100*/[setDelegate didAddObject : object];

/*i900*/ if (!__addingToMirrorSet) [self passFail:NO format:@"!!!st did add while not adding\n"];
        if (__removingFromMirrorSet) [self passFail:NO format:@"!!!st did add while removing\n"];
        __addingToMirrorSet--;
        [self add:-1 toWillAddCountForObject:object];
        [self verifyMirrorSet];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)didRemoveObject:(id)object")



        /*i100*/[setDelegate didRemoveObject : object];

/*i900*/ if (__addingToMirrorSet) [self passFail:NO format:@"!!! did remove while adding\n"];
        if (!__removingFromMirrorSet) [self passFail:NO format:@"!!!st did remove while not removing\n"];
        __removingFromMirrorSet--;
        [self add:-1 toWillRemoveCountForObject:object];
        [self verifyMirrorSet];
    }
    - (void)die {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)encodeWithCoder:(NSCoder*)coder")

        [__set encodeWithCoder : coder];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSMutableString *)errs {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate")
        return [__set filteredSetUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        if ([self _filterUsingPredicate:predicate]) [self stateOK];
    }
    - (NSMutableSet *)getAndClear {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSMutableSet*)getAndClear")

        NSMutableSet * ret = __mutableSet;
        for (id o in ret) {
            [self willRemoveObject:o];
        }
        __set = __mutableSet = [[NSMutableSet alloc] init];
        for (id o in ret) {
            [self didRemoveObject:o];
        }
        return ret;
    }
    - (Unsigned)hash {
        MSGSTART("MutableSetMirrorTesterImpl:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (MutableSetMirrorTesterImpl *)init {
        MSGSTART("MutableSetMirrorTesterImpl:-(MutableSetMirrorTesterImpl*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] init];

        /*i11*/ [self _startObjectOfClassMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableSetMirrorTesterImpl *)initWithArray:(NSArray *)array {
        MSGSTART("MutableSetMirrorTesterImpl:-(MutableSetMirrorTesterImpl*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithArray:array];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableSetMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableSetMirrorTesterImpl:-(MutableSetMirrorTesterImpl*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableSetMirrorTesterImpl *)initWithCoder:(NSCoder *)coder {
        MSGSTART("MutableSetMirrorTesterImpl:-(MutableSetMirrorTesterImpl*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableSetMirrorTesterImpl *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("MutableSetMirrorTesterImpl:-(MutableSetMirrorTesterImpl*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableSetMirrorTesterImpl *)initWithSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(MutableSetMirrorTesterImpl*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = (insertsWeakObjectsByDefault ? set.weakMutableCopy : [[NSMutableSet alloc] initWithSet:set]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (MutableSetMirrorTesterImpl *)initWithSet:(NSSet *)set copyItems:(BOOL)copy {
        MSGSTART("MutableSetMirrorTesterImpl:-(MutableSetMirrorTesterImpl*)initWithSet:(NSSet*)set copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithSet:set copyItems:copy];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (void)intersectSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)intersectSet:(NSSet*)set")

        if ([self _intersectSet:set]) [self stateOK];
    }
    - (BOOL)intersectsSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(BOOL)intersectsSet:(NSSet*)set")
        return [__set intersectsSet:set];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("MutableSetMirrorTesterImpl:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(BOOL)isEqualToSet:(NSSet*)set")
        return [__set isEqualToSet:set];
    }
    - (BOOL)isSubsetOfSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(BOOL)isSubsetOfSet:(NSSet*)set")
        return [__set isSubsetOfSet:set];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)makeObjectsPerformSelector:(SEL)selector")
        [__set makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")
        [__set makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)member:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(id)member:(id)object")
        return [__set member:object];
    }
    - (void)minusSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)minusSet:(NSSet*)set")

        if ([self _minusSet:set]) [self stateOK];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("MutableSetMirrorTesterImpl:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSEnumerator*)objectEnumerator")
        return [__set objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsPassingTest:predicate];
    }
    - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsWithOptions:opts passingTest:predicate];
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("MutableSetMirrorTesterImpl:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (void)removeAllObjects {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)removeObject:(id)object")

        if ([self _removeObject:object]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__set removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__set removeObserver : observer forKeyPath : keyPath context : context];
    }
    + (MutableSetMirrorTesterImpl *)set {
        MSGSTART("MutableSetMirrorTesterImpl:+(MutableSetMirrorTesterImpl*)set")
        return [[MutableSetMirrorTesterImpl alloc] init];
    }
    - (void)set__mirrorSet:(NSMutableSet *)v {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)set__mirrorSet:(NSMutableSet*)v")

        /*i-905*/ if (__mirrorSet == v) return;

        /*i-900*/ {
            __mirrorSet = (id)v;
        }
    }
    - (NSSet *)setByAddingObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSSet*)setByAddingObject:(id)object")
        return [__set setByAddingObject:object];
    }
    - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array")
        return [__set setByAddingObjectsFromArray:array];
    }
    - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set")
        return [__set setByAddingObjectsFromSet:set];
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)setSet:(NSSet*)set")

        if ([self _setSet:set]) [self stateOK];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)setValue:(id)value forKey:(NSString *)key")
        [__set setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setSet:__set.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setSet:__set.asStrong];
                break;
        }
    }
    + (MutableSetMirrorTesterImpl *)setWithArray:(NSArray *)array {
        MSGSTART("MutableSetMirrorTesterImpl:+(MutableSetMirrorTesterImpl*)setWithArray:(NSArray*)array")
        return [[MutableSetMirrorTesterImpl alloc] initWithArray:array];
    }
    + (id)setWithCapacity:(Unsigned)numItems {
        MSGSTART("MutableSetMirrorTesterImpl:+(id)setWithCapacity:(Unsigned)numItems")

        return [[MutableSetMirrorTesterImpl alloc] initWithCapacity:numItems];
    }
    + (MutableSetMirrorTesterImpl *)setWithObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:+(MutableSetMirrorTesterImpl*)setWithObject:(id)object")
        return [[MutableSetMirrorTesterImpl alloc] initWithObjects:&object count:1];
    }
    + (MutableSetMirrorTesterImpl *)setWithSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:+(MutableSetMirrorTesterImpl*)setWithSet:(NSSet*)set")
        return [[MutableSetMirrorTesterImpl alloc] initWithSet:set];
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableSetMirrorTesterImpl:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("MutableSetMirrorTesterImpl:-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors")
        return [__set sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (void)stateOK {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ set_count = 0;
        for (id o in __set) {
            set_objects.ids[set_count++] = (__bridge void *)o;
            if (set_count == 100) break;
        }
        memset( set_objects.ids + set_count,0,sizeof(set_objects.ids[0]) * (100 - set_count) );
        set_count = __set.count;
    }
    - (void)unionSet:(NSSet *)set {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)unionSet:(NSSet*)set")

        if ([self _unionSet:set]) [self stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("MutableSetMirrorTesterImpl:-(id)valueForKey:(NSString*)key")
        return [__set valueForKey:key];
    }
    - (void)verifyMirrorSet {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)verifyMirrorSet")

        if (![__set isEqualToSet:__mirrorSet]) [self passFail:NO format:@"!!! mirror set is different\n"];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("MutableSetMirrorTesterImpl:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)willAddObject:(id)object")



        /*i100*/[setDelegate willAddObject : object];

/*i900*/ if (__removingFromMirrorSet) [self passFail:NO format:@"!!!st will add while removing\n"];
        [__mirrorSet addObject:object];
        __addingToMirrorSet++;
        [self add:1 toWillAddCountForObject:object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("MutableSetMirrorTesterImpl:-(void)willRemoveObject:(id)object")



        /*i100*/[setDelegate willRemoveObject : object];

/*i900*/ if (__addingToMirrorSet) [self passFail:NO format:@"!!!st will remove while adding\n"];
        [__mirrorSet removeObject:object];
        __removingFromMirrorSet++;
        [self add:1 toWillRemoveCountForObject:object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableSetUnionDelegate
    #define _WIClass_           MutableSetUnionDelegate__
    #define _className_         mutableSetUnionDelegate
    #define _Class_             MutableSetUnionDelegate__
    @implementation MutableSetUnionDelegate

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableSetUnionDelegate {
        MSGSTART("MutableSetUnionDelegate:-(void)_startObjectOfClassMutableSetUnionDelegate")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ mapsets = ([[NSMutableDictionary alloc] init]);
        /*ivar*/ ocounts = ([[NSMutableDictionary alloc] init]);

        /*i0*/}
    - (NSMutableDictionary *)__mapsets {
        MSGSTART("MutableSetUnionDelegate:-(NSMutableDictionary*)__mapsets")

        /*i-999*/ NSMutableDictionary * ret = mapsets;
        /*i999*/ return ret;
    }
    - (NSMutableDictionary *)__ocounts {
        MSGSTART("MutableSetUnionDelegate:-(NSMutableDictionary*)__ocounts")

        /*i-999*/ NSMutableDictionary * ret = ocounts;
        /*i999*/ return ret;
    }
    - (void)_refreshUnionSet {
        MSGSTART("MutableSetUnionDelegate:-(void)_refreshUnionSet")

        [ocounts removeAllObjects];
        for (kid key in mapsets) {
            MutableSet *s = [mapsets objectForKey:key];
            for (NSObject<MutableSetDelegate> *del = s.setDelegate; del; del = del.setDelegate) {
                if ( [del isKindOfClass:[MutableSetUnionDelegate1 class]] && ( ( (MutableSetUnionDelegate1 *)del ).owner == self ) ) {
                    [s removeDelegate:del];
                    break;
                }
            }
        }
        [mapsets removeAllObjects];

        [unionSet _removeAllObjects];
        for (NSObject *object in self.delegateForSet) {
            [self unionWillAddObject:object];
        }
    }
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetUnionDelegate:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("MutableSetUnionDelegate:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableSetUnionDelegate:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableSetUnionDelegate:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ mapsets = nil;

        setDelegate = nil;

        ocounts = nil;

        REMOVEOWNER(unionSet,self); unionSet = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("MutableSetUnionDelegate:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("MutableSetUnionDelegate:-(void)delegateForSetChanged")

        if (unionSet) [self refreshUnionSet];
    }
    - (NSString *)description {
        MSGSTART("MutableSetUnionDelegate:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object {
        MSGSTART("MutableSetUnionDelegate:-(void)didAddObject:(id)object")


        /*i100*/[setDelegate didAddObject : object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableSetUnionDelegate:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("MutableSetUnionDelegate:-(void)die")

        /*i900*/}
    + (MutableSetUnionDelegate *)get {
        MSGSTART("MutableSetUnionDelegate:+(MutableSetUnionDelegate*)get")
        return [[MutableSetUnionDelegate alloc] init];
    }
    - (MutableSetUnionDelegate *)init {
        MSGSTART("MutableSetUnionDelegate:-(MutableSetUnionDelegate*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i11*/ [self _startObjectOfClassMutableSetUnionDelegate];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableSetUnionDelegate:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (void)refreshUnionSet {
        MSGSTART("MutableSetUnionDelegate:-(void)refreshUnionSet")

        [self _refreshUnionSet];
        [unionSet stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("MutableSetUnionDelegate:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetUnionDelegate:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("MutableSetUnionDelegate:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("MutableSetUnionDelegate:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (NSObject<MutableSet> *)setForObject:(id)object {
        MSGSTART("MutableSetUnionDelegate:-(NSObject<MutableSet>*)setForObject:(id)object")

        /*i-999*/ NSObject<MutableSet> *ret = ([object conformsToProtocol:@protocol(MutableSet)] ? (NSObject<MutableSet> *)object : nil);

        /*i999*/ return ret;
    }
    - (void)setUnionSet:(MutableSet *)v {
        MSGSTART("MutableSetUnionDelegate:-(void)setUnionSet:(MutableSet*)v")

        /*i-850*/ REMOVEOWNER(unionSet,self); ADDOWNER(v,self);
        /*i0*/ unionSet = v; [self refreshUnionSet];
    }
    - (void)setWithDictionary:(NSDictionary *)d {
        MSGSTART("MutableSetUnionDelegate:-(void)setWithDictionary:(NSDictionary*)d")
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableSetUnionDelegate:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableSetUnionDelegate:-(void)stateOK")

        /*i100*/[unionSet stateOK];
    }
    - (MutableSet *)unionSet {
        MSGSTART("MutableSetUnionDelegate:-(MutableSet*)unionSet")
        return unionSet;
    }
    - (void)unionWillAddObject1:(id)o {
        MSGSTART("MutableSetUnionDelegate:-(void)unionWillAddObject1:(id)o")

        IntCarrier * c = [ocounts objectForKey:o];
        if (c) {
            c.intValue++;
        }
        else {
            [ocounts setObject:[IntCarrier carrierWithInt:1] forKey:[PointerKey keyWithObject:o]];
            [unionSet _addObject:o];
        }
    }
    - (void)unionWillAddObject:(id)object {
        MSGSTART("MutableSetUnionDelegate:-(void)unionWillAddObject:(id)object")

        if ([mapsets objectForKey:object]) {
            ERR("Shouldn't have object");
            return;
        }
        NSObject<MutableSet> *s = [self setForObject:object];
        if (s) {
            [s addDelegate:[[MutableSetUnionDelegate1 alloc] initWithOwner:self]];
            [mapsets setObject:s forKey:[PointerKey keyWithObject:object]];
            for (id o in s) {
                [self unionWillAddObject1:o];
            }
        }
    }
    - (void)unionWillRemoveObject1:(id)o {
        MSGSTART("MutableSetUnionDelegate:-(void)unionWillRemoveObject1:(id)o")

        IntCarrier * c = [ocounts objectForKey:o];
        if (!--c.intValue) {
            [unionSet _removeObject:o];
            [ocounts removeObjectForKey:o];
        }
    }
    - (void)willAddObject:(id)object {
        MSGSTART("MutableSetUnionDelegate:-(void)willAddObject:(id)object")



        /*i100*/[setDelegate willAddObject : object];

/*i500*/ [self unionWillAddObject:object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("MutableSetUnionDelegate:-(void)willRemoveObject:(id)object")



        /*i100*/[setDelegate willRemoveObject : object];

/*i500*/ MutableSet *s = [mapsets objectForKey:object];
        if (s) {
            for (id o in s) {
                [self unionWillRemoveObject1:o];
            }
            for (NSObject<MutableSetDelegate> *del = s.setDelegate; del; del = del.setDelegate) {
                if ( [del isKindOfClass:[MutableSetUnionDelegate1 class]] && ( ( (MutableSetUnionDelegate1 *)del ).owner == self ) ) {
                    [s removeDelegate:del];
                    break;
                }
            }
            [mapsets removeObjectForKey:object];
        }
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         MutableSetUnionDelegate1
    #define _WIClass_           MutableSetUnionDelegate1__
    #define _className_         mutableSetUnionDelegate1
    #define _Class_             MutableSetUnionDelegate1__
    @implementation MutableSetUnionDelegate1

    @synthesize __owner_context = __owner_context;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    - (void)_startObjectOfClassMutableSetUnionDelegate1 {
        MSGSTART("MutableSetUnionDelegate1:-(void)_startObjectOfClassMutableSetUnionDelegate1")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i0*/}
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetUnionDelegate1:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (constchar *)cdescription {
        MSGSTART("MutableSetUnionDelegate1:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("MutableSetUnionDelegate1:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (void)dealloc {
        MSGSTART("MutableSetUnionDelegate1:-(void)dealloc")

        /*i-151*/[self die];
/*i0*/ REMOVEOWNER(owner,self); owner = nil;

        setDelegate = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("MutableSetUnionDelegate1:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("MutableSetUnionDelegate1:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("MutableSetUnionDelegate1:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i999*/ return ret;
    }
    - (void)didAddObject:(id)object {
        MSGSTART("MutableSetUnionDelegate1:-(void)didAddObject:(id)object")


        /*i100*/[setDelegate didAddObject : object];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("MutableSetUnionDelegate1:-(void)didRemoveObject:(id)object")


        /*i100*/[setDelegate didRemoveObject : object];
    }
    - (void)die {
        MSGSTART("MutableSetUnionDelegate1:-(void)die")

        /*i900*/}
    - (MutableSetUnionDelegate1 *)initWithOwner:(MutableSetUnionDelegate *)aowner {
        MSGSTART("MutableSetUnionDelegate1:-(MutableSetUnionDelegate1*)initWithOwner:(MutableSetUnionDelegate*)aowner")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i0*/ owner = aowner;

        /*i11*/ [self _startObjectOfClassMutableSetUnionDelegate1];

/*i10001*/ return self;
    }
    - (NSMutableString *)objectName {
        MSGSTART("MutableSetUnionDelegate1:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (MutableSetUnionDelegate *)owner {
        MSGSTART("MutableSetUnionDelegate1:-(MutableSetUnionDelegate*)owner")

        /*i-999*/ MutableSetUnionDelegate * ret = owner;
        /*i999*/ return ret;
    }
    - (void)removedDelegate {
        MSGSTART("MutableSetUnionDelegate1:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("MutableSetUnionDelegate1:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("MutableSetUnionDelegate1:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("MutableSetUnionDelegate1:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setOwner:(MutableSetUnionDelegate *)v {
        MSGSTART("MutableSetUnionDelegate1:-(void)setOwner:(MutableSetUnionDelegate*)v")

        /*i-1999*/ if ( !authorized_thread(__private_access_thread_mask_in_MutableSetUnionDelegate1) ) ERR("Attempt to set public-readonly property in unauthorized thread (please try something like privateaccess(owner=\"blah\") to set the property)");

        /*i-905*/ if (owner == v) return;

        /*i-900*/ {
            owner = (id)v;
        }
/*i-850*/ REMOVEOWNER(owner,self); ADDOWNER(v,self);
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("MutableSetUnionDelegate1:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (void)stateOK {
        MSGSTART("MutableSetUnionDelegate1:-(void)stateOK")

        [self.owner stateOK];
    }
    - (void)willAddObject:(id)object {
        MSGSTART("MutableSetUnionDelegate1:-(void)willAddObject:(id)object")



        /*i100*/[setDelegate willAddObject : object];

/*i500*/ [self.owner unionWillAddObject1:object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("MutableSetUnionDelegate1:-(void)willRemoveObject:(id)object")



        /*i100*/[setDelegate willRemoveObject : object];

/*i500*/ [self.owner unionWillRemoveObject1:object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_





// !!!: Implementations: w





    #ifdef _PrivateAccessMask_
        #undef _PrivateAccessMask_
    #endif
    #define _PrivateAccessMask_ __private_access_thread_mask_in_Globals

    #define _ClassName_         WeakMutableSetMirrorTesterImpl
    #define _WIClass_           WeakMutableSetMirrorTesterImpl__
    #define _className_         weakMutableSetMirrorTesterImpl
    #define _Class_             WeakMutableSetMirrorTesterImpl__
    @implementation WeakMutableSetMirrorTesterImpl

    @synthesize __addingToMirrorSet = __addingToMirrorSet;
    @synthesize __owner_context = __owner_context;
    @synthesize __removingFromMirrorSet = __removingFromMirrorSet;
    @synthesize debugAutorelease = debugAutorelease;
    @synthesize insertsWeakObjectsByDefault = insertsWeakObjectsByDefault;
    @synthesize isZombie = isZombie;
    @synthesize objectIDInClass = objectIDInClass;
    @synthesize objectIDInTotal = objectIDInTotal;
    @synthesize retrievesWeakValues = retrievesWeakValues;
    @synthesize set_count = set_count;
    @synthesize set_objects = set_objects;
    @synthesize version = version;
    @synthesize weakObjectCount = weakObjectCount;
    - (void)_startObjectOfClassWeakMutableSetMirrorTesterImpl {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)_startObjectOfClassWeakMutableSetMirrorTesterImpl")

        /*i-996*/ debugAutorelease = YES;
        /*i-995*/ objInitFn(self,objectIDInTotal,objectIDInClass);

        /*i-500*//*ivar*/ v_errs = ([NSMutableString string]);
        /*ivar*/ insertsWeakObjectsByDefault = (YES);
        /*ivar*/ version = (1);
        /*ivar*/ __mirrorSet = ([MutableSet set]);

        /*i0*/ self.delegateForSet = self;
    }
    - (NSMutableSet *)__mirrorSet {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSMutableSet*)__mirrorSet")

        /*i-999*/ NSMutableSet * ret = __mirrorSet;
        /*i999*/ return ret;
    }
    - (NSMutableSet *)__mutableSet {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSMutableSet*)__mutableSet")

        /*i-999*/ NSMutableSet * ret = __mutableSet;
        /*i999*/ return ret;
    }
    - (NSSet *)__set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSSet*)__set")

        /*i-999*/ NSSet * ret = __set;
        /*i999*/ return ret;
    }
    - (bool)_addObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)_addObject:(id)object")

        bool weak = insertsWeakObjectsByDefault;
        if ( (![__set containsObject:object]) && [self shouldAddObject:object makeWeak:weak] ) {
            [self willAddObject:object];
            [__mutableSet addObject:(weak ? [object weakSelf] : [object strongSelf])];
            if (weak) weakObjectCount++;
            [self didAddObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_addObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)_addObjectsFromArray:(NSArray*)array")

        bool ret = NO;
        for (NSObject *object in array) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)_filterUsingPredicate:(NSPredicate *)predicate")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![predicate evaluateWithObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_intersectSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)_intersectSet:(NSSet*)set")

        bool ret = NO;
        NSMutableSet *toRemove = nil;
        for (NSObject *object in __set) {
            if (![set containsObject:object]) {
                if (!toRemove) toRemove = [[NSMutableSet alloc] initWithCapacity:__set.count];
                [toRemove addObject:object];
            }
        }
        if (toRemove)
            if ([self _minusSet:toRemove]) ret = YES;
        return ret;
    }
    - (bool)_minusSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)_minusSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _removeObject:object]) ret = YES;
        }
        return ret;
    }
    - (bool)_removeAllObjects {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)_removeAllObjects")

        if (!self.count) return NO;

        NSSet *was = [__set copy];
        for (NSObject *object in was) {
            [self willRemoveObject:object];
        }
        weakObjectCount = 0;
        [__mutableSet removeAllObjects];
        for (NSObject *object in was) {
            [self didRemoveObject:object];
        }
        return YES;
    }
    - (bool)_removeObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)_removeObject:(id)object")

        if ([__set containsObject:object]) {
            [self willRemoveObject:object];
            if ([object isWeakSelf]) --weakObjectCount;
            [__mutableSet removeObject:object];
            [self didRemoveObject:object];
            return YES;
        }
        else {
            return NO;
        }
    }
    - (bool)_setSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)_setSet:(NSSet*)set")

        bool ret = [self _intersectSet:set];
        if ([self _unionSet:set]) ret = YES;
        return ret;
    }
    - (bool)_unionSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)_unionSet:(NSSet*)set")

        bool ret = NO;
        for (NSObject *object in set) {
            if ([self _addObject:object]) ret = YES;
        }
        return ret;
    }
    - (void)add:(Int)c toWillAddCountForObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)add:(Int)c toWillAddCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didAdd];
            else if (c == 1) [o willAdd];
        }
    }
    - (void)add:(Int)c toWillRemoveCountForObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)add:(Int)c toWillRemoveCountForObject:(id)object")

        if ([object isKindOfClass:[CollectionTestObject class]]) {
            CollectionTestObject *o = (CollectionTestObject *)object;
            if (c == -1) [o didRemove];
            else if (c == 1) [o willRemove];
        }
    }
    - (void)addDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)addDelegate:(NSObject<MutableSetDelegate>*)v")

        if (v.setDelegate) return;

        if (v == self) return;

        if (setDelegate) {
            [setDelegate addDelegate:v];
        }
        else {
            setDelegate = v;
            v.delegateForSet = self.delegateForSet;
            [v delegateForSetChanged];
        }
    }
    - (void)addObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)addObject:(id)object")

        if ([self _addObject:object]) [self stateOK];
    }
    - (void)addObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)addObjectsFromArray:(NSArray*)array")

        if ([self _addObjectsFromArray:array]) [self stateOK];
    }
    - (void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)addObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath options:(NSKeyValueObservingOptions)options context:(void *)context")

        [__set addObserver : observer forKeyPath : keyPath options : options context : context];
    }
    - (NSArray *)allObjects {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSArray*)allObjects")
        return [__set allObjects];
    }
    - (id)anyObject {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(id)anyObject")
        return [[__set anyObject] selfWithWeakness:retrievesWeakValues];
    }
    - (constchar *)cdescription {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(constchar*)cdescription")
        return [self.description cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (constchar *)cobjectName {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(constchar*)cobjectName")
        return [self.objectName cStringUsingEncoding:NSASCIIStringEncoding];
    }
    - (BOOL)containsObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(BOOL)containsObject:(id)object")
        return [__set containsObject:object];
    }
    - (id)copyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(id)copyWithZone:(NSZone*)zone")

        return [[ImmutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (Unsigned)count {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(Unsigned)count")
        return [__set count];
    }
    - (Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id *)stackbuf count:(Unsigned)len {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(Unsigned)countByEnumeratingWithState:(NSFastEnumerationState *)state objects:(__unsafe_unretained id*)stackbuf count:(Unsigned)len")

        return [__set countByEnumeratingWithState:state objects:stackbuf count:len];
    }
    - (void)countWeakObjects {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)countWeakObjects")

        Int c = 0;
        for (NSObject *o in __set) {
            if (o.isWeakSelf) c++;
        }
        weakObjectCount = c;
    }
    - (void)dealloc {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)dealloc")

        /*i-151*/[self die];
/*i-100*/ [self removeAllObjects];
/*i0*/ setDelegate = nil;

        v_errs = nil;

        __mutableSet = nil;

        __set = nil;

        __mirrorSet = nil;
/*i998*/ deallocFn(self,objectIDInTotal,objectIDInClass);
        isZombie = YES;
    #if defined (LONGLIVEZOMBIES) || defined (LONGLIVEZOMBIES___WI_CLASS__)
            if (YES) return;
    #endif

/*i999*/}
    - (NSSet *)delegateForSet {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSSet*)delegateForSet")

        /*i-999*/ NSSet * ret = delegateForSet;
        /*i999*/ return ret;
    }
    - (void)delegateForSetChanged {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)delegateForSetChanged")
    }
    - (NSString *)description {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSString*)description")

        /*i-999*/ NSMutableString * ret = self.objectName;

        /*i0*/ return [__set description];

        /*i999*/ return ret;
    }
    - (NSString *)descriptionWithLocale:(id)locale {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSString*)descriptionWithLocale:(id)locale")
        return [__set descriptionWithLocale:locale];
    }
    - (void)didAddObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)didAddObject:(id)object")



        /*i100*/[setDelegate didAddObject : object];

/*i900*/ if (!__addingToMirrorSet) [self passFail:NO format:@"!!!st did add while not adding\n"];
        if (__removingFromMirrorSet) [self passFail:NO format:@"!!!st did add while removing\n"];
        __addingToMirrorSet--;
        [self add:-1 toWillAddCountForObject:object];
        [self verifyMirrorSet];
    }
    - (void)didRemoveObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)didRemoveObject:(id)object")



        /*i100*/[setDelegate didRemoveObject : object];

/*i900*/ if (__addingToMirrorSet) [self passFail:NO format:@"!!! did remove while adding\n"];
        if (!__removingFromMirrorSet) [self passFail:NO format:@"!!!st did remove while not removing\n"];
        __removingFromMirrorSet--;
        [self add:-1 toWillRemoveCountForObject:object];
        [self verifyMirrorSet];
    }
    - (void)die {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)die")

        /*i900*/}
    - (void)encodeWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)encodeWithCoder:(NSCoder*)coder")

        [__set encodeWithCoder : coder];
    }
    - (void)enumerateObjectsUsingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)enumerateObjectsUsingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsUsingBlock : block];
    }
    - (void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:( void (^)(id obj, BOOL *stop) )block {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)enumerateObjectsWithOptions:(NSEnumerationOptions)opts usingBlock:(void (^)(id obj, BOOL *stop))block")

        [__set enumerateObjectsWithOptions : opts usingBlock : block];
    }
    - (NSMutableString *)errs {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSMutableString*)errs")

        /*i-999*/ NSMutableString * ret = v_errs;
        /*i999*/ return ret;
    }
    - (NSSet *)filteredSetUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSSet*)filteredSetUsingPredicate:(NSPredicate *)predicate")
        return [__set filteredSetUsingPredicate:predicate];
    }
    - (void)filterUsingPredicate:(NSPredicate *)predicate {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)filterUsingPredicate:(NSPredicate *)predicate")

        if ([self _filterUsingPredicate:predicate]) [self stateOK];
    }
    - (NSMutableSet *)getAndClear {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSMutableSet*)getAndClear")

        NSMutableSet * ret = __mutableSet;
        for (id o in ret) {
            [self willRemoveObject:o];
        }
        __set = __mutableSet = [[NSMutableSet alloc] init];
        for (id o in ret) {
            [self didRemoveObject:o];
        }
        return ret;
    }
    - (Unsigned)hash {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(Unsigned)hash")
        return (Unsigned)obfuscateULL(objectIDInTotal);
    }
    - (WeakMutableSetMirrorTesterImpl *)init {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(WeakMutableSetMirrorTesterImpl*)init")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] init];

        /*i11*/ [self _startObjectOfClassWeakMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableSetMirrorTesterImpl *)initWithArray:(NSArray *)array {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(WeakMutableSetMirrorTesterImpl*)initWithArray:(NSArray*)array")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithArray:array];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableSetMirrorTesterImpl *)initWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(WeakMutableSetMirrorTesterImpl*)initWithCapacity:(Unsigned)numItems")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCapacity:numItems];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i11*/ [self _startObjectOfClassWeakMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableSetMirrorTesterImpl *)initWithCoder:(NSCoder *)coder {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(WeakMutableSetMirrorTesterImpl*)initWithCoder:(NSCoder*)coder")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithCoder:coder];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableSetMirrorTesterImpl *)initWithObjects:(id *)objects count:(Unsigned)count {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(WeakMutableSetMirrorTesterImpl*)initWithObjects:(id*)objects count:(Unsigned)count")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithObjects:objects count:count];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableSetMirrorTesterImpl *)initWithSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(WeakMutableSetMirrorTesterImpl*)initWithSet:(NSSet*)set")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = (insertsWeakObjectsByDefault ? set.weakMutableCopy : [[NSMutableSet alloc] initWithSet:set]);

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (WeakMutableSetMirrorTesterImpl *)initWithSet:(NSSet *)set copyItems:(BOOL)copy {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(WeakMutableSetMirrorTesterImpl*)initWithSet:(NSSet*)set copyItems:(BOOL)copy")

        /*i-10001*/ if ( !(self = [super init]) ) return nil;

        /*i-100*/ __set = __mutableSet = [[NSMutableSet alloc] initWithSet:set copyItems:copy];
        if (insertsWeakObjectsByDefault) __set = __mutableSet = __set.weakMutableCopy;

        /*i-99*/ [self countWeakObjects];

/*i11*/ [self _startObjectOfClassWeakMutableSetMirrorTesterImpl];

/*i10001*/ return self;
    }
    - (void)intersectSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)intersectSet:(NSSet*)set")

        if ([self _intersectSet:set]) [self stateOK];
    }
    - (BOOL)intersectsSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(BOOL)intersectsSet:(NSSet*)set")
        return [__set intersectsSet:set];
    }
    - (BOOL)isEqual:(id)obj {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(BOOL)isEqual:(id)obj")

        /*i-999*/ bool ret = (obj == self) ||
            ( [obj respondsToSelector:@selector(objectIDInTotal)] &&
              ( ( (NSObject<ObjectEquate> *)obj ).objectIDInTotal == objectIDInTotal ) );

        /*i999*/ return ret;
    }
    - (BOOL)isEqualToSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(BOOL)isEqualToSet:(NSSet*)set")
        return [__set isEqualToSet:set];
    }
    - (BOOL)isSubsetOfSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(BOOL)isSubsetOfSet:(NSSet*)set")
        return [__set isSubsetOfSet:set];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)makeObjectsPerformSelector:(SEL)selector")
        [__set makeObjectsPerformSelector : selector];
    }
    - (void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)makeObjectsPerformSelector:(SEL)selector withObject:(id)object")
        [__set makeObjectsPerformSelector : selector withObject : object];
    }
    - (id)member:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(id)member:(id)object")
        return [__set member:object];
    }
    - (void)minusSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)minusSet:(NSSet*)set")

        if ([self _minusSet:set]) [self stateOK];
    }
    - (id)mutableCopyWithZone:(NSZone *)zone {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(id)mutableCopyWithZone:(NSZone*)zone")

        return [[MutableSet allocWithZone:zone] initWithSet:__set];
    }
    - (NSEnumerator *)objectEnumerator {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSEnumerator*)objectEnumerator")
        return [__set objectEnumerator];
    }
    - (NSMutableString *)objectName {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSMutableString*)objectName")

        /*i-999*/ NSMutableString * ret = nil;

        /*i-100*/ ret = [NSMutableString stringWithFormat:@"[%qu:%p]%s#%qu",objectIDInTotal,self,__Derived_CClass__,objectIDInClass];

        /*i999*/ return ret;
    }
    - (NSSet *)objectsPassingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSSet*)objectsPassingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsPassingTest:predicate];
    }
    - (NSSet *)objectsWithOptions:(NSEnumerationOptions)opts passingTest:( BOOL (^)(id obj, BOOL *stop) )predicate {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSSet*)objectsWithOptions:(NSEnumerationOptions)opts passingTest:(BOOL (^)(id obj, BOOL *stop))predicate")
        return [__set objectsWithOptions:opts passingTest:predicate];
    }
    - (bool)passFail:(bool)pass format:(NSString *)format,... {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)passFail:(bool)pass format:(NSString*)format,...")

        va_list args; va_start(args,format);
        NSString *s = [[NSString alloc] initWithFormat:format arguments:args];
        if (pass) {
            printf("pass: %s\n",s.UTF8String);
        }
        else {
            printf("!!FAIL: %s\n",s.UTF8String);
            [self.errs appendFormat:@"%@\n",s];
            BPoint();
        }
        return pass;
    }
    - (void)removeAllObjects {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)removeAllObjects")

        if ([self _removeAllObjects]) [self stateOK];
    }
    - (void)removedDelegate {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)removedDelegate")

        /*i-100*/ setDelegate = nil;
    }
    - (void)removeDelegate:(NSObject<MutableSetDelegate> *)v {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)removeDelegate:(NSObject<MutableSetDelegate>*)v")

        if (setDelegate) {
            if (setDelegate == v) {
                v.delegateForSet = nil;
                setDelegate = v.setDelegate;
                [v removedDelegate];
                [v delegateForSetChanged];
            }
            else {
                [setDelegate removeDelegate:v];
            }
        }
    }
    - (void)removeObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)removeObject:(id)object")

        if ([self _removeObject:object]) [self stateOK];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath")

        [__set removeObserver : observer forKeyPath : keyPath];
    }
    - (void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)removeObserver:(NSObject *)observer forKeyPath:(NSString *)keyPath context:(void *)context")

        [__set removeObserver : observer forKeyPath : keyPath context : context];
    }
    + (WeakMutableSetMirrorTesterImpl *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:+(WeakMutableSetMirrorTesterImpl*)set")
        return [[WeakMutableSetMirrorTesterImpl alloc] init];
    }
    - (void)set__mirrorSet:(NSMutableSet *)v {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)set__mirrorSet:(NSMutableSet*)v")

        /*i-905*/ if (__mirrorSet == v) return;

        /*i-900*/ {
            __mirrorSet = (id)v;
        }
    }
    - (NSSet *)setByAddingObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSSet*)setByAddingObject:(id)object")
        return [__set setByAddingObject:object];
    }
    - (NSSet *)setByAddingObjectsFromArray:(NSArray *)array {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSSet*)setByAddingObjectsFromArray:(NSArray*)array")
        return [__set setByAddingObjectsFromArray:array];
    }
    - (NSSet *)setByAddingObjectsFromSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSSet*)setByAddingObjectsFromSet:(NSSet*)set")
        return [__set setByAddingObjectsFromSet:set];
    }
    - (NSObject<MutableSetDelegate> *)setDelegate {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSObject<MutableSetDelegate>*)setDelegate")

        /*i-999*/ NSObject<MutableSetDelegate> *ret = setDelegate;
        /*i999*/ return ret;
    }
    - (void)setDelegateForSet:(NSSet *)v {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)setDelegateForSet:(NSSet*)v")

        /*i-905*/ if (delegateForSet == v) return;

        /*i-900*/ {
            delegateForSet = (id)v;
        }
    }
    - (void)setErrs:(NSMutableString *)v {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)setErrs:(NSMutableString*)v")

        /*i-905*/ if (v_errs == v) return;

        /*i-900*/ {
            v_errs = (id)v;
        }
    }
    - (void)setSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)setSet:(NSSet*)set")

        if ([self _setSet:set]) [self stateOK];
    }
    - (void)setValue:(id)value forKey:(NSString *)key {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)setValue:(id)value forKey:(NSString *)key")
        [__set setValue : value forKey : key];
    }
    - (void)setWeakness:(CollectionWeakness)v {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)setWeakness:(CollectionWeakness)v")

        switch (v) {
            case CollectionIsEmpty:[self removeAllObjects]; break;

            case CollectionIsWeakAndStrong:
            default: break;

            case CollectionIsWeak:
                if (self.weakness & CollectionIsStrong) [self setSet:__set.asWeak];
                break;

            case CollectionIsStrong:
                if (self.weakness & CollectionIsWeak) [self setSet:__set.asStrong];
                break;
        }
    }
    + (WeakMutableSetMirrorTesterImpl *)setWithArray:(NSArray *)array {
        MSGSTART("WeakMutableSetMirrorTesterImpl:+(WeakMutableSetMirrorTesterImpl*)setWithArray:(NSArray*)array")
        return [[WeakMutableSetMirrorTesterImpl alloc] initWithArray:array];
    }
    + (id)setWithCapacity:(Unsigned)numItems {
        MSGSTART("WeakMutableSetMirrorTesterImpl:+(id)setWithCapacity:(Unsigned)numItems")

        return [[WeakMutableSetMirrorTesterImpl alloc] initWithCapacity:numItems];
    }
    + (WeakMutableSetMirrorTesterImpl *)setWithObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:+(WeakMutableSetMirrorTesterImpl*)setWithObject:(id)object")
        return [[WeakMutableSetMirrorTesterImpl alloc] initWithObjects:&object count:1];
    }
    + (WeakMutableSetMirrorTesterImpl *)setWithSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:+(WeakMutableSetMirrorTesterImpl*)setWithSet:(NSSet*)set")
        return [[WeakMutableSetMirrorTesterImpl alloc] initWithSet:set];
    }
    #ifndef __SWIFT__
        - (bool)shouldAddObject:(id)object makeWeak:(bool &)weak {
            MSGSTART("WeakMutableSetMirrorTesterImpl:-(bool)shouldAddObject:(id)object makeWeak:(bool&)weak")

            /*i-999*/ bool ret = YES;

            /*i100*/ if (ret && setDelegate) ret = [setDelegate shouldAddObject:object makeWeak:weak];

            /*i999*/ return ret;
        }
    #endif // __SWIFT__
    - (NSArray *)sortedArrayUsingDescriptors:(NSArray *)sortDescriptors {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(NSArray*)sortedArrayUsingDescriptors:(NSArray*)sortDescriptors")
        return [__set sortedArrayUsingDescriptors:sortDescriptors];
    }
    - (void)stateOK {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)stateOK")

        /*i-100*/ version++;
        /*i0*/ set_count = 0;
        for (id o in __set) {
            set_objects.ids[set_count++] = (__bridge void *)o;
            if (set_count == 100) break;
        }
        memset( set_objects.ids + set_count,0,sizeof(set_objects.ids[0]) * (100 - set_count) );
        set_count = __set.count;
    }
    - (void)unionSet:(NSSet *)set {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)unionSet:(NSSet*)set")

        if ([self _unionSet:set]) [self stateOK];
    }
    - (id)valueForKey:(NSString *)key {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(id)valueForKey:(NSString*)key")
        return [__set valueForKey:key];
    }
    - (void)verifyMirrorSet {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)verifyMirrorSet")

        if (![__set isEqualToSet:__mirrorSet]) [self passFail:NO format:@"!!! mirror set is different\n"];
    }
    - (CollectionWeakness)weakness {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(CollectionWeakness)weakness")


        return self.count ? (weakObjectCount ? (weakObjectCount == self.count ? CollectionIsWeak : CollectionIsWeakAndStrong) : CollectionIsWeak) : CollectionIsEmpty;
    }
    - (void)willAddObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)willAddObject:(id)object")



        /*i100*/[setDelegate willAddObject : object];

/*i900*/ if (__removingFromMirrorSet) [self passFail:NO format:@"!!!st will add while removing\n"];
        [__mirrorSet addObject:object];
        __addingToMirrorSet++;
        [self add:1 toWillAddCountForObject:object];
    }
    - (void)willRemoveObject:(id)object {
        MSGSTART("WeakMutableSetMirrorTesterImpl:-(void)willRemoveObject:(id)object")



        /*i100*/[setDelegate willRemoveObject : object];

/*i900*/ if (__addingToMirrorSet) [self passFail:NO format:@"!!!st will remove while adding\n"];
        [__mirrorSet removeObject:object];
        __removingFromMirrorSet++;
        [self add:1 toWillRemoveCountForObject:object];
    }

    @end
    #undef _ClassName_
    #undef _WIClass_
    #undef _className_
    #undef _Class_
#endif  // INCLUDE_IFACE
