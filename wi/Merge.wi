

WIFile
    -(WICtxt*)equivContextTo:(WICtxt*)other {
        return([self contextWithRegexes:(NSArray*)other.keyInFile]);
    }
    -(WIClass*)equivClassTo:(WIClass*)other {
        return([[self equivContextTo:other.context] equivClassTo:other]);
    }
    -(WIType*)equivTypeTo:(WIType*)other {
        return([[self equivContextTo:other.clazz.context] equivTypeTo:other]);
    }
    -(WIVarContext*)equivVarContextTo:(WIVarContext*)other {
        return([[self equivContextTo:other.clazz.context] equivVarContextTo:other]);
    }
    -(WIVar*)equivVarTo:(WIVar*)other {
        return([[self equivContextTo:other.context.clazz.context] equivVarTo:other]);
    }
WICtxt
    -(WIClass*)equivClassTo:(WIClass*)other {
        if (other.classInCtxt) {
            return([self classWithName:(NSString*)other.keyInClassInCtxt]);
        }
        else if (other.protocolInCtxt) {
            return([self protocolWithName:(NSString*)other.keyInProtocolInCtxt]);
        }
        else return(nil);
    }
    -(WIType*)equivTypeTo:(WIType*)other {
        return([[self equivClassTo:other.clazz] equivTypeTo:other]);
    }
    -(WIVarContext*)equivVarContextTo:(WIVarContext*)other {
        return([[self equivClassTo:other.clazz] equivVarContextTo:other]);
    }
    -(WIVar*)equivVarTo:(WIVar*)other {
        return([[self equivClassTo:other.context.clazz] equivVarTo:other]);
    }
WIClass
    -(WIVarContext*)equivVarContextTo:(WIVarContext*)other {
        return([self varCtxtWithSettings:(NSSet*)other.keyInClazz]);
    }
    -(WIType*)equivTypeTo:(WIType*)other {
        return([self typeWithModifiers:(NSArray*)other.keyInClazz]);
    }
    -(WIVar*)equivVarTo:(WIVar*)other {
        return([[self equivVarContextTo:other.context] equivVarTo:other]);
    }
WIVarContext
    -(WIVar*)equivVarTo:(WIVar*)other {
        NSObject<NSCopying> *k=(NSObject<NSCopying>*)other.keyInContext;
        WIVar *ret=[self varForKey:k];
        if (!ret) {
            [self setVar:ret=[WIVar new] forKey:k];
            ret.type=[self.clazz.context.file equivTypeTo:other.type];
            for (WIVarArg *arg2 in other.args) {
                WIVarArg *arg=[WIVarArg new];
                [ret addArg:arg];
                arg.name=arg2.name.copy;
                arg.arg=arg2.arg.copy;
                arg.type=[self.clazz.context.file equivTypeTo:arg2.type];
            }
            ret.name=other.name.copy;
        }
        return(ret);
    }



WIFile
    -(void)mergeWith:(WIFile*)other {
        [self.includesSet mergeWith:other.includesSet];
        [self.settings mergeWith:other.settings];
        for (NSObject<NSCopying> *k in other.ctxts) {
            WICtxt *o=[other ctxtForKey:k];
            [[self equivContextTo:o] mergeWith:o];
        }
    }

WICtxt
    -(void)mergeWith:(WICtxt*)other {
        for (NSObject<NSCopying> *k in other.clazzs) {
            WIClass *o=[other clazzForKey:k];
            [[self equivClassTo:o] mergeWith:o];
        }
        for (NSObject<NSCopying> *k in other.protocols) {
            WIClass *o=[other protocolForKey:k];
            [[self equivClassTo:o] mergeWith:o];
        }
    }

WIClass
    -(void)mergeWith:(WIClass*)other {
        [self.settings mergeWith:other.settings];

        for (WIClass *o in other.superclasss) {
            [self addSuperclass:[self.file equivClassTo:o]];
        }
        for (WIClass *o in other.subclasss) {
            [self addSubclass:[self.file equivClassTo:o]];
        }
        {
            NSMutableSet *s=self.subclasss.copy;
            [self.subclasss minusSet:self.superclasss];
            [self.superclasss minusSet:s];
        }

        for (WIClass *o in other.conformedProtocols) {
            [self addConformedProtocol:[self.file equivClassTo:o]];
        }
        for (WIClass *o in other.conformingClasss) {
            [self addConformingClass:[self.file equivClassTo:o]];
        }
        {
            NSMutableSet *s=self.conformingClasss.copy;
            [self.conformingClasss minusSet:self.conformedProtocols];
            [self.conformedProtocols minusSet:s];
        }

        for (WIClass *o in other.superprotocols) {
            [self addSuperprotocol:[self.file equivClassTo:o]];
        }
        for (WIClass *o in other.subprotocols) {
            [self addSubprotocol:[self.file equivClassTo:o]];
        }
        {
            NSMutableSet *s=self.subprotocols.copy;
            [self.subprotocols minusSet:self.superprotocols];
            [self.superprotocols minusSet:s];
        }

        for (NSObject<NSCopying> *k in other.varCtxts) {
            WIVarContext *o=[other varCtxtForKey:k];
            [[self equivVarContextTo:o] mergeWith:o];
        }

        for (NSObject<NSCopying> *k in other.types) {
            WIType *o=[other typeForKey:k];
            [[self equivTypeTo:o] mergeWith:o];
        }
    }

WIVarContext
    -(void)mergeWith:(WIVarContext*)other {
        for (NSObject<NSCopying> *k in other.vars) {
            WIVar *o=[other varForKey:k];
            [[self equivVarTo:o] mergeWith:o];
        }
    }
WIType
    -(void)mergeWith:(WIType*)other {
    }


WIVar
    -(void)mergeWith:(WIVar*)other {
        [self.settings mergeWith:other.settings];

        if (other.getter) {
            if (!self.getter) self.getter=[WIBody new];
            self.getter=other.getter;
        }
        if (other.defaultValue) {
            if (!self.defaultValue) self.defaultValue=[WIBody new];
            self.defaultValue=other.defaultValue;
        }
        for (NSObject<NSCopying> *k in other.setters) {
            if (![self setterForKey:k]) [self setSetter:[WIBody new] forKey:k];
            [[self setterForKey:k] mergeWith:[other setterForKey:k]];
        }

        if (other.boundTo) {
            if (!self.boundTo) {
                // todo Ordered
                self.boundTo=other.boundTo;
                self.bindingType=other.bindingType;
            }
        }

        for (WIVar *o in other.atomicVars) {
            [self addAtomicVar:[self.file equivVarTo:o]];
        }
        for (WIVar *o in other.fluidVars) {
            [self addFluidVar:[self.file equivVarTo:o]];
        }
        {
            NSMutableSet *s=self.fluidVars.copy;
            [self.fluidVars minusSet:self.atomicVars];
            [self.atomicVars minusSet:s];
        }

    }

WIBody
    -(void)mergeWith:(WIBody*)other {
        for (NSObject<NSCopying> *k in other.snippets) {
            if (![self snippetForKey:k]) [self setSnippet:[WIBodySnippet new] forKey:k];
            [[self snippetForKey:k] mergeWith:[other snippetForKey:k]];
        }
    }

WIBodySnippet
    -(void)mergeWith:(WIBodySnippet*)other {
        [self.strings mergeWith:other.strings];
    }
