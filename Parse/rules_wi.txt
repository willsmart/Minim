All=>Class,ClasWithProt,Mod,Protocol,Var,Regex,Include,Link,Atomic,Init,Getter,Setter,Setting,Block
WS=> ,\t,br
Noblock=>classpar,classdefpar,classvarpar,_selArgDef,_ln
Startblock=>wordgroup,string,number,\[,\],@

LL=>00000
LB=>00100
BB=>00
 LL=>00
 LB=>10
 BB=>0

Class=>class,classnoprotocol,classpar,classvarpar,modpar,classparnotfile,varpar,repar,settingpar,par,ln
ClasWithProt=>class,classwithprotocol,classpar,classvarpar,modpar,classparnotfile,varpar,repar,settingpar,par,ln
Mod=>class,classpar,classvarpar,classparnotfile,varpar,repar,settingpar,par,ln
Protocol=>protocol,classpar,classvarpar,modpar,classparnotfile,varpar,repar,settingpar,par,ln

Var=>var,blockpar,repar,linkpar,initpar,getterpar,setterpar,settingpar,atomicpar,par,ln
Regex=>re,ln
Include=>include,ln
Link=>link,classpar,classvarpar,classparnotfile,par,ln
Atomic=>atomic,varpar,repar,settingpar,par,ln
Init=>init,blockpar,settingpar,par,ln
Getter=>getter,blockpar,par,ln
Setter=>setter,blockpar,par,ln
Setting=>setting,classpar,classparnotfile,classparnotfile,repar,settingpar,blockpar,par,ln
Block=>block,ln
File=>file,ln,par,classpar,classdefpar,classvarpar,includepar,repar,settingpar

 builtin tokens
    __unsafe_unretained
    __autoreleasing
    __strong
    __weak
unsafeunretained:?_|?_|?u|?n|?s|?a|?f|?unsafeunretained|>>unsafeunretained,modprefix,mod[0]
!unsafeunretained:O_[0]|o_|ou|on|os|oa|of|Oe[0]|>>??[1]
!unsafeunretained:e|_|u|n|r|e|t|unsafeunretained|>>unsafeunretained
!unsafeunretained:oe[1]|o_|ou|on|or|oe|ot|Oa[0]|>>??[1]
!unsafeunretained:a[1]|i|n|e|d|oWS,*,&,)|>>unsafeunretained[0]

autoreleasing:?_|?_|?a|?u|?t|?\o|?r|?autoreleasing|>>autoreleasing,modprefix,mod[0]
!autoreleasing:O_[0]|o_|oa|ou|ot|oo|or|Oe[0]|>>??[2]
!autoreleasing:e|l|e|a|s|i|n|autoreleasing|>>autoreleasing
!autoreleasing:oe[2]|ol|oe|oa|os|oi|on|Og[0]|>>??[2]
!autoreleasing:g[2]|oWS,*,&,)|>>autoreleasing[0]

strong:?_|?_|?s|?t|?r|?\o|?n|?strong|>>strong,modprefix,mod[0]
!strong:O_|o_|os|ot|or|oo|on|Og[0]|>>??[3]
!strong:g[3]|oWS,*,&,)|>>strong

weak:?_|?_|?w|?e|?a|?k|?oWS,*,&,)|>>weak,modprefix,mod

const:?c|?\o|?n|?s|?t|?oWS,*,&,)|>>const,modprefix,mod

&sys:?o^a-z,A-Z,0-9|Os|y|s|?o^a-z,A-Z,0-9|>>word,wordgroup,modprefix
&type:?o^a-z,A-Z,0-9|Ot|y|p|e|?o^a-z,A-Z,0-9|>>word,wordgroup,modprefix

===

 end
!end:oEND|^blah|>>??
!end:\n|E|N|D|\n|>>END
!end:END[0]|>>END,ln[10]

!start:\n|S|T|A|R|T|\n|>>START
!start:OSTART[0]|>>??[2LL0]

 strings
substituteString:?x$|OplainString|>>string,substituteString

&string:_string|\\|\\,"|>>_string
&string:_string|^",END|>>_string
&string:_string|?"|>>string,plainString
!string:x"[4]|O\\|\\,"|>>_string
!string:x"[4]|O^",END|>>_string
string:?x"[4]|?O"|>>string,plainString

&charstring:_charstring|\\|\\,'|>>_charstring
&charstring:_charstring|^',END|>>_charstring
&charstring:_charstring|?'|>>string,plainString
!charstring:x'[4]|O\\|\\,'|>>_charstring
!charstring:x'[4]|O^',END|>>_charstring
charstring:?x'[4]|?O'|>>string,plainString

!string:",'[0]|>>??[4]


 comments
!lineComment:o/|o/|^END,\n,linestart,br|>>??
!lineComment:x/|/|>>??
!commentEnd:rtl:*|/|>>commentEnd
!comment:rtl:x/|*|commentEnd|>>??
!comment:rtl:o/|o*|^END,commentEnd|>>??

 links (all must be surrounded by whitespace)
 ~-, -~, --, >-, >~, -<, ~<, >< (also ~~)
&linkType:?oWS|O-,\~,>|-,\~,<|?oWS|>>linkType
 >~-<, >--<, >-~<, (also >~~<)
&linkType:?oWS|O\>|-,\~|-,\~|\<|?oWS|>>linkType
 ~d<, -d<, ~s<, -s<, ~a<, -a<
&linkType:?oWS|O\~,-|d,s,a|\<|?oWS|>>linkType
 >d~, >d-, >s~, >s-, >a~, >a-
&linkType:?oWS|O\>|d,s,a|\~,-|?oWS|>>linkType
 >~d-, >~s-, >~a-
&linkType:?oWS|O\>|\~|d,s,a|-|?oWS|>>linkType
 -d~<, -s~<, -a~<
&linkType:?oWS|O-|d,s,a|\~|\<|?oWS|>>linkType

===

 words and numbers
&word:rtl:a-z,A-Z,_|word|>>_word,_wordgroup
&int:0-9|int|>>int,number
&word:rtl:a-z,A-Z,_|>>_word,_wordgroup
&int:rtl:O0-9|>>int,number
&number:int|.|int|>>number
&wordgroup:_wordgroup|number,_wordgroup|>>_wordgroup
!word:_word|>>word,wordgroup,classwordgroup
!wordgroup:_wordgroup|>>wordgroup,classwordgroup

 clear spaces
!ws:o^ ,\t,\n,linestart,br|x ,\t|>>??

 ws
 !ws:o ,\t,\,,\<,:,=,\>| ,\t|>>??
 !ws:x ,\t|o\,,\>,\<,:,=|>>??

!openclosebrace:x{|x}|>>??
!closeopenbrace:x}|x{|>>??

!closebracedec:o^END[2..1LL0]|O}[0]|>>??[@0:1..]
!inbrace:o^{[1..1LL0]|O^},END[0]|>>??[@0:1..]
!openbraceinc:o{[0..1LL0]|O^END[0]|>>??[@0:1..]

!linestart:\n[0]|>>linestart,br[2LL0]
!spaceindent:linestart[1LL0..]| |>>linestart,br[2LL0..]
!tabindent:linestart[1LL0..]|\t|>>linestart,br[5LL0..]
    eat spaces at end of line
!eolspace:x |olinestart|>>??
    eat empty lines
!emptyline:xlinestart|olinestart|>>??

!closebracedec:o^END[2LB0..]|O}[0..1LL0]|>>??[@0:2LL0..]
!inbrace:o^{[2LB0..]|O^},END[1..1LL0]|>>??[@0:2LB0..]
!openbraceinc:o{[2LL0..]|O^END[1..1LL0]|>>??[@0:2LB0..]

!bracecharincb:rtl:o^END[2LL0..]|=0O^END|>>??[-1]
!charinc:o^END[2LL0..]|O^END[-1..0]|>>??[@0:2LL1..]

===

 eat linestarts and things
!eatthings:xlinestart,\n,{,},WS|>>??

===

!varcomma:ovarpar|>0oln|>0\,|>2owordgroup|>>??
!settingcomma:osettingpar|>0osetting|>0\,|>2Owordgroup,string|>>??[@1:0..]

 !classwprotocol:classnoprotocol|=0+1o<|=0+2oword,wordgroup|>>ClasWithProt

 !paranBody:lparan[10]|^OEND[10..]|o)|>>??[0]
 !paranFollow:oln,_ln[1..]|Olparan[10]|^oEND[0]|o)|>>??[@0:2..]
 &block:block|^\,,END[0]|>>??
 &block:?oblock|>0Oblock|^END[0]|>>??
 !follow:oln,_ln[1..]|O^\,,ln[0]|>>??[@0:2..]

setting:?osettingpar|>0Owordgroup,string|?:|?owordgroup,string|?o:|>>Setting

 protocols
 <P:P>
(protList)protocol:_protList|?:|_protList|?>|>>Protocol
 <P>
(protList)protocol:_protList|?>|>>Protocol
(protList)protList:?oclasspar|>0?<[0..]|Oword,wordgroup|>>_protList[@1:0..]
addprotocol:?o_protList|?o\,,:|?O\+|word,wordgroup|>>modProt
(protList)protList:_protList|?\,|word,wordgroup,modProt|>>_protList
 <protocol:protocol>
!protList:?o_protList|?o:|Oword,wordgroup,modProt|>>_protList
 <protocol>

 class with protocol
classwprotocol:<1classnoprotocol|<0+1BB0protocol|>>ClasWithProt

 classes
(classList)classList:?oclassdefpar|>0?oword,wordgroup|?o:|Oword,wordgroup,classList|?\,|word,wordgroup|>>classList
(classList)classList:?oclasspar|>0?oword,wordgroup|?o:|?o:|Oword,wordgroup,classList|?\,|word,wordgroup|>>classList

  w:w, w:c1,c2
class:?oclassdefpar|>0Owordgroup,word|=1+1?:|=2+1classList,word,wordgroup|>>Class
class:?oclasspar|>0Owordgroup,word|=1+1?:|=2+1?:|=3+1classList,word,wordgroup|>>Class

  c(^)(
!class:oclasspar|>0owordgroup,word|o(|o\^,*|o)|O(|>>_argDef,priclasspar,classpar,_ln[20]
class:?oclasspar|>0Owordgroup,word|?o(|?o\^,*|?o)|?o_argDef|>>Class

 (in sel arg) class
class:?o_selArgDef,modprefix2|>0Owordgroup|>>Class

 initializers
init:?oinitpar|>0?O=|>>Init

 links
link:?olinkpar|>0OlinkType|>>Link

 atomic (i.e var>>atomiccopy)
atomic:?oatomicpar|>0?O>|=1+1?\>|>>Atomic


 mod (i.e. the * in class*)
(mod)mod:xmodprefix2|Oclass,protocol|>>??[@0:0..]
(mod)mod:class,protocol|mod|>>??
(mod)mod:modpar|mod,*,&,+|>>??
(mod)mod:modpar,argDef|\[|?\]|>>??
!mod:opriclasspar,classdefpar|>0Omodprefix|>>modprefix2,classparnotfile,classpar


(argList)fnblock:class|?\(|\^,*|?\)|argList|>>Class,fnblock

 arg lists

 fn(int i, int j)
(argList)fn:?ovarpar|>0Owordgroup|argList|>>Var

!argDef:ovarpar|>0owordgroup|O(|>>priclasspar,classpar,_argDef,_ln[20]

(argDfs)argList:?_argDef|?)|>>argList
(argDfs)argList:?_argDef|argDef|?)|>>argList
(argDfs)argDfs:?o_argDef|OargDef|argDef|>>argDef
argDef:?o_argDef|?oargDef|?sepArgs|Oclass,protocol|wordgroup|>>argDef
argDef:?o_argDef|?oargDef|?sepArgs|Oclass,protocol|?:|wordgroup|>>argDef
argDef:?o_argDef|?oargDef|?sepArgs|Oclass,protocol|>>argDef
!argDef:o_argDef|oargDef|O\,|>>priclasspar,classpar,_argDef,_ln,sepArgs[20]
argDef:?o_argDef|Oclass,protocol|wordgroup|>>argDef
argDef:?o_argDef|Oclass,protocol|?:|wordgroup|>>argDef
argDef:?o_argDef|Oclass,protocol|>>argDef


argDef:?ovarpar|>0?owordgroup|?o(|Otype,word,wordgroup|?:|word,wordgroup|>>argDef

 argDef:?oargDef,_argList|?\,|Otype,word,wordgroup|?:|word,wordgroup|>>argDef
(argList)argList:argDef,_argList|argDef|>>_argList
 (in class) (int:w), (int:w, int:w), (int*:w)
(argList)argList:?O(|argDef,_argList|?)|>>argList

 selector arg lists
!selArgDef:oclass,selArgDef|>0owordgroup|O:|(|>>priclasspar,classpar,_selArgDef,_ln[20]
 (in class .. wd) :(int)w, :(int*)w, :(int)w arg:(int)w
(selArgDef)selArgElipsis:OselArgDef|?\,|?.|?.|?.|>>??
(selArgList)selArgList:OselArgDef,selArgList|selArgDef|>>selArgList,ln
selArgDef:?oselArgDef,selArgList|Owordgroup|?_selArgDef|class,protocol|?)|word,wordgroup|>>selArgDef,ln
selArgDef:?owordgroup|?_selArgDef|Oclass,protocol|?)|word,wordgroup|>>selArgDef,ln

 (in class .. wd) :(class)var
(selArg)selArg:var|selArgDef,selArgList|>>Var


 (in class) w:(int)w, w(int:w)
fn:wordgroup|selArgList,selArgDef|>>Var


 (in class) class
class:rtl:?opriclasspar|>0Owordgroup|>>Class

 regex
 (in class) w=>w, w=>1, w=>"s", "s"=>w, "s"=>1, "s"=>"s"
regex:?orepar|>0Ostring,wordgroup|?=|?\>|string,number,wordgroup|>>Regex

 (in class) "readonly"
setting:?osettingpar|>0Owordgroup,string|?:|>>Setting
setting:?osettingpar|>0Ostring|>>Setting


 (in class that's in a class) var
var:?oclassparnotfile|>0?oclassvarpar|>1[1..]Owordgroup|>>Var
var:?oclassparnotfile|>0?oclassvarpar|>=3?oln|>1[1..]Owordgroup|>>Var
var:?oclassparnotfile|>0?oclassvarpar|>1>=3-1BB0?oln|>1[1..]Owordgroup|>>Var[@2:0..]

 (in class) var >~-<
var:?oclassvarpar|>0Owordgroup|?olinkType|>>Var

 (in var) ->
setter:?osetterpar|>0?O-|=1+1?\>|>>Setter
setter:?osetterpar|>0Owordgroup|=1+1?-|=1+2?\>|>>Setter

 (in var) ->
getter:?osetterpar|>0?O\<|=1+1?-|>>Getter

 type
 (type)cast:?o(|Oword,wordgroup,type|word,wordgroup|>>type
 (type)cast:?(|word,wordgroup,type|?)|>>type,castType

    indented grabs any indented chars
&block:?oblockpar|>=0+1BB0O_block|>=0+1BB0^All,Noblock,END|>>??
    block grabs any chars at same or greater indent (other than special case for ,)
&block:?oblockpar|O_block|>=1^\,,All,Noblock,END|>>??


 (in atomic etc) var
 var:?ovarpar|>0Owordgroup|>>Var


var:?oclassparnotfile|>=2?oln|>0?oclassvarpar|>2[1..]Owordgroup|>>Var
var:?oclassparnotfile|>=2?oln|>0?oclassvarpar|>=4?oln|>2[1..]Owordgroup|>>Var
var:?oclassparnotfile|>=2?oln|>0?oclassvarpar|>2>=4-1BB0?oln|>2[1..]Owordgroup|>>Var[@3:0..]


 (in class) class
class:rtl:?oclasspar|>0Oclasswordgroup|>>Class





setting:?osettingpar|>=2?oln|>0Owordgroup,string|?:|?owordgroup,string|?o:|>>Setting
setting:?osettingpar|>0>=2-1BB0?oln|>0Owordgroup,string|?:|?owordgroup,string|?o:|>>Setting[@1:0..]
(protList)protList:?oclasspar|>0>=2-1BB0?oln|>0?<[0..]|Oword,wordgroup|>>_protList[@2:0..]
(protList)protList:?oclasspar|?omodprefix|>0>=2-1BB0?oln|>0?<[0..]|Oword,wordgroup|>>_protList[@3:0..]
(classList)classList:?oclassdefpar|>=2?oln|>0?oword,wordgroup|?o:|Oword,wordgroup,classList|?\,|word,wordgroup|>>classList
(classList)classList:?oclassdefpar|>0>=2-1BB0?oln|>0?oword,wordgroup|?o:|Oword,wordgroup,classList|?\,|word,wordgroup|>>classList[@1:0..]
class:?oclassdefpar|>=2?oln|>0Owordgroup,word|=2+1?:|=3+1classList,word,wordgroup|>>Class
class:?oclassdefpar|>0>=2-1BB0?oln|>0Owordgroup,word|=2+1?:|=3+1classList,word,wordgroup|>>Class[@1:0..]
(classList)classList:?oclasspar|>=2?oln|>0?oword,wordgroup|?o:|?o:|Oword,wordgroup,classList|?\,|word,wordgroup|>>classList
(classList)classList:?oclasspar|>0>=2-1BB0?oln|>0?oword,wordgroup|?o:|?o:|Oword,wordgroup,classList|?\,|word,wordgroup|>>classList[@1:0..]
class:?oclasspar|>=2?oln|>0Owordgroup,word|=2+1?:|=3+1?:|=4+1classList,word,wordgroup|>>Class
class:?oclasspar|>0>=2-1BB0?oln|>0Owordgroup,word|=2+1?:|=3+1?:|=4+1classList,word,wordgroup|>>Class[@1:0..]
!class:oclasspar|>0>=2-1BB0oln|>0owordgroup,word|o(|o\^,*|o)|O(|>>_argDef,priclasspar,classpar,_ln[20]
class:?oclasspar|>=2?oln|>0Owordgroup,word|?o(|?o\^,*|?o)|?o_argDef|>>Class
class:?oclasspar|>0>=2-1BB0?oln|>0Owordgroup,word|?o(|?o\^,*|?o)|?o_argDef|>>Class[@1:0..]
init:?oinitpar|>=2?oln|>0?O=|>>Init
init:?oinitpar|>0>=2-1BB0?oln|>0?O=|>>Init[@1:0..]
link:?olinkpar|>=2?oln|>0OlinkType|>>Link
link:?olinkpar|>0>=2-1BB0?oln|>0OlinkType|>>Link[@1:0..]
atomic:?oatomicpar|>=2?oln|>0?O>|=2+1?\>|>>Atomic
atomic:?oatomicpar|>0>=2-1BB0?oln|>0?O>|=2+1?\>|>>Atomic[@1:0..]
(argList)fn:?ovarpar|>=2?oln|>0Owordgroup|argList|>>Var
(argList)fn:?ovarpar|>0>=2-1BB0?oln|>0Owordgroup|argList|>>Var[@1:0..]
!argDef:ovarpar|>0>=2-1BB0oln|>0owordgroup|?O(|>>priclasspar,classpar,_argDef,_ln[20]
argDef:?ovarpar|>=2?oln|>0?owordgroup|?o(|Otype,word,wordgroup|?:|word,wordgroup|>>argDef
argDef:?ovarpar|>0>=2-1BB0?oln|>0?owordgroup|?o(|Otype,word,wordgroup|?:|word,wordgroup|>>argDef[@1:0..]
!selArgDef:oclass|>0>=2-1BB0oln|>0owordgroup|O:|(|>>priclasspar,classpar,_selArgDef,_ln[20]
class:rtl:?opriclasspar|>=2?oln|>0Owordgroup|>>Class
class:rtl:?opriclasspar|>0>=2-1BB0?oln|>0Owordgroup|>>Class[@1:0..]
regex:?orepar|>=2?oln|>0Ostring,wordgroup|?=|?\>|string,number,wordgroup|>>Regex
regex:?orepar|>0>=2-1BB0?oln|>0Ostring,wordgroup|?=|?\>|string,number,wordgroup|>>Regex[@1:0..]
setting:?osettingpar|>=2?oln|>0Owordgroup,string|?:|>>Setting
setting:?osettingpar|>0>=2-1BB0?oln|>0Owordgroup,string|?:|>>Setting[@1:0..]
setting:?osettingpar|>=2?oln|>0Ostring|>>Setting
setting:?osettingpar|>0>=2-1BB0?oln|>0Ostring|>>Setting[@1:0..]
var:?oclassvarpar|>=2?oln|>0Owordgroup|?olinkType|>>Var
var:?oclassvarpar|>0>=2-1BB0?oln|>0Owordgroup|?olinkType|>>Var[@1:0..]
setter:?osetterpar|>=2?oln|>0?O-|=2+1?\>|>>Setter
setter:?osetterpar|>0>=2-1BB0?oln|>0?O-|=2+1?\>|>>Setter[@1:0..]
setter:?osetterpar|>=2?oln|>0Owordgroup|=2+1?-|=2+2?\>|>>Setter
setter:?osetterpar|>0>=2-1BB0?oln|>0Owordgroup|=2+1?-|=2+2?\>|>>Setter[@1:0..]
getter:?osetterpar|>=2?oln|>0?O\<|=2+1?-|>>Getter
getter:?osetterpar|>0>=2-1BB0?oln|>0?O\<|=2+1?-|>>Getter[@1:0..]
!mod:opriclasspar,classdefpar|>=2oln|>0?Omodprefix|>>modprefix2,classparnotfile,classpar
!mod:opriclasspar,classdefpar|>0>=2-1BB0oln|>0Omodprefix|>>modprefix2,classparnotfile,classpar
class:rtl:?oclasspar|>=2?oln|>0Oclasswordgroup|>>Class
class:rtl:?oclassparnotfile|>0>=2-1BB0?oln|>0Oclasswordgroup|>>Class[@1:0..]
var:?ovarpar|>=2?oln|>0Owordgroup|>>Var
var:?ovarpar|>0>=2-1BB0?oln|>0Owordgroup|>>Var[@1:0..]

    block can start on anything if indented
&block:?oblockpar|>=0+1BB0O^_block,END,Block,All|>>_block

    block can start on anything if in failed paran. TODO the index here won't be right'
&block:?oblockpar|O^_block,END,Block,All[20]|>>_block[@0:1..]

    block only starts on some things if not indented
&block:?oblockpar|>0OStartblock|>>_block

    otherwise a semicolon can be a whole empty block
emptyblock:?oblockpar|>0?O;|>>Block

&block:?oblockpar|>=2?oAll,^Block|>0+1BB0O^_block,END,Block,All|>>_block
&block:?oblockpar|>=2?oAll,^Block|>0+1BB0OStartblock|>>_block
emptyblock:?oblockpar|>=2?oAll,^Block|>0+1BB0?O;|>>Block


block:_block|>>Block

par:rtl:par[10..]|>0ln,_ln|?o^All|>>??
par:rtl:par[10..]|>0ln,_ln|?o<=0ln|>>??
(sib)sib:rtl:?opar|>=2Oln|>0ln,_ln,^END|>>??
(sib)sib:rtl:?opar|>0>=2-1BB0Oln|>0ln,_ln,^END|>>??[@1:0..]

file:?START|>>File[1LL0]

===
 cleanup

error:file|^END,ln|>>error

!ends:xSTART,END|>>??

END
