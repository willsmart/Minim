All=>Class,ClasWithProt,Mod,Protocol,Var,Regex,Include,Link,Atomic,Init,Getter,Setter,Setting,Block
WS=> ,\t,br
Noblock=>classpar,classdefpar,classvarpar,_selArgDef,_ln
LL=>0
BB=>00
PP=>000

Class=>class,classnoprotocol,classpar,classdefpar,classvarpar,modpar,classparnotfile,varpar,repar,settingpar,par,ln
ClasWithProt=>class,classwithprotocol,classpar,classdefpar,classvarpar,modpar,classparnotfile,varpar,repar,settingpar,par,ln
Mod=>class,classpar,classdefpar,classvarpar,classparnotfile,varpar,repar,settingpar,par,ln
Protocol=>protocol,classpar,classdefpar,classvarpar,modpar,classparnotfile,varpar,repar,settingpar,par,ln

Var=>var,blockpar,repar,linkpar,initpar,getterpar,setterpar,settingpar,atomicpar,par,ln
Regex=>re,ln
Include=>include,ln
Link=>link,classpar,classvarpar,classparnotfile,par,ln
Atomic=>atomic,varpar,repar,settingpar,par,ln
Init=>init,blockpar,settingpar,par,ln
Getter=>getter,blockpar,par,ln
Setter=>setter,blockpar,par,ln
Setting=>setting,settingpar,blockpar,par,ln
Block=>block,ln
File=>file,ln,par,classpar,classdefpar,classvarpar,includepar,repar,settingpar

 builtin tokens
    __unsafe_unretained
    __autoreleasing
    __strong
    __weak
unsafeunretained:?_|?_|?u|?n|?s|?a|?f|?unsafeunretained|>>unsafeunretained,modprefix[0]
!unsafeunretained:O_[0]|o_|ou|on|os|oa|of|Oe[0]|>>??[1]
!unsafeunretained:e|_|u|n|r|e|t|unsafeunretained|>>unsafeunretained
!unsafeunretained:oe[1]|o_|ou|on|or|oe|ot|Oa[0]|>>??[1]
!unsafeunretained:a[1]|i|n|e|d|oWS|>>unsafeunretained[0]

autoreleasing:?_|?_|?a|?u|?t|?\o|?r|?autoreleasing|>>autoreleasing,modprefix[0]
!autoreleasing:O_[0]|o_|oa|ou|ot|oo|or|Oe[0]|>>??[2]
!autoreleasing:e|l|e|a|s|i|n|autoreleasing|>>autoreleasing
!autoreleasing:oe[2]|ol|oe|oa|os|oi|on|Og[0]|>>??[2]
!autoreleasing:g[2]|oWS|>>autoreleasing[0]

strong:?_|?_|?s|?t|?r|?\o|?n|?strong|>>strong,modprefix[0]
!strong:O_|o_|os|ot|or|oo|on|Og[0]|>>??[3]
!strong:g[3]|oWS|>>strong

weak:?_|?_|?w|?e|?a|?k|?oWS|>>weak,modprefix

const:?c|?\o|?n|?s|?t|?oWS|>>const,modprefix

===

 end
!end:oEND|^blah|>>??
!end:\n|E|N|D|\n|>>END
!end:END[0]|>>END,ln[10]

!start:\n|S|T|A|R|T|\n|>>START
!start:oSTART|O^END[0]|>>??[2LL1]

 strings
&string:_string|\\|\\,"|>>_string
&string:_string|^",END|>>_string
&string:_string|?"|>>string,plainString
!string:x"|O^",END|>>_string
string:?x"|?O"|>>string,plainString
substituteString:?x$|OplainString|>>string,substituteString

 comments
!lineComment:o/|o/|^linestart,br|>>??
!lineComment:x/|/|>>??
!commentEnd:rtl:*|/|>>commentEnd
!comment:rtl:x/|*|commentEnd|>>??
!comment:rtl:o/|o*|^commentEnd|>>??

 links (all must be surrounded by whitespace)
 ~-, -~, --, >-, >~, -<, ~<, >< (also ~~)
&linkType:?oWS|O-,\~,>|-,\~,<|?oWS|>>linkType
 >~-<, >--<, >-~<, (also >~~<)
&linkType:?oWS|O\>|-,\~|-,\~|\<|?oWS|>>linkType
 ~d<, -d<, ~s<, -s<, ~a<, -a<
&linkType:?oWS|O\~,-|d,s,a|\<|?oWS|>>linkType
 >d~, >d-, >s~, >s-, >a~, >a-
&linkType:?oWS|O\>|d,s,a|\~,-|?oWS|>>linkType
 >~d-, >~s-, >~a-
&linkType:?oWS|O\>|\~|d,s,a|-|?oWS|>>linkType
 -d~<, -s~<, -a~<
&linkType:?oWS|O-|d,s,a|\~|\<|?oWS|>>linkType

===

 words and numbers
&word:rtl:a-z,A-Z,_|word|>>_word,_wordGroup
&int:0-9|int|>>int,number
&word:rtl:a-z,A-Z,_|>>_word,_wordGroup
&int:rtl:O0-9|>>int,number
&number:int|.|int|>>number
&wordGroup:_wordGroup|number,_wordGroup|>>_wordGroup
!word:_word|>>word,wordGroup
!wordGroup:_wordGroup|>>wordGroup

 clear spaces
!ws:o^ ,\t,\n|x ,\t|>>??

 ws
 !ws:o ,\t,\,,\<,:,=,\>| ,\t|>>??
 !ws:x ,\t|o\,,\>,\<,:,=|>>??

===

    open braces
    openclose braces
!openclosebrace:x{|x}|>>??
    closeopen braces
!closeopenbrace:x}|x{|>>??
    find braces
!openbrace:x{[1LL0..]|O^END[0]|>>??[@0:1BB0..]
    close braces
!closebrace:o^END[1BB0..]|x}[0]|O^END[0]|>>??[@0:1LL0..]
    between braces
!betweenbrace:o^END[1BB0..]|O^END[0]|>>??[@0:1BB0..]


    indent space
!spaceindent:linestart[1LL0..]| |>>linestart,br[2LL0..]
    indent tab (four spaces)
!tabindent:linestart[1LL0..]|\t|>>linestart,br[5LL0..]
    eat spaces at end of line
!eolspace:x |olinestart|>>??
    eat empty lines
!emptyline:xlinestart|olinestart|>>??

    char incrementation
!charinc:o^END[1LL0..1BB0]|O^\n,END[0]|>>??[@0:1LL1..]

    char incrementation betweenbraces
!charinc:o^END[1BB0..]|=0O^END|>>??[@0:1BB1..]

    newline
!linestart:\n[0]|>>linestart,br[2LL0]


===

 eat linestarts
!eatlinestarts:xlinestart,\n|>>??

===

!varcomma:ovarpar|>0oln|>0\,|>2owordGroup|>>??

!classwprotocol:classnoprotocol|=0+1o<|=0+2oword,wordGroup|>>ClasWithProt,justclass

 !paranBody:lparan[10]|^OEND[10..]|o)|>>??[0]
 !paranFollow:oln,_ln[1..]|Olparan[10]|^oEND[0]|o)|>>??[@0:2..]
 &block:block|^\,,END[0]|>>??
 &block:?oblock|>0Oblock|^END[0]|>>??
 !follow:oln,_ln[1..]|O^\,,ln[0]|>>??[@0:2..]

setting:?osettingpar|>0OwordGroup,string|?:|?owordGroup,string|?o:|>>Setting
setting:?osettingpar|>=2?oln|>0OwordGroup,string|?:|?owordGroup,string|?o:|>>Setting

 protocols
 <P:P>
(protList)protocol:_protList|?:|_protList|?>|>>Protocol
 <P>
(protList)protocol:_protList|?>|>>Protocol
(protList)protList:?oclasspar|>0?<[0..]|Oword,wordGroup|>>_protList[@1:0..]
(protList)protList:?oclasspar|>=2?oln|>0?<[0..]|Oword,wordGroup|>>_protList[@2:0..]
addprotocol:?o_protList|?o\,,:|?O\+|word,wordGroup|>>modProt
(protList)protList:_protList|?\,|word,wordGroup,modProt|>>_protList
 <protocol:protocol>
!protList:?o_protList|?o:|Oword,wordGroup,modProt|>>_protList
 <protocol>

 class with protocol
classwprotocol:classwithprotocol,justclass|protocol|>>ClasWithProt

 classes
(classList)classList:?oclassdefpar|>0?oword,wordGroup|?o:|Oword,wordGroup,classList|?\,|word,wordGroup|>>classList
(classList)classList:?oclassdefpar|>=2?oln|>0?oword,wordGroup|?o:|Oword,wordGroup,classList|?\,|word,wordGroup|>>classList

  w:w, w:c1,c2
class:?oclassdefpar|>0OwordGroup,word|?:|classList,word,wordGroup|>>Class
class:?oclassdefpar|>=2?oln|>0OwordGroup,word|?:|classList,word,wordGroup|>>Class

  c(^)(
!class:oclasspar|>0owordGroup,word|o(|o\^,*|o)|O(|>>_argDef,priclasspar,classpar,_ln[20]
!class:oclasspar|>=2oln|>0owordGroup,word|o(|o\^,*|o)|O(|>>_argDef,priclasspar,classpar,_ln[20]
class:?oclasspar|>0OwordGroup,word|?o(|?o\^,*|?o)|?o_argDef|>>Class
class:?oclasspar|>=2?oln|>0OwordGroup,word|?o(|?o\^,*|?o)|?o_argDef|>>Class

 (in sel arg) class
class:?o_selArgDef|>0OwordGroup|>>Class

 initializers
init:?oinitpar|>0?O=|>>Init
init:?oinitpar|>=2?oln|>0?O=|>>Init

 links
link:?olinkpar|>0OlinkType|>>Link
link:?olinkpar|>=2?oln|>0OlinkType|>>Link

 atomic (i.e var>>atomiccopy)
atomic:?oatomicpar|>0?O>|?\>|>>Atomic
atomic:?oatomicpar|>=2?oln|>0?O>|?\>|>>Atomic

 mod (i.e. the * in class*)
(mod)mod:modpar|*,&,+|>>??
(mod)mod:modpar|\[|\]|>>??
(mod)mod:xmodprefix|O^END|>>??


(argList)fnblock:class|?\(|\^,*|?\)|argList|>>Class,fnblock

 arg lists

 fn(int i, int j)
(argList)fn:?ovarpar|>0OwordGroup|argList|>>Var
(argList)fn:?ovarpar|>=2?oln|>0OwordGroup|argList|>>Var

!argDef:ovarpar|>0owordGroup|O(|>>priclasspar,classpar,_argDef,_ln[20]
!argDef:ovarpar|>=2oln|>0owordGroup|?O(|>>priclasspar,classpar,_argDef,_ln[20]

(argDfs)argList:?_argDef|?)|>>argList
(argDfs)argList:?_argDef|argDef|?)|>>argList
(argDfs)argDfs:?o_argDef|OargDef|argDef|>>argDef
argDef:?o_argDef|?oargDef|?sepArgs|Oclass,protocol|wordGroup|>>argDef
argDef:?o_argDef|?oargDef|?sepArgs|Oclass,protocol|?:|wordGroup|>>argDef
argDef:?o_argDef|?oargDef|?sepArgs|Oclass,protocol|>>argDef
!argDef:o_argDef|oargDef|O\,|>>priclasspar,classpar,_argDef,_ln,sepArgs[20]
argDef:?o_argDef|Oclass,protocol|wordGroup|>>argDef
argDef:?o_argDef|Oclass,protocol|?:|wordGroup|>>argDef
argDef:?o_argDef|Oclass,protocol|>>argDef


argDef:?ovarpar|>0?owordGroup|?o(|Otype,word,wordGroup|?:|word,wordGroup|>>argDef
argDef:?ovarpar|>=2?oln|>0?owordGroup|?o(|Otype,word,wordGroup|?:|word,wordGroup|>>argDef

 argDef:?oargDef,_argList|?\,|Otype,word,wordGroup|?:|word,wordGroup|>>argDef
(argList)argList:argDef,_argList|argDef|>>_argList
 (in class) (int:w), (int:w, int:w), (int*:w)
(argList)argList:?O(|argDef,_argList|?)|>>argList

 selector arg lists
!selArgDef:oclass,selArgDef|>0owordGroup|O:|(|>>priclasspar,classpar,_selArgDef,_ln[20]
!selArgDef:oclass|>=2oln|>0owordGroup|O:|(|>>priclasspar,classpar,_selArgDef,_ln[20]
 (in class .. wd) :(int)w, :(int*)w, :(int)w arg:(int)w
(selArgList)selArgList:OselArgDef,selArgList|selArgDef|>>selArgList,ln
selArgDef:wordGroup|?_selArgDef|class,protocol|?)|word,wordGroup|>>selArgDef,ln

 (in class .. wd) :(class)var
(selArg)selArg:var|selArgDef,selArgList|>>Var


 (in class) w:(int)w, w(int:w)
fn:selArgList,selArgDef|>>Var


 (in class) class
class:rtl:?opriclasspar|>0OwordGroup|>>Class
class:rtl:?opriclasspar|>=2?oln|>0OwordGroup|>>Class

 regex
 (in class) w=>w, w=>1, w=>"s", "s"=>w, "s"=>1, "s"=>"s"
regex:?orepar|>0Ostring,wordGroup|?=|?\>|string,number,wordGroup|>>Regex
regex:?orepar|>=2?oln|>0Ostring,wordGroup|?=|?\>|string,number,wordGroup|>>Regex

 (in class that's in a class) var
var:?oclassparnotfile|>0?oclassvarpar|>1[1..]OwordGroup|>>Var[@1:0?1..]
var:?oclassparnotfile|>=2?oln|>0?oclassvarpar|>2[1..]OwordGroup|>>Var[@2:0?1..]
var:?oclassparnotfile|>0?oclassvarpar|>=3?oln|>1[1..]OwordGroup|>>Var[@1:0?1..]
var:?oclassparnotfile|>=2?oln|>0?oclassvarpar|>=4?oln|>2[1..]OwordGroup|>>Var[@2:0?1..]

 (in class) var >~-<
var:?oclassvarpar|>0OwordGroup|?olinkType|>>Var
var:?oclassvarpar|>=2?oln|>0OwordGroup|?olinkType|>>Var

 (in class) "readonly"
setting:?osettingpar|>0OwordGroup,string|?:|>>Setting
setting:?osettingpar|>=2?oln|>0OwordGroup,string|?:|>>Setting
setting:?osettingpar|>0Ostring|>>Setting
setting:?osettingpar|>=2?oln|>0Ostring|>>Setting

 (in file scope) "include.wi"
include:?oincludepar|>0Ostring|>>Include
include:?oincludepar|>=2?oln|>0Ostring|>>Include

 (in var) ->
setter:?osetterpar|>0?O-|?\>|>>Setter
setter:?osetterpar|>=2?oln|>0?O-|?\>|>>Setter
setter:?osetterpar|>0OwordGroup|?-|?\>|>>Setter
setter:?osetterpar|>=2?oln|>0OwordGroup|?-|?\>|>>Setter

 (in class) class
class:rtl:?oclasspar|>0OwordGroup|>>Class
class:rtl:?oclasspar|>=2?oln|>0OwordGroup|>>Class

 (in atomic etc) var
var:?ovarpar|>0OwordGroup|>>Var
var:?ovarpar|>=2?oln|>0OwordGroup|>>Var

 type
 (type)cast:?o(|Oword,wordGroup,type|word,wordGroup|>>type
 (type)cast:?(|word,wordGroup,type|?)|>>type,castType

    block can grab comma only if indented
&block:?oblockpar|>=0+1LL0O_block|>=1\,|>>??
    block grabs any chars at same or greater indent (other than special case for ,)
&block:?oblockpar|O_block|>=1^\,,All,Noblock,END|>>??
&block:?oblockpar|>=0+1LL0O\,|>>_block
&block:?oblockpar|>=2?oAll,^Block|>0+1LL0O\,|>>_block
&block:?oblockpar|>0O^\,,All,Noblock,_block,END|>>_block
&block:?oblockpar|>=2?oAll,^Block|>0O^\,,All,Noblock,_block,END|>>_block
block:_block|>>Block

par:rtl:par[10..]|>0ln,_ln|?o^All|>>??
par:rtl:par[10..]|>0ln,_ln|?o<=0ln|>>??
(sib)sib:rtl:?opar|>=2Oln|>0ln,_ln,^END|>>??

file:?START|>>File[1LL0]

===
 cleanup

!ends:xSTART,END|>>??

END
